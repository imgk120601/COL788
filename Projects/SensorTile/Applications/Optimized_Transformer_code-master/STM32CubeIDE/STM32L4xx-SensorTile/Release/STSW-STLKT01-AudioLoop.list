
STSW-STLKT01-AudioLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033778  0801a398  0801a398  0002a398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0804db10  0804db10  0005db10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0804db14  0804db14  0005db14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000000  0804db18  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00017b48  200001f0  0804dd08  000601f0  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  8 .bss2         00000000  200001f0  200001f0  000601f0  2**0
                  CONTENTS
  9 ._user_heap_stack 00004000  20017d38  20017d38  00067d38  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000601f0  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00060220  2**0
                  CONTENTS, READONLY
 12 .debug_line   000735a1  00000000  00000000  00060263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000115  00000000  00000000  000d3804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0024647e  00000000  00000000  000d3919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00019aa8  00000000  00000000  00319d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00009b78  00000000  00000000  00333840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001e7ef8  00000000  00000000  0033d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00008074  00000000  00000000  005252b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0002bd34  00000000  00000000  0052d324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000364a7  00000000  00000000  00559058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000f972  00000000  00000000  0058f4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a380 	.word	0x0801a380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0801a380 	.word	0x0801a380

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_d2lz>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2300      	movs	r3, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	460d      	mov	r5, r1
 8000c36:	f7ff ff59 	bl	8000aec <__aeabi_dcmplt>
 8000c3a:	b928      	cbnz	r0, 8000c48 <__aeabi_d2lz+0x1c>
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4629      	mov	r1, r5
 8000c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c44:	f000 b80a 	b.w	8000c5c <__aeabi_d2ulz>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4e:	f000 f805 	bl	8000c5c <__aeabi_d2ulz>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	bd38      	pop	{r3, r4, r5, pc}
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2ulz>:
 8000c5c:	b5d0      	push	{r4, r6, r7, lr}
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__aeabi_d2ulz+0x34>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	4606      	mov	r6, r0
 8000c64:	460f      	mov	r7, r1
 8000c66:	f7ff fccf 	bl	8000608 <__aeabi_dmul>
 8000c6a:	f000 f815 	bl	8000c98 <__aeabi_d2uiz>
 8000c6e:	4604      	mov	r4, r0
 8000c70:	f7ff fc50 	bl	8000514 <__aeabi_ui2d>
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <__aeabi_d2ulz+0x38>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f7ff fcc6 	bl	8000608 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4630      	mov	r0, r6
 8000c82:	4639      	mov	r1, r7
 8000c84:	f7ff fb08 	bl	8000298 <__aeabi_dsub>
 8000c88:	f000 f806 	bl	8000c98 <__aeabi_d2uiz>
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c90:	3df00000 	.word	0x3df00000
 8000c94:	41f00000 	.word	0x41f00000

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cde:	e003      	b.n	8000ce8 <LoopCopyDataInit>

08000ce0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ce2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ce4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ce6:	3104      	adds	r1, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cf0:	d3f6      	bcc.n	8000ce0 <CopyDataInit>
	ldr	r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cf4:	e002      	b.n	8000cfc <LoopFillZerobss>

08000cf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cf8:	f842 3b04 	str.w	r3, [r2], #4

08000cfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <LoopForever+0x16>)
	cmp	r2, r3
 8000cfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d00:	d3f9      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d02:	f000 ff87 	bl	8001c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f018 fe55 	bl	80199b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f000 f973 	bl	8000ff4 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d10:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d14:	0804db18 	.word	0x0804db18
	ldr	r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d1c:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8000d20:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8000d24:	20017d38 	.word	0x20017d38

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <SystemClock_Config>:
 * @brief  System Clock Configuration
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d2c:	b500      	push	{lr}
 8000d2e:	b0bb      	sub	sp, #236	; 0xec
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	2214      	movs	r2, #20
 8000d32:	2100      	movs	r1, #0
 8000d34:	a802      	add	r0, sp, #8
 8000d36:	f018 fd83 	bl	8019840 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	2244      	movs	r2, #68	; 0x44
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	a807      	add	r0, sp, #28
 8000d40:	f018 fd7e 	bl	8019840 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	2288      	movs	r2, #136	; 0x88
 8000d46:	2100      	movs	r1, #0
 8000d48:	a818      	add	r0, sp, #96	; 0x60
 8000d4a:	f018 fd79 	bl	8019840 <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <SystemClock_Config+0xe0>)
 8000d50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d56:	659a      	str	r2, [r3, #88]	; 0x58
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 8000d62:	f001 fdef 	bl	8002944 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000d66:	2304      	movs	r3, #4
 8000d68:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f001 fe90 	bl	8002a94 <HAL_RCC_OscConfig>
 8000d74:	b108      	cbz	r0, 8000d7a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000d76:	f000 fa5f 	bl	8001238 <Error_Handler>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8000d7a:	f002 fc9b 	bl	80036b4 <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d7e:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8000d80:	2310      	movs	r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d82:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8000d84:	22b0      	movs	r2, #176	; 0xb0
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8000d86:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8000d88:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8000d8a:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000d8c:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM            = 6;
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8000d8e:	2006      	movs	r0, #6
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8000d90:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8000d94:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8000d96:	2328      	movs	r3, #40	; 0x28
 8000d98:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP            = 7;
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8000d9c:	f04f 0c07 	mov.w	ip, #7
 8000da0:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLR            = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8000da4:	e9cd c315 	strd	ip, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8000da8:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f001 fe73 	bl	8002a94 <HAL_RCC_OscConfig>
 8000dae:	b108      	cbz	r0, 8000db4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000db0:	f000 fa42 	bl	8001238 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dba:	a818      	add	r0, sp, #96	; 0x60
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc0:	9339      	str	r3, [sp, #228]	; 0xe4
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f002 fa8d 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	b108      	cbz	r0, 8000dcc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000dc8:	f000 fa36 	bl	8001238 <Error_Handler>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dcc:	f002 fc80 	bl	80036d0 <HAL_RCCEx_EnableMSIPLLMode>

  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd4:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000dd6:	a818      	add	r0, sp, #96	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000dd8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000ddc:	9333      	str	r3, [sp, #204]	; 0xcc
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000dde:	f002 fa7f 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	210f      	movs	r1, #15
 8000de4:	2303      	movs	r3, #3
 8000de6:	e9cd 1302 	strd	r1, r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dec:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dfa:	f002 f8d5 	bl	8002fa8 <HAL_RCC_ClockConfig>
 8000dfe:	b108      	cbz	r0, 8000e04 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000e00:	f000 fa1a 	bl	8001238 <Error_Handler>
  }
}
 8000e04:	b03b      	add	sp, #236	; 0xec
 8000e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	0804d798 	.word	0x0804d798

08000e30 <_ZN6tflite13ErrorReporterD0Ev>:
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ffe9 	bl	8000e10 <_ZN6tflite13ErrorReporterD1Ev>
 8000e3e:	2104      	movs	r1, #4
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f017 ff6d 	bl	8018d20 <_ZdlPvj>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d005      	beq.n	8000e6e <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8000e64:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8000e66:	2149      	movs	r1, #73	; 0x49
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8000e6a:	f018 fa4d 	bl	8019308 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0801a3a4 	.word	0x0801a3a4
 8000e7c:	0801a3e8 	.word	0x0801a3e8
 8000e80:	0801a408 	.word	0x0801a408

08000e84 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f9e1 	bl	8001254 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8000e92:	4603      	mov	r3, r0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN6tflite10OpResolverD1Ev>:
  virtual const TfLiteRegistration* FindOp(tflite::BuiltinOperator op,
                                           int version) const = 0;
  /// Finds the op registration of a custom operator by op name.
  virtual const TfLiteRegistration* FindOp(const char* op,
                                           int version) const = 0;
  virtual ~OpResolver() {}
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	0804d780 	.word	0x0804d780

08000ebc <_ZN6tflite10OpResolverD0Ev>:
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffe9 	bl	8000e9c <_ZN6tflite10OpResolverD1Ev>
 8000eca:	2104      	movs	r1, #4
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f017 ff27 	bl	8018d20 <_ZdlPvj>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3310      	adds	r3, #16
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	7afa      	ldrb	r2, [r7, #11]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	4798      	blx	r3
 8000efa:	4603      	mov	r3, r0
  }
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3314      	adds	r3, #20
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	4798      	blx	r3
 8000f1e:	4603      	mov	r3, r0
  }
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ffaf 	bl	8000e9c <_ZN6tflite10OpResolverD1Ev>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	0804d75c 	.word	0x0804d75c

08000f4c <_ZN6tflite15MicroOpResolverD0Ev>:
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe7 	bl	8000f28 <_ZN6tflite15MicroOpResolverD1Ev>
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f017 fedf 	bl	8018d20 <_ZdlPvj>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff47 	bl	8000e10 <_ZN6tflite13ErrorReporterD1Ev>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	08049ee0 	.word	0x08049ee0

08000f90 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ffe7 	bl	8000f6c <_ZN6tflite18MicroErrorReporterD1Ev>
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f017 febd 	bl	8018d20 <_ZdlPvj>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <DebugLog>:
#define  ARM_CM_DWT_CYCCNT (*(uint32_t *)0xE0001004)

#define WAVE_DATA {165,396,482,354,166,61,144,285,220,390,284,97,245,235,351,331,78,44,131,116,33,-43,-60,25,55,-35,-158,-236,-174,-90,-135,-227,-230,-143,-135,-197,-198,-159,-143,-192,-173,-147,-181,-114,-69,-150,-186,-97,-31,-27,-33,13,24,-31,24,112,130,139,155,119,93,153,171,163,170,146,140,146,163,189,136,98,110,76,83,88,44,45,18,-12,8,-18,-46,-82,-117,-42,-14,-84,-108,-139,-135,-51,-55,-38,-19,-73,-43,-69,-140,-140,-74,1,-29,39,76,-74,-71,-40,-57,-35,-56,-54,-76,-71,-26,-8,-22,-67,-15,22,-6,63,106,58,28,-6,-32,-35,-4,79,102,87,83,72,84,68,52,65,60,48,38,42,14,-11,20,17,-9,-12,-1,-7,0,46,66,65,7,-65,-81,-94,-60,-8,-24,-66,-49,-2,0,-13,-23,-50,-90,-73,-20,-28,-55,-33,5,22,20,-13,-37,-32,-11,20,13,-2,5,9,7,18,23,3,-2,-2,-6,-11,-5,14,8,5,14,6,12,42,58,51,36,25,20,28,51,54,43,38,20,4,-15,-10,9,-8,-4,-1,-5,2,-33,-66,-60,-40,-24,-13,-24,-26,-23,-40,-37,-45,-47,-20,-17,-22,-25,-22,-6,5,10,-5,-8,14,21,9,-19,-7,2,-5,40,54,29,9,7,9,9,39,45,34,42,54,43,16,21,25,21,16,12,31,38,23,8,5,-17,-41,-27,4,22,19,13,2,-14,-28,-56,-65,-44,-29,-15,16,6,-39,-36,-21,-7,-8,-27,-2,5,-14,-8,1,-3,-18,8,22,-4,4,36,66,50,8,-11,-26,-14,13,17,-2,-10,-6,-12,9,34,21,-17,-22,7,3,-5,-17,-18,-13,-22,-20,-28,2,32,13,-15,-21,12,21,17,7,-14,-2,-1,-21,-13,0,-11,1,7,-4,-4,5,17,14,22,12,-13,-8,-2,-12,-14,13,25,24,21,8,19,12,7,5,-27,-17,17,6,-9,6,10,-7,-6,1,-10,-9,-8,-5,-2,-27,-12,11,0,-4,-8,-20,-14,2,-5,-6,-8,-19,7,23,1,-25,-34,-12,18,11,-3,4,1,-18,-16,20,17,-7,2,-7,-10,6,18,9,-2,17,7,-8,35,41,-19,-9,15,-30,-20,16,16,15,11,-8,-16,8,14,2,-4,1,17,8,-10,-22,-34,-11,20,8,-5,4,14,6,-6,2,-6,-4,16,5,-4,6,9,2,-13,-28,-19,-3,11,25,11,-8,-12,-1,24,22,-6,-24,-20,-11,-8,-11,-2,3,-1,13,5,-8,11,24,1,-34,-21,4,-1,2,17,21,1,-2,-2,-19,-5,11,1,2,11,7,7,5,-6,1,-12,-33,7,31,10,4,12,5,3,14,2,-21,-25,-18,-11,-8,4,5,4,7,-3,-11,-20,-8,15,7,-5,-3,-10,-24,-16,4,0,-17,-10,6,16,31,24,-13,-25,1,16,3,1,6,7,11,0,-15,6,32,15,-3,-1,-12,-11,13,22,14,2,-22,-32,11,37,16,-3,-14,-14,1,0,-26,-29,6,24,14,2,-10,-15,2,8,-5,-6,-8,0,19,8,-16,-10,6,10,14,12,-3,-7,6,17,8,-8,-9,4,9,8,8,4,-9,-17,1,14,-1,-3,5,-2,-3,-4,-9,-3,6,-2,-15,-8,4,1,1,6,-3,-12,-5,-1,4,10,5,-9,-16,-4,-2,-15,1,26,13,-6,-6,-4,-3,0,-3,-6,2,8,2,-2,0,2,4,4,-9,-17,-3,9,6,0,-4,-7,-7,5,14,5,-7,-3,0,0,12,8,-5,-2,0,-11,-13,-1,1,6,18,12,4,0,-8,-8,6,9,-8,-14,-5,4,10,1,-5,-1,-2,-1,9,7,-3,0,0,-7,-2,1,-9,-9,1,-1,-8,-1,7,9,5,1,-2,-5,-9,-8,-2,2,2,6,11,7,-6,-16,-6,13,10,0,3,-1,-9,-1,6,2,-3,10,17,-4,-20,-11,3,10,8,-2,-4,8,11,-6,-13,-3,1,3,6,0,-5,-1,-1,-4,0,4,7,10,4,-10,-12,0,3,0,0,1,1,5,6,1,-2,-4,-3,1,5,5,1,-7,-13,-7,0,7,8,9,11,5,-6,-13,-6,5,4,-6,-5,5,6,4,6,3,-5,-8,1,5,0,-2,-1,1,2,1,0,-2,-1,3,1,-4,-6,-6,-1,6,6,-5,-8,1,5,4,3,-5,-13,-7,1,2,6,5,-2,-2,-4,-7,-1,-2,-4,3,10,11,4,-4,-5,0,-1,-8,-11,-2,4,9,13,-1,-14,-5,5,5,5,0,-9,-7,3,5,3,0,-6,-4,8,7,-4,-12,-7,5,12,8,1,0,0,1,-2,-9,-6,4,6,7,10,4,-3,-1,0,-9,-10,-2,4,12,12,-2,-5,0,-3,-9,-4,0,0,9,10,-4,-8,2,6,-2,-6,-2,-1,3,5,2,-3,-6,-3,-3,0,7,12,7,-2,-14,-20,-5,12,11,1,1,2,1,0,-2,-5,-2,7,7,0,-1,-2,-3,-1,1,0,3,8,3,-7,-5,1,4,-2,-11,-11,-2,11,14,1,-7,-4,-4,-2,3,-1,-7,2,17,10,-3,-8,-11,-6,6,9,1,0,3,0,-1,-2,-3,2,8,2,-5,-2,4,5,0,-10,-13,-2,8,11,6,-2,-6,-3,1,0,0,0,1,3,1,0,0,-1,-2,0,0,0,0,1,1,1,1,-3,-7,-3,1,0,3,3,-1,-3,-5,-4,0,2,2,0,0,-1,-1,0,0,1,2,0,-5,-7,-4,2,7,4,0,0,0,0,0,-1,-5,-2,3,3,0,-3,-3,2,7,5,-1,-3,0,1,0,0,0,2,6,4,-4,-7,-3,1,1,0,-1,0,1,0,-1,-1,0,3,2,-2,-3,-2,-4,-3,0,1,3,3,0,-3,-2,1,1,0,0,1,2,3,1,-2,-2,-1,3,6,3,-1,-5,-3,1,3,6,4,0,-5,-5,0,2,3,3,1,-4,-3,0,1,1,0,-2,-2,0,2,1,0,0,-4,-2,3,3,0,-2,-4,-3,1,4,1,-1,0,0,-1,-1,-1,0,3,2,0,-2,-1,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,1,1,-1,-3,-2,0,2,2,0,-1,-3,-2,-2,-1,0,1,1,-1,-1,-1,-1,1,1,1,0,0,0,-1,-2,-1,0,2,2,1,0,0,-1,-1,1,3,3,1,0,0,0,0,0,0,1,-1,-3,-1,0,1,1,0,-2,-1,1,1,0,0,-1,-1,1,1,-1,-2,0,0,-1,0,0,0,0,0,0,0,1,1,1,0,-1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,2,0,0,0,0,1,2,1,0,0,0,0,0,0,0,1,1,0,-1,-1,0,0,0,1,1,0,-1,-2,-1,0,0,0,0,0,-2,0,0,0,0,0,-2,-3,-1,0,0,0,0,0,-2,-2,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,1,0,-1,-1,0,1,0,0,0,0,0,0,0,0,-1,-2,-1,1,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,-1,0,0,0,0,1,1,0,0,0,-1,0,1,2,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,-1,-2,0,0,0,0,0,-1,-1,0,0,1,0,-1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-2,0,0,0,0,0,-1,0,0,-2,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,-1,-1,0,-1,-1,-1,0,0,0,0,0,0,-1,-2,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,2,2,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-2,-3,-4,-3,-2,-6,-6,-5,-6,-7,-7,-7,-8,-7,-6,-6,-4,-3,0,0,2,6,9,12,15,19,26,30,32,35,38,40,41,43,44,45,43,38,32,25,20,13,5,-3,-14,-27,-40,-54,-68,-80,-89,-99,-110,-118,-125,-129,-132,-134,-132,-131,-128,-121,-115,-107,-95,-84,-71,-55,-36,-16,2,19,39,56,72,90,106,121,136,148,159,169,178,182,187,193,197,198,196,193,187,181,172,162,153,140,128,114,99,83,65,47,30,13,-2,-17,-34,-49,-66,-83,-95,-106,-119,-129,-137,-143,-148,-153,-152,-150,-150,-148,-142,-135,-128,-119,-109,-98,-89,-77,-63,-49,-37,-25,-13,-2,7,17,27,35,42,51,56,60,63,67,70,70,70,68,66,64,61,58,53,49,44,38,32,28,21,13,9,2,-3,-10,-16,-22,-28,-30,-33,-39,-43,-45,-46,-47,-47,-48,-49,-48,-46,-44,-41,-38,-34,-32,-28,-26,-21,-15,-10,-7,-4,0,3,6,8,12,15,18,21,24,26,28,30,30,33,34,34,35,35,36,36,35,34,33,32,31,28,26,25,23,21,19,15,11,8,5,1,-1,-2,-4,-7,-9,-12,-16,-18,-20,-23,-24,-25,-26,-27,-28,-28,-28,-28,-26,-25,-25,-24,-23,-22,-19,-16,-14,-13,-11,-8,-6,-4,-2,-1,1,3,4,6,8,10,11,13,13,15,16,16,17,18,18,18,18,18,18,19,17,15,14,14,14,13,12,10,9,10,7,5,4,2,1,0,-1,-2,-4,-5,-5,-8,-9,-10,-11,-11,-12,-12,-13,-12,-12,-11,-10,-10,-10,-9,-7,-6,-4,-4,-2,0,0,0,2,5,6,7,9,10,10,10,11,12,12,13,12,11,11,11,11,9,8,7,7,6,3,2,1,1,0,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-11,-12,-13,-12,-11,-11,-12,-11,-11,-11,-9,-7,-6,-7,-7,-6,-4,-4,-3,-1,-1,0,1,2,1,2,2,3,4,5,6,5,4,5,6,6,6,5,4,4,5,4,3,2,1,2,0,0,1,0,0,-1,-2,-1,-1,-1,-2,-3,-3,-2,-2,-3,-2,-1,-2,-1,0,0,0,0,0,0,0,0,0,0,0,1,1,3,2,1,2,2,2,3,2,0,0,1,1,1,1,1,0,0,0,0,0,0,-1,-2,-3,-3,-1,-1,-3,-5,-4,-3,-3,-4,-4,-3,-2,-3,-2,-1,-2,-2,-3,-2,-1,-1,-1,0,0,0,0,0,1,2,2,2,3,3,3,3,2,3,5,4,3,3,2,3,4,4,3,4,4,3,3,3,1,0,0,0,1,1,0,0,0,-3,-2,-1,-1,0,-1,-2,-4,-2,-1,-3,-3,-2,-2,-4,-5,-3,-2,-2,-4,-4,-2,0,0,0,0,-3,-3,2,1,0,1,-1,-1,1,1,1,2,0,0,1,1,1,1,1,1,0,0,1,1,2,2,1,0,0,3,4,0,-1,0,0,1,1,0,0,0,0,1,-1,-1,0,0,1,0,0,1,-2,-4,-1,0,2,2,-2,0,-1,-3,-1,0,-1,0,0,-2,-2,0,0,0,1,0,-1,0,0,0,1,0,-1,0,0,0,0,0,0,1,1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,-1,-2,-1,-1,-1,0,0,0,-1,-1,0,0,1,0,-3,-3,-1,0,1,2,1,0,-3,-3,-1,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,-1,-1,-2,0,0,0,0,0,-2,-3,-2,-1,-1,-1,0,-1,-3,-1,0,-1,-2,-1,-2,-2,-1,0,0,0,0,-1,-1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,2,1,1,2,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,2,1,0,1,3,2,1,1,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,2,2,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,-1,0,-1,-2,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,-1,-1,-1,-1,-2,-1,-1,-1,0,-1,-1,-1,-1,-1,-2,-2,-2,-1,0,-2,-2,-1,-2,-2,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,-1,-2,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,-1,0,-1,0,0,-1,0,-1,0,1,0,-2,-2,-2,-1,0,-1,-2,-1,-1,-1,-2,-2,0,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,2,1,0,1,2,2,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,-1,-1,-1,-1,-1,-1,-1,-2,-1,-1,-1,-1,-1,-1,-2,-2,-1,0,-1,0,0,-1,-1,0,0,-1,-1,0,0,0,1,0,0,1,1,2,2,2,2,2,3,4,2,3,3,2,4,4,3,4,4,3,3,3,1,1,1,0,0,0,0,0,0,0,-1,0,-1,-3,-2,-3,-3,-3,-5,-5,-5,-5,-5,-6,-7,-7,-7,-7,-7,-6,-5,-6,-6,-5,-5,-5,-5,-4,-4,-3,-2,-2,0,0,0,0,3,4,3,6,7,9,11,12,13,15,16,17,19,20,21,21,21,22,22,22,23,22,20,21,20,18,18,17,14,10,7,6,2,-1,-5,-9,-14,-19,-25,-31,-36,-42,-50,-57,-63,-68,-75,-82,-86,-91,-93,-95,-98,-96,-93,-90,-84,-77,-69,-57,-45,-31,-15,2,21,40,61,81,99,118,135,150,165,178,188,195,202,206,205,204,199,189,180,168,152,135,118,98,76,55,30,7,-16,-40,-62,-84,-105,-124,-141,-155,-169,-182,-193,-201,-209,-215,-220,-223,-227,-229,-229,-229,-228,-225,-222,-217,-209,-201,-191,-177,-164,-148,-127,-105,-80,-53,-24,7,43,81,119,156,191,223,253,280,304,325,341,356,364,366,365,360,350,335,317,296,271,242,212,179,144,109,74,40,7,-25,-54,-82,-109,-131,-151,-169,-182,-194,-204,-212,-215,-217,-217,-215,-213,-206,-201,-194,-187,-179,-169,-159,-149,-140,-130,-121,-114,-103,-94,-86,-79,-74,-68,-63,-58,-55,-52,-48,-44,-39,-35,-31,-26,-21,-14,-7,1,8,20,35,49,66,84,104,125,147,169,188,204,219,233,244,253,257,260,259,253,244,234,221,205,185,162,138,113,84,55,26,-2,-28,-55,-80,-103,-122,-140,-156,-167,-175,-182,-186,-185,-184,-181,-177,-172,-165,-158,-150,-140,-130,-121,-112,-102,-93,-86,-80,-73,-69,-65,-63,-61,-60,-59,-59,-59,-59,-58,-57,-55,-52,-49,-45,-39,-33,-26,-17,-7,5,18,35,54,76,101,125,148,172,192,211,228,242,256,267,274,276,273,268,260,248,233,214,194,169,142,112,80,47,14,-19,-52,-82,-112,-140,-163,-184,-201,-215,-225,-232,-235,-236,-235,-230,-223,-214,-203,-191,-176,-162,-147,-131,-114,-98,-82,-65,-49,-32,-18,-6,5,17,28,37,45,51,56,59,61,62,62,60,58,54,51,46,40,34,30,25,21,18,16,14,15,18,24,33,45,57,71,87,101,114,127,138,149,157,162,165,165,160,154,145,133,119,102,84,64,42,17,-7,-32,-58,-81,-103,-123,-140,-154,-165,-171,-174,-176,-174,-170,-164,-154,-145,-134,-121,-107,-94,-80,-64,-49,-37,-26,-15,-5,1,7,12,15,17,18,18,17,14,11,7,3,-1,-5,-11,-18,-23,-27,-30,-32,-34,-36,-36,-32,-26,-18,-8,3,19,38,57,75,93,112,129,143,157,170,179,185,188,189,185,178,169,158,145,129,110,90,68,43,18,-3,-27,-50,-70,-87,-101,-115,-124,-131,-136,-136,-137,-135,-130,-124,-117,-110,-101,-92,-83,-74,-65,-56,-48,-41,-33,-25,-18,-12,-10,-7,-5,-3,-1,-3,-4,-6,-8,-11,-16,-20,-24,-27,-31,-36,-40,-43,-46,-49,-51,-50,-50,-47,-42,-35,-25,-14,-2,12,31,49,67,84,100,117,131,143,153,162,165,167,166,162,157,149,137,124,111,95,74,55,35,14,-4,-22,-40,-57,-72,-83,-92,-99,-103,-104,-105,-102,-97,-91,-83,-78,-72,-64,-56,-46,-37,-31,-26,-17,-11,-7,-4,-1,0,0,0,-1,-3,-6,-8,-12,-18,-22,-28,-33,-39,-47,-52,-57,-62,-68,-73,-76,-77,-77,-77,-75,-71,-63,-53,-44,-32,-15,1,18,40,61,81,100,118,137,153,166,177,186,191,193,192,189,181,170,160,147,129,111,91,71,49,27,6,-16,-35,-53,-69,-82,-93,-105,-112,-117,-121,-123,-123,-121,-118,-115,-110,-103,-98,-91,-83,-76,-70,-63,-55,-48,-42,-39,-35,-30,-25,-18,-14,-12,-8,-7,-5,-3,-3,-5,-6,-6,-9,-12,-16,-20,-21,-23,-25,-26,-28,-26,-22,-17,-12,-5,4,16,31,46,62,79,95,110,124,136,145,154,160,164,165,161,156,149,137,124,109,94,75,54,34,13,-8,-29,-50,-67,-84,-98,-110,-120,-125,-128,-131,-128,-125,-121,-112,-103,-94,-81,-71,-60,-50,-40,-31,-23,-19,-14,-6,-3,-1,1,4,6,7,7,8,9,6,3,4,2,0,-3,-8,-11,-14,-15,-21,-30,-35,-38,-40,-41,-45,-49,-49,-45,-44,-43,-37,-30,-18,-6,6,21,39,58,75,91,106,120,133,144,152,155,157,156,151,144,134,121,106,91,73,55,36,15,-4,-21,-41,-59,-74,-87,-97,-106,-112,-114,-114,-110,-105,-98,-89,-78,-65,-53,-42,-31,-19,-10,-3,1,5,8,11,13,14,16,17,14,9,9,12,11,9,3,-2,-6,-9,-14,-22,-29,-34,-39,-46,-48,-53,-57,-59,-63,-64,-64,-63,-62,-58,-55,-51,-41,-31,-18,-4,12,29,46,64,80,95,108,121,132,138,143,143,142,139,132,122,111,99,87,70,52,35,18,5,-8,-25,-43,-55,-65,-75,-81,-86,-87,-84,-81,-76,-69,-60,-50,-43,-38,-28,-17,-11,-12,-9,-5,-1,0,0,0,1,-1,-3,-3,-6,-7,-6,-13,-13,-16,-18,-16,-19,-23,-29,-35,-41,-48,-51,-47,-58,-66,-63,-70,-71,-68,-69,-71,-67,-61,-53,-39,-27,-13,6,27,51,71,91,113,133,150,161,168,172,176,175,167,155,143,126,106,86,63,39,17,-3,-23,-46,-65,-84,-98,-108,-118,-123,-124,-121,-115,-105,-92,-78,-64,-49,-33,-15,-1,10,21,28,32,34,30,24,24,24,22,19,15,9,5,1,-4,-8,-8,-11,-12,-18,-26,-30,-32,-37,-44,-49,-49,-47,-55,-59,-60,-60,-64,-71,-75,-77,-75,-72,-74,-74,-62,-47,-30,-9,13,41,73,102,128,153,174,191,204,211,213,208,199,185,167,147,126,100,73,47,19,-8,-37,-65,-93,-119,-140,-156,-171,-178,-179,-169,-155,-140,-121,-97,-71,-45,-18,4,21,40,54,60,62,59,50,42,37,32,26,16,6,2,0,-1,-5,-11,-21,-26,-29,-37,-50,-61,-65,-64,-64,-68,-70,-67,-56,-45,-49,-56,-60,-64,-67,-69,-76,-82,-80,-70,-50,-24,1,31,72,116,153,186,214,237,262,274,260,240,220,200,187,163,126,96,72,48,17,-19,-53,-84,-114,-147,-178,-205,-224,-236,-238,-231,-215,-189,-154,-114,-72,-30,10,46,73,93,105,107,103,97,88,71,53,39,28,17,7,-4,-12,-20,-25,-27,-34,-46,-61,-72,-74,-76,-82,-87,-85,-73,-61,-58,-60,-59,-52,-47,-54,-67,-85,-102,-114,-123,-131,-126,-102,-69,-25,29,90,152,214,271,312,338,352,352,342,321,295,265,229,192,157,121,82,40,-3,-50,-101,-152,-200,-246,-287,-319,-337,-343,-334,-310,-276,-231,-172,-105,-38,26,87,139,184,217,233,237,225,199,168,134,99,63,27,-5,-33,-56,-75,-92,-106,-117,-128,-140,-152,-163,-169,-174,-173,-165,-150,-127,-99,-73,-46,-22,-14,-19,-39,-71,-111,-157,-200,-234,-246,-226,-169,-82,33,168,308,437,544,611,640,633,591,529,455,378,308,248,201,163,127,85,32,-31,-113,-209,-312,-414,-502,-571,-609,-613,-583,-523,-443,-346,-240,-137,-43,39,113,182,245,305,360,404,431,435,415,368,294,199,90,-22,-126,-219,-287,-330,-347,-337,-310,-275,-240,-213,-196,-195,-200,-206,-207,-194,-168,-126,-72,-14,41,86,113,113,78,16,-71,-175,-278,-355,-379,-334,-211,-22,211,464,696,871,966,972,902,778,631,485,368,291,251,239,240,232,189,107,-16,-176,-361,-548,-715,-837,-902,-902,-841,-732,-591,-440,-301,-188,-103,-46,-2,48,118,218,349,498,639,745,789,758,646,466,241,6,-207,-379,-495,-553,-557,-522,-461,-388,-321,-271,-246,-243,-255,-265,-260,-222,-144,-46,57,146,199,212,190,139,73,10,-54,-126,-218,-330,-440,-511,-491,-347,-75,295,702,1062,1294,1357,1247,1020,755,531,395,365,415,478,496,427,258,7,-283,-562,-781,-925,-984,-972,-913,-824,-725,-623,-526,-436,-357,-285,-214,-135,-39,84,241,418,597,748,849,874,807,661,452,212,-21,-221,-369,-458,-504,-519,-524,-534,-548,-558,-546,-497,-406,-281,-138,-5,96,155,168,142,93,36,-13,-49,-67,-69,-61,-54,-67,-120,-224,-376,-548,-682,-695,-528,-169,347,929,1452,1795,1880,1709,1355,943,593,392,354,439,542,562,437,166,-204,-604,-934,-1132,-1180,-1109,-960,-793,-638,-519,-432,-361,-291,-219,-144,-64,16,95,175,263,353,432,493,524,516,470,393,293,178,51,-78,-206,-325,-430,-509,-555,-570,-556,-518,-447,-345,-214,-61,91,219,292,295,233,121,-6,-114,-183,-204,-191,-167,-150,-149,-175,-230,-311,-418,-542,-660,-712,-626,-343,139,761,1408,1935,2210,2158,1807,1278,739,338,153,176,318,434,399,166,-223,-674,-1068,-1295,-1306,-1132,-864,-594,-399,-304,-294,-315,-307,-231,-92,70,220,320,342,295,216,144,103,108,157,224,270,270,211,95,-59,-229,-379,-480,-520,-501,-442,-364,-289,-233,-187,-138,-74,11,112,207,263,258,185,61,-87,-228,-330,-375,-367,-319,-248,-182,-152,-176,-264,-397,-540,-625,-559,-271,233,883,1545,2059,2294,2181,1771,1199,652,277,127,164,277,324,192,-129,-562,-965,-1216,-1246,-1059,-739,-416,-200,-139,-205,-316,-385,-336,-158,95,335,477,473,326,84,-158,-316,-339,-226,-27,181,314,321,194,-20,-252,-428,-493,-433,-284,-116,4,40,-20,-142,-255,-293,-224,-65,131,289,339,253,55,-185,-395,-513,-511,-408,-253,-103,-6,17,-40,-172,-348,-523,-648,-646,-433,27,682,1402,2003,2322,2262,1839,1203,573,156,40,166,373,475,321,-104,-671,-1169,-1409,-1312,-922,-406,26,218,124,-168,-489,-671,-618,-343,46,390,556,496,240,-111,-424,-595,-578,-393,-117,159,349,398,299,93,-146,-346,-448,-417,-270,-76,84,145,81,-81,-271,-395,-380,-218,33,271,391,332,107,-210,-501,-661,-645,-477,-237,-25,86,74,-41,-210,-378,-492,-525,-450,-219,196,760,1368,1878,2152,2106,1743,1178,603,212,98,201,366,414,217,-226,-780,-1222,-1357,-1132,-632,-63,347,454,233,-180,-572,-757,-659,-330,72,375,456,300,-5,-334,-550,-580,-438,-191,62,242,308,242,79,-111,-277,-375,-390,-322,-190,-52,42,63,-1,-125,-254,-321,-275,-118,97,280,349,259,25,-265,-504,-614,-568,-404,-203,-47,14,-19,-114,-244,-379,-491,-550,-472,-162,407,1156,1897,2395,2480,2102,1384,601,52,-75,166,540,762,606,33,-767,-1464,-1741,-1477,-795,20,635,817,530,-40,-590,-870,-786,-426,8,293,292,38,-311,-582,-664,-547,-311,-80,50,80,71,85,137,179,167,64,-134,-347,-469,-437,-276,-85,33,22,-115,-279,-346,-236,30,332,524,499,242,-155,-525,-709,-655,-422,-131,59,60,-108,-330,-450,-390,-196,14,111,20,-221,-404,-269,267,1083,1897,2401,2400,1874,1041,280,-82,22,381,680,663,218,-535,-1268,-1613,-1398,-748,36,626,795,517,-34,-554,-787,-685,-368,-32,147,90,-154,-430,-585,-565,-403,-183,14,147,207,222,215,167,50,-126,-309,-435,-459,-377,-226,-102,-91,-193,-345,-442,-390,-174,151,450,583,495,223,-115,-387,-497,-421,-255,-127,-113,-218,-369,-461,-409,-209,35,168,96,-145,-423,-502,-183,538,1451,2199,2492,2251,1585,784,194,29,264,610,738,493,-93,-811,-1352,-1462,-1084,-423,205,559,545,243,-165,-469,-538,-415,-244,-151,-185,-308,-434,-463,-363,-212,-124,-148,-234,-288,-208,56,413,674,662,330,-178,-654,-893,-791,-421,9,245,175,-107,-423,-570,-429,-49,394,669,650,368,-34,-384,-578,-569,-415,-252,-158,-141,-169,-197,-201,-158,-69,8,17,-67,-214,-377,-492,-406,-13,632,1342,1891,2134,2030,1619,1066,596,358,328,323,205,-62,-450,-843,-1072,-995,-637,-174,208,392,360,160,-105,-291,-334,-287,-232,-222,-262,-339,-419,-444,-412,-367,-337,-302,-216,-46,184,421,575,523,245,-144,-481,-634,-566,-332,-59,84,9,-212,-423,-476,-313,30,435,702,693,434,70,-257,-472,-530,-453,-351,-318,-365,-399,-365,-288,-179,-40,107,183,132,10,-145,-350,-564,-585,-206,526,1379,2082,2437,2344,1771,939,262,-7,76,242,289,131,-279,-807,-1158,-1090,-627,-56,375,549,436,115,-243,-419,-357,-210,-102,-83,-156,-300,-474,-580,-572,-496,-375,-179,95,344,439,340,104,-198,-478,-588,-459,-177,59,94,-51,-289,-483,-488,-256,130,456,550,395,92,-190,-339,-324,-199,-104,-140,-313,-518,-606,-504,-236,74,287,331,200,-29,-257,-420,-493,-511,-402,-45,566,1318,1954,2256,2164,1697,1012,391,72,104,267,300,94,-317,-762,-1046,-991,-567,8,460,604,448,136,-191,-392,-409,-307,-205,-211,-313,-441,-525,-520,-447,-356,-289,-254,-187,-38,174,376,441,320,56,-256,-463,-496,-382,-202,-96,-103,-170,-205,-118,57,248,365,325,159,-43,-151,-127,-76,-94,-251,-503,-733,-826,-660,-252,213,524,554,351,62,-182,-292,-287,-269,-346,-535,-595,-263,453,1338,2046,2316,2103,1497,791,334,270,453,528,301,-190,-777,-1174,-1189,-775,-124,412,632,506,197,-90,-258,-253,-163,-122,-165,-283,-424,-550,-630,-642,-596,-470,-242,55,312,386,245,-25,-304,-497,-527,-370,-129,22,7,-117,-237,-268,-172,29,226,279,149,-54,-195,-213,-129,-6,60,-22,-241,-498,-671,-677,-465,-67,342,529,395,87,-196,-343,-339,-260,-220,-325,-417,-175,512,1441,2171,2406,2133,1445,639,128,109,431,640,463,-71,-755,-1257,-1317,-829,-27,638,882,692,264,-157,-407,-410,-273,-193,-242,-376,-511,-617,-672,-627,-495,-318,-95,140,307,299,76,-195,-390,-467,-409,-280,-150,-144,-308,-483,-525,-356,-30,308,539,505,211,-168,-442,-445,-239,28,222,188,-70,-472,-834,-909,-623,-88,411,618,491,112,-302,-547,-513,-260,-48,151,539,1100,1658,1899,1756,1400,881,370,120,246,591,727,507,44,-520,-937,-1006,-595,81,581,734,567,253,-77,-351,-422,-382,-389,-462,-548,-555,-564,-597,-565,-496,-409,-308,-132,135,312,311,167,-55,-261,-425,-476,-408,-356,-361,-383,-352,-218,-17,242,466,490,319,62,-144,-232,-227,-128,-23,-30,-166,-355,-472,-506,-460,-261,54,351,457,301,2,-291,-455,-407,-201,-18,-28,-214,-243,149,859,1568,1905,1794,1406,899,529,468,653,829,672,183,-410,-887,-1057,-860,-354,214,551,568,379,162,-21,-166,-257,-340,-439,-531,-581,-553,-526,-533,-522,-437,-249,-22,177,274,211,36,-175,-341,-440,-507,-521,-491,-444,-379,-284,-130,50,184,229,172,49,-90,-161,-103,-1,33,-35,-134,-204,-300,-413,-435,-250,68,288,283,50,-307,-631,-757,-594,-294,-62,214,744,1456,1990,2044,1717,1273,810,423,300,469,673,558,130,-351,-741,-929,-787,-267,338,623,538,309,136,24,-57,-66,-120,-342,-658,-892,-906,-811,-672,-440,-188,15,111,115,82,-45,-179,-175,-59,40,-44,-273,-523,-747,-818,-671,-335,54,300,385,309,98,-97,-171,-88,46,79,16,-122,-281,-385,-481,-539,-506,-336,3,312,421,295,1,-253,-420,-464,-374,-260,106,784,1490,1949,1827,1324,835,462,413,597,832,937,616,160,-248,-573,-623,-483,-129,202,256,195,63,-26,-57,-106,-58,-91,-244,-383,-550,-687,-836,-866,-610,-242,97,246,131,-155,-512,-618,-325,120,428,336,-86,-620,-1058,-1092,-712,-145,303,404,247,-34,-284,-321,-173,25,94,9,-85,-167,-235,-336,-448,-401,-157,198,426,316,-16,-336,-441,-354,-259,-229,-249,-32,623,1459,2038,1968,1420,915,672,727,906,1025,951,500,-118,-583,-720,-488,-125,193,313,165,-71,-220,-155,46,174,179,4,-283,-531,-729,-855,-922,-876,-655,-360,-93,65,61,-36,-178,-241,-113,84,213,166,-60,-347,-635,-800,-762,-566,-272,-30,116,165,81,-35,-126,-138,-73,-37,-11,-21,-67,-152,-348,-533,-577,-421,-96,165,229,98,-112,-216,-210,-180,-217,-157,369,1203,1808,1791,1238,752,661,818,1031,1126,1048,696,140,-294,-481,-388,-149,54,153,43,-211,-439,-479,-261,29,246,276,84,-180,-457,-677,-774,-719,-516,-326,-260,-279,-294,-223,-98,22,123,132,35,-110,-233,-294,-323,-350,-361,-362,-382,-378,-286,-98,96,197,191,99,-25,-139,-215,-211,-154,-117,-159,-294,-408,-382,-228,-38,71,74,-12,-158,-236,-156,-27,-52,-289,-350,169,1045,1706,1716,1214,761,668,931,1287,1431,1231,631,-75,-517,-580,-314,12,187,150,-101,-413,-588,-477,-122,229,404,304,-2,-359,-676,-834,-801,-615,-377,-225,-205,-314,-428,-377,-145,142,287,210,2,-237,-410,-467,-393,-223,-119,-187,-376,-522,-474,-253,7,174,168,37,-107,-185,-172,-104,-30,-38,-166,-320,-378,-288,-135,-3,66,-3,-237,-491,-536,-348,-127,186,859,1651,1889,1294,465,290,892,1604,1867,1636,1091,333,-342,-515,-245,75,156,67,-43,-252,-538,-658,-453,-114,36,-27,-153,-269,-339,-360,-344,-384,-511,-597,-551,-389,-231,-137,-51,4,-13,-107,-216,-191,-30,130,102,-177,-501,-641,-519,-277,-93,-13,-61,-176,-243,-193,-46,78,128,95,-28,-177,-280,-310,-305,-314,-299,-224,-135,-95,-105,-139,-182,-208,-213,-247,-345,-224,457,1416,1855,1323,399,119,746,1620,1982,1681,1077,474,121,81,146,127,-43,-186,-207,-278,-465,-635,-578,-330,-140,-116,-249,-398,-400,-248,-74,-117,-388,-614,-595,-329,-39,72,-12,-175,-218,-87,67,101,-13,-144,-209,-279,-368,-427,-408,-356,-309,-231,-176,-190,-214,-143,33,173,171,43,-126,-218,-165,-36,-6,-172,-384,-412,-251,-83,-36,-90,-194,-289,-271,-152,-137,-346,-377,254,1207,1547,947,195,293,1174,1901,1907,1409,894,561,458,537,586,414,80,-154,-219,-320,-545,-678,-541,-296,-226,-378,-587,-663,-519,-273,-149,-289,-535,-564,-283,43,95,-117,-302,-218,101,367,331,50,-211,-244,-132,-136,-333,-564,-613,-464,-250,-112,-117,-221,-293,-238,-113,-19,15,54,82,26,-89,-174,-173,-148,-132,-90,-34,-15,-27,-47,-103,-214,-294,-285,-301,-481,-559,-49,857,1293,820,90,124,1052,1927,1928,1258,712,693,952,1059,775,304,31,66,165,-24,-456,-733,-628,-369,-357,-638,-921,-949,-718,-474,-460,-645,-693,-412,10,221,57,-237,-340,-149,218,537,630,415,40,-211,-229,-114,-83,-205,-332,-350,-221,-58,-57,-256,-517,-584,-392,-115,86,138,104,31,-74,-144,-124,-3,132,185,173,121,46,-48,-159,-230,-261,-268,-290,-365,-507,-589,-248,480,920,601,-61,-133,729,1705,1836,1153,519,544,996,1343,1206,682,265,221,394,359,-31,-429,-518,-363,-357,-693,-1120,-1297,-1061,-641,-444,-567,-754,-662,-339,-125,-173,-334,-318,-56,258,418,337,179,173,322,396,209,-67,-125,38,155,34,-231,-437,-529,-547,-502,-382,-228,-124,-121,-215,-319,-295,-131,63,179,175,128,102,106,127,140,119,37,-63,-151,-237,-293,-325,-358,-423,-351,56,460,371,-97,-247,396,1319,1556,962,360,497,1144,1594,1419,749,241,313,735,921,493,-189,-527,-411,-282,-495,-834,-968,-808,-562,-548,-806,-1063,-982,-600,-331,-401,-621,-576,-164,256,358,159,-34,33,322,609,658,462,217,100,138,180,115,-60,-274,-406,-382,-247,-185,-302,-473,-509,-356,-150,-53,-95,-179,-197,-104,80,239,251,137,17,-19,0,-13,-78,-105,-35,45,-38,-333,-670,-782,-426,201,479,187,-220,-119,600,1254,1171,525,171,569,1240,1499,1125,542,351,560,752,602,193,-88,-92,18,-47,-344,-626,-720,-634,-582,-747,-1008,-1101,-905,-638,-553,-623,-666,-496,-179,76,186,169,152,236,410,548,525,408,322,302,296,226,108,-5,-93,-146,-129,-62,-77,-235,-424,-508,-421,-227,-84,-87,-182,-241,-195,-62,26,-23,-97,-41,142,286,239,31,-176,-264,-240,-224,-292,-429,-465,-142,360,435,-29,-403,-135,615,1026,659,125,226,892,1363,1206,634,222,402,874,1043,729,246,58,188,235,-69,-501,-682,-612,-521,-579,-825,-1055,-1040,-794,-556,-530,-651,-684,-495,-242,-133,-104,-17,152,320,373,302,219,259,408,520,503,406,343,333,264,107,-10,-62,-137,-228,-232,-149,-81,-119,-244,-330,-309,-205,-96,-51,-69,-50,94,201,69,-211,-378,-274,-40,63,-39,-183,-200,-149,-217,-473,-779,-718,-139,339,131,-402,-456,215,942,898,270,-19,510,1284,1478,989,374,274,714,1061,860,274,-94,45,340,351,-12,-403,-531,-485,-464,-594,-796,-874,-782,-621,-541,-563,-567,-485,-355,-253,-170,-46,100,216,287,340,383,379,325,261,228,250,307,334,278,135,8,4,85,134,77,-59,-164,-134,2,80,-16,-197,-274,-193,-64,-22,-70,-111,-61,55,56,-127,-314,-307,-191,-218,-434,-601,-521,-296,-180,-282,-509,-677,-539,-87,250,88,-282,-236,338,822,647,118,35,594,1148,1150,719,397,549,954,1078,714,217,48,211,366,232,-67,-259,-315,-352,-427,-512,-584,-606,-540,-462,-444,-428,-370,-294,-261,-281,-266,-153,1,91,82,59,78,124,178,216,248,272,280,275,208,100,78,187,275,189,16,-70,-11,89,82,-5,-34,21,42,-57,-225,-336,-293,-155,-75,-86,-98,-96,-163,-296,-397,-403,-332,-288,-337,-438,-512,-510,-482,-529,-662,-690,-366,115,230,-97,-321,-24,588,879,536,66,146,758,1228,1069,576,378,688,1072,1000,555,246,371,675,692,371,18,-127,-103,-101,-200,-357,-480,-524,-540,-552,-518,-448,-408,-433,-470,-414,-254,-126,-121,-175,-175,-80,34,83,59,11,-4,56,180,288,288,190,120,121,150,165,138,83,66,140,253,266,129,-61,-120,-24,46,-9,-132,-177,-104,-57,-140,-294,-362,-304,-251,-293,-403,-466,-429,-375,-384,-460,-527,-539,-529,-512,-495,-468,-394,-206,43,103,-105,-264,-23,529,888,737,374,370,814,1173,1039,634,452,678,1018,1060,754,422,345,474,566,471,251,44,-92,-173,-200,-197,-238,-352,-477,-545,-567,-571,-555,-499,-415,-365,-383,-416,-400,-326,-247,-199,-164,-124,-62,25,127,198,183,92,8,23,135,237,252,229,237,276,275,185,104,126,205,216,115,0,-34,-18,-67,-191,-267,-235,-178,-208,-308,-382,-399,-389,-395,-422,-443,-437,-408,-376,-356,-356,-374,-365,-307,-224,-200,-279,-316,-150,139,236,66,-21,248,684,828,532,231,381,852,1103,882,552,551,842,997,775,413,294,470,631,511,223,48,37,31,-84,-256,-365,-375,-350,-369,-442,-491,-519,-574,-641,-661,-589,-477,-399,-365,-340,-280,-192,-110,-66,-54,-15,51,132,202,231,208,158,164,253,332,298,163,78,146,251,216,45,-87,-62,28,36,-63,-138,-78,-1,-38,-160,-238,-203,-157,-196,-287,-326,-268,-206,-218,-271,-315,-330,-345,-364,-354,-299,-218,-187,-240,-323,-363,-292,-93,114,124,-50,-88,210,620,746,496,241,379,789,998,808,535,540,784,929,767,448,286,342,417,340,157,31,-4,-24,-92,-185,-269,-348,-410,-436,-422,-385,-381,-425,-470,-451,-388,-359,-381,-408,-366,-238,-106,-72,-138,-191,-143,-38,51,97,116,130,137,160,209,223,177,111,84,134,217,233,150,56,29,53,77,85,77,58,-2,-88,-122,-83,-31,-45,-135,-229,-277,-271,-230,-190,-156,-145,-168,-222,-283,-300,-247,-164,-126,-159,-209,-220,-199,-183,-183,-170,-100,-2,35,-29,-66,78,341,485,379,181,166,425,698,736,575,464,544,687,693,548,402,374,417,418,332,207,119,44,-42,-104,-131,-163,-238,-327,-361,-334,-301,-345,-444,-480,-408,-302,-277,-350,-416,-374,-245,-160,-187,-249,-232,-133,-66,-73,-92,-41,66,116,70,-7,-24,32,87,87,63,83,131,130,86,56,105,182,199,169,141,151,174,165,139,115,98,59,-3,-34,-39,-51,-96,-165,-198,-180,-176,-235,-317,-310,-213,-152,-194,-287,-328,-296,-262,-267,-276,-242,-196,-191,-204,-150,-22,64,32,-33,47,288,459,400,246,247,463,658,625,469,426,549,674,632,455,328,344,411,390,265,127,60,45,17,-30,-92,-168,-256,-348,-402,-413,-419,-453,-509,-536,-525,-508,-502,-482,-416,-318,-253,-259,-288,-250,-123,19,81,58,39,67,120,168,198,213,232,245,239,207,196,229,274,284,241,192,166,156,131,81,31,29,49,15,-62,-104,-80,-31,-28,-103,-178,-153,-38,32,-7,-89,-125,-84,-13,27,32,28,20,-4,-44,-62,-59,-75,-112,-146,-159,-162,-176,-195,-208,-206,-194,-201,-227,-220,-166,-122,-119,-148,-162,-122,-43,2,12,61,153,222,219,175,203,339,458,433,318,278,356,452,448,335,217,197,255,287,233,149,111,115,111,66,6,-25,-30,-25,-50,-115,-187,-231,-228,-195,-177,-203,-247,-268,-253,-235,-236,-260,-278,-261,-220,-166,-136,-132,-139,-119,-46,31,83,105,92,91,121,152,158,142,147,177,199,195,165,135,119,116,122,130,129,115,78,32,-9,-55,-94,-111,-84,-41,-50,-106,-140,-123,-72,-61,-109,-140,-98,-24,-12,-61,-93,-77,-33,-29,-99,-164,-155,-55,24,7,-55,-105,-83,-31,-23,-54,-70,-39,-8,-29,-69,-86,-61,-29,-34,-46,-30,8,27,9,-15,-15,21,66,72,54,54,83,127,159,168,164,158,155,155,160,181,200,196,169,141,137,159,179,179,158,145,155,164,166,143,104,80,77,64,30,-4,-15,-6,-7,-44,-95,-120,-119,-119,-152,-208,-239,-228,-198,-188,-215,-254,-271,-263,-250,-242,-227,-196,-162,-140,-122,-103,-89,-87,-99,-106,-77,-27,0,-1,-19,-21,0,10,13,25,53,87,120,136,128,115,121,142,160,175,197,232,266,274,248,210,189,180,166,147,127,100,56,5,-44,-86,-111,-134,-172,-209,-213,-194,-195,-226,-274,-305,-287,-237,-197,-187,-198,-197,-168,-122,-82,-63,-51,-36,-9,15,28,38,51,75,98,109,107,103,115,160,204,210,201,208,252,307,324,298,262,260,283,297,290,273,253,230,196,153,113,88,68,38,-2,-43,-76,-105,-147,-196,-237,-260,-268,-264,-256,-249,-247,-253,-257,-261,-273,-282,-267,-225,-170,-137,-154,-203,-223,-187,-123,-79,-87,-113,-111,-77,-45,-41,-57,-69,-54,-18,10,24,38,60,84,99,113,130,153,181,200,197,194,209,232,235,212,194,193,203,206,189,159,140,149,157,128,74,36,35,52,50,16,-27,-45,-34,-17,-32,-71,-99,-96,-73,-69,-96,-125,-133,-116,-96,-94,-105,-121,-126,-100,-61,-43,-38,-37,-41,-40,-37,-35,-30,-20,2,21,17,-6,-29,-29,-4,26,41,32,8,-5,7,30,38,20,0,-6,-2,9,14,12,8,-1,-14,-22,-20,-5,5,3,-12,-36,-45,-40,-32,-35,-45,-45,-38,-28,-28,-35,-40,-36,-14,4,9,12,10,15,32,49,59,67,76,77,67,54,48,53,64,63,46,28,20,27,39,37,25,17,24,37,38,26,17,16,18,18,11,3,-3,-4,-1,-2,-2,0,-4,-10,-14,-15,-13,-14,-16,-13,-3,-5,-26,-48,-55,-40,-20,-24,-46,-62,-49,-18,-5,-21,-37,-30,-6,13,11,-3,-10,4,28,33,17,1,7,21,26,16,-1,-5,4,15,13,-1,-16,-20,-12,-1,2,-4,-15,-26,-34,-31,-19,-17,-37,-63,-72,-55,-30,-22,-34,-47,-43,-25,-10,-16,-30,-21,-1,11,8,-5,-7,9,31,37,26,22,39,60,65,60,58,61,70,77,72,67,67,68,64,46,25,16,16,15,11,0,-15,-27,-23,-13,-10,-16,-30,-44,-45,-27,-9,-6,-20,-30,-24,-15,-15,-26,-43,-46,-35,-25,-31,-45,-54,-52,-48,-49,-48,-40,-27,-15,-10,-11,-10,-4,6,15,21,29,40,54,64,72,78,82,78,71,73,75,74,68,53,42,32,24,13,1,-11,-22,-21,-18,-22,-34,-48,-51,-48,-42,-32,-25,-25,-24,-21,-22,-23,-25,-29,-33,-31,-21,-9,-9,-21,-36,-40,-28,-12,-13,-32,-40,-26,-3,13,11,1,-6,1,20,26,19,10,7,17,27,23,10,-1,-2,1,2,-1,-2,0,2,-1,-12,-22,-24,-19,-10,-3,0,2,7,11,12,14,23,35,37,36,35,33,37,40,34,22,11,6,8,9,14,15,12,10,6,8,12,15,21,25,26,28,28,21,10,4,-1,4,7,1,-9,-21,-26,-28,-34,-46,-57,-63,-73,-77,-75,-69,-57,-52,-53,-56,-54,-41,-24,-17,-15,-6,6,18,24,22,22,31,40,41,39,38,41,44,37,22,9,9,19,23,12,-3,-5,5,15,16,13,10,15,23,27,28,25,26,30,30,25,13,-3,-10,-4,1,-2,-15,-33,-43,-37,-27,-30,-42,-53,-52,-43,-36,-39,-47,-44,-33,-20,-11,-5,-1,5,13,18,25,28,31,35,35,34,38,43,42,39,35,33,34,33,28,20,14,16,21,23,20,10,4,5,12,14,10,3,1,10,11,1,-11,-23,-25,-26,-36,-47,-54,-52,-47,-46,-48,-55,-56,-52,-43,-39,-41,-37,-34,-29,-25,-25,-21,-17,-10,-1,5,12,24,35,38,34,28,32,42,52,53,44,35,28,31,33,30,24,13,12,15,22,19,4,-3,-3,4,9,2,-7,-12,-8,3,8,0,-11,-14,-10,-5,-2,-1,-4,-6,-4,-1,-4,-9,-7,-6,-4,-3,-4,-5,-5,-6,-11,-15,-17,-21,-26,-26,-21,-16,-14,-16,-16,-10,-2,1,1,4,7,12,16,17,15,13,11,10,12,17,18,16,18,20,15,8,6,7,8,9,5,-4,-9,-11,-15,-17,-22,-25,-24,-19,-12,-15,-19,-19,-14,-3,2,3,-1,-1,-2,3,14,17,12,8,3,-1,1,6,6,4,2,6,7,7,6,0,-3,0,6,8,10,8,6,4,1,-1,-1,2,4,5,5,2,0,4,7,5,7,10,7,1,-1,0,3,3,-4,-11,-12,-10,-6,-2,-2,-3,-5,-5,-5,-3,-2,-5,-5,-4,-2,-3,-11,-15,-15,-13,-12,-17,-18,-13,-10,-9,-8,-4,-2,0,3,0,-1,3,9,14,12,8,4,2,4,6,6,2,-1,2,7,9,4,1,-1,0,5,3,1,5,10,10,5,-1,0,3,6,10,5,0,0,2,3,3,7,8,7,4,1,2,5,3,-1,-6,-15,-17,-12,-9,-6,-3,0,1,-2,-2,1,2,2,7,10,4,1,-1,-1,1,-1,-8,-13,-16,-13,-4,-1,-2,-5,-9,-9,-7,-9,-6,0,1,0,1,4,4,3,2,1,5,9,10,9,8,11,12,11,9,5,2,4,10,8,2,-2,-5,-5,-6,-7,-6,-5,-8,-13,-16,-10,-1,0,0,-2,-6,-3,5,11,10,5,2,1,-2,-3,1,5,9,11,8,3,3,8,13,11,12,10,3,0,2,5,2,0,-4,-7,-8,-9,-8,-8,-6,-3,-2,-2,-4,-8,-12,-12,-8,-4,-3,-7,-9,-6,-6,-8,-12,-17,-14,-8,-5,-3,-5,-8,-7,-3,1,0,0,4,8,11,10,7,8,7,10,13,10,4,3,8,15,16,12,8,3,2,8,14,13,9,1,-3,-1,-2,-5,-9,-10,-5,-4,-6,-4,-2,-1,2,3,1,-2,-4,-7,-4,0,0,-4,-7,-9,-11,-9,-7,-4,-1,1,0,-2,-2,1,1,0,0,0,3,11,12,8,4,2,2,3,4,3,5,5,5,4,0,-1,-1,-1,-1,1,1,0,-2,-3,-3,-2,-4,-5,-3,-1,0,1,1,2,2,-1,-6,-4,0,2,2,0,-2,-7,-8,-9,-12,-9,-8,-9,-9,-8,-5,-1,1,4,5,3,6,6,6,10,11,9,3,2,3,4,6,6,5,3,2,3,6,4,1,1,1,1,0,2,1,2,5,3,0,4,4,0,1,0,2,4,3,2,1,-1,-2,-2,-4,-5,-4,-7,-8,-10,-15,-18,-17,-13,-9,-7,-7,-6,-7,-5,-2,1,0,2,3,2,3,3,5,6,2,0,1,4,5,5,5,4,6,8,10,9,8,9,10,13,10,3,-1,-3,0,5,5,0,-6,-10,-6,-3,-1,0,-3,-6,-11,-12,-11,-10,-9,-10,-8,-10,-9,-8,-7,-2,0,-1,-1,-1,2,7,10,9,7,4,4,7,7,10,12,7,4,2,2,3,4,2,0,0,2,4,2,0,0,-1,0,0,0,0,-2,-2,-2,-4,-3,-3,-3,-4,-5,-7,-7,-6,-6,-5,-2,-1,-1,0,1,0,-1,0,0,2,7,9,5,0,-1,0,1,4,8,8,3,0,0,0,0,0,-3,-5,-1,1,0,-2,-8,-11,-11,-10,-5,-2,1,0,-1,0,-3,-2,0,1,3,3,4,3,-1,-1,1,1,0,0,0,1,0,1,3,1,0,1,2,4,5,1,-1,1,2,0,0,0,-1,1,1,0,-1,-1,0,1,4,3,0,-1,-2,-2,-1,1,2,-2,-5,-4,-5,-5,-2,-1,0,0,1,3,3,1,0,1,0,2,8,8,6,3,1,0,0,-1,-2,-2,0,1,2,0,0,-2,-4,-4,-1,0,1,-2,-7,-5,-2,-3,-6,-8,-5,-1,0,1,2,1,-1,0,0,0,1,0,0,-1,-2,-1,-1,-2,-3,-2,0,-1,-2,-3,-3,-2,-2,-1,1,0,0,0,-1,2,5,7,5,3,1,0,1,1,5,7,5,4,6,7,5,5,5,2,2,5,7,6,6,5,1,-1,-2,-2,1,1,1,1,1,0,0,0,-2,-2,0,0,0,0,0,-4,-7,-5,-3,1,1,1,0,0,1,0,0,0,0,-1,-1,0,-2,-4,-4,-5,-3,-4,-6,-5,-3,-1,-2,-2,-1,-3,-1,0,-2,0,1,5,6,2,0,-1,0,2,1,-2,-4,-4,-3,-1,-2,-3,-2,-1,0,-1,-3,-5,-6,-4,1,3,1,-3,-5,-2,0,0,1,1,3,6,8,6,1,1,2,3,4,3,3,2,0,0,0,-1,-1,-2,2,4,5,4,0,0,1,3,4,3,2,1,1,0,0,0,-1,-2,-1,0,1,0,0,-1,-3,-4,-4,-2,0,0,0,0,-1,-1,0,0,-2,-1,1,0,0,0,0,0,1,3,4,5,8,5,-1,-2,-1,5,4,1,0,-2,-1,-1,0,0,-2,-3,-3,-2,0,-3,-8,-11,-11,-7,-3,-2,-4,-6,-4,-1,0,-4,-5,-1,1,4,6,4,1,0,0,5,8,7,7,8,6,5,6,3,4,7,5,6,6,2,-1,-3,-1,1,1,0,0,0,-1,-1,-1,-1,0,-1,0,-2,-6,-3,-2,-5,-4,-2,0,0,-2,-2,-2,-1,0,0,-1,-2,0,0,0,0,0,1,0,0,1,3,2,2,2,1,0,-1,-1,0,1,0,0,0,-2,-1,0,-2,-3,-2,0,-1,-1,-1,-2,-4,-2,-1,-3,-3,-1,-2,-2,0,0,0,2,3,3,4,4,3,4,4,3,5,4,3,4,3,4,4,5,4,1,0,0,0,-1,-3,-3,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,1,2,1,3,4,1,1,0,1,3,1,-2,-4,-5,-2,0,-1,-2,-3,-2,-1,1,-1,-3,-1,-1,0,0,0,-1,0,-3,-3,-4,-7,-4,-2,-3,-4,-5,-4,-1,0,0,-1,-2,-2,-2,-2,-4,-1,1,1,0,1,2,4,5,4,7,9,9,9,6,1,0,1,2,2,2,1,-1,-3,-2,0,-1,-1,-2,-3,-1,-1,-2,-1,-1,-1,0,0,-1,0,0,-1,0,-2,-1,2,2,3,3,3,0,3,4,5,6,3,5,5,5,7,6,4,2,1,3,3,2,1,1,-1,-1,-2,-1,0,0,0,0,-3,-7,-8,-6,-6,-9,-10,-9,-9,-7,-7,-8,-5,-4,-1,0,2,2,-1,-3,-1,0,0,0,0,0,1,1,2,5,3,1,1,2,4,4,3,3,1,0,1,1,1,0,-2,-2,-1,-1,-2,-4,-7,-6,-2,-3,-3,-5,-7,-3,-1,-2,-3,-2,-1,0,0,-2,0,1,0,1,2,6,8,1,2,8,2,10,15,-2,14,14,-8,16,4,-11,19,-1,-8,8,-10,1,8,-2,-1,-7,22,2,-15,29,-37,42,140,-47,-16,19,-141,43,52,-143,13,-3,-59,42,-49,-29,14,-14,41,-38,-20,19,-44,81,16,-65,85,-47,-12,133,-76,12,88,-74,73,33,-75,68,-2,8,48,-55,24,-9,-25,72,-70,-5,44,-101,48,5,-89,63,-33,-20,49,-82,19,13,-48,48,-40,-15,35,-62,24,9,-36,38,-28,19,27,-44,44,-34,0,83,-72,35,37,-78,78,-27,-46,98,-63,24,51,-91,93,-18,-67,114,-84,13,73,-127,78,11,-102,139,-76,-70,138,-126,32,103,-163,75,48,-133,118,-6,-127,145,-53,-59,132,-124,23,92,-106,103,-20,-87,115,-82,26,37,-109,107,-13,-42,73,-95,12,69,-41,-12,2,8,-30,65,7,-89,93,-44,-23,116,-150,52,77,-167,176,-35,-168,195,-85,-26,142,-134,93,96,-89,87,-24,-70,73,-24,-76,26,21,-124,-2,44,-118,69,-25,-120,87,-15,-47,41,-16,-16,11,48,-27,-64,113,-52,-14,146,-116,23,92,-79,73,33,-73,59,25,-62,28,29,-50,43,33,-67,54,0,-47,68,-29,-51,145,-102,-3,107,-165,111,61,-137,123,-21,-138,161,3,-149,111,-6,-122,163,-46,-164,214,-141,-49,304,-335,103,209,-408,381,-12,-387,464,-262,-142,429,-399,-13,313,-318,88,169,-314,86,158,-184,108,14,-228,233,49,-187,141,-66,-33,163,-69,28,-45,-15,166,-103,20,26,-120,155,-8,-85,119,-131,10,125,-106,-10,-25,-14,69,-59,-17,22,-74,41,87,-114,-28,130,-127,33,121,-241,131,105,-241,227,-28,-223,277,-43,-158,173,-51,-102,185,-71,-135,173,-73,-60,202,-161,-55,203,-150,56,74,-168,134,28,-74,77,-91,-24,139,-45,-35,10,-86,78,76,-110,24,-23,-77,171,-46,-125,86,-71,16,125,-135,-14,73,-79,119,33,-145,39,60,-30,57,-5,-118,81,60,-74,41,-31,-100,101,30,-83,41,-53,-51,106,-21,-90,81,-26,-50,159,-80,-113,158,-63,-52,184,-164,-64,208,-193,31,152,-227,60,131,-153,17,91,-148,57,161,-194,4,132,-158,131,88,-219,152,41,-107,142,-72,-29,95,-60,34,10,-63,39,8,-36,53,-33,-30,42,-46,42,1,-47,105,-74,-17,122,-171,82,142,-218,112,74,-191,158,4,-157,174,-15,-125,116,3,-80,50,51,-80,-30,126,-114,-37,202,-175,4,191,-229,64,150,-228,99,127,-182,32,34,-112,61,85,-38,-72,8,24,-38,59,26,-136,62,77,-153,72,10,-197,190,108,-214,45,2,-154,196,85,-179,39,-40,-77,184,1,-147,25,-3,0,113,-58,-167,81,99,3,89,-147,-133,177,14,69,104,-244,-16,139,-11,90,-54,-127,72,53,108,-20,-207,84,40,49,197,-268,-162,224,-72,155,152,-431,24,247,-160,198,45,-414,179,214,-204,143,-67,-307,296,150,-180,37,-126,-76,205,66,-44,-123,-70,124,-7,43,48,-208,37,181,-109,15,26,-185,125,147,-184,17,93,-183,75,149,-143,17,17,-62,76,1,-3,28,-63,60,18,-42,92,-90,-26,135,-96,2,131,-160,-47,126,-108,35,68,-139,7,-9,-10,91,-121,5,75,-123,109,40,-152,88,-16,-13,139,-123,-28,77,-107,157,41,-235,142,22,-131,167,-48,-120,140,-38,-34,88,-80,-24,90,29,-6,-21,-32,37,11,-5,46,-35,-4,6,-38,75,-54,-6,163,-187,-19,172,-169,27,98,-146,82,81,-139,7,-7,-27,148,1,-123,36,-33,-11,170,4,-146,25,77,-26,-1,25,-127,31,181,-117,-26,28,-235,165,250,-242,-22,27,-152,179,96,-132,-8,-107,41,233,-138,-156,103,9,22,150,-100,-224,113,123,-13,58,-114,-164,135,142,-77,-41,-19,-97,105,139,-141,-107,41,76,91,-74,-102,42,-21,62,120,-137,-100,90,38,55,-4,-144,28,113,-14,46,-63,-136,135,54,-55,99,-160,-108,303,-63,-200,188,-30,-156,224,28,-220,62,44,-37,126,-31,-124,91,-13,-48,138,-54,-145,156,53,-154,81,15,-119,134,46,-111,24,-34,-26,113,33,-105,-48,54,-30,6,54,-92,-16,71,-29,11,-24,-46,30,41,31,-72,-50,38,17,71,-2,-100,-31,1,114,94,-124,-64,68,7,62,40,-139,-73,138,88,-58,-45,-123,-20,240,31,-148,-52,-81,108,194,-98,-109,-6,-11,155,41,-205,-10,32,57,170,-150,-187,84,68,91,-11,-120,28,-60,64,178,-199,-101,197,-40,-30,91,-191,-8,195,-82,61,18,-240,134,116,-120,82,-21,-52,73,-59,-12,15,-30,70,13,-53,-55,-16,129,-8,-84,80,-66,-53,108,-41,-40,-15,-5,107,-72,-60,33,-63,128,51,-116,43,-84,-3,154,-131,10,59,-163,141,35,-169,152,-5,-80,190,-62,-145,104,-7,2,101,-75,-76,27,13,68,24,-83,-46,62,86,-57,36,-16,-176,219,93,-245,145,-32,-160,300,-57,-214,145,-53,14,174,-109,-114,5,58,88,-17,-17,-66,-78,107,89,-76,-63,21,5,15,47,-64,-88,52,89,51,-41,-112,-27,52,76,66,-49,-103,-51,30,73,-14,-44,-24,-19,59,-6,-90,27,1,7,128,-96,-174,112,40,-7,140,-131,-138,153,-16,19,122,-166,11,169,-104,-13,22,-82,105,106,-95,-119,-10,12,53,114,-129,-146,124,3,22,78,-190,47,172,-118,44,-51,-175,211,104,-92,-15,-146,2,209,34,-20,-94,-124,122,91,-13,-10,-155,-16,200,-7,-108,-25,-40,77,147,-30,-156,-65,103,108,20,-16,-127,-91,163,77,-122,67,9,-146,161,77,-192,79,97,-97,76,23,-170,34,81,-35,79,-34,-120,42,-31,19,80,-67,60,-15,-139,106,-13,-12,152,-144,-3,83,-194,124,74,-172,166,-16,-175,102,-51,-41,138,-46,-27,18,-98,32,62,-37,9,24,-1,-8,2,7,-27,38,80,-19,-32,-64,-28,153,-34,-96,133,-117,-123,209,-14,-115,100,-26,-45,68,-20,-39,-7,48,28,-29,40,-78,-60,182,-13,-111,112,-66,-101,183,-27,-173,108,23,-108,128,-7,-215,111,123,-99,86,-20,-208,123,151,-113,-5,17,-125,92,165,-137,-70,86,-40,89,108,-213,-60,161,-17,21,45,-139,-49,110,18,-58,14,-8,-54,73,40,-97,28,25,-78,86,46,-80,55,10,-87,55,59,-49,-11,16,0,15,21,-13,-55,-16,64,29,-35,-43,-68,32,118,-31,-43,7,-72,67,96,-99,-15,31,-9,112,-30,-122,82,9,-36,108,-82,-103,160,-9,-104,84,-74,-58,208,-42,-180,112,-3,-82,175,-45,-196,162,68,-144,115,53,-179,107,162,-207,-14,161,-179,37,206,-229,-48,188,-137,3,151,-152,-51,160,-42,-56,106,-61,-105,132,24,-101,101,-17,-148,113,42,-142,67,49,-117,41,47,-124,26,93,-70,32,32,-140,56,120,-92,-10,37,-49,23,47,-1,-38,-42,56,23,-27,34,-72,-51,111,0,-34,49,-76,-25,94,-7,-7,22,-36,-20,35,20,-5,14,-21,-33,37,1,-31,0,-25,5,24,-5,-1,-44,-41,50,29,-4,17,-33,-15,24,-15,50,68,-51,-20,28,-15,22,39,2,-2,9,26,-23,-72,31,57,-17,40,-25,-109,58,33,-57,55,-62,-72,119,-35,-84,47,-51,6,98,-53,-46,-3,-48,45,38,-35,-7,-35,-37,35,25,-5,18,3,-16,9,1,-25,4,15,5,20,-13,-46,5,47,16,23,23,-66,-15,111,12,-38,39,-42,-19,106,-20,-84,48,2,-21,90,-48,-130,46,32,-41,44,-11,-92,49,48,-60,44,1,-82,93,19,-123,53,5,-46,142,-27,-115,79,-34,-15,131,-55,-53,76,-52,-36,58,-37,9,86,-67,-52,55,-21,42,68,-73,-11,21,-12,52,-32,-44,61,-12,-26,12,-82,6,123,-16,-42,-8,-76,46,125,-28,-58,-26,-47,46,71,-66,-56,22,15,55,-6,-99,3,61,53,55,-87,-112,37,39,45,53,-104,-86,51,18,18,20,-48,-2,69,5,-49,-3,-6,10,88,10,-73,-21,-36,7,102,10,-56,-14,-52,-5,78,16,6,10,-42,-1,37,7,6,-6,5,20,-20,1,-19,-42,63,39,-42,13,-28,-57,68,33,-57,11,-9,-49,45,6,-85,5,22,-15,48,-7,-74,-10,12,26,37,-4,-27,-11,11,8,-3,-1,9,17,40,14,-56,-24,38,39,46,-4,-83,-6,60,-2,8,-6,-52,31,49,-19,-29,-25,5,39,34,-16,-62,-22,19,4,5,-1,-26,-1,6,-39,-27,13,25,33,4,-56,-35,27,28,10,-4,-18,-21,-2,8,-14,-9,21,15,-5,-1,-13,-9,35,26,-5,2,-15,-21,16,23,3,-5,5,1,-9,12,6,-18,15,24,-10,-2,-12,-30,8,27,0,-13,-21,-38,-4,28,-6,-22,-1,6,-3,1,-4,-21,7,35,18,-11,-26,-8,17,22,11,-7,-11,8,13,6,3,-14,11,38,-7,-15,2,-18,6,42,12,-3,7,-21,-1,41,0,-5,19,-21,-12,27,-15,-20,29,4,3,19,-36,-21,33,5,-5,6,-32,-15,19,-4,-1,1,-21,-2,15,-1,0,-4,-11,5,-5,-8,2,-18,-9,12,0,2,-6,-19,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}

void DebugLog(const char *s)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
//	STLBLE_PRINTF("%s", s);
//	sprintf("%s", s);
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <__tcf_0>:
//      __WFI();
//  }

//	int16_t audio_buffer[16000]=WAVE_DATA;
  	int8_t audio_buffer[3920];
	static tflite::MicroErrorReporter micro_error_reporter;
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4801      	ldr	r0, [pc, #4]	; (8000fd0 <__tcf_0+0xc>)
 8000fca:	f7ff ffcf 	bl	8000f6c <_ZN6tflite18MicroErrorReporterD1Ev>
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <__tcf_1>:
//	{
//		STLBLE_PRINTF("Model provided is schema version %d not equal to supported version %d.",
//							 model->version(), TFLITE_SCHEMA_VERSION);
//	}
//	static tflite::AllOpsResolver resolver;
	static tflite::MicroMutableOpResolver<9> micro_op_resolver;
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <__tcf_1+0xc>)
 8000fda:	f000 fb2d 	bl	8001638 <_ZN6tflite22MicroMutableOpResolverILj9EED1Ev>
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20015940 	.word	0x20015940

08000fe4 <__tcf_2>:
	micro_op_resolver.AddTranspose();
	micro_op_resolver.AddMul();
	micro_op_resolver.AddAdd();
	micro_op_resolver.AddStridedSlice();

	static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4801      	ldr	r0, [pc, #4]	; (8000ff0 <__tcf_2+0xc>)
 8000fea:	f00a fb2f 	bl	800b64c <_ZN6tflite16MicroInterpreterD1Ev>
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20015aa4 	.word	0x20015aa4

08000ff4 <main>:
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	f6ad 7d78 	subw	sp, sp, #3960	; 0xf78
 8000ffa:	af04      	add	r7, sp, #16
  HAL_Init();
 8000ffc:	f000 fe54 	bl	8001ca8 <HAL_Init>
  SystemClock_Config();
 8001000:	f7ff fe94 	bl	8000d2c <SystemClock_Config>
  HAL_PWREx_EnableVddUSB();
 8001004:	f001 fcae 	bl	8002964 <HAL_PWREx_EnableVddUSB>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	496e      	ldr	r1, [pc, #440]	; (80011c4 <main+0x1d0>)
 800100c:	486e      	ldr	r0, [pc, #440]	; (80011c8 <main+0x1d4>)
 800100e:	f003 fad1 	bl	80045b4 <USBD_Init>
  USBD_RegisterClass(&hUSBDDevice, USBD_CDC_CLASS);
 8001012:	496e      	ldr	r1, [pc, #440]	; (80011cc <main+0x1d8>)
 8001014:	486c      	ldr	r0, [pc, #432]	; (80011c8 <main+0x1d4>)
 8001016:	f003 fae0 	bl	80045da <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 800101a:	496d      	ldr	r1, [pc, #436]	; (80011d0 <main+0x1dc>)
 800101c:	486a      	ldr	r0, [pc, #424]	; (80011c8 <main+0x1d4>)
 800101e:	f003 fa96 	bl	800454e <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 8001022:	4869      	ldr	r0, [pc, #420]	; (80011c8 <main+0x1d4>)
 8001024:	f003 faef 	bl	8004606 <USBD_Start>
	static tflite::MicroErrorReporter micro_error_reporter;
 8001028:	4b6a      	ldr	r3, [pc, #424]	; (80011d4 <main+0x1e0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f3bf 8f5b 	dmb	ish
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d010      	beq.n	8001064 <main+0x70>
 8001042:	4864      	ldr	r0, [pc, #400]	; (80011d4 <main+0x1e0>)
 8001044:	f017 fe70 	bl	8018d28 <__cxa_guard_acquire>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <main+0x70>
 8001058:	485f      	ldr	r0, [pc, #380]	; (80011d8 <main+0x1e4>)
 800105a:	f018 f973 	bl	8019344 <atexit>
 800105e:	485d      	ldr	r0, [pc, #372]	; (80011d4 <main+0x1e0>)
 8001060:	f017 fe6e 	bl	8018d40 <__cxa_guard_release>
	error_reporter = &micro_error_reporter;
 8001064:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <main+0x1e8>)
 8001066:	4a5e      	ldr	r2, [pc, #376]	; (80011e0 <main+0x1ec>)
 8001068:	601a      	str	r2, [r3, #0]
	model = tflite::GetModel(kwt);
 800106a:	485e      	ldr	r0, [pc, #376]	; (80011e4 <main+0x1f0>)
 800106c:	f7ff ff0a 	bl	8000e84 <_ZN6tflite8GetModelEPKv>
 8001070:	4603      	mov	r3, r0
 8001072:	4a5d      	ldr	r2, [pc, #372]	; (80011e8 <main+0x1f4>)
 8001074:	6013      	str	r3, [r2, #0]
	static tflite::MicroMutableOpResolver<9> micro_op_resolver;
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <main+0x1f8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f3bf 8f5b 	dmb	ish
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf0c      	ite	eq
 8001086:	2301      	moveq	r3, #1
 8001088:	2300      	movne	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d014      	beq.n	80010ba <main+0xc6>
 8001090:	4856      	ldr	r0, [pc, #344]	; (80011ec <main+0x1f8>)
 8001092:	f017 fe49 	bl	8018d28 <__cxa_guard_acquire>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d009      	beq.n	80010ba <main+0xc6>
 80010a6:	2100      	movs	r1, #0
 80010a8:	4851      	ldr	r0, [pc, #324]	; (80011f0 <main+0x1fc>)
 80010aa:	f000 f901 	bl	80012b0 <_ZN6tflite22MicroMutableOpResolverILj9EEC1EPNS_13ErrorReporterE>
 80010ae:	4851      	ldr	r0, [pc, #324]	; (80011f4 <main+0x200>)
 80010b0:	f018 f948 	bl	8019344 <atexit>
 80010b4:	484d      	ldr	r0, [pc, #308]	; (80011ec <main+0x1f8>)
 80010b6:	f017 fe43 	bl	8018d40 <__cxa_guard_release>
	micro_op_resolver.AddFullyConnected();
 80010ba:	484d      	ldr	r0, [pc, #308]	; (80011f0 <main+0x1fc>)
 80010bc:	f000 f918 	bl	80012f0 <_ZN6tflite22MicroMutableOpResolverILj9EE17AddFullyConnectedEv>
	micro_op_resolver.AddReshape();
 80010c0:	484b      	ldr	r0, [pc, #300]	; (80011f0 <main+0x1fc>)
 80010c2:	f000 f92d 	bl	8001320 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddReshapeEv>
	micro_op_resolver.AddConcatenation();
 80010c6:	484a      	ldr	r0, [pc, #296]	; (80011f0 <main+0x1fc>)
 80010c8:	f000 f942 	bl	8001350 <_ZN6tflite22MicroMutableOpResolverILj9EE16AddConcatenationEv>
	micro_op_resolver.AddSoftmax();
 80010cc:	4848      	ldr	r0, [pc, #288]	; (80011f0 <main+0x1fc>)
 80010ce:	f000 f957 	bl	8001380 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddSoftmaxEv>
	micro_op_resolver.AddL2Normalization();
 80010d2:	4847      	ldr	r0, [pc, #284]	; (80011f0 <main+0x1fc>)
 80010d4:	f000 f96c 	bl	80013b0 <_ZN6tflite22MicroMutableOpResolverILj9EE18AddL2NormalizationEv>
	micro_op_resolver.AddTranspose();
 80010d8:	4845      	ldr	r0, [pc, #276]	; (80011f0 <main+0x1fc>)
 80010da:	f000 f981 	bl	80013e0 <_ZN6tflite22MicroMutableOpResolverILj9EE12AddTransposeEv>
	micro_op_resolver.AddMul();
 80010de:	4844      	ldr	r0, [pc, #272]	; (80011f0 <main+0x1fc>)
 80010e0:	f000 f996 	bl	8001410 <_ZN6tflite22MicroMutableOpResolverILj9EE6AddMulEv>
	micro_op_resolver.AddAdd();
 80010e4:	4842      	ldr	r0, [pc, #264]	; (80011f0 <main+0x1fc>)
 80010e6:	f000 f9ab 	bl	8001440 <_ZN6tflite22MicroMutableOpResolverILj9EE6AddAddEv>
	micro_op_resolver.AddStridedSlice();
 80010ea:	4841      	ldr	r0, [pc, #260]	; (80011f0 <main+0x1fc>)
 80010ec:	f000 f9c0 	bl	8001470 <_ZN6tflite22MicroMutableOpResolverILj9EE15AddStridedSliceEv>
	static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <main+0x204>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f3bf 8f5b 	dmb	ish
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01f      	beq.n	800114a <main+0x156>
 800110a:	483b      	ldr	r0, [pc, #236]	; (80011f8 <main+0x204>)
 800110c:	f017 fe0c 	bl	8018d28 <__cxa_guard_acquire>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d014      	beq.n	800114a <main+0x156>
 8001120:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <main+0x1f4>)
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <main+0x1e8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	9202      	str	r2, [sp, #8]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f44f 33aa 	mov.w	r3, #87040	; 0x15400
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <main+0x208>)
 8001136:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <main+0x1fc>)
 8001138:	4831      	ldr	r0, [pc, #196]	; (8001200 <main+0x20c>)
 800113a:	f00a fa4a 	bl	800b5d2 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 800113e:	4831      	ldr	r0, [pc, #196]	; (8001204 <main+0x210>)
 8001140:	f018 f900 	bl	8019344 <atexit>
 8001144:	482c      	ldr	r0, [pc, #176]	; (80011f8 <main+0x204>)
 8001146:	f017 fdfb 	bl	8018d40 <__cxa_guard_release>
	interpreter = &static_interpreter;
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <main+0x214>)
 800114c:	4a2c      	ldr	r2, [pc, #176]	; (8001200 <main+0x20c>)
 800114e:	601a      	str	r2, [r3, #0]
	TfLiteStatus allocate_status = interpreter->AllocateTensors();
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <main+0x214>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f00a fb03 	bl	800b760 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 3f67 	strb.w	r3, [r7, #3943]	; 0xf67
//	if (allocate_status != kTfLiteOk)
//	{
//		STLBLE_PRINTF("AllocateTensors() failed");
//	}

	model_input = interpreter->input(0);
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <main+0x214>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00a fcae 	bl	800bac8 <_ZN6tflite16MicroInterpreter5inputEj>
 800116c:	4603      	mov	r3, r0
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <main+0x218>)
 8001170:	6013      	str	r3, [r2, #0]
	model_output = interpreter->output(0);
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <main+0x214>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00a fccf 	bl	800bb1c <_ZN6tflite16MicroInterpreter6outputEj>
 800117e:	4603      	mov	r3, r0
 8001180:	4a23      	ldr	r2, [pc, #140]	; (8001210 <main+0x21c>)
 8001182:	6013      	str	r3, [r2, #0]
	while (1)
	{
//	 Calculate an x value to feed into the model
//		STLBLE_PRINTF("Running Inference!\n");

		model_input->data.int8 = audio_buffer;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <main+0x218>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1d3a      	adds	r2, r7, #4
 800118a:	605a      	str	r2, [r3, #4]
//		model_input->data.i16= audio_buffer;

		// Run inference, and report any error
	    start = HAL_GetTick();
 800118c:	f000 fdae 	bl	8001cec <HAL_GetTick>
 8001190:	f8c7 0f60 	str.w	r0, [r7, #3936]	; 0xf60
		TfLiteStatus invoke_status = interpreter->Invoke();
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <main+0x214>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f00a fbfd 	bl	800b998 <_ZN6tflite16MicroInterpreter6InvokeEv>
 800119e:	4603      	mov	r3, r0
 80011a0:	f887 3f5f 	strb.w	r3, [r7, #3935]	; 0xf5f
		elapsed = HAL_GetTick() - start;
 80011a4:	f000 fda2 	bl	8001cec <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	; 0xf60
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f8c7 3f58 	str.w	r3, [r7, #3928]	; 0xf58
//		{
//			STLBLE_PRINTF("Invoke failed\n");
//		}

		// Read the predicted y value from the model's output tensor
			auto y_val = (*model_output->data.f);
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <main+0x21c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f607 7254 	addw	r2, r7, #3924	; 0xf54
 80011c0:	6013      	str	r3, [r2, #0]

//			float y_val= model_output->data.f[0];

		// Do something with the results
//			handle_output(error_reporter, x_val, y_val);
	}
 80011c2:	e7df      	b.n	8001184 <main+0x190>
 80011c4:	20000058 	.word	0x20000058
 80011c8:	20015620 	.word	0x20015620
 80011cc:	20000158 	.word	0x20000158
 80011d0:	20000010 	.word	0x20000010
 80011d4:	2001593c 	.word	0x2001593c
 80011d8:	08000fc5 	.word	0x08000fc5
 80011dc:	2000020c 	.word	0x2000020c
 80011e0:	20000004 	.word	0x20000004
 80011e4:	0801a4c8 	.word	0x0801a4c8
 80011e8:	20000210 	.word	0x20000210
 80011ec:	20015aa0 	.word	0x20015aa0
 80011f0:	20015940 	.word	0x20015940
 80011f4:	08000fd5 	.word	0x08000fd5
 80011f8:	20015b24 	.word	0x20015b24
 80011fc:	20000220 	.word	0x20000220
 8001200:	20015aa4 	.word	0x20015aa4
 8001204:	08000fe5 	.word	0x08000fe5
 8001208:	20000214 	.word	0x20000214
 800120c:	20000218 	.word	0x20000218
 8001210:	2000021c 	.word	0x2000021c

08001214 <HAL_TIM_PeriodElapsedCallback>:
//
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim == (&TimHandle))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d102      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
     CDC_TIM_PeriodElapsedCallback(htim);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fb61 	bl	80018ec <CDC_TIM_PeriodElapsedCallback>
  }
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20015b2c 	.word	0x20015b2c

08001238 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence
 * @param  None
 * @retval None
 */
void Error_Handler( void )
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x4>

0800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001246:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
}

template<typename T> const T *GetRoot(const void *buf) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f91f 	bl	80014a0 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001262:	4603      	mov	r3, r0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	0804d780 	.word	0x0804d780

0800128c <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ffe8 	bl	800126c <_ZN6tflite10OpResolverC1Ev>
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0804d75c 	.word	0x0804d75c

080012b0 <_ZN6tflite22MicroMutableOpResolverILj9EEC1EPNS_13ErrorReporterE>:
namespace tflite {

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ffe5 	bl	800128c <_ZN6tflite15MicroOpResolverC1Ev>
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <_ZN6tflite22MicroMutableOpResolverILj9EEC1EPNS_13ErrorReporterE+0x3c>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	0804d738 	.word	0x0804d738

080012f0 <_ZN6tflite22MicroMutableOpResolverILj9EE17AddFullyConnectedEv>:
  TfLiteStatus AddFloor() {
    return AddBuiltin(BuiltinOperator_FLOOR,
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
  }

  TfLiteStatus AddFullyConnected() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f013 fe49 	bl	8014f94 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <_ZN6tflite22MicroMutableOpResolverILj9EE17AddFullyConnectedEv+0x2c>)
 8001308:	2109      	movs	r1, #9
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f8da 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001310:	4603      	mov	r3, r0
                      ParseFullyConnected);
  }
 8001312:	4618      	mov	r0, r3
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	0800563d 	.word	0x0800563d

08001320 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4618      	mov	r0, r3
 800132e:	f00e ffd5 	bl	80102dc <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    return AddBuiltin(BuiltinOperator_RESHAPE,
 8001332:	f107 0208 	add.w	r2, r7, #8
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <_ZN6tflite22MicroMutableOpResolverILj9EE10AddReshapeEv+0x2c>)
 8001338:	2116      	movs	r1, #22
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8c2 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001340:	4603      	mov	r3, r0
  }
 8001342:	4618      	mov	r0, r3
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	08005909 	.word	0x08005909

08001350 <_ZN6tflite22MicroMutableOpResolverILj9EE16AddConcatenationEv>:
  TfLiteStatus AddConcatenation() {
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
                      tflite::ops::micro::Register_CONCATENATION(),
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f00c fa01 	bl	800d764 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>
    return AddBuiltin(BuiltinOperator_CONCATENATION,
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <_ZN6tflite22MicroMutableOpResolverILj9EE16AddConcatenationEv+0x2c>)
 8001368:	2102      	movs	r1, #2
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f8aa 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001370:	4603      	mov	r3, r0
  }
 8001372:	4618      	mov	r0, r3
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	0800555d 	.word	0x0800555d

08001380 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddSoftmaxEv>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax() {
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_SOFTMAX,
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4618      	mov	r0, r3
 800138e:	f015 f9b5 	bl	80166fc <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
    return AddBuiltin(BuiltinOperator_SOFTMAX,
 8001392:	f107 0208 	add.w	r2, r7, #8
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <_ZN6tflite22MicroMutableOpResolverILj9EE10AddSoftmaxEv+0x2c>)
 8001398:	2119      	movs	r1, #25
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f892 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80013a0:	4603      	mov	r3, r0
  }
 80013a2:	4618      	mov	r0, r3
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08005a05 	.word	0x08005a05

080013b0 <_ZN6tflite22MicroMutableOpResolverILj9EE18AddL2NormalizationEv>:
  TfLiteStatus AddL2Normalization() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
                      tflite::ops::micro::Register_L2_NORMALIZATION(),
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4618      	mov	r0, r3
 80013be:	f00d fe67 	bl	800f090 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>
    return AddBuiltin(BuiltinOperator_L2_NORMALIZATION,
 80013c2:	f107 0208 	add.w	r2, r7, #8
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <_ZN6tflite22MicroMutableOpResolverILj9EE18AddL2NormalizationEv+0x2c>)
 80013c8:	210b      	movs	r1, #11
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f87a 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80013d0:	4603      	mov	r3, r0
  }
 80013d2:	4618      	mov	r0, r3
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08005779 	.word	0x08005779

080013e0 <_ZN6tflite22MicroMutableOpResolverILj9EE12AddTransposeEv>:
  TfLiteStatus AddTanh() {
    return AddBuiltin(BuiltinOperator_TANH, tflite::ops::micro::Register_TANH(),
                      ParseTanh);
  }

  TfLiteStatus AddTranspose() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
     return AddBuiltin(BuiltinOperator_TRANSPOSE, tflite::ops::micro::Register_TRANSPOSE(),
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f011 f8a7 	bl	8012540 <_ZN6tflite3ops5micro18Register_TRANSPOSEEv>
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <_ZN6tflite22MicroMutableOpResolverILj9EE12AddTransposeEv+0x2c>)
 80013f8:	2127      	movs	r1, #39	; 0x27
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f862 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001400:	4603      	mov	r3, r0
                       ParseTranspose);
  }
 8001402:	4618      	mov	r0, r3
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08005be1 	.word	0x08005be1

08001410 <_ZN6tflite22MicroMutableOpResolverILj9EE6AddMulEv>:
  TfLiteStatus AddMul() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_MUL, tflite::ops::micro::Register_MUL(),
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	4618      	mov	r0, r3
 800141e:	f014 fb13 	bl	8015a48 <_ZN6tflite3ops5micro12Register_MULEv>
 8001422:	f107 0208 	add.w	r2, r7, #8
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <_ZN6tflite22MicroMutableOpResolverILj9EE6AddMulEv+0x2c>)
 8001428:	2112      	movs	r1, #18
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f84a 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001430:	4603      	mov	r3, r0
  }
 8001432:	4618      	mov	r0, r3
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	08005841 	.word	0x08005841

08001440 <_ZN6tflite22MicroMutableOpResolverILj9EE6AddAddEv>:
  TfLiteStatus AddAdd() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_ADD, tflite::ops::micro::Register_ADD(),
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	4618      	mov	r0, r3
 800144e:	f012 fcab 	bl	8013da8 <_ZN6tflite3ops5micro12Register_ADDEv>
 8001452:	f107 0208 	add.w	r2, r7, #8
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <_ZN6tflite22MicroMutableOpResolverILj9EE6AddAddEv+0x2c>)
 8001458:	2100      	movs	r1, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f832 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001460:	4603      	mov	r3, r0
  }
 8001462:	4618      	mov	r0, r3
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	08005495 	.word	0x08005495

08001470 <_ZN6tflite22MicroMutableOpResolverILj9EE15AddStridedSliceEv>:
  TfLiteStatus AddStridedSlice() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
                      tflite::ops::micro::Register_STRIDED_SLICE(),
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f00f fb57 	bl	8010b30 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>
    return AddBuiltin(BuiltinOperator_STRIDED_SLICE,
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <_ZN6tflite22MicroMutableOpResolverILj9EE15AddStridedSliceEv+0x2c>)
 8001488:	212d      	movs	r1, #45	; 0x2d
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f81a 	bl	80014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001490:	4603      	mov	r3, r0
  }
 8001492:	4618      	mov	r0, r3
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	08005ac9 	.word	0x08005ac9

080014a0 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  EndianCheck();
 80014a8:	f7ff fcd2 	bl	8000e50 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fec4 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4413      	add	r3, r2
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80014c4:	b5b0      	push	{r4, r5, r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	460b      	mov	r3, r1
 80014d2:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d10d      	bne.n	80014f6 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80014ea:	493a      	ldr	r1, [pc, #232]	; (80015d4 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fc79 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06a      	b.n	80015cc <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (FindOp(op) != nullptr) {
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3310      	adds	r3, #16
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	7afa      	ldrb	r2, [r7, #11]
 8001500:	4611      	mov	r1, r2
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	4798      	blx	r3
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf14      	ite	ne
 800150c:	2301      	movne	r3, #1
 800150e:	2300      	moveq	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00e      	beq.n	8001534 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001526:	7afa      	ldrb	r2, [r7, #11]
 8001528:	492b      	ldr	r1, [pc, #172]	; (80015d8 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fc5a 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001530:	2301      	movs	r3, #1
 8001532:	e04b      	b.n	80015cc <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (registrations_len_ >= tOpCount) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800153a:	2b08      	cmp	r3, #8
 800153c:	d90e      	bls.n	800155c <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800154e:	7afa      	ldrb	r2, [r7, #11]
 8001550:	2309      	movs	r3, #9
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 8001554:	f003 fc46 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001558:	2301      	movs	r3, #1
 800155a:	e037      	b.n	80015cc <_ZN6tflite22MicroMutableOpResolverILj9EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    registrations_[registrations_len_] = registration;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	4413      	add	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	1d1c      	adds	r4, r3, #4
 800156c:	4615      	mov	r5, r2
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001580:	7afa      	ldrb	r2, [r7, #11]
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	440b      	add	r3, r1
 8001588:	3318      	adds	r3, #24
 800158a:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

    builtin_codes_[num_buitin_ops_] = op;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	7afa      	ldrb	r2, [r7, #11]
 80015a6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    builtin_parsers_[num_buitin_ops_] = parser;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	334c      	adds	r3, #76	; 0x4c
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    return kTfLiteOk;
 80015ca:	2300      	movs	r3, #0
  }
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bdb0      	pop	{r4, r5, r7, pc}
 80015d4:	08047940 	.word	0x08047940
 80015d8:	08047988 	.word	0x08047988
 80015dc:	080479d8 	.word	0x080479d8

080015e0 <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d101      	bne.n	80015f6 <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpENS_15BuiltinOperatorE+0x16>
 80015f2:	2300      	movs	r3, #0
 80015f4:	e019      	b.n	800162a <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e00f      	b.n	800161c <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpENS_15BuiltinOperatorE+0x3c>
      const TfLiteRegistration& registration = registrations_[i];
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	015b      	lsls	r3, r3, #5
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	429a      	cmp	r2, r3
 8001610:	d101      	bne.n	8001616 <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpENS_15BuiltinOperatorE+0x36>
        return &registration;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	e009      	b.n	800162a <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3e9      	bcc.n	80015fc <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001628:	2300      	movs	r3, #0
  }
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <_ZN6tflite22MicroMutableOpResolverILj9EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_ZN6tflite22MicroMutableOpResolverILj9EED1Ev+0x20>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc6d 	bl	8000f28 <_ZN6tflite15MicroOpResolverD1Ev>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	0804d738 	.word	0x0804d738

0800165c <_ZN6tflite22MicroMutableOpResolverILj9EED0Ev>:
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffe7 	bl	8001638 <_ZN6tflite22MicroMutableOpResolverILj9EED1Ev>
 800166a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f017 fb56 	bl	8018d20 <_ZdlPvj>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e017      	b.n	80016be <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpEPKc+0x40>
      const TfLiteRegistration& registration = registrations_[i];
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	015b      	lsls	r3, r3, #5
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	3304      	adds	r3, #4
 8001698:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d10a      	bne.n	80016b8 <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpEPKc+0x3a>
          (strcmp(registration.custom_name, op) == 0)) {
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fd91 	bl	80001d0 <strcmp>
 80016ae:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpEPKc+0x3a>
        return &registration;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	e009      	b.n	80016cc <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3e1      	bcc.n	800168e <_ZNK6tflite22MicroMutableOpResolverILj9EE6FindOpEPKc+0x10>
    return nullptr;
 80016ca:	2300      	movs	r3, #0
  }
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_ZNK6tflite22MicroMutableOpResolverILj9EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80016e6:	2b09      	cmp	r3, #9
 80016e8:	d901      	bls.n	80016ee <_ZNK6tflite22MicroMutableOpResolverILj9EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 80016ea:	f017 fe05 	bl	80192f8 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e012      	b.n	800171a <_ZNK6tflite22MicroMutableOpResolverILj9EE15GetOpDataParserENS_15BuiltinOperatorE+0x46>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	429a      	cmp	r2, r3
 8001704:	d106      	bne.n	8001714 <_ZNK6tflite22MicroMutableOpResolverILj9EE15GetOpDataParserENS_15BuiltinOperatorE+0x40>
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	334c      	adds	r3, #76	; 0x4c
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	e009      	b.n	8001728 <_ZNK6tflite22MicroMutableOpResolverILj9EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3e6      	bcc.n	80016f4 <_ZNK6tflite22MicroMutableOpResolverILj9EE15GetOpDataParserENS_15BuiltinOperatorE+0x20>
    return nullptr;
 8001726:	2300      	movs	r3, #0
  }
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001730:	4770      	bx	lr

08001732 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler>

08001734 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001734:	b508      	push	{r3, lr}
  HAL_IncTick();
 8001736:	f000 facd 	bl	8001cd4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
}
 800173a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800173e:	f000 bb56 	b.w	8001dee <HAL_SYSTICK_IRQHandler>
	...

08001744 <DMA1_Channel4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_DFSDM_DMAx_MIC1_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(&hDmaDfsdm);
 8001744:	4801      	ldr	r0, [pc, #4]	; (800174c <DMA1_Channel4_IRQHandler+0x8>)
 8001746:	f000 bb56 	b.w	8001df6 <HAL_DMA_IRQHandler>
 800174a:	bf00      	nop
 800174c:	20017a88 	.word	0x20017a88

08001750 <DMA2_Channel3_IRQHandler>:
 * @param  None
 * @retval None
*/
void DMA2_Channel3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutSai.hdmatx);
 8001750:	4b01      	ldr	r3, [pc, #4]	; (8001758 <DMA2_Channel3_IRQHandler+0x8>)
 8001752:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001754:	f000 bb4f 	b.w	8001df6 <HAL_DMA_IRQHandler>
 8001758:	20017858 	.word	0x20017858

0800175c <OTG_FS_IRQHandler>:
* @param  None
* @retval None
*/
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 800175c:	4801      	ldr	r0, [pc, #4]	; (8001764 <OTG_FS_IRQHandler+0x8>)
 800175e:	f000 bd19 	b.w	8002194 <HAL_PCD_IRQHandler>
 8001762:	bf00      	nop
 8001764:	20017388 	.word	0x20017388

08001768 <TIM3_IRQHandler>:
}

void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001768:	4801      	ldr	r0, [pc, #4]	; (8001770 <TIM3_IRQHandler+0x8>)
 800176a:	f001 bff9 	b.w	8003760 <HAL_TIM_IRQHandler>
 800176e:	bf00      	nop
 8001770:	20015b2c 	.word	0x20015b2c

08001774 <TIM1_CC_IRQHandler>:
}

void TIM1_CC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimCCHandle);
 8001774:	4801      	ldr	r0, [pc, #4]	; (800177c <TIM1_CC_IRQHandler+0x8>)
 8001776:	f001 bff3 	b.w	8003760 <HAL_TIM_IRQHandler>
 800177a:	bf00      	nop
 800177c:	200158f0 	.word	0x200158f0

08001780 <_sbrk>:
{
	extern char end /*asm("end")*/;
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <_sbrk+0x2c>)
 8001782:	6811      	ldr	r1, [r2, #0]
{
 8001784:	b508      	push	{r3, lr}
 8001786:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001788:	b909      	cbnz	r1, 800178e <_sbrk+0xe>
		heap_end = &end;
 800178a:	4909      	ldr	r1, [pc, #36]	; (80017b0 <_sbrk+0x30>)
 800178c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800178e:	6810      	ldr	r0, [r2, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
#else
	if (heap_end + incr > stack_ptr)
 8001790:	4669      	mov	r1, sp
 8001792:	4403      	add	r3, r0
 8001794:	428b      	cmp	r3, r1
 8001796:	d906      	bls.n	80017a6 <_sbrk+0x26>
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001798:	f018 f906 	bl	80199a8 <__errno>
 800179c:	230c      	movs	r3, #12
 800179e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80017a4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80017a6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80017a8:	e7fc      	b.n	80017a4 <_sbrk+0x24>
 80017aa:	bf00      	nop
 80017ac:	20015b28 	.word	0x20015b28
 80017b0:	20017d38 	.word	0x20017d38

080017b4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80017b4:	2001      	movs	r0, #1
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80017ba:	f018 f8f5 	bl	80199a8 <__errno>
 80017be:	2316      	movs	r3, #22
 80017c0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80017c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c6:	bd08      	pop	{r3, pc}

080017c8 <_exit>:

void _exit (int status)
{
 80017c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80017ca:	f018 f8ed 	bl	80199a8 <__errno>
 80017ce:	2316      	movs	r3, #22
 80017d0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 80017d2:	e7fe      	b.n	80017d2 <_exit+0xa>

080017d4 <_write>:
}

int _write(int file, char *ptr, int len)
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	460d      	mov	r5, r1
 80017d8:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	460e      	mov	r6, r1
 80017dc:	1b73      	subs	r3, r6, r5
 80017de:	429c      	cmp	r4, r3
 80017e0:	dc01      	bgt.n	80017e6 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 80017e2:	4620      	mov	r0, r4
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 80017e6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80017ea:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	e7f5      	b.n	80017dc <_write+0x8>

080017f0 <_close>:

int _close(int file)
{
	return -1;
}
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f4:	4770      	bx	lr

080017f6 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80017f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fa:	604b      	str	r3, [r1, #4]
	return 0;
}
 80017fc:	2000      	movs	r0, #0
 80017fe:	4770      	bx	lr

08001800 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001800:	2001      	movs	r0, #1
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001804:	2000      	movs	r0, #0
 8001806:	4770      	bx	lr

08001808 <_read>:

int _read(int file, char *ptr, int len)
{
 8001808:	b510      	push	{r4, lr}
 800180a:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 800180c:	f3af 8000 	nop.w
 8001810:	7020      	strb	r0, [r4, #0]
	return 1;
}
 8001812:	2001      	movs	r0, #1
 8001814:	bd10      	pop	{r4, pc}

08001816 <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 8001816:	2000      	movs	r0, #0
 8001818:	4770      	bx	lr
	...

0800181c <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800181c:	2820      	cmp	r0, #32
 800181e:	d003      	beq.n	8001828 <CDC_Itf_Control+0xc>
 8001820:	2821      	cmp	r0, #33	; 0x21
 8001822:	d00b      	beq.n	800183c <CDC_Itf_Control+0x20>
  default:
    break;
  }
  
  return (USBD_OK);
}
 8001824:	2000      	movs	r0, #0
 8001826:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <CDC_Itf_Control+0x44>)
 800182a:	680a      	ldr	r2, [r1, #0]
 800182c:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800182e:	790a      	ldrb	r2, [r1, #4]
 8001830:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 8001832:	794a      	ldrb	r2, [r1, #5]
 8001834:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 8001836:	798a      	ldrb	r2, [r1, #6]
 8001838:	719a      	strb	r2, [r3, #6]
    break;
 800183a:	e7f3      	b.n	8001824 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <CDC_Itf_Control+0x44>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	0a12      	lsrs	r2, r2, #8
 8001846:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8001848:	885a      	ldrh	r2, [r3, #2]
 800184a:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800184c:	78da      	ldrb	r2, [r3, #3]
 800184e:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8001850:	791a      	ldrb	r2, [r3, #4]
 8001852:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8001854:	795a      	ldrb	r2, [r3, #5]
 8001856:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8001858:	799b      	ldrb	r3, [r3, #6]
 800185a:	718b      	strb	r3, [r1, #6]
    break;
 800185c:	e7e2      	b.n	8001824 <CDC_Itf_Control+0x8>
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008

08001864 <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 8001864:	2000      	movs	r0, #0
 8001866:	4770      	bx	lr

08001868 <CDC_Itf_Init>:
  TIMx_CLK_ENABLE();
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <CDC_Itf_Init+0x6c>)
{
 800186a:	b507      	push	{r0, r1, r2, lr}
  TIMx_CLK_ENABLE();
 800186c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800186e:	f042 0202 	orr.w	r2, r2, #2
 8001872:	659a      	str	r2, [r3, #88]	; 0x58
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2106      	movs	r1, #6
 8001880:	201d      	movs	r0, #29
  TIMx_CLK_ENABLE();
 8001882:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 8001884:	f000 fa5e 	bl	8001d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8001888:	201d      	movs	r0, #29
 800188a:	f000 fa8d 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <CDC_Itf_Init+0x70>)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <CDC_Itf_Init+0x74>)
 8001892:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8001894:	f241 3387 	movw	r3, #4999	; 0x1387
 8001898:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 800189a:	234f      	movs	r3, #79	; 0x4f
 800189c:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 80018a4:	f002 f872 	bl	800398c <HAL_TIM_Base_Init>
 80018a8:	b108      	cbz	r0, 80018ae <CDC_Itf_Init+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80018aa:	f7ff fcc5 	bl	8001238 <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80018ae:	480a      	ldr	r0, [pc, #40]	; (80018d8 <CDC_Itf_Init+0x70>)
 80018b0:	f001 ff18 	bl	80036e4 <HAL_TIM_Base_Start_IT>
 80018b4:	b108      	cbz	r0, 80018ba <CDC_Itf_Init+0x52>
    Error_Handler();
 80018b6:	f7ff fcbf 	bl	8001238 <Error_Handler>
  USBD_CDC_SetTxBuffer(&hUSBDDevice, UserTxBuffer, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	4908      	ldr	r1, [pc, #32]	; (80018e0 <CDC_Itf_Init+0x78>)
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <CDC_Itf_Init+0x7c>)
 80018c0:	f002 fe4c 	bl	800455c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 80018c4:	4908      	ldr	r1, [pc, #32]	; (80018e8 <CDC_Itf_Init+0x80>)
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <CDC_Itf_Init+0x7c>)
 80018c8:	f002 fe53 	bl	8004572 <USBD_CDC_SetRxBuffer>
}
 80018cc:	2000      	movs	r0, #0
 80018ce:	b003      	add	sp, #12
 80018d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80018d4:	40021000 	.word	0x40021000
 80018d8:	20015b2c 	.word	0x20015b2c
 80018dc:	40000400 	.word	0x40000400
 80018e0:	20015b78 	.word	0x20015b78
 80018e4:	20015620 	.word	0x20015620
 80018e8:	20016378 	.word	0x20016378

080018ec <CDC_TIM_PeriodElapsedCallback>:
{
 80018ec:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80018ee:	4d0e      	ldr	r5, [pc, #56]	; (8001928 <CDC_TIM_PeriodElapsedCallback+0x3c>)
 80018f0:	e955 432b 	ldrd	r4, r3, [r5, #-172]	; 0xac
 80018f4:	42a3      	cmp	r3, r4
 80018f6:	d016      	beq.n	8001926 <CDC_TIM_PeriodElapsedCallback+0x3a>
    USBD_CDC_SetTxBuffer(&hUSBDDevice, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <CDC_TIM_PeriodElapsedCallback+0x40>)
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <CDC_TIM_PeriodElapsedCallback+0x44>)
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80018fc:	bf8c      	ite	hi
 80018fe:	f5c3 6400 	rsbhi	r4, r3, #2048	; 0x800
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8001902:	1ae4      	subls	r4, r4, r3
    USBD_CDC_SetTxBuffer(&hUSBDDevice, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8001904:	4622      	mov	r2, r4
 8001906:	4419      	add	r1, r3
 8001908:	f002 fe28 	bl	800455c <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&hUSBDDevice) == USBD_OK)
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <CDC_TIM_PeriodElapsedCallback+0x44>)
 800190e:	f002 fe39 	bl	8004584 <USBD_CDC_TransmitPacket>
 8001912:	b940      	cbnz	r0, 8001926 <CDC_TIM_PeriodElapsedCallback+0x3a>
      UserTxBufPtrOut += buffsize;
 8001914:	f855 3ca8 	ldr.w	r3, [r5, #-168]
 8001918:	441c      	add	r4, r3
 800191a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800191e:	bf18      	it	ne
 8001920:	4620      	movne	r0, r4
 8001922:	f845 0ca8 	str.w	r0, [r5, #-168]
}
 8001926:	bd38      	pop	{r3, r4, r5, pc}
 8001928:	20016c24 	.word	0x20016c24
 800192c:	20015b78 	.word	0x20015b78
 8001930:	20015620 	.word	0x20015620

08001934 <HAL_PCD_MspInit>:
* @brief  Initializes the PCD MSP.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8001934:	b530      	push	{r4, r5, lr}
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 8001936:	6803      	ldr	r3, [r0, #0]
 8001938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800193c:	b089      	sub	sp, #36	; 0x24
  if(hpcd->Instance == USB_OTG_FS)
 800193e:	d12a      	bne.n	8001996 <HAL_PCD_MspInit+0x62>
  {
    /* Configure USB FS GPIOs */
    __GPIOA_CLK_ENABLE();
 8001940:	4c16      	ldr	r4, [pc, #88]	; (800199c <HAL_PCD_MspInit+0x68>)
 8001942:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64e3      	str	r3, [r4, #76]	; 0x4c
 800194a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	9b01      	ldr	r3, [sp, #4]
    
    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001954:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001958:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2500      	movs	r5, #0
 8001960:	2302      	movs	r3, #2
 8001962:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8001966:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001968:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800196e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8001970:	f000 fa8c 	bl	8001e8c <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __USB_OTG_FS_CLK_ENABLE();
 8001974:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001976:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800197c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800197e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001982:	9302      	str	r3, [sp, #8]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8001984:	2043      	movs	r0, #67	; 0x43
 8001986:	462a      	mov	r2, r5
 8001988:	2106      	movs	r1, #6
    __USB_OTG_FS_CLK_ENABLE();
 800198a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800198c:	f000 f9da 	bl	8001d44 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001990:	2043      	movs	r0, #67	; 0x43
 8001992:	f000 fa09 	bl	8001da8 <HAL_NVIC_EnableIRQ>
  } 
}
 8001996:	b009      	add	sp, #36	; 0x24
 8001998:	bd30      	pop	{r4, r5, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_PCD_SetupStageCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80019a0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80019a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019a8:	f002 be3e 	b.w	8004628 <USBD_LL_SetupStage>

080019ac <HAL_PCD_DataOutStageCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80019ac:	231c      	movs	r3, #28
 80019ae:	fb03 0301 	mla	r3, r3, r1, r0
 80019b2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80019ba:	f002 be65 	b.w	8004688 <USBD_LL_DataOutStage>

080019be <HAL_PCD_DataInStageCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80019be:	231c      	movs	r3, #28
 80019c0:	fb03 0301 	mla	r3, r3, r1, r0
 80019c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ca:	f002 be8d 	b.w	80046e8 <USBD_LL_DataInStage>

080019ce <HAL_PCD_SOFCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80019ce:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019d2:	f002 bf1f 	b.w	8004814 <USBD_LL_SOF>

080019d6 <HAL_PCD_ResetCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80019d6:	b510      	push	{r4, lr}
 80019d8:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80019da:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019de:	f002 fed5 	bl	800478c <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80019e2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80019e6:	2101      	movs	r1, #1
}
 80019e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80019ec:	f002 befa 	b.w	80047e4 <USBD_LL_SetSpeed>

080019f0 <HAL_PCD_SuspendCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Suspend(hpcd->pData);
 80019f0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019f4:	f002 bef9 	b.w	80047ea <USBD_LL_Suspend>

080019f8 <HAL_PCD_ResumeCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 80019f8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019fc:	f002 beff 	b.w	80047fe <USBD_LL_Resume>

08001a00 <HAL_PCD_ISOOUTIncompleteCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8001a00:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a04:	f002 bf28 	b.w	8004858 <USBD_LL_IsoOUTIncomplete>

08001a08 <HAL_PCD_ISOINIncompleteCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8001a08:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a0c:	f002 bf13 	b.w	8004836 <USBD_LL_IsoINIncomplete>

08001a10 <HAL_PCD_ConnectCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8001a10:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a14:	f002 bf31 	b.w	800487a <USBD_LL_DevConnected>

08001a18 <HAL_PCD_DisconnectCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8001a18:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a1c:	f002 bf2f 	b.w	800487e <USBD_LL_DevDisconnected>

08001a20 <USBD_LL_Init>:
*         Initialize the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{
 8001a20:	b538      	push	{r3, r4, r5, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <USBD_LL_Init+0x58>)
  /* Change Systick prioity */
  NVIC_SetPriority (SysTick_IRQn, 0);  
  
  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8001a24:	4c15      	ldr	r4, [pc, #84]	; (8001a7c <USBD_LL_Init+0x5c>)
 8001a26:	2500      	movs	r5, #0
 8001a28:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
  hpcd.Init.dev_endpoints = 3; 
 8001a2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a30:	2303      	movs	r3, #3
 8001a32:	e9c4 2300 	strd	r2, r3, [r4]
  hpcd.Init.use_dedicated_ep1 = 0;
  hpcd.Init.ep0_mps = 0x40;  
 8001a36:	2340      	movs	r3, #64	; 0x40
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED; 
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8001a38:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  hpcd.Init.dma_enable = 0;
 8001a3c:	e9c4 5304 	strd	r5, r3, [r4, #16]
  pdev->pData = &hpcd;
 8001a40:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED; 
 8001a44:	2302      	movs	r3, #2
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8001a46:	4620      	mov	r0, r4
  hpcd.Init.Sof_enable = 0;
 8001a48:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8001a4c:	60e3      	str	r3, [r4, #12]
  hpcd.Init.use_dedicated_ep1 = 0;
 8001a4e:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.low_power_enable = 0;
 8001a50:	6225      	str	r5, [r4, #32]
  hpcd.Init.vbus_sensing_enable = 0;
 8001a52:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 8001a54:	f000 faf6 	bl	8002044 <HAL_PCD_Init>
  
   HAL_PCD_SetRxFiFo(&hpcd, 0x64);
 8001a58:	2164      	movs	r1, #100	; 0x64
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f000 ff59 	bl	8002912 <HAL_PCDEx_SetRxFiFo>
   HAL_PCD_SetTxFiFo(&hpcd, 0, 0x32);
 8001a60:	4629      	mov	r1, r5
 8001a62:	2232      	movs	r2, #50	; 0x32
 8001a64:	4620      	mov	r0, r4
 8001a66:	f000 ff34 	bl	80028d2 <HAL_PCDEx_SetTxFiFo>
   HAL_PCD_SetTxFiFo(&hpcd, 1, 0x64);
 8001a6a:	2264      	movs	r2, #100	; 0x64
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f000 ff2f 	bl	80028d2 <HAL_PCDEx_SetTxFiFo>

  
  return USBD_OK;
}
 8001a74:	4628      	mov	r0, r5
 8001a76:	bd38      	pop	{r3, r4, r5, pc}
 8001a78:	e000ed00 	.word	0xe000ed00
 8001a7c:	20017388 	.word	0x20017388

08001a80 <USBD_LL_Start>:
*         Start the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001a80:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8001a82:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001a86:	f000 fb68 	bl	800215a <HAL_PCD_Start>
  return USBD_OK; 
}
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	bd08      	pop	{r3, pc}

08001a8e <USBD_LL_OpenEP>:
*/
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                     uint8_t  ep_addr,                                      
                                     uint8_t  ep_type,
                                     uint16_t ep_mps)
{
 8001a8e:	b510      	push	{r4, lr}
 8001a90:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData, 
 8001a92:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8001a96:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData, 
 8001a98:	4623      	mov	r3, r4
 8001a9a:	f000 fe03 	bl	80026a4 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
}
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	bd10      	pop	{r4, pc}

08001aa2 <USBD_LL_CloseEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001aa2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001aa4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001aa8:	f000 fe34 	bl	8002714 <HAL_PCD_EP_Close>
  return USBD_OK; 
}
 8001aac:	2000      	movs	r0, #0
 8001aae:	bd08      	pop	{r3, pc}

08001ab0 <USBD_LL_StallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001ab0:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001ab2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001ab6:	f000 fe9d 	bl	80027f4 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
}
 8001aba:	2000      	movs	r0, #0
 8001abc:	bd08      	pop	{r3, pc}

08001abe <USBD_LL_ClearStallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001abe:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8001ac0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001ac4:	f000 fecf 	bl	8002866 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8001ac8:	2000      	movs	r0, #0
 8001aca:	bd08      	pop	{r3, pc}

08001acc <USBD_LL_IsStallEP>:
*/
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
 8001acc:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 8001ad0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8001ad4:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001ad8:	bf1b      	ittet	ne
 8001ada:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001ade:	fb02 3301 	mlane	r3, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001ae2:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001ae6:	f893 003e 	ldrbne.w	r0, [r3, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001aea:	bf08      	it	eq
 8001aec:	f893 01fe 	ldrbeq.w	r0, [r3, #510]	; 0x1fe
  }
}
 8001af0:	4770      	bx	lr

08001af2 <USBD_LL_SetUSBAddress>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8001af2:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001af4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001af8:	f000 fdc0 	bl	800267c <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8001afc:	2000      	movs	r0, #0
 8001afe:	bd08      	pop	{r3, pc}

08001b00 <USBD_LL_Transmit>:
*/
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev,
                                      uint8_t  ep_addr,
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8001b00:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001b02:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001b06:	f000 fe5a 	bl	80027be <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	bd08      	pop	{r3, pc}

08001b0e <USBD_LL_PrepareReceive>:
*/
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
                                           uint8_t  ep_addr,
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8001b0e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001b10:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001b14:	f000 fe2d 	bl	8002772 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8001b18:	2000      	movs	r0, #0
 8001b1a:	bd08      	pop	{r3, pc}

08001b1c <USBD_LL_GetRxDataSize>:
* @param  ep_addr: Endpoint Number
* @retval Recived Data Size
*/
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8001b1c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001b20:	f000 be45 	b.w	80027ae <HAL_PCD_EP_GetRxCount>

08001b24 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8001b24:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 8001b26:	4801      	ldr	r0, [pc, #4]	; (8001b2c <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8001b28:	800b      	strh	r3, [r1, #0]
}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000024 	.word	0x20000024

08001b30 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8001b30:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 8001b32:	4801      	ldr	r0, [pc, #4]	; (8001b38 <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 8001b34:	800b      	strh	r3, [r1, #0]
}
 8001b36:	4770      	bx	lr
 8001b38:	20000038 	.word	0x20000038

08001b3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001b40:	1c4d      	adds	r5, r1, #1
 8001b42:	461e      	mov	r6, r3
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001b44:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 8001b46:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001b4a:	bf34      	ite	cc
 8001b4c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8001b4e:	3437      	addcs	r4, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001b50:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8001b54:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b2dc      	uxtb	r4, r3
 8001b5c:	42a2      	cmp	r2, r4
    value = value << 4;
 8001b5e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 8001b62:	d8ef      	bhi.n	8001b44 <IntToUnicode+0x8>
  }
}
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b68 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8001b68:	231a      	movs	r3, #26
{
 8001b6a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8001b6c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <USBD_VCP_SerialStrDescriptor+0x30>)
 8001b70:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial0 += deviceserial2;
 8001b74:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8001b78:	1880      	adds	r0, r0, r2
 8001b7a:	d00a      	beq.n	8001b92 <USBD_VCP_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8001b7c:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8001b80:	4906      	ldr	r1, [pc, #24]	; (8001b9c <USBD_VCP_SerialStrDescriptor+0x34>)
 8001b82:	2208      	movs	r2, #8
 8001b84:	f7ff ffda 	bl	8001b3c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8001b88:	2204      	movs	r2, #4
 8001b8a:	3110      	adds	r1, #16
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff ffd5 	bl	8001b3c <IntToUnicode>
}
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <USBD_VCP_SerialStrDescriptor+0x38>)
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	bf00      	nop
 8001b98:	1fff7000 	.word	0x1fff7000
 8001b9c:	2000003e 	.word	0x2000003e
 8001ba0:	2000003c 	.word	0x2000003c

08001ba4 <USBD_VCP_ProductStrDescriptor>:
{  
 8001ba4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8001ba6:	4c04      	ldr	r4, [pc, #16]	; (8001bb8 <USBD_VCP_ProductStrDescriptor+0x14>)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <USBD_VCP_ProductStrDescriptor+0x18>)
{  
 8001baa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8001bac:	4621      	mov	r1, r4
 8001bae:	f003 f889 	bl	8004cc4 <USBD_GetString>
}
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20017790 	.word	0x20017790
 8001bbc:	0804d7a4 	.word	0x0804d7a4

08001bc0 <USBD_VCP_ManufacturerStrDescriptor>:
{
 8001bc0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001bc2:	4c04      	ldr	r4, [pc, #16]	; (8001bd4 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 8001bc6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001bc8:	4621      	mov	r1, r4
 8001bca:	f003 f87b 	bl	8004cc4 <USBD_GetString>
}
 8001bce:	4620      	mov	r0, r4
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20017790 	.word	0x20017790
 8001bd8:	0804d7c5 	.word	0x0804d7c5

08001bdc <USBD_VCP_ConfigStrDescriptor>:
{ 
 8001bdc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8001bde:	4c04      	ldr	r4, [pc, #16]	; (8001bf0 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <USBD_VCP_ConfigStrDescriptor+0x18>)
{ 
 8001be2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8001be4:	4621      	mov	r1, r4
 8001be6:	f003 f86d 	bl	8004cc4 <USBD_GetString>
}
 8001bea:	4620      	mov	r0, r4
 8001bec:	bd10      	pop	{r4, pc}
 8001bee:	bf00      	nop
 8001bf0:	20017790 	.word	0x20017790
 8001bf4:	0804d7d8 	.word	0x0804d7d8

08001bf8 <USBD_VCP_InterfaceStrDescriptor>:
{
 8001bf8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8001bfa:	4c04      	ldr	r4, [pc, #16]	; (8001c0c <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 8001bfe:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8001c00:	4621      	mov	r1, r4
 8001c02:	f003 f85f 	bl	8004cc4 <USBD_GetString>
}
 8001c06:	4620      	mov	r0, r4
 8001c08:	bd10      	pop	{r4, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20017790 	.word	0x20017790
 8001c10:	0804d7e3 	.word	0x0804d7e3

08001c14 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	490f      	ldr	r1, [pc, #60]	; (8001c54 <SystemInit+0x40>)
 8001c16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <SystemInit+0x44>)
 8001c24:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c26:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001c2e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001c36:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c48:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c4a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c50:	608b      	str	r3, [r1, #8]
#endif
}
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c62:	4e0f      	ldr	r6, [pc, #60]	; (8001ca0 <HAL_InitTick+0x40>)
 8001c64:	7832      	ldrb	r2, [r6, #0]
{
 8001c66:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001c68:	b90a      	cbnz	r2, 8001c6e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <HAL_InitTick+0x44>)
 8001c78:	6810      	ldr	r0, [r2, #0]
 8001c7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c7e:	f000 f8a1 	bl	8001dc4 <HAL_SYSTICK_Config>
 8001c82:	4604      	mov	r4, r0
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c88:	2d0f      	cmp	r5, #15
 8001c8a:	d8ee      	bhi.n	8001c6a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4629      	mov	r1, r5
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f000 f856 	bl	8001d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c98:	6075      	str	r5, [r6, #4]
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	e7e6      	b.n	8001c6c <HAL_InitTick+0xc>
 8001c9e:	bf00      	nop
 8001ca0:	20000078 	.word	0x20000078
 8001ca4:	20000074 	.word	0x20000074

08001ca8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_Init+0x28>)
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001cb0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb6:	f000 f833 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f7ff ffd0 	bl	8001c60 <HAL_InitTick>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	b918      	cbnz	r0, 8001ccc <HAL_Init+0x24>
    HAL_MspInit();
 8001cc4:	f7ff ffca 	bl	8001c5c <HAL_MspInit>
}
 8001cc8:	4620      	mov	r0, r4
 8001cca:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001ccc:	2401      	movs	r4, #1
 8001cce:	e7fb      	b.n	8001cc8 <HAL_Init+0x20>
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001cd4:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_IncTick+0x10>)
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_IncTick+0x14>)
 8001cd8:	6811      	ldr	r1, [r2, #0]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	440b      	add	r3, r1
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20017b50 	.word	0x20017b50
 8001ce8:	20000078 	.word	0x20000078

08001cec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <HAL_GetTick+0x8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20017b50 	.word	0x20017b50

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b538      	push	{r3, r4, r5, lr}
 8001cfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fff6 	bl	8001cec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d00:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001d02:	bf1c      	itt	ne
 8001d04:	4b05      	ldrne	r3, [pc, #20]	; (8001d1c <HAL_Delay+0x24>)
 8001d06:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001d0a:	bf18      	it	ne
 8001d0c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	f7ff ffed 	bl	8001cec <HAL_GetTick>
 8001d12:	1b43      	subs	r3, r0, r5
 8001d14:	42a3      	cmp	r3, r4
 8001d16:	d3fa      	bcc.n	8001d0e <HAL_Delay+0x16>
  {
  }
}
 8001d18:	bd38      	pop	{r3, r4, r5, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000078 	.word	0x20000078

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d22:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d30:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001d3c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d46:	b530      	push	{r4, r5, lr}
 8001d48:	68dc      	ldr	r4, [r3, #12]
 8001d4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	bf28      	it	cs
 8001d58:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d60:	bf8c      	ite	hi
 8001d62:	3c03      	subhi	r4, #3
 8001d64:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d66:	fa05 f303 	lsl.w	r3, r5, r3
 8001d6a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6e:	40a5      	lsls	r5, r4
 8001d70:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001d76:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	bfac      	ite	ge
 8001d7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	4a08      	ldrlt	r2, [pc, #32]	; (8001da4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	bfb8      	it	lt
 8001d8a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	bfaa      	itet	ge
 8001d92:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d9c:	bd30      	pop	{r4, r5, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	e000ed14 	.word	0xe000ed14

08001da8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001da8:	2800      	cmp	r0, #0
 8001daa:	db07      	blt.n	8001dbc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dac:	0941      	lsrs	r1, r0, #5
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_NVIC_EnableIRQ+0x18>)
 8001db0:	f000 001f 	and.w	r0, r0, #31
 8001db4:	2301      	movs	r3, #1
 8001db6:	4083      	lsls	r3, r0
 8001db8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	3801      	subs	r0, #1
 8001dc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001dca:	d20b      	bcs.n	8001de4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	21f0      	movs	r1, #240	; 0xf0
 8001dd6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dda:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ddc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dde:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001de4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001dec:	4770      	bx	lr

08001dee <HAL_SYSTICK_IRQHandler>:
{
 8001dee:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001df0:	f7ff fffc 	bl	8001dec <HAL_SYSTICK_Callback>
}
 8001df4:	bd08      	pop	{r3, pc}

08001df6 <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001df8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001dfa:	6803      	ldr	r3, [r0, #0]
{
 8001dfc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dfe:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e02:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e04:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e06:	2404      	movs	r4, #4
 8001e08:	4094      	lsls	r4, r2
 8001e0a:	4234      	tst	r4, r6
 8001e0c:	d00e      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x36>
 8001e0e:	f015 0f04 	tst.w	r5, #4
 8001e12:	d00b      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e18:	bf5e      	ittt	pl
 8001e1a:	681a      	ldrpl	r2, [r3, #0]
 8001e1c:	f022 0204 	bicpl.w	r2, r2, #4
 8001e20:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e22:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e24:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8001e26:	b373      	cbz	r3, 8001e86 <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 8001e28:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001e2a:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e2c:	2402      	movs	r4, #2
 8001e2e:	4094      	lsls	r4, r2
 8001e30:	4234      	tst	r4, r6
 8001e32:	d012      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x64>
 8001e34:	f015 0f02 	tst.w	r5, #2
 8001e38:	d00f      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	0695      	lsls	r5, r2, #26
 8001e3e:	d406      	bmi.n	8001e4e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f022 020a 	bic.w	r2, r2, #10
 8001e46:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e4e:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e50:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001e52:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001e56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e58:	e7e5      	b.n	8001e26 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e5a:	2408      	movs	r4, #8
 8001e5c:	4094      	lsls	r4, r2
 8001e5e:	4234      	tst	r4, r6
 8001e60:	d011      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x90>
 8001e62:	072c      	lsls	r4, r5, #28
 8001e64:	d50f      	bpl.n	8001e86 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e66:	681c      	ldr	r4, [r3, #0]
 8001e68:	f024 040e 	bic.w	r4, r4, #14
 8001e6c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e6e:	2301      	movs	r3, #1
 8001e70:	fa03 f202 	lsl.w	r2, r3, r2
 8001e74:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e76:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e78:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e84:	e7cf      	b.n	8001e26 <HAL_DMA_IRQHandler+0x30>
}
 8001e86:	bc70      	pop	{r4, r5, r6}
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8002040 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e94:	4d68      	ldr	r5, [pc, #416]	; (8002038 <HAL_GPIO_Init+0x1ac>)
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e98:	680a      	ldr	r2, [r1, #0]
 8001e9a:	fa32 f403 	lsrs.w	r4, r2, r3
 8001e9e:	d102      	bne.n	8001ea6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001ea0:	b003      	add	sp, #12
 8001ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea6:	f04f 0a01 	mov.w	sl, #1
 8001eaa:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8001eae:	ea1a 0202 	ands.w	r2, sl, r2
 8001eb2:	f000 80b3 	beq.w	800201c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb6:	684c      	ldr	r4, [r1, #4]
 8001eb8:	f024 0e10 	bic.w	lr, r4, #16
 8001ebc:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec0:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec2:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec6:	fa06 f608 	lsl.w	r6, r6, r8
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eca:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ecc:	ea6f 0606 	mvn.w	r6, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed0:	d810      	bhi.n	8001ef4 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 8001ed2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed4:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed8:	68cf      	ldr	r7, [r1, #12]
 8001eda:	fa07 f708 	lsl.w	r7, r7, r8
 8001ede:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8001ee2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ee4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee6:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001eea:	0927      	lsrs	r7, r4, #4
 8001eec:	409f      	lsls	r7, r3
 8001eee:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001ef2:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ef4:	f004 0c03 	and.w	ip, r4, #3
 8001ef8:	f1bc 0f03 	cmp.w	ip, #3
 8001efc:	d108      	bne.n	8001f10 <HAL_GPIO_Init+0x84>
        temp = GPIOx->ASCR;
 8001efe:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f00:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f04:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8001f08:	409f      	lsls	r7, r3
 8001f0a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8001f0e:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001f10:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f12:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f16:	688f      	ldr	r7, [r1, #8]
 8001f18:	fa07 f708 	lsl.w	r7, r7, r8
 8001f1c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f20:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8001f24:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f26:	d116      	bne.n	8001f56 <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3u];
 8001f28:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001f2c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f30:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001f34:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f38:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001f3c:	f04f 0e0f 	mov.w	lr, #15
 8001f40:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001f44:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f48:	690f      	ldr	r7, [r1, #16]
 8001f4a:	fa07 f70b 	lsl.w	r7, r7, fp
 8001f4e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001f52:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001f56:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f58:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f5c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5e:	ea4c 0707 	orr.w	r7, ip, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	00e6      	lsls	r6, r4, #3
      GPIOx->MODER = temp;
 8001f64:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f66:	d559      	bpl.n	800201c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001f6c:	f046 0601 	orr.w	r6, r6, #1
 8001f70:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001f74:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001f78:	f023 0703 	bic.w	r7, r3, #3
 8001f7c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001f80:	f006 0601 	and.w	r6, r6, #1
 8001f84:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001f88:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f90:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f92:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f96:	f04f 0c0f 	mov.w	ip, #15
 8001f9a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f9e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa6:	d03b      	beq.n	8002020 <HAL_GPIO_Init+0x194>
 8001fa8:	4e24      	ldr	r6, [pc, #144]	; (800203c <HAL_GPIO_Init+0x1b0>)
 8001faa:	42b0      	cmp	r0, r6
 8001fac:	d03a      	beq.n	8002024 <HAL_GPIO_Init+0x198>
 8001fae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fb2:	42b0      	cmp	r0, r6
 8001fb4:	d038      	beq.n	8002028 <HAL_GPIO_Init+0x19c>
 8001fb6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fba:	42b0      	cmp	r0, r6
 8001fbc:	d036      	beq.n	800202c <HAL_GPIO_Init+0x1a0>
 8001fbe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fc2:	42b0      	cmp	r0, r6
 8001fc4:	d034      	beq.n	8002030 <HAL_GPIO_Init+0x1a4>
 8001fc6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fca:	42b0      	cmp	r0, r6
 8001fcc:	d032      	beq.n	8002034 <HAL_GPIO_Init+0x1a8>
 8001fce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fd2:	42b0      	cmp	r0, r6
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2606      	moveq	r6, #6
 8001fd8:	2607      	movne	r6, #7
 8001fda:	fa06 f60e 	lsl.w	r6, r6, lr
 8001fde:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001fe4:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8001fe6:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001fec:	bf0c      	ite	eq
 8001fee:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001ff0:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8001ff2:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8001ff4:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001ffa:	bf0c      	ite	eq
 8001ffc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001ffe:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8002000:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8002002:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002004:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002008:	bf0c      	ite	eq
 800200a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800200c:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800200e:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8002010:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002012:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002014:	bf54      	ite	pl
 8002016:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002018:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 800201a:	60ee      	str	r6, [r5, #12]
    position++;
 800201c:	3301      	adds	r3, #1
 800201e:	e73b      	b.n	8001e98 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002020:	2600      	movs	r6, #0
 8002022:	e7da      	b.n	8001fda <HAL_GPIO_Init+0x14e>
 8002024:	2601      	movs	r6, #1
 8002026:	e7d8      	b.n	8001fda <HAL_GPIO_Init+0x14e>
 8002028:	2602      	movs	r6, #2
 800202a:	e7d6      	b.n	8001fda <HAL_GPIO_Init+0x14e>
 800202c:	2603      	movs	r6, #3
 800202e:	e7d4      	b.n	8001fda <HAL_GPIO_Init+0x14e>
 8002030:	2604      	movs	r6, #4
 8002032:	e7d2      	b.n	8001fda <HAL_GPIO_Init+0x14e>
 8002034:	2605      	movs	r6, #5
 8002036:	e7d0      	b.n	8001fda <HAL_GPIO_Init+0x14e>
 8002038:	40010400 	.word	0x40010400
 800203c:	48000400 	.word	0x48000400
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002046:	4604      	mov	r4, r0
{
 8002048:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800204a:	b360      	cbz	r0, 80020a6 <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800204c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8002050:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002056:	b91b      	cbnz	r3, 8002060 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002058:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800205c:	f7ff fc6a 	bl	8001934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002060:	2303      	movs	r3, #3
 8002062:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002066:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002068:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800206a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 800206e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8002072:	bf08      	it	eq
 8002074:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002076:	f001 fd61 	bl	8003b3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207c:	466e      	mov	r6, sp
 800207e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002082:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002084:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002088:	e886 0003 	stmia.w	r6, {r0, r1}
 800208c:	4625      	mov	r5, r4
 800208e:	1d27      	adds	r7, r4, #4
 8002090:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002094:	f855 0b10 	ldr.w	r0, [r5], #16
 8002098:	f001 fcac 	bl	80039f4 <USB_CoreInit>
 800209c:	4606      	mov	r6, r0
 800209e:	b120      	cbz	r0, 80020aa <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80020a6:	2501      	movs	r5, #1
 80020a8:	e054      	b.n	8002154 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020aa:	4601      	mov	r1, r0
 80020ac:	6820      	ldr	r0, [r4, #0]
 80020ae:	f001 fd4b 	bl	8003b48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b2:	4630      	mov	r0, r6
 80020b4:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020b8:	261c      	movs	r6, #28
 80020ba:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020be:	4601      	mov	r1, r0
 80020c0:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c2:	4594      	cmp	ip, r2
 80020c4:	f100 0001 	add.w	r0, r0, #1
 80020c8:	d81c      	bhi.n	8002104 <HAL_PCD_Init+0xc0>
 80020ca:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020cc:	261c      	movs	r6, #28
 80020ce:	4619      	mov	r1, r3
 80020d0:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	4584      	cmp	ip, r0
 80020d4:	f103 0301 	add.w	r3, r3, #1
 80020d8:	d822      	bhi.n	8002120 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020dc:	466e      	mov	r6, sp
 80020de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020e8:	e886 0003 	stmia.w	r6, {r0, r1}
 80020ec:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	f001 fd6b 	bl	8003bcc <USB_DevInit>
 80020f6:	2301      	movs	r3, #1
 80020f8:	4605      	mov	r5, r0
 80020fa:	b1f0      	cbz	r0, 800213a <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020fc:	2202      	movs	r2, #2
 80020fe:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002102:	e7d0      	b.n	80020a6 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8002104:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002108:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 800210c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002114:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002118:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800211c:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	e7cf      	b.n	80020c0 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8002120:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002124:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 8002128:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800212c:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002130:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002134:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002138:	e7ca      	b.n	80020d0 <HAL_PCD_Init+0x8c>
  }

  hpcd->USB_Address = 0U;
 800213a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800213e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002148:	4620      	mov	r0, r4
 800214a:	f000 fbe6 	bl	800291a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800214e:	6820      	ldr	r0, [r4, #0]
 8002150:	f002 f82a 	bl	80041a8 <USB_DevDisconnect>

  return HAL_OK;
}
 8002154:	4628      	mov	r0, r5
 8002156:	b00b      	add	sp, #44	; 0x2c
 8002158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800215a:	b510      	push	{r4, lr}
 800215c:	4604      	mov	r4, r0
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215e:	6800      	ldr	r0, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002160:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002164:	2b01      	cmp	r3, #1
 8002166:	d012      	beq.n	800218e <HAL_PCD_Start+0x34>
 8002168:	2301      	movs	r3, #1
 800216a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800216e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002170:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002172:	bf02      	ittt	eq
 8002174:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 8002176:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 800217a:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800217c:	f001 fcd8 	bl	8003b30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002180:	6820      	ldr	r0, [r4, #0]
 8002182:	f002 f803 	bl	800418c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002186:	2000      	movs	r0, #0
 8002188:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800218c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800218e:	2002      	movs	r0, #2
 8002190:	e7fc      	b.n	800218c <HAL_PCD_Start+0x32>
	...

08002194 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002198:	6805      	ldr	r5, [r0, #0]
{
 800219a:	b085      	sub	sp, #20
 800219c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800219e:	4628      	mov	r0, r5
 80021a0:	f002 f83e 	bl	8004220 <USB_GetMode>
 80021a4:	9000      	str	r0, [sp, #0]
 80021a6:	2800      	cmp	r0, #0
 80021a8:	f040 813e 	bne.w	8002428 <HAL_PCD_IRQHandler+0x294>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ac:	6820      	ldr	r0, [r4, #0]
 80021ae:	f002 f809 	bl	80041c4 <USB_ReadInterrupts>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	f000 8138 	beq.w	8002428 <HAL_PCD_IRQHandler+0x294>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021b8:	6820      	ldr	r0, [r4, #0]
 80021ba:	f002 f803 	bl	80041c4 <USB_ReadInterrupts>
 80021be:	0786      	lsls	r6, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021c0:	bf48      	it	mi
 80021c2:	6822      	ldrmi	r2, [r4, #0]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021c4:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021c6:	bf42      	ittt	mi
 80021c8:	6953      	ldrmi	r3, [r2, #20]
 80021ca:	f003 0302 	andmi.w	r3, r3, #2
 80021ce:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021d0:	f001 fff8 	bl	80041c4 <USB_ReadInterrupts>
 80021d4:	06c0      	lsls	r0, r0, #27
 80021d6:	d52a      	bpl.n	800222e <HAL_PCD_IRQHandler+0x9a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021d8:	6822      	ldr	r2, [r4, #0]
 80021da:	6993      	ldr	r3, [r2, #24]
 80021dc:	f023 0310 	bic.w	r3, r3, #16
 80021e0:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80021e2:	6a2f      	ldr	r7, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021e4:	f3c7 4343 	ubfx	r3, r7, #17, #4
 80021e8:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80021ea:	f007 060f 	and.w	r6, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021ee:	f040 811e 	bne.w	800242e <HAL_PCD_IRQHandler+0x29a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021f6:	421f      	tst	r7, r3
 80021f8:	d014      	beq.n	8002224 <HAL_PCD_IRQHandler+0x90>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021fa:	231c      	movs	r3, #28
 80021fc:	fb03 4606 	mla	r6, r3, r6, r4
 8002200:	f3c7 180a 	ubfx	r8, r7, #4, #11
 8002204:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8002208:	4642      	mov	r2, r8
 800220a:	4628      	mov	r0, r5
 800220c:	f001 ff4c 	bl	80040a8 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002210:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 8002214:	4443      	add	r3, r8
 8002216:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800221e:	4443      	add	r3, r8
 8002220:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	6993      	ldr	r3, [r2, #24]
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800222e:	6820      	ldr	r0, [r4, #0]
 8002230:	f001 ffc8 	bl	80041c4 <USB_ReadInterrupts>
 8002234:	0301      	lsls	r1, r0, #12
 8002236:	f100 810e 	bmi.w	8002456 <HAL_PCD_IRQHandler+0x2c2>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	f001 ffc2 	bl	80041c4 <USB_ReadInterrupts>
 8002240:	0342      	lsls	r2, r0, #13
 8002242:	d50d      	bpl.n	8002260 <HAL_PCD_IRQHandler+0xcc>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	f001 ffc9 	bl	80041dc <USB_ReadDevAllInEpInterrupt>
 800224a:	4626      	mov	r6, r4
 800224c:	4681      	mov	r9, r0

      epnum = 0U;

      while (ep_intr != 0U)
 800224e:	f505 6810 	add.w	r8, r5, #2304	; 0x900
      epnum = 0U;
 8002252:	f04f 0a00 	mov.w	sl, #0
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002256:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8002258:	f1b9 0f00 	cmp.w	r9, #0
 800225c:	f040 815d 	bne.w	800251a <HAL_PCD_IRQHandler+0x386>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002260:	6820      	ldr	r0, [r4, #0]
 8002262:	f001 ffaf 	bl	80041c4 <USB_ReadInterrupts>
 8002266:	2800      	cmp	r0, #0
 8002268:	da15      	bge.n	8002296 <HAL_PCD_IRQHandler+0x102>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800226a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8002276:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800227a:	2b01      	cmp	r3, #1
 800227c:	f040 81cb 	bne.w	8002616 <HAL_PCD_IRQHandler+0x482>
      {
        hpcd->LPM_State = LPM_L0;
 8002280:	2100      	movs	r1, #0
 8002282:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002286:	4620      	mov	r0, r4
 8002288:	f000 fb5a 	bl	8002940 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	6953      	ldr	r3, [r2, #20]
 8002290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002294:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002296:	6820      	ldr	r0, [r4, #0]
 8002298:	f001 ff94 	bl	80041c4 <USB_ReadInterrupts>
 800229c:	0500      	lsls	r0, r0, #20
 800229e:	d50b      	bpl.n	80022b8 <HAL_PCD_IRQHandler+0x124>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022a0:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80022a4:	07d9      	lsls	r1, r3, #31
 80022a6:	d502      	bpl.n	80022ae <HAL_PCD_IRQHandler+0x11a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff fba1 	bl	80019f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	6953      	ldr	r3, [r2, #20]
 80022b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b6:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	f001 ff83 	bl	80041c4 <USB_ReadInterrupts>
 80022be:	0102      	lsls	r2, r0, #4
 80022c0:	d514      	bpl.n	80022ec <HAL_PCD_IRQHandler+0x158>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80022ca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80022cc:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	f040 81a4 	bne.w	800261e <HAL_PCD_IRQHandler+0x48a>
      {
        hpcd->LPM_State = LPM_L1;
 80022d6:	2101      	movs	r1, #1
 80022d8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80022e2:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022e6:	4620      	mov	r0, r4
 80022e8:	f000 fb2a 	bl	8002940 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022ec:	6820      	ldr	r0, [r4, #0]
 80022ee:	f001 ff69 	bl	80041c4 <USB_ReadInterrupts>
 80022f2:	04c3      	lsls	r3, r0, #19
 80022f4:	d536      	bpl.n	8002364 <HAL_PCD_IRQHandler+0x1d0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022f6:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022fa:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022fc:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002300:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002302:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002306:	f001 fc37 	bl	8003b78 <USB_FlushTxFifo>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800230a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 800230e:	f505 6310 	add.w	r3, r5, #2304	; 0x900

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002312:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	6862      	ldr	r2, [r4, #4]
 8002318:	9800      	ldr	r0, [sp, #0]
 800231a:	4282      	cmp	r2, r0
 800231c:	f200 8183 	bhi.w	8002626 <HAL_PCD_IRQHandler+0x492>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002320:	69f3      	ldr	r3, [r6, #28]
 8002322:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002326:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8197 	beq.w	800265e <HAL_PCD_IRQHandler+0x4ca>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002330:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8002334:	f043 030b 	orr.w	r3, r3, #11
 8002338:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800233c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800233e:	f043 030b 	orr.w	r3, r3, #11
 8002342:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002344:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002348:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800234a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800234e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002352:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002356:	f001 ff77 	bl	8004248 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	6953      	ldr	r3, [r2, #20]
 800235e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002362:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002364:	6820      	ldr	r0, [r4, #0]
 8002366:	f001 ff2d 	bl	80041c4 <USB_ReadInterrupts>
 800236a:	0487      	lsls	r7, r0, #18
 800236c:	d516      	bpl.n	800239c <HAL_PCD_IRQHandler+0x208>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800236e:	6820      	ldr	r0, [r4, #0]
 8002370:	f001 ff5a 	bl	8004228 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	f001 fcd1 	bl	8003d1c <USB_GetDevSpeed>
 800237a:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800237c:	6825      	ldr	r5, [r4, #0]
 800237e:	f000 fea7 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8002382:	7b22      	ldrb	r2, [r4, #12]
 8002384:	4601      	mov	r1, r0
 8002386:	4628      	mov	r0, r5
 8002388:	f001 fb62 	bl	8003a50 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff fb22 	bl	80019d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002392:	6822      	ldr	r2, [r4, #0]
 8002394:	6953      	ldr	r3, [r2, #20]
 8002396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239a:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800239c:	6820      	ldr	r0, [r4, #0]
 800239e:	f001 ff11 	bl	80041c4 <USB_ReadInterrupts>
 80023a2:	0706      	lsls	r6, r0, #28
 80023a4:	d507      	bpl.n	80023b6 <HAL_PCD_IRQHandler+0x222>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7ff fb11 	bl	80019ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023ac:	6822      	ldr	r2, [r4, #0]
 80023ae:	6953      	ldr	r3, [r2, #20]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023b6:	6820      	ldr	r0, [r4, #0]
 80023b8:	f001 ff04 	bl	80041c4 <USB_ReadInterrupts>
 80023bc:	02c5      	lsls	r5, r0, #11
 80023be:	d508      	bpl.n	80023d2 <HAL_PCD_IRQHandler+0x23e>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023c0:	2100      	movs	r1, #0
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff fb20 	bl	8001a08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6953      	ldr	r3, [r2, #20]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023d2:	6820      	ldr	r0, [r4, #0]
 80023d4:	f001 fef6 	bl	80041c4 <USB_ReadInterrupts>
 80023d8:	0280      	lsls	r0, r0, #10
 80023da:	d508      	bpl.n	80023ee <HAL_PCD_IRQHandler+0x25a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023dc:	2100      	movs	r1, #0
 80023de:	4620      	mov	r0, r4
 80023e0:	f7ff fb0e 	bl	8001a00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	6953      	ldr	r3, [r2, #20]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023ee:	6820      	ldr	r0, [r4, #0]
 80023f0:	f001 fee8 	bl	80041c4 <USB_ReadInterrupts>
 80023f4:	0041      	lsls	r1, r0, #1
 80023f6:	d507      	bpl.n	8002408 <HAL_PCD_IRQHandler+0x274>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff fb09 	bl	8001a10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023fe:	6822      	ldr	r2, [r4, #0]
 8002400:	6953      	ldr	r3, [r2, #20]
 8002402:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002406:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002408:	6820      	ldr	r0, [r4, #0]
 800240a:	f001 fedb 	bl	80041c4 <USB_ReadInterrupts>
 800240e:	0742      	lsls	r2, r0, #29
 8002410:	d50a      	bpl.n	8002428 <HAL_PCD_IRQHandler+0x294>
    {
      temp = hpcd->Instance->GOTGINT;
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002416:	076b      	lsls	r3, r5, #29
 8002418:	d502      	bpl.n	8002420 <HAL_PCD_IRQHandler+0x28c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fafc 	bl	8001a18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	6853      	ldr	r3, [r2, #4]
 8002424:	432b      	orrs	r3, r5
 8002426:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002428:	b005      	add	sp, #20
 800242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800242e:	2b06      	cmp	r3, #6
 8002430:	f47f aef8 	bne.w	8002224 <HAL_PCD_IRQHandler+0x90>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002434:	2208      	movs	r2, #8
 8002436:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800243a:	4628      	mov	r0, r5
 800243c:	f001 fe34 	bl	80040a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002440:	231c      	movs	r3, #28
 8002442:	fb03 4606 	mla	r6, r3, r6, r4
 8002446:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800244a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800244e:	441f      	add	r7, r3
 8002450:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
 8002454:	e6e6      	b.n	8002224 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002456:	6820      	ldr	r0, [r4, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002458:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8002674 <HAL_PCD_IRQHandler+0x4e0>
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800245c:	f8df a218 	ldr.w	sl, [pc, #536]	; 8002678 <HAL_PCD_IRQHandler+0x4e4>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002460:	f001 feb4 	bl	80041cc <USB_ReadDevAllOutEpInterrupt>
 8002464:	f505 6b30 	add.w	fp, r5, #2816	; 0xb00
 8002468:	4606      	mov	r6, r0
      epnum = 0U;
 800246a:	2700      	movs	r7, #0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800246c:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800246e:	2e00      	cmp	r6, #0
 8002470:	f43f aee3 	beq.w	800223a <HAL_PCD_IRQHandler+0xa6>
        if ((ep_intr & 0x1U) != 0U)
 8002474:	07f3      	lsls	r3, r6, #31
 8002476:	d543      	bpl.n	8002500 <HAL_PCD_IRQHandler+0x36c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002478:	b2f9      	uxtb	r1, r7
 800247a:	9101      	str	r1, [sp, #4]
 800247c:	f001 feb6 	bl	80041ec <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002480:	f010 0f01 	tst.w	r0, #1
 8002484:	9901      	ldr	r1, [sp, #4]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002486:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002488:	d010      	beq.n	80024ac <HAL_PCD_IRQHandler+0x318>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800248a:	2201      	movs	r2, #1
 800248c:	f8cb 2008 	str.w	r2, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002490:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002492:	6c10      	ldr	r0, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002498:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800249c:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800249e:	6893      	ldr	r3, [r2, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024a0:	d137      	bne.n	8002512 <HAL_PCD_IRQHandler+0x37e>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024a2:	0418      	lsls	r0, r3, #16
 80024a4:	d531      	bpl.n	800250a <HAL_PCD_IRQHandler+0x376>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024aa:	6091      	str	r1, [r2, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024ac:	f018 0f08 	tst.w	r8, #8
 80024b0:	d013      	beq.n	80024da <HAL_PCD_IRQHandler+0x346>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024b2:	2208      	movs	r2, #8
 80024b4:	f8cb 2008 	str.w	r2, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b8:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024ba:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024c0:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c4:	4549      	cmp	r1, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024c6:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c8:	d904      	bls.n	80024d4 <HAL_PCD_IRQHandler+0x340>
 80024ca:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024cc:	bf44      	itt	mi
 80024ce:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80024d2:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff fa63 	bl	80019a0 <HAL_PCD_SetupStageCallback>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024da:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024de:	bf1c      	itt	ne
 80024e0:	2210      	movne	r2, #16
 80024e2:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024e6:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ea:	bf1c      	itt	ne
 80024ec:	2220      	movne	r2, #32
 80024ee:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024f2:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024f6:	bf1c      	itt	ne
 80024f8:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80024fc:	f8cb 3008 	strne.w	r3, [fp, #8]
        epnum++;
 8002500:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8002502:	0876      	lsrs	r6, r6, #1
 8002504:	f10b 0b20 	add.w	fp, fp, #32
 8002508:	e7b0      	b.n	800246c <HAL_PCD_IRQHandler+0x2d8>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800250a:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800250c:	bf44      	itt	mi
 800250e:	2020      	movmi	r0, #32
 8002510:	6090      	strmi	r0, [r2, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff fa4a 	bl	80019ac <HAL_PCD_DataOutStageCallback>
 8002518:	e7c8      	b.n	80024ac <HAL_PCD_IRQHandler+0x318>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800251a:	f019 0f01 	tst.w	r9, #1
 800251e:	d072      	beq.n	8002606 <HAL_PCD_IRQHandler+0x472>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002520:	fa5f fb8a 	uxtb.w	fp, sl
 8002524:	4659      	mov	r1, fp
 8002526:	f001 fe6a 	bl	80041fe <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800252a:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800252c:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800252e:	d510      	bpl.n	8002552 <HAL_PCD_IRQHandler+0x3be>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002530:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002534:	2201      	movs	r2, #1
 8002536:	f00a 010f 	and.w	r1, sl, #15
 800253a:	fa02 f101 	lsl.w	r1, r2, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800253e:	ea23 0301 	bic.w	r3, r3, r1
 8002542:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002546:	4659      	mov	r1, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002548:	f8c8 2008 	str.w	r2, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff fa36 	bl	80019be <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002552:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002554:	bf44      	itt	mi
 8002556:	2308      	movmi	r3, #8
 8002558:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800255c:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800255e:	bf44      	itt	mi
 8002560:	2310      	movmi	r3, #16
 8002562:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002566:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002568:	bf44      	itt	mi
 800256a:	2340      	movmi	r3, #64	; 0x40
 800256c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002570:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002572:	bf44      	itt	mi
 8002574:	2302      	movmi	r3, #2
 8002576:	f8c8 3008 	strmi.w	r3, [r8, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	9301      	str	r3, [sp, #4]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800257e:	063f      	lsls	r7, r7, #24
 8002580:	d541      	bpl.n	8002606 <HAL_PCD_IRQHandler+0x472>
  if (ep->xfer_count > ep->xfer_len)
 8002582:	e9d6 3114 	ldrd	r3, r1, [r6, #80]	; 0x50
 8002586:	4299      	cmp	r1, r3
 8002588:	d83d      	bhi.n	8002606 <HAL_PCD_IRQHandler+0x472>
  len = ep->xfer_len - ep->xfer_count;
 800258a:	1a5b      	subs	r3, r3, r1
  len32b = (len + 3U) / 4U;
 800258c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800258e:	428b      	cmp	r3, r1
 8002590:	bf28      	it	cs
 8002592:	460b      	movcs	r3, r1
 8002594:	3303      	adds	r3, #3
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	9302      	str	r3, [sp, #8]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800259a:	9b01      	ldr	r3, [sp, #4]
 800259c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a0:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	9b03      	ldr	r3, [sp, #12]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025a8:	9a02      	ldr	r2, [sp, #8]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025aa:	6999      	ldr	r1, [r3, #24]
 80025ac:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025ae:	4291      	cmp	r1, r2
 80025b0:	e9d6 7314 	ldrd	r7, r3, [r6, #80]	; 0x50
 80025b4:	d325      	bcc.n	8002602 <HAL_PCD_IRQHandler+0x46e>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025b6:	42bb      	cmp	r3, r7
 80025b8:	d30e      	bcc.n	80025d8 <HAL_PCD_IRQHandler+0x444>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025ba:	9b01      	ldr	r3, [sp, #4]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025bc:	f00a 020f 	and.w	r2, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025c0:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c4:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025c6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025ce:	ea23 0302 	bic.w	r3, r3, r2
 80025d2:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80025d6:	e016      	b.n	8002606 <HAL_PCD_IRQHandler+0x472>
    len = ep->xfer_len - ep->xfer_count;
 80025d8:	1aff      	subs	r7, r7, r3
 80025da:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80025dc:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80025de:	9801      	ldr	r0, [sp, #4]
 80025e0:	429f      	cmp	r7, r3
 80025e2:	bf28      	it	cs
 80025e4:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 80025e6:	1cfb      	adds	r3, r7, #3
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	9302      	str	r3, [sp, #8]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80025ec:	465a      	mov	r2, fp
 80025ee:	b2bb      	uxth	r3, r7
 80025f0:	f001 fc98 	bl	8003f24 <USB_WritePacket>
    ep->xfer_buff  += len;
 80025f4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80025f6:	443b      	add	r3, r7
 80025f8:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80025fa:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80025fc:	443b      	add	r3, r7
 80025fe:	6573      	str	r3, [r6, #84]	; 0x54
 8002600:	e7d1      	b.n	80025a6 <HAL_PCD_IRQHandler+0x412>
  if (ep->xfer_len <= ep->xfer_count)
 8002602:	42bb      	cmp	r3, r7
 8002604:	d2d9      	bcs.n	80025ba <HAL_PCD_IRQHandler+0x426>
        epnum++;
 8002606:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 800260a:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800260e:	361c      	adds	r6, #28
 8002610:	f108 0820 	add.w	r8, r8, #32
 8002614:	e61f      	b.n	8002256 <HAL_PCD_IRQHandler+0xc2>
        HAL_PCD_ResumeCallback(hpcd);
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff f9ee 	bl	80019f8 <HAL_PCD_ResumeCallback>
 800261c:	e636      	b.n	800228c <HAL_PCD_IRQHandler+0xf8>
        HAL_PCD_SuspendCallback(hpcd);
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff f9e6 	bl	80019f0 <HAL_PCD_SuspendCallback>
 8002624:	e662      	b.n	80022ec <HAL_PCD_IRQHandler+0x158>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002626:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800262e:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002636:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002638:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800263c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002640:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002644:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002648:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800264c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002650:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002654:	9a00      	ldr	r2, [sp, #0]
 8002656:	3201      	adds	r2, #1
 8002658:	9200      	str	r2, [sp, #0]
 800265a:	3320      	adds	r3, #32
 800265c:	e65b      	b.n	8002316 <HAL_PCD_IRQHandler+0x182>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800265e:	6973      	ldr	r3, [r6, #20]
 8002660:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002664:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002668:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800266a:	6933      	ldr	r3, [r6, #16]
 800266c:	f043 030b 	orr.w	r3, r3, #11
 8002670:	6133      	str	r3, [r6, #16]
 8002672:	e667      	b.n	8002344 <HAL_PCD_IRQHandler+0x1b0>
 8002674:	4f54300a 	.word	0x4f54300a
 8002678:	4f54310a 	.word	0x4f54310a

0800267c <HAL_PCD_SetAddress>:
{
 800267c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800267e:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002682:	2a01      	cmp	r2, #1
{
 8002684:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002686:	d00b      	beq.n	80026a0 <HAL_PCD_SetAddress+0x24>
 8002688:	2201      	movs	r2, #1
 800268a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800268e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002692:	6800      	ldr	r0, [r0, #0]
 8002694:	f001 fd6a 	bl	800416c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002698:	2000      	movs	r0, #0
 800269a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800269e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80026a0:	2002      	movs	r0, #2
 80026a2:	e7fc      	b.n	800269e <HAL_PCD_SetAddress+0x22>

080026a4 <HAL_PCD_EP_Open>:
{
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	f001 060f 	and.w	r6, r1, #15
 80026aa:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80026ae:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80026b2:	4605      	mov	r5, r0
 80026b4:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80026b8:	f04f 001c 	mov.w	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80026bc:	d01f      	beq.n	80026fe <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 1U;
 80026be:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 80026c6:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c8:	4429      	add	r1, r5
    ep->is_in = 1U;
 80026ca:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 80026ce:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80026d0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d2:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 80026d4:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80026d6:	b102      	cbz	r2, 80026da <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80026d8:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80026da:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80026dc:	bf04      	itt	eq
 80026de:	2300      	moveq	r3, #0
 80026e0:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80026e2:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d012      	beq.n	8002710 <HAL_PCD_EP_Open+0x6c>
 80026ea:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026ec:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80026ee:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026f2:	f001 fb1d 	bl	8003d30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80026fe:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002702:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8002706:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002708:	4429      	add	r1, r5
    ep->is_in = 0U;
 800270a:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 800270e:	e7de      	b.n	80026ce <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8002710:	2002      	movs	r0, #2
 8002712:	e7f3      	b.n	80026fc <HAL_PCD_EP_Open+0x58>

08002714 <HAL_PCD_EP_Close>:
{
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	f001 000f 	and.w	r0, r1, #15
 800271c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002720:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002724:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002728:	f04f 021c 	mov.w	r2, #28
 800272c:	d016      	beq.n	800275c <HAL_PCD_EP_Close+0x48>
    ep->is_in = 1U;
 800272e:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002732:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8002736:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002738:	4421      	add	r1, r4
    ep->is_in = 1U;
 800273a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800273e:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8002740:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002744:	2b01      	cmp	r3, #1
 8002746:	d012      	beq.n	800276e <HAL_PCD_EP_Close+0x5a>
 8002748:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800274a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800274c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002750:	f001 fb2e 	bl	8003db0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002754:	2000      	movs	r0, #0
 8002756:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800275a:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 800275c:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002760:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8002764:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002766:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002768:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 800276c:	e7e7      	b.n	800273e <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800276e:	2002      	movs	r0, #2
 8002770:	e7f3      	b.n	800275a <HAL_PCD_EP_Close+0x46>

08002772 <HAL_PCD_EP_Receive>:
{
 8002772:	b538      	push	{r3, r4, r5, lr}
 8002774:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002778:	241c      	movs	r4, #28
 800277a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800277e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002782:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8002786:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800278a:	2300      	movs	r3, #0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800278c:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 800278e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8002792:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8002796:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800279a:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800279e:	b91d      	cbnz	r5, 80027a8 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027a0:	f001 fb5c 	bl	8003e5c <USB_EP0StartXfer>
}
 80027a4:	2000      	movs	r0, #0
 80027a6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027a8:	f001 fbcc 	bl	8003f44 <USB_EPStartXfer>
 80027ac:	e7fa      	b.n	80027a4 <HAL_PCD_EP_Receive+0x32>

080027ae <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027ae:	f001 010f 	and.w	r1, r1, #15
 80027b2:	231c      	movs	r3, #28
 80027b4:	fb03 0001 	mla	r0, r3, r1, r0
}
 80027b8:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 80027bc:	4770      	bx	lr

080027be <HAL_PCD_EP_Transmit>:
{
 80027be:	b538      	push	{r3, r4, r5, lr}
 80027c0:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c4:	241c      	movs	r4, #28
 80027c6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80027ca:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ce:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80027d0:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80027d6:	2301      	movs	r3, #1
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027d8:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 80027da:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80027dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027e4:	b91d      	cbnz	r5, 80027ee <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027e6:	f001 fb39 	bl	8003e5c <USB_EP0StartXfer>
}
 80027ea:	2000      	movs	r0, #0
 80027ec:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ee:	f001 fba9 	bl	8003f44 <USB_EPStartXfer>
 80027f2:	e7fa      	b.n	80027ea <HAL_PCD_EP_Transmit+0x2c>

080027f4 <HAL_PCD_EP_SetStall>:
{
 80027f4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027f6:	6843      	ldr	r3, [r0, #4]
 80027f8:	f001 050f 	and.w	r5, r1, #15
 80027fc:	429d      	cmp	r5, r3
{
 80027fe:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002800:	d82d      	bhi.n	800285e <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8002802:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002806:	f04f 021c 	mov.w	r2, #28
 800280a:	d01e      	beq.n	800284a <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280c:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8002810:	fb02 0205 	mla	r2, r2, r5, r0
 8002814:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002816:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8002818:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 800281c:	2201      	movs	r2, #1
 800281e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002820:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8002822:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8002826:	4291      	cmp	r1, r2
 8002828:	d01b      	beq.n	8002862 <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800282a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800282c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002830:	4619      	mov	r1, r3
 8002832:	f001 fc47 	bl	80040c4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002836:	b925      	cbnz	r5, 8002842 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002838:	6820      	ldr	r0, [r4, #0]
 800283a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800283e:	f001 fd03 	bl	8004248 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8002842:	2000      	movs	r0, #0
 8002844:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002848:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800284a:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 800284e:	fb02 0101 	mla	r1, r2, r1, r0
 8002852:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002854:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8002858:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 800285c:	e7de      	b.n	800281c <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800285e:	2001      	movs	r0, #1
 8002860:	e7f2      	b.n	8002848 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002862:	2002      	movs	r0, #2
 8002864:	e7f0      	b.n	8002848 <HAL_PCD_EP_SetStall+0x54>

08002866 <HAL_PCD_EP_ClrStall>:
{
 8002866:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002868:	6843      	ldr	r3, [r0, #4]
 800286a:	f001 020f 	and.w	r2, r1, #15
 800286e:	429a      	cmp	r2, r3
{
 8002870:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002872:	d82a      	bhi.n	80028ca <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8002874:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8002878:	f011 0f80 	tst.w	r1, #128	; 0x80
 800287c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002880:	f04f 001c 	mov.w	r0, #28
 8002884:	d018      	beq.n	80028b8 <HAL_PCD_EP_ClrStall+0x52>
    ep->is_in = 1U;
 8002886:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800288e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002890:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002892:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 8002896:	2500      	movs	r5, #0
 8002898:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800289c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d014      	beq.n	80028ce <HAL_PCD_EP_ClrStall+0x68>
 80028a4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028a6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80028a8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028ac:	f001 fc35 	bl	800411a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028b0:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 80028b4:	4628      	mov	r0, r5
}
 80028b6:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80028b8:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028bc:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80028c0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	4421      	add	r1, r4
    ep->is_in = 0U;
 80028c4:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 80028c8:	e7e5      	b.n	8002896 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	e7f3      	b.n	80028b6 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 80028ce:	2002      	movs	r0, #2
 80028d0:	e7f1      	b.n	80028b6 <HAL_PCD_EP_ClrStall+0x50>

080028d2 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028d2:	6800      	ldr	r0, [r0, #0]
{
 80028d4:	b570      	push	{r4, r5, r6, lr}

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028d6:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (fifo == 0U)
 80028da:	b919      	cbnz	r1, 80028e4 <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028dc:	4322      	orrs	r2, r4
 80028de:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80028e0:	2000      	movs	r0, #0
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80028e6:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	1c5e      	adds	r6, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	429d      	cmp	r5, r3
 80028f4:	d805      	bhi.n	8002902 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028f6:	313f      	adds	r1, #63	; 0x3f
 80028f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80028fc:	4322      	orrs	r2, r4
 80028fe:	6042      	str	r2, [r0, #4]
 8002900:	e7ee      	b.n	80028e0 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002902:	3340      	adds	r3, #64	; 0x40
 8002904:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800290e:	4633      	mov	r3, r6
 8002910:	e7ed      	b.n	80028ee <HAL_PCDEx_SetTxFiFo+0x1c>

08002912 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002912:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002914:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002916:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002918:	4770      	bx	lr

0800291a <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291a:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800291c:	2100      	movs	r1, #0
 800291e:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 8002922:	2301      	movs	r3, #1
 8002924:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002928:	6993      	ldr	r3, [r2, #24]
 800292a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800292e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002930:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	f043 0303 	orr.w	r3, r3, #3
 800293a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800293c:	4608      	mov	r0, r1
 800293e:	4770      	bx	lr

08002940 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002940:	4770      	bx	lr
	...

08002944 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002944:	4a02      	ldr	r2, [pc, #8]	; (8002950 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002946:	6813      	ldr	r3, [r2, #0]
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]
}
 800294e:	4770      	bx	lr
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_PWREx_GetVoltageRange+0xc>)
 8002956:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002958:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000

08002964 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002964:	4a02      	ldr	r2, [pc, #8]	; (8002970 <HAL_PWREx_EnableVddUSB+0xc>)
 8002966:	6853      	ldr	r3, [r2, #4]
 8002968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296c:	6053      	str	r3, [r2, #4]
}
 800296e:	4770      	bx	lr
 8002970:	40007000 	.word	0x40007000

08002974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002974:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002976:	4d1e      	ldr	r5, [pc, #120]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002978:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800297a:	00da      	lsls	r2, r3, #3
{
 800297c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800297e:	d518      	bpl.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002980:	f7ff ffe8 	bl	8002954 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002984:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002988:	d123      	bne.n	80029d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800298a:	2c80      	cmp	r4, #128	; 0x80
 800298c:	d929      	bls.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800298e:	2ca0      	cmp	r4, #160	; 0xa0
 8002990:	bf8c      	ite	hi
 8002992:	2402      	movhi	r4, #2
 8002994:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002996:	4917      	ldr	r1, [pc, #92]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002998:	680a      	ldr	r2, [r1, #0]
 800299a:	f022 0207 	bic.w	r2, r2, #7
 800299e:	4322      	orrs	r2, r4
 80029a0:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029a2:	6808      	ldr	r0, [r1, #0]
 80029a4:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80029a8:	1b00      	subs	r0, r0, r4
 80029aa:	bf18      	it	ne
 80029ac:	2001      	movne	r0, #1
 80029ae:	b003      	add	sp, #12
 80029b0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	65ab      	str	r3, [r5, #88]	; 0x58
 80029ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80029c4:	f7ff ffc6 	bl	8002954 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	65ab      	str	r3, [r5, #88]	; 0x58
 80029d0:	e7d8      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80029d2:	2c80      	cmp	r4, #128	; 0x80
 80029d4:	d807      	bhi.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80029d6:	d008      	beq.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80029d8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80029dc:	425c      	negs	r4, r3
 80029de:	415c      	adcs	r4, r3
 80029e0:	e7d9      	b.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029e2:	2400      	movs	r4, #0
 80029e4:	e7d7      	b.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80029e6:	2403      	movs	r4, #3
 80029e8:	e7d5      	b.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80029ea:	2402      	movs	r4, #2
 80029ec:	e7d3      	b.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40022000 	.word	0x40022000

080029f8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x8c>)
 80029fa:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029fe:	f012 020c 	ands.w	r2, r2, #12
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x18>
 8002a04:	2a0c      	cmp	r2, #12
 8002a06:	d115      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a0c:	2901      	cmp	r1, #1
 8002a0e:	d118      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a10:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002a12:	481d      	ldr	r0, [pc, #116]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a14:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a16:	bf55      	itete	pl
 8002a18:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a1c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a1e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a22:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002a26:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a2a:	b34a      	cbz	r2, 8002a80 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a2c:	2a0c      	cmp	r2, #12
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x4c>
 8002a30:	2000      	movs	r0, #0
  return sysclockfreq;
 8002a32:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a34:	2a04      	cmp	r2, #4
 8002a36:	d022      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a38:	2a08      	cmp	r2, #8
 8002a3a:	4814      	ldr	r0, [pc, #80]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a3c:	bf18      	it	ne
 8002a3e:	2000      	movne	r0, #0
 8002a40:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a42:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002a4a:	2a02      	cmp	r2, #2
 8002a4c:	d015      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x82>
 8002a4e:	490f      	ldr	r1, [pc, #60]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a50:	2a03      	cmp	r2, #3
 8002a52:	bf08      	it	eq
 8002a54:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a56:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002a5e:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a60:	68d8      	ldr	r0, [r3, #12]
 8002a62:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a66:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a6a:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6c:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a6e:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a70:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002a74:	fbb2 f0f0 	udiv	r0, r2, r0
 8002a78:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002a7a:	4805      	ldr	r0, [pc, #20]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7c:	e7eb      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08047a1c 	.word	0x08047a1c
 8002a8c:	007a1200 	.word	0x007a1200
 8002a90:	00f42400 	.word	0x00f42400

08002a94 <HAL_RCC_OscConfig>:
{
 8002a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002a98:	4605      	mov	r5, r0
 8002a9a:	b918      	cbnz	r0, 8002aa4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002a9c:	2001      	movs	r0, #1
}
 8002a9e:	b003      	add	sp, #12
 8002aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa4:	4c94      	ldr	r4, [pc, #592]	; (8002cf8 <HAL_RCC_OscConfig+0x264>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aaa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aac:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ab6:	d53d      	bpl.n	8002b34 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab8:	b11e      	cbz	r6, 8002ac2 <HAL_RCC_OscConfig+0x2e>
 8002aba:	2e0c      	cmp	r6, #12
 8002abc:	d166      	bne.n	8002b8c <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002abe:	2f01      	cmp	r7, #1
 8002ac0:	d164      	bne.n	8002b8c <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	0799      	lsls	r1, r3, #30
 8002ac6:	d502      	bpl.n	8002ace <HAL_RCC_OscConfig+0x3a>
 8002ac8:	69ab      	ldr	r3, [r5, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0e6      	beq.n	8002a9c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	6a28      	ldr	r0, [r5, #32]
 8002ad2:	071a      	lsls	r2, r3, #28
 8002ad4:	bf56      	itet	pl
 8002ad6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002ada:	6823      	ldrmi	r3, [r4, #0]
 8002adc:	091b      	lsrpl	r3, r3, #4
 8002ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae2:	4298      	cmp	r0, r3
 8002ae4:	d93b      	bls.n	8002b5e <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae6:	f7ff ff45 	bl	8002974 <RCC_SetFlashLatencyFromMSIRange>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d1d6      	bne.n	8002a9c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	6023      	str	r3, [r4, #0]
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	6a2a      	ldr	r2, [r5, #32]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	4313      	orrs	r3, r2
 8002b00:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	69ea      	ldr	r2, [r5, #28]
 8002b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b0e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b10:	f7ff ff72 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8002b14:	68a3      	ldr	r3, [r4, #8]
 8002b16:	4a79      	ldr	r2, [pc, #484]	; (8002cfc <HAL_RCC_OscConfig+0x268>)
 8002b18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b1c:	5cd3      	ldrb	r3, [r2, r3]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	40d8      	lsrs	r0, r3
 8002b24:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002b28:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f7ff f898 	bl	8001c60 <HAL_InitTick>
        if(status != HAL_OK)
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1b4      	bne.n	8002a9e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	07d9      	lsls	r1, r3, #31
 8002b38:	d45f      	bmi.n	8002bfa <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	079a      	lsls	r2, r3, #30
 8002b3e:	f100 80a2 	bmi.w	8002c86 <HAL_RCC_OscConfig+0x1f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	0719      	lsls	r1, r3, #28
 8002b46:	f100 80df 	bmi.w	8002d08 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4a:	682b      	ldr	r3, [r5, #0]
 8002b4c:	075a      	lsls	r2, r3, #29
 8002b4e:	f100 8105 	bmi.w	8002d5c <HAL_RCC_OscConfig+0x2c8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f040 816e 	bne.w	8002e36 <HAL_RCC_OscConfig+0x3a2>
  return HAL_OK;
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	e79f      	b.n	8002a9e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6c:	4303      	orrs	r3, r0
 8002b6e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b70:	6863      	ldr	r3, [r4, #4]
 8002b72:	69ea      	ldr	r2, [r5, #28]
 8002b74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b7c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b7e:	2e00      	cmp	r6, #0
 8002b80:	d1c6      	bne.n	8002b10 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b82:	f7ff fef7 	bl	8002974 <RCC_SetFlashLatencyFromMSIRange>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d0c2      	beq.n	8002b10 <HAL_RCC_OscConfig+0x7c>
 8002b8a:	e787      	b.n	8002a9c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b8c:	69ab      	ldr	r3, [r5, #24]
 8002b8e:	b31b      	cbz	r3, 8002bd8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b98:	f7ff f8a8 	bl	8001cec <HAL_GetTick>
 8002b9c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	079b      	lsls	r3, r3, #30
 8002ba2:	d511      	bpl.n	8002bc8 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	6a2a      	ldr	r2, [r5, #32]
 8002bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	69ea      	ldr	r2, [r5, #28]
 8002bbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bc4:	6063      	str	r3, [r4, #4]
 8002bc6:	e7b5      	b.n	8002b34 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc8:	f7ff f890 	bl	8001cec <HAL_GetTick>
 8002bcc:	eba0 0008 	sub.w	r0, r0, r8
 8002bd0:	2802      	cmp	r0, #2
 8002bd2:	d9e4      	bls.n	8002b9e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	e762      	b.n	8002a9e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002be0:	f7ff f884 	bl	8001cec <HAL_GetTick>
 8002be4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	0798      	lsls	r0, r3, #30
 8002bea:	d5a3      	bpl.n	8002b34 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bec:	f7ff f87e 	bl	8001cec <HAL_GetTick>
 8002bf0:	eba0 0008 	sub.w	r0, r0, r8
 8002bf4:	2802      	cmp	r0, #2
 8002bf6:	d9f6      	bls.n	8002be6 <HAL_RCC_OscConfig+0x152>
 8002bf8:	e7ec      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bfa:	2e08      	cmp	r6, #8
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_OscConfig+0x172>
 8002bfe:	2e0c      	cmp	r6, #12
 8002c00:	d108      	bne.n	8002c14 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c02:	2f03      	cmp	r7, #3
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	039b      	lsls	r3, r3, #14
 8002c0a:	d596      	bpl.n	8002b3a <HAL_RCC_OscConfig+0xa6>
 8002c0c:	686b      	ldr	r3, [r5, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d193      	bne.n	8002b3a <HAL_RCC_OscConfig+0xa6>
 8002c12:	e743      	b.n	8002a9c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c14:	686b      	ldr	r3, [r5, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d112      	bne.n	8002c42 <HAL_RCC_OscConfig+0x1ae>
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c24:	f7ff f862 	bl	8001cec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c2c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	0398      	lsls	r0, r3, #14
 8002c32:	d482      	bmi.n	8002b3a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7ff f85a 	bl	8001cec <HAL_GetTick>
 8002c38:	eba0 0008 	sub.w	r0, r0, r8
 8002c3c:	4548      	cmp	r0, r9
 8002c3e:	d9f6      	bls.n	8002c2e <HAL_RCC_OscConfig+0x19a>
 8002c40:	e7c8      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c46:	d104      	bne.n	8002c52 <HAL_RCC_OscConfig+0x1be>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4e:	6023      	str	r3, [r4, #0]
 8002c50:	e7e4      	b.n	8002c1c <HAL_RCC_OscConfig+0x188>
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c58:	6022      	str	r2, [r4, #0]
 8002c5a:	6822      	ldr	r2, [r4, #0]
 8002c5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c60:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1de      	bne.n	8002c24 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002c66:	f7ff f841 	bl	8001cec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c6e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	0399      	lsls	r1, r3, #14
 8002c74:	f57f af61 	bpl.w	8002b3a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7ff f838 	bl	8001cec <HAL_GetTick>
 8002c7c:	eba0 0008 	sub.w	r0, r0, r8
 8002c80:	4548      	cmp	r0, r9
 8002c82:	d9f5      	bls.n	8002c70 <HAL_RCC_OscConfig+0x1dc>
 8002c84:	e7a6      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c86:	2e04      	cmp	r6, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1fe>
 8002c8a:	2e0c      	cmp	r6, #12
 8002c8c:	d110      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x21c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c8e:	2f02      	cmp	r7, #2
 8002c90:	d10e      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	055a      	lsls	r2, r3, #21
 8002c96:	d503      	bpl.n	8002ca0 <HAL_RCC_OscConfig+0x20c>
 8002c98:	68eb      	ldr	r3, [r5, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f43f aefe 	beq.w	8002a9c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	6863      	ldr	r3, [r4, #4]
 8002ca2:	692a      	ldr	r2, [r5, #16]
 8002ca4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002ca8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cac:	6063      	str	r3, [r4, #4]
 8002cae:	e748      	b.n	8002b42 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb0:	68eb      	ldr	r3, [r5, #12]
 8002cb2:	b17b      	cbz	r3, 8002cd4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cbc:	f7ff f816 	bl	8001cec <HAL_GetTick>
 8002cc0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	055b      	lsls	r3, r3, #21
 8002cc6:	d4eb      	bmi.n	8002ca0 <HAL_RCC_OscConfig+0x20c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc8:	f7ff f810 	bl	8001cec <HAL_GetTick>
 8002ccc:	1bc0      	subs	r0, r0, r7
 8002cce:	2802      	cmp	r0, #2
 8002cd0:	d9f7      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x22e>
 8002cd2:	e77f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cda:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cdc:	f7ff f806 	bl	8001cec <HAL_GetTick>
 8002ce0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	0558      	lsls	r0, r3, #21
 8002ce6:	f57f af2c 	bpl.w	8002b42 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe ffff 	bl	8001cec <HAL_GetTick>
 8002cee:	1bc0      	subs	r0, r0, r7
 8002cf0:	2802      	cmp	r0, #2
 8002cf2:	d9f6      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x24e>
 8002cf4:	e76e      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08047a4c 	.word	0x08047a4c
 8002d00:	20000074 	.word	0x20000074
 8002d04:	2000007c 	.word	0x2000007c
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d08:	696b      	ldr	r3, [r5, #20]
 8002d0a:	b19b      	cbz	r3, 8002d34 <HAL_RCC_OscConfig+0x2a0>
      __HAL_RCC_LSI_ENABLE();
 8002d0c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d18:	f7fe ffe8 	bl	8001cec <HAL_GetTick>
 8002d1c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d22:	079b      	lsls	r3, r3, #30
 8002d24:	f53f af11 	bmi.w	8002b4a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe ffe0 	bl	8001cec <HAL_GetTick>
 8002d2c:	1bc0      	subs	r0, r0, r7
 8002d2e:	2802      	cmp	r0, #2
 8002d30:	d9f5      	bls.n	8002d1e <HAL_RCC_OscConfig+0x28a>
 8002d32:	e74f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002d34:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d40:	f7fe ffd4 	bl	8001cec <HAL_GetTick>
 8002d44:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d46:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d4a:	0798      	lsls	r0, r3, #30
 8002d4c:	f57f aefd 	bpl.w	8002b4a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d50:	f7fe ffcc 	bl	8001cec <HAL_GetTick>
 8002d54:	1bc0      	subs	r0, r0, r7
 8002d56:	2802      	cmp	r0, #2
 8002d58:	d9f5      	bls.n	8002d46 <HAL_RCC_OscConfig+0x2b2>
 8002d5a:	e73b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d5e:	00d9      	lsls	r1, r3, #3
 8002d60:	d429      	bmi.n	8002db6 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d74:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d78:	4f89      	ldr	r7, [pc, #548]	; (8002fa0 <HAL_RCC_OscConfig+0x50c>)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	05da      	lsls	r2, r3, #23
 8002d7e:	d51d      	bpl.n	8002dbc <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	68ab      	ldr	r3, [r5, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d12b      	bne.n	8002dde <HAL_RCC_OscConfig+0x34a>
 8002d86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002d92:	f7fe ffab 	bl	8001cec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d9a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002da0:	0798      	lsls	r0, r3, #30
 8002da2:	d542      	bpl.n	8002e2a <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8002da4:	f1b8 0f00 	cmp.w	r8, #0
 8002da8:	f43f aed3 	beq.w	8002b52 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	65a3      	str	r3, [r4, #88]	; 0x58
 8002db4:	e6cd      	b.n	8002b52 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	f04f 0800 	mov.w	r8, #0
 8002dba:	e7dd      	b.n	8002d78 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002dc4:	f7fe ff92 	bl	8001cec <HAL_GetTick>
 8002dc8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	d4d7      	bmi.n	8002d80 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fe ff8c 	bl	8001cec <HAL_GetTick>
 8002dd4:	eba0 0009 	sub.w	r0, r0, r9
 8002dd8:	2802      	cmp	r0, #2
 8002dda:	d9f6      	bls.n	8002dca <HAL_RCC_OscConfig+0x336>
 8002ddc:	e6fa      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x35c>
 8002de2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002dee:	e7ca      	b.n	8002d86 <HAL_RCC_OscConfig+0x2f2>
 8002df0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002dfc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002e00:	f022 0204 	bic.w	r2, r2, #4
 8002e04:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1c2      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8002e0c:	f7fe ff6e 	bl	8001cec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e14:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e1a:	0799      	lsls	r1, r3, #30
 8002e1c:	d5c2      	bpl.n	8002da4 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe ff65 	bl	8001cec <HAL_GetTick>
 8002e22:	1bc0      	subs	r0, r0, r7
 8002e24:	4548      	cmp	r0, r9
 8002e26:	d9f6      	bls.n	8002e16 <HAL_RCC_OscConfig+0x382>
 8002e28:	e6d4      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe ff5f 	bl	8001cec <HAL_GetTick>
 8002e2e:	1bc0      	subs	r0, r0, r7
 8002e30:	4548      	cmp	r0, r9
 8002e32:	d9b3      	bls.n	8002d9c <HAL_RCC_OscConfig+0x308>
 8002e34:	e6ce      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	f040 808f 	bne.w	8002f5a <HAL_RCC_OscConfig+0x4c6>
      pll_config = RCC->PLLCFGR;
 8002e3c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002e40:	f003 0103 	and.w	r1, r3, #3
 8002e44:	4291      	cmp	r1, r2
 8002e46:	d124      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e48:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002e4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e4e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e50:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e54:	d11d      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e56:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002e58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e60:	d117      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e62:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002e64:	3a07      	subs	r2, #7
 8002e66:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002e6a:	bf18      	it	ne
 8002e6c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6e:	4291      	cmp	r1, r2
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e72:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002e74:	0852      	lsrs	r2, r2, #1
 8002e76:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002e7a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e7c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e82:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e84:	0852      	lsrs	r2, r2, #1
 8002e86:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002e8a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002e90:	d04a      	beq.n	8002f28 <HAL_RCC_OscConfig+0x494>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e92:	2e0c      	cmp	r6, #12
 8002e94:	f43f ae02 	beq.w	8002a9c <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	f53f adfe 	bmi.w	8002a9c <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	f53f adfa 	bmi.w	8002a9c <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002eb0:	f7fe ff1c 	bl	8001cec <HAL_GetTick>
 8002eb4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	019f      	lsls	r7, r3, #6
 8002eba:	d42f      	bmi.n	8002f1c <HAL_RCC_OscConfig+0x488>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	68e2      	ldr	r2, [r4, #12]
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x510>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ecc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ece:	3a01      	subs	r2, #1
 8002ed0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002ed4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002ed6:	0912      	lsrs	r2, r2, #4
 8002ed8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002edc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002ee6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ee8:	0852      	lsrs	r2, r2, #1
 8002eea:	3a01      	subs	r2, #1
 8002eec:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002ef0:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002efa:	68e3      	ldr	r3, [r4, #12]
 8002efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f00:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002f02:	f7fe fef3 	bl	8001cec <HAL_GetTick>
 8002f06:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	0198      	lsls	r0, r3, #6
 8002f0c:	f53f ae25 	bmi.w	8002b5a <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe feec 	bl	8001cec <HAL_GetTick>
 8002f14:	1b40      	subs	r0, r0, r5
 8002f16:	2802      	cmp	r0, #2
 8002f18:	d9f6      	bls.n	8002f08 <HAL_RCC_OscConfig+0x474>
 8002f1a:	e65b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fee6 	bl	8001cec <HAL_GetTick>
 8002f20:	1b80      	subs	r0, r0, r6
 8002f22:	2802      	cmp	r0, #2
 8002f24:	d9c7      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x422>
 8002f26:	e655      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	0199      	lsls	r1, r3, #6
 8002f2c:	f53f ae15 	bmi.w	8002b5a <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f36:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f38:	68e3      	ldr	r3, [r4, #12]
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002f40:	f7fe fed4 	bl	8001cec <HAL_GetTick>
 8002f44:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	f53f ae06 	bmi.w	8002b5a <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe fecd 	bl	8001cec <HAL_GetTick>
 8002f52:	1b40      	subs	r0, r0, r5
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d9f6      	bls.n	8002f46 <HAL_RCC_OscConfig+0x4b2>
 8002f58:	e63c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5a:	2e0c      	cmp	r6, #12
 8002f5c:	f43f ad9e 	beq.w	8002a9c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f6e:	bf02      	ittt	eq
 8002f70:	68e3      	ldreq	r3, [r4, #12]
 8002f72:	f023 0303 	biceq.w	r3, r3, #3
 8002f76:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f78:	68e3      	ldr	r3, [r4, #12]
 8002f7a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002f84:	f7fe feb2 	bl	8001cec <HAL_GetTick>
 8002f88:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	f57f ade4 	bpl.w	8002b5a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe feab 	bl	8001cec <HAL_GetTick>
 8002f96:	1b40      	subs	r0, r0, r5
 8002f98:	2802      	cmp	r0, #2
 8002f9a:	d9f6      	bls.n	8002f8a <HAL_RCC_OscConfig+0x4f6>
 8002f9c:	e61a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x140>
 8002f9e:	bf00      	nop
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	f99d808c 	.word	0xf99d808c

08002fa8 <HAL_RCC_ClockConfig>:
{
 8002fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fac:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002fae:	4604      	mov	r4, r0
 8002fb0:	b910      	cbnz	r0, 8002fb8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002fb2:	2001      	movs	r0, #1
}
 8002fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4a40      	ldr	r2, [pc, #256]	; (80030bc <HAL_RCC_ClockConfig+0x114>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d32a      	bcc.n	800301a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	07d9      	lsls	r1, r3, #31
 8002fc8:	d432      	bmi.n	8003030 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fca:	6821      	ldr	r1, [r4, #0]
 8002fcc:	078a      	lsls	r2, r1, #30
 8002fce:	d45b      	bmi.n	8003088 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4a3a      	ldr	r2, [pc, #232]	; (80030bc <HAL_RCC_ClockConfig+0x114>)
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	42ab      	cmp	r3, r5
 8002fda:	d85d      	bhi.n	8003098 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	f011 0f04 	tst.w	r1, #4
 8002fe0:	4d37      	ldr	r5, [pc, #220]	; (80030c0 <HAL_RCC_ClockConfig+0x118>)
 8002fe2:	d164      	bne.n	80030ae <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	070b      	lsls	r3, r1, #28
 8002fe6:	d506      	bpl.n	8002ff6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe8:	68ab      	ldr	r3, [r5, #8]
 8002fea:	6922      	ldr	r2, [r4, #16]
 8002fec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ff0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ff4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff6:	f7ff fcff 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8002ffa:	68ab      	ldr	r3, [r5, #8]
 8002ffc:	4a31      	ldr	r2, [pc, #196]	; (80030c4 <HAL_RCC_ClockConfig+0x11c>)
 8002ffe:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	40d8      	lsrs	r0, r3
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_RCC_ClockConfig+0x120>)
 8003010:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <HAL_RCC_ClockConfig+0x124>)
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f7fe be23 	b.w	8001c60 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	f023 0307 	bic.w	r3, r3, #7
 8003020:	430b      	orrs	r3, r1
 8003022:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	428b      	cmp	r3, r1
 800302c:	d1c1      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xa>
 800302e:	e7c9      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003030:	6862      	ldr	r2, [r4, #4]
 8003032:	4e23      	ldr	r6, [pc, #140]	; (80030c0 <HAL_RCC_ClockConfig+0x118>)
 8003034:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003038:	d11a      	bne.n	8003070 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303e:	d0b8      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003040:	68b3      	ldr	r3, [r6, #8]
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	4313      	orrs	r3, r2
 8003048:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800304a:	f7fe fe4f 	bl	8001cec <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003052:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003054:	68b3      	ldr	r3, [r6, #8]
 8003056:	6862      	ldr	r2, [r4, #4]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003060:	d0b3      	beq.n	8002fca <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fe fe43 	bl	8001cec <HAL_GetTick>
 8003066:	1bc0      	subs	r0, r0, r7
 8003068:	4540      	cmp	r0, r8
 800306a:	d9f3      	bls.n	8003054 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 800306c:	2003      	movs	r0, #3
 800306e:	e7a1      	b.n	8002fb4 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003070:	2a02      	cmp	r2, #2
 8003072:	d102      	bne.n	800307a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003074:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003078:	e7e1      	b.n	800303e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800307a:	b912      	cbnz	r2, 8003082 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307c:	f013 0f02 	tst.w	r3, #2
 8003080:	e7dd      	b.n	800303e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003082:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003086:	e7da      	b.n	800303e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <HAL_RCC_ClockConfig+0x118>)
 800308a:	68a0      	ldr	r0, [r4, #8]
 800308c:	6893      	ldr	r3, [r2, #8]
 800308e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003092:	4303      	orrs	r3, r0
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	e79b      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003098:	6813      	ldr	r3, [r2, #0]
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	432b      	orrs	r3, r5
 80030a0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	6813      	ldr	r3, [r2, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	d182      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xa>
 80030ac:	e796      	b.n	8002fdc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ae:	68ab      	ldr	r3, [r5, #8]
 80030b0:	68e2      	ldr	r2, [r4, #12]
 80030b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60ab      	str	r3, [r5, #8]
 80030ba:	e793      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08047a4c 	.word	0x08047a4c
 80030c8:	20000074 	.word	0x20000074
 80030cc:	2000007c 	.word	0x2000007c

080030d0 <HAL_RCC_GetHCLKFreq>:
}
 80030d0:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000074 	.word	0x20000074

080030dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030de:	4c42      	ldr	r4, [pc, #264]	; (80031e8 <RCCEx_PLLSAI1_Config+0x10c>)
 80030e0:	68e2      	ldr	r2, [r4, #12]
 80030e2:	0793      	lsls	r3, r2, #30
{
 80030e4:	4605      	mov	r5, r0
 80030e6:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030e8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ea:	d029      	beq.n	8003140 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ec:	68e2      	ldr	r2, [r4, #12]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	4282      	cmp	r2, r0
 80030f4:	d13c      	bne.n	8003170 <RCCEx_PLLSAI1_Config+0x94>
       ||
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d03a      	beq.n	8003170 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030fa:	68e3      	ldr	r3, [r4, #12]
       ||
 80030fc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030fe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003102:	3301      	adds	r3, #1
       ||
 8003104:	4293      	cmp	r3, r2
 8003106:	d133      	bne.n	8003170 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800310e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fe fdec 	bl	8001cec <HAL_GetTick>
 8003114:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	011a      	lsls	r2, r3, #4
 800311a:	d432      	bmi.n	8003182 <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800311c:	68aa      	ldr	r2, [r5, #8]
 800311e:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003120:	2e00      	cmp	r6, #0
 8003122:	d035      	beq.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003124:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003126:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003128:	d14d      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312a:	6929      	ldr	r1, [r5, #16]
 800312c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003136:	3901      	subs	r1, #1
 8003138:	4313      	orrs	r3, r2
 800313a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800313e:	e031      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8003140:	2802      	cmp	r0, #2
 8003142:	d011      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x8c>
 8003144:	2803      	cmp	r0, #3
 8003146:	d015      	beq.n	8003174 <RCCEx_PLLSAI1_Config+0x98>
 8003148:	2801      	cmp	r0, #1
 800314a:	d111      	bne.n	8003170 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	0797      	lsls	r7, r2, #30
 8003150:	d51d      	bpl.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003152:	68e2      	ldr	r2, [r4, #12]
 8003154:	6869      	ldr	r1, [r5, #4]
 8003156:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800315a:	3901      	subs	r1, #1
 800315c:	ea42 0300 	orr.w	r3, r2, r0
 8003160:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003164:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003166:	e7cf      	b.n	8003108 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	d1f0      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8003170:	2001      	movs	r0, #1
 8003172:	e00c      	b.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	0391      	lsls	r1, r2, #14
 8003178:	d4eb      	bmi.n	8003152 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003180:	e7f5      	b.n	800316e <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003182:	f7fe fdb3 	bl	8001cec <HAL_GetTick>
 8003186:	1bc0      	subs	r0, r0, r7
 8003188:	2802      	cmp	r0, #2
 800318a:	d9c4      	bls.n	8003116 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 800318c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003190:	6923      	ldr	r3, [r4, #16]
 8003192:	68e9      	ldr	r1, [r5, #12]
 8003194:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	0909      	lsrs	r1, r1, #4
 800319e:	4313      	orrs	r3, r2
 80031a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a4:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ac:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80031ae:	f7fe fd9d 	bl	8001cec <HAL_GetTick>
 80031b2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	d510      	bpl.n	80031dc <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031ba:	6923      	ldr	r3, [r4, #16]
 80031bc:	69aa      	ldr	r2, [r5, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	6123      	str	r3, [r4, #16]
 80031c2:	2000      	movs	r0, #0
  return status;
 80031c4:	e7e3      	b.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c6:	6969      	ldr	r1, [r5, #20]
 80031c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031cc:	0849      	lsrs	r1, r1, #1
 80031ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d2:	3901      	subs	r1, #1
 80031d4:	4313      	orrs	r3, r2
 80031d6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80031da:	e7e3      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031dc:	f7fe fd86 	bl	8001cec <HAL_GetTick>
 80031e0:	1b80      	subs	r0, r0, r6
 80031e2:	2802      	cmp	r0, #2
 80031e4:	d9e6      	bls.n	80031b4 <RCCEx_PLLSAI1_Config+0xd8>
 80031e6:	e7d1      	b.n	800318c <RCCEx_PLLSAI1_Config+0xb0>
 80031e8:	40021000 	.word	0x40021000

080031ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ee:	4c3b      	ldr	r4, [pc, #236]	; (80032dc <RCCEx_PLLSAI2_Config+0xf0>)
 80031f0:	68e2      	ldr	r2, [r4, #12]
 80031f2:	0793      	lsls	r3, r2, #30
{
 80031f4:	4605      	mov	r5, r0
 80031f6:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031f8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fa:	d026      	beq.n	800324a <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031fc:	68e2      	ldr	r2, [r4, #12]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	4282      	cmp	r2, r0
 8003204:	d139      	bne.n	800327a <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8003206:	2a00      	cmp	r2, #0
 8003208:	d037      	beq.n	800327a <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800320a:	68e3      	ldr	r3, [r4, #12]
       ||
 800320c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800320e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003212:	3301      	adds	r3, #1
       ||
 8003214:	4293      	cmp	r3, r2
 8003216:	d130      	bne.n	800327a <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe fd64 	bl	8001cec <HAL_GetTick>
 8003224:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	009a      	lsls	r2, r3, #2
 800322a:	d42f      	bmi.n	800328c <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800322c:	68a9      	ldr	r1, [r5, #8]
 800322e:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003230:	b39e      	cbz	r6, 800329a <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003232:	6963      	ldr	r3, [r4, #20]
 8003234:	692a      	ldr	r2, [r5, #16]
 8003236:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800323a:	0852      	lsrs	r2, r2, #1
 800323c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003240:	3a01      	subs	r2, #1
 8003242:	430b      	orrs	r3, r1
 8003244:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003248:	e031      	b.n	80032ae <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 800324a:	2802      	cmp	r0, #2
 800324c:	d011      	beq.n	8003272 <RCCEx_PLLSAI2_Config+0x86>
 800324e:	2803      	cmp	r0, #3
 8003250:	d015      	beq.n	800327e <RCCEx_PLLSAI2_Config+0x92>
 8003252:	2801      	cmp	r0, #1
 8003254:	d111      	bne.n	800327a <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	0797      	lsls	r7, r2, #30
 800325a:	d51d      	bpl.n	8003298 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800325c:	68e2      	ldr	r2, [r4, #12]
 800325e:	6869      	ldr	r1, [r5, #4]
 8003260:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003264:	3901      	subs	r1, #1
 8003266:	ea42 0300 	orr.w	r3, r2, r0
 800326a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800326e:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003270:	e7d2      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003278:	d1f0      	bne.n	800325c <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 800327a:	2001      	movs	r0, #1
 800327c:	e00c      	b.n	8003298 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	0391      	lsls	r1, r2, #14
 8003282:	d4eb      	bmi.n	800325c <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800328a:	e7f5      	b.n	8003278 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800328c:	f7fe fd2e 	bl	8001cec <HAL_GetTick>
 8003290:	1bc0      	subs	r0, r0, r7
 8003292:	2802      	cmp	r0, #2
 8003294:	d9c7      	bls.n	8003226 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 8003296:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8003298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800329a:	6963      	ldr	r3, [r4, #20]
 800329c:	68ea      	ldr	r2, [r5, #12]
 800329e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a6:	0912      	lsrs	r2, r2, #4
 80032a8:	430b      	orrs	r3, r1
 80032aa:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ae:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80032b8:	f7fe fd18 	bl	8001cec <HAL_GetTick>
 80032bc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	d505      	bpl.n	80032d0 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032c4:	6963      	ldr	r3, [r4, #20]
 80032c6:	696a      	ldr	r2, [r5, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	6163      	str	r3, [r4, #20]
 80032cc:	2000      	movs	r0, #0
  return status;
 80032ce:	e7e3      	b.n	8003298 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032d0:	f7fe fd0c 	bl	8001cec <HAL_GetTick>
 80032d4:	1b80      	subs	r0, r0, r6
 80032d6:	2802      	cmp	r0, #2
 80032d8:	d9f1      	bls.n	80032be <RCCEx_PLLSAI2_Config+0xd2>
 80032da:	e7dc      	b.n	8003296 <RCCEx_PLLSAI2_Config+0xaa>
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80032e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e4:	6806      	ldr	r6, [r0, #0]
 80032e6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80032ea:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032ec:	d009      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80032ee:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80032f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80032f4:	d022      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032f6:	d813      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032f8:	b331      	cbz	r1, 8003348 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80032fa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80032fe:	d02a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003300:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	04d8      	lsls	r0, r3, #19
 8003306:	d509      	bpl.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003308:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800330a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800330e:	d02c      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003310:	d826      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8003312:	b381      	cbz	r1, 8003376 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8003314:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003318:	d072      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800331a:	2601      	movs	r6, #1
 800331c:	4635      	mov	r5, r6
 800331e:	e039      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003320:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003324:	d1ec      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003326:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003328:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800332a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800332e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003332:	430b      	orrs	r3, r1
 8003334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003338:	2600      	movs	r6, #0
 800333a:	e7e2      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800333c:	4a36      	ldr	r2, [pc, #216]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800333e:	68d3      	ldr	r3, [r2, #12]
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8003346:	e7ee      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003348:	3004      	adds	r0, #4
 800334a:	f7ff fec7 	bl	80030dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800334e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003350:	2800      	cmp	r0, #0
 8003352:	d1d6      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003354:	e7e7      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003356:	2100      	movs	r1, #0
 8003358:	3020      	adds	r0, #32
 800335a:	f7ff ff47 	bl	80031ec <RCCEx_PLLSAI2_Config>
 800335e:	e7f6      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003360:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003364:	d1d9      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003366:	4635      	mov	r5, r6
 8003368:	e009      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800336a:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800336c:	68d3      	ldr	r3, [r2, #12]
 800336e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003372:	60d3      	str	r3, [r2, #12]
      break;
 8003374:	e7f7      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003376:	1d20      	adds	r0, r4, #4
 8003378:	f7ff feb0 	bl	80030dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800337c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800337e:	2d00      	cmp	r5, #0
 8003380:	d144      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003382:	4a25      	ldr	r2, [pc, #148]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003384:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003386:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800338a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800338e:	430b      	orrs	r3, r1
 8003390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	0399      	lsls	r1, r3, #14
 8003398:	f140 815d 	bpl.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800339c:	4f1e      	ldr	r7, [pc, #120]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800339e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a0:	00da      	lsls	r2, r3, #3
 80033a2:	d435      	bmi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80033b6:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ba:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800341c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033be:	f8d9 3000 	ldr.w	r3, [r9]
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80033ca:	f7fe fc8f 	bl	8001cec <HAL_GetTick>
 80033ce:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d0:	f8d9 3000 	ldr.w	r3, [r9]
 80033d4:	05db      	lsls	r3, r3, #23
 80033d6:	d523      	bpl.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 80033d8:	bb4d      	cbnz	r5, 800342e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033e2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80033e6:	f040 810e 	bne.w	8003606 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033fc:	4635      	mov	r5, r6
 80033fe:	e016      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003400:	2100      	movs	r1, #0
 8003402:	f104 0020 	add.w	r0, r4, #32
 8003406:	f7ff fef1 	bl	80031ec <RCCEx_PLLSAI2_Config>
 800340a:	e7b7      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800340c:	462e      	mov	r6, r5
 800340e:	e7c1      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8003410:	f04f 0800 	mov.w	r8, #0
 8003414:	e7d1      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fe fc64 	bl	8001cec <HAL_GetTick>
 8003424:	eba0 000a 	sub.w	r0, r0, sl
 8003428:	2802      	cmp	r0, #2
 800342a:	d9d1      	bls.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800342c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800342e:	f1b8 0f00 	cmp.w	r8, #0
 8003432:	d003      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	07da      	lsls	r2, r3, #31
 8003440:	d508      	bpl.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003442:	499b      	ldr	r1, [pc, #620]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003444:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003446:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800344a:	f022 0203 	bic.w	r2, r2, #3
 800344e:	4302      	orrs	r2, r0
 8003450:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003454:	079f      	lsls	r7, r3, #30
 8003456:	d508      	bpl.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003458:	4995      	ldr	r1, [pc, #596]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800345a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800345c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003460:	f022 020c 	bic.w	r2, r2, #12
 8003464:	4302      	orrs	r2, r0
 8003466:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346a:	075e      	lsls	r6, r3, #29
 800346c:	d508      	bpl.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800346e:	4990      	ldr	r1, [pc, #576]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003470:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003472:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003476:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800347a:	4302      	orrs	r2, r0
 800347c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003480:	0718      	lsls	r0, r3, #28
 8003482:	d508      	bpl.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003484:	498a      	ldr	r1, [pc, #552]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003486:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003488:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800348c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003490:	4302      	orrs	r2, r0
 8003492:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003496:	06d9      	lsls	r1, r3, #27
 8003498:	d508      	bpl.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800349a:	4985      	ldr	r1, [pc, #532]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800349c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800349e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034a6:	4302      	orrs	r2, r0
 80034a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ac:	069a      	lsls	r2, r3, #26
 80034ae:	d508      	bpl.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b0:	497f      	ldr	r1, [pc, #508]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80034b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034bc:	4302      	orrs	r2, r0
 80034be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034c2:	059f      	lsls	r7, r3, #22
 80034c4:	d508      	bpl.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034c6:	497a      	ldr	r1, [pc, #488]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034c8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80034ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034ce:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80034d2:	4302      	orrs	r2, r0
 80034d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034d8:	055e      	lsls	r6, r3, #21
 80034da:	d508      	bpl.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034dc:	4974      	ldr	r1, [pc, #464]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034de:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80034e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80034e8:	4302      	orrs	r2, r0
 80034ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ee:	0658      	lsls	r0, r3, #25
 80034f0:	d508      	bpl.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f2:	496f      	ldr	r1, [pc, #444]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80034f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034fe:	4302      	orrs	r2, r0
 8003500:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003504:	0619      	lsls	r1, r3, #24
 8003506:	d508      	bpl.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003508:	4969      	ldr	r1, [pc, #420]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800350a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800350c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003510:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003514:	4302      	orrs	r2, r0
 8003516:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800351a:	05da      	lsls	r2, r3, #23
 800351c:	d508      	bpl.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800351e:	4964      	ldr	r1, [pc, #400]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003522:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003526:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800352a:	4302      	orrs	r2, r0
 800352c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003530:	049b      	lsls	r3, r3, #18
 8003532:	d510      	bpl.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003534:	4a5e      	ldr	r2, [pc, #376]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003536:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003538:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800353c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003540:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003542:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003546:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800354a:	f040 8086 	bne.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800354e:	68d3      	ldr	r3, [r2, #12]
 8003550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003554:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	031f      	lsls	r7, r3, #12
 800355a:	d50f      	bpl.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800355c:	4a54      	ldr	r2, [pc, #336]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800355e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003560:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003564:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003568:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800356a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800356e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003572:	d17e      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	68d3      	ldr	r3, [r2, #12]
 8003576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	035e      	lsls	r6, r3, #13
 8003580:	d50f      	bpl.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003582:	4a4b      	ldr	r2, [pc, #300]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003584:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003586:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800358a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800358e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003590:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003598:	d176      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359a:	68d3      	ldr	r3, [r2, #12]
 800359c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	0458      	lsls	r0, r3, #17
 80035a6:	d512      	bpl.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a8:	4941      	ldr	r1, [pc, #260]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035aa:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80035ac:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035b0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80035b4:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035b6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035be:	d16e      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035c0:	2102      	movs	r1, #2
 80035c2:	1d20      	adds	r0, r4, #4
 80035c4:	f7ff fd8a 	bl	80030dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80035c8:	2800      	cmp	r0, #0
 80035ca:	bf18      	it	ne
 80035cc:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	0411      	lsls	r1, r2, #16
 80035d2:	d508      	bpl.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035d4:	4936      	ldr	r1, [pc, #216]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035d6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80035d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035e0:	4303      	orrs	r3, r0
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e6:	03d3      	lsls	r3, r2, #15
 80035e8:	d509      	bpl.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ea:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035ec:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80035f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035f8:	430b      	orrs	r3, r1
 80035fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80035fe:	4628      	mov	r0, r5
 8003600:	b002      	add	sp, #8
 8003602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003606:	429a      	cmp	r2, r3
 8003608:	f43f aeef 	beq.w	80033ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800361c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003620:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003628:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800362a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800362e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003632:	f57f aeda 	bpl.w	80033ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8003636:	f7fe fb59 	bl	8001cec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800363e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003644:	0799      	lsls	r1, r3, #30
 8003646:	f53f aed0 	bmi.w	80033ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe fb4f 	bl	8001cec <HAL_GetTick>
 800364e:	1b40      	subs	r0, r0, r5
 8003650:	4548      	cmp	r0, r9
 8003652:	d9f5      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003654:	e6ea      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003656:	4635      	mov	r5, r6
 8003658:	e6f0      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800365a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800365e:	f47f af7a 	bne.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003662:	2101      	movs	r1, #1
 8003664:	1d20      	adds	r0, r4, #4
 8003666:	f7ff fd39 	bl	80030dc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800366a:	2800      	cmp	r0, #0
 800366c:	bf18      	it	ne
 800366e:	4605      	movne	r5, r0
 8003670:	e771      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003672:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003676:	d181      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003678:	2101      	movs	r1, #1
 800367a:	1d20      	adds	r0, r4, #4
 800367c:	f7ff fd2e 	bl	80030dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003680:	2800      	cmp	r0, #0
 8003682:	bf18      	it	ne
 8003684:	4605      	movne	r5, r0
 8003686:	e779      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003688:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800368c:	d189      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368e:	2101      	movs	r1, #1
 8003690:	1d20      	adds	r0, r4, #4
 8003692:	f7ff fd23 	bl	80030dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003696:	2800      	cmp	r0, #0
 8003698:	bf18      	it	ne
 800369a:	4605      	movne	r5, r0
 800369c:	e781      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800369e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80036a2:	d194      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036a4:	2102      	movs	r1, #2
 80036a6:	f104 0020 	add.w	r0, r4, #32
 80036aa:	f7ff fd9f 	bl	80031ec <RCCEx_PLLSAI2_Config>
 80036ae:	e78b      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80036b0:	40021000 	.word	0x40021000

080036b4 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCCEx_DisableLSECSS+0x18>)
 80036b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036ba:	f022 0220 	bic.w	r2, r2, #32
 80036be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	4770      	bx	lr
 80036cc:	40021000 	.word	0x40021000

080036d0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036d0:	4a02      	ldr	r2, [pc, #8]	; (80036dc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80036d2:	6813      	ldr	r3, [r2, #0]
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6013      	str	r3, [r2, #0]
}
 80036da:	4770      	bx	lr
 80036dc:	40021000 	.word	0x40021000

080036e0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d12f      	bne.n	800374c <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	2302      	movs	r3, #2
 80036ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f2:	6803      	ldr	r3, [r0, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_TIM_Base_Start_IT+0x6c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d016      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x4c>
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d013      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x4c>
 8003708:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800370c:	4293      	cmp	r3, r2
 800370e:	d00f      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x4c>
 8003710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003714:	4293      	cmp	r3, r2
 8003716:	d00b      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x4c>
 8003718:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x4c>
 8003720:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x4c>
 8003728:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800372c:	4293      	cmp	r3, r2
 800372e:	d107      	bne.n	8003740 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	4a08      	ldr	r2, [pc, #32]	; (8003754 <HAL_TIM_Base_Start_IT+0x70>)
 8003734:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003736:	2a06      	cmp	r2, #6
 8003738:	d006      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x64>
 800373a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800373e:	d003      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003748:	2000      	movs	r0, #0
}
 800374a:	4770      	bx	lr
    return HAL_ERROR;
 800374c:	2001      	movs	r0, #1
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	00010007 	.word	0x00010007

08003758 <HAL_TIM_OC_DelayElapsedCallback>:
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_IC_CaptureCallback>:
 800375a:	4770      	bx	lr

0800375c <HAL_TIM_PWM_PulseFinishedCallback>:
 800375c:	4770      	bx	lr

0800375e <HAL_TIM_TriggerCallback>:
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003760:	6803      	ldr	r3, [r0, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	0791      	lsls	r1, r2, #30
{
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800376a:	d50f      	bpl.n	800378c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	0792      	lsls	r2, r2, #30
 8003770:	d50c      	bpl.n	800378c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003772:	f06f 0202 	mvn.w	r2, #2
 8003776:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003778:	2201      	movs	r2, #1
 800377a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	0799      	lsls	r1, r3, #30
 8003780:	f000 8085 	beq.w	800388e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003784:	f7ff ffe9 	bl	800375a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003788:	2300      	movs	r3, #0
 800378a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	0752      	lsls	r2, r2, #29
 8003792:	d510      	bpl.n	80037b6 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	0750      	lsls	r0, r2, #29
 8003798:	d50d      	bpl.n	80037b6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800379a:	f06f 0204 	mvn.w	r2, #4
 800379e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a0:	2202      	movs	r2, #2
 80037a2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ac:	d075      	beq.n	800389a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	f7ff ffd4 	bl	800375a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	2300      	movs	r3, #0
 80037b4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	0711      	lsls	r1, r2, #28
 80037bc:	d50f      	bpl.n	80037de <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	0712      	lsls	r2, r2, #28
 80037c2:	d50c      	bpl.n	80037de <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c4:	f06f 0208 	mvn.w	r2, #8
 80037c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ca:	2204      	movs	r2, #4
 80037cc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d4:	d067      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	f7ff ffc0 	bl	800375a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	2300      	movs	r3, #0
 80037dc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	06d0      	lsls	r0, r2, #27
 80037e4:	d510      	bpl.n	8003808 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	06d1      	lsls	r1, r2, #27
 80037ea:	d50d      	bpl.n	8003808 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ec:	f06f 0210 	mvn.w	r2, #16
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f2:	2208      	movs	r2, #8
 80037f4:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037fe:	d058      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003800:	f7ff ffab 	bl	800375a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003804:	2300      	movs	r3, #0
 8003806:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	07d2      	lsls	r2, r2, #31
 800380e:	d508      	bpl.n	8003822 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	07d0      	lsls	r0, r2, #31
 8003814:	d505      	bpl.n	8003822 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003816:	f06f 0201 	mvn.w	r2, #1
 800381a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800381c:	4620      	mov	r0, r4
 800381e:	f7fd fcf9 	bl	8001214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	0611      	lsls	r1, r2, #24
 8003828:	d508      	bpl.n	800383c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	0612      	lsls	r2, r2, #24
 800382e:	d505      	bpl.n	800383c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003836:	4620      	mov	r0, r4
 8003838:	f000 f8d9 	bl	80039ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	05d0      	lsls	r0, r2, #23
 8003842:	d508      	bpl.n	8003856 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	0611      	lsls	r1, r2, #24
 8003848:	d505      	bpl.n	8003856 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800384a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800384e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003850:	4620      	mov	r0, r4
 8003852:	f000 f8cd 	bl	80039f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	0652      	lsls	r2, r2, #25
 800385c:	d508      	bpl.n	8003870 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	0650      	lsls	r0, r2, #25
 8003862:	d505      	bpl.n	8003870 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386a:	4620      	mov	r0, r4
 800386c:	f7ff ff77 	bl	800375e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	0691      	lsls	r1, r2, #26
 8003876:	d522      	bpl.n	80038be <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	0692      	lsls	r2, r2, #26
 800387c:	d51f      	bpl.n	80038be <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003882:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003884:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800388a:	f000 b8af 	b.w	80039ec <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	f7ff ff63 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003892:	4620      	mov	r0, r4
 8003894:	f7ff ff62 	bl	800375c <HAL_TIM_PWM_PulseFinishedCallback>
 8003898:	e776      	b.n	8003788 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	f7ff ff5d 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff ff5c 	bl	800375c <HAL_TIM_PWM_PulseFinishedCallback>
 80038a4:	e785      	b.n	80037b2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	f7ff ff57 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7ff ff56 	bl	800375c <HAL_TIM_PWM_PulseFinishedCallback>
 80038b0:	e793      	b.n	80037da <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	f7ff ff51 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7ff ff50 	bl	800375c <HAL_TIM_PWM_PulseFinishedCallback>
 80038bc:	e7a2      	b.n	8003804 <HAL_TIM_IRQHandler+0xa4>
}
 80038be:	bd10      	pop	{r4, pc}

080038c0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80038c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	4290      	cmp	r0, r2
 80038c6:	d012      	beq.n	80038ee <TIM_Base_SetConfig+0x2e>
 80038c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038cc:	d00f      	beq.n	80038ee <TIM_Base_SetConfig+0x2e>
 80038ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80038d2:	4290      	cmp	r0, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_Base_SetConfig+0x2e>
 80038d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038da:	4290      	cmp	r0, r2
 80038dc:	d007      	beq.n	80038ee <TIM_Base_SetConfig+0x2e>
 80038de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038e2:	4290      	cmp	r0, r2
 80038e4:	d003      	beq.n	80038ee <TIM_Base_SetConfig+0x2e>
 80038e6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80038ea:	4290      	cmp	r0, r2
 80038ec:	d119      	bne.n	8003922 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80038ee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038f4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	4a23      	ldr	r2, [pc, #140]	; (8003984 <TIM_Base_SetConfig+0xc4>)
 80038f8:	4290      	cmp	r0, r2
 80038fa:	d01d      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 80038fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003900:	d01a      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 8003902:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003906:	4290      	cmp	r0, r2
 8003908:	d016      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 800390a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800390e:	4290      	cmp	r0, r2
 8003910:	d012      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 8003912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003916:	4290      	cmp	r0, r2
 8003918:	d00e      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 800391a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800391e:	4290      	cmp	r0, r2
 8003920:	d00a      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 8003922:	4a19      	ldr	r2, [pc, #100]	; (8003988 <TIM_Base_SetConfig+0xc8>)
 8003924:	4290      	cmp	r0, r2
 8003926:	d007      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 8003928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800392c:	4290      	cmp	r0, r2
 800392e:	d003      	beq.n	8003938 <TIM_Base_SetConfig+0x78>
 8003930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003934:	4290      	cmp	r0, r2
 8003936:	d103      	bne.n	8003940 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003938:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	694a      	ldr	r2, [r1, #20]
 8003942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003946:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003948:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800394a:	688b      	ldr	r3, [r1, #8]
 800394c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800394e:	680b      	ldr	r3, [r1, #0]
 8003950:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <TIM_Base_SetConfig+0xc4>)
 8003954:	4298      	cmp	r0, r3
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0xb8>
 8003958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395c:	4298      	cmp	r0, r3
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0xb8>
 8003960:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003964:	4298      	cmp	r0, r3
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0xb8>
 8003968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800396c:	4298      	cmp	r0, r3
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0xb8>
 8003970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003974:	4298      	cmp	r0, r3
 8003976:	d101      	bne.n	800397c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003978:	690b      	ldr	r3, [r1, #16]
 800397a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397c:	2301      	movs	r3, #1
 800397e:	6143      	str	r3, [r0, #20]
}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40014000 	.word	0x40014000

0800398c <HAL_TIM_Base_Init>:
{
 800398c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800398e:	4604      	mov	r4, r0
 8003990:	b350      	cbz	r0, 80039e8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003996:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800399a:	b91b      	cbnz	r3, 80039a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800399c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039a0:	f7ff fe9e 	bl	80036e0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ac:	1d21      	adds	r1, r4, #4
 80039ae:	f7ff ff87 	bl	80038c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80039b8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80039be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80039ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80039d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039da:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80039de:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80039e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80039e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039e8:	2001      	movs	r0, #1
 80039ea:	e7fc      	b.n	80039e6 <HAL_TIM_Base_Init+0x5a>

080039ec <HAL_TIMEx_CommutCallback>:
 80039ec:	4770      	bx	lr

080039ee <HAL_TIMEx_BreakCallback>:
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_Break2Callback>:
 80039f0:	4770      	bx	lr
	...

080039f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039f4:	b084      	sub	sp, #16
 80039f6:	b510      	push	{r4, lr}
 80039f8:	4604      	mov	r4, r0
 80039fa:	a803      	add	r0, sp, #12
 80039fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a00:	68e3      	ldr	r3, [r4, #12]
 8003a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a06:	60e3      	str	r3, [r4, #12]
 8003a08:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <USB_CoreInit+0x58>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	d017      	beq.n	8003a3e <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a0e:	6922      	ldr	r2, [r4, #16]
 8003a10:	2a00      	cmp	r2, #0
 8003a12:	dafa      	bge.n	8003a0a <USB_CoreInit+0x16>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a14:	6923      	ldr	r3, [r4, #16]
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6123      	str	r3, [r4, #16]
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <USB_CoreInit+0x58>)

  do
  {
    if (++count > 200000U)
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	d00d      	beq.n	8003a3e <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a22:	6920      	ldr	r0, [r4, #16]
 8003a24:	f010 0001 	ands.w	r0, r0, #1
 8003a28:	d1f9      	bne.n	8003a1e <USB_CoreInit+0x2a>
  if (cfg.battery_charging_enable == 0U)
 8003a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a2c:	b94b      	cbnz	r3, 8003a42 <USB_CoreInit+0x4e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a34:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a3a:	b004      	add	sp, #16
 8003a3c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003a3e:	2003      	movs	r0, #3
 8003a40:	e7f3      	b.n	8003a2a <USB_CoreInit+0x36>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a48:	e7f4      	b.n	8003a34 <USB_CoreInit+0x40>
 8003a4a:	bf00      	nop
 8003a4c:	00030d41 	.word	0x00030d41

08003a50 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003a50:	2a02      	cmp	r2, #2
 8003a52:	d14a      	bne.n	8003aea <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <USB_SetTurnaroundTime+0xa4>)
 8003a56:	4a28      	ldr	r2, [pc, #160]	; (8003af8 <USB_SetTurnaroundTime+0xa8>)
 8003a58:	440b      	add	r3, r1
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d939      	bls.n	8003ad2 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a5e:	4b27      	ldr	r3, [pc, #156]	; (8003afc <USB_SetTurnaroundTime+0xac>)
 8003a60:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <USB_SetTurnaroundTime+0xb0>)
 8003a62:	440b      	add	r3, r1
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d936      	bls.n	8003ad6 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a68:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <USB_SetTurnaroundTime+0xb4>)
 8003a6a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8003a6e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d931      	bls.n	8003ada <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a76:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <USB_SetTurnaroundTime+0xb8>)
 8003a78:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8003a7c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d32c      	bcc.n	8003ade <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <USB_SetTurnaroundTime+0xbc>)
 8003a86:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <USB_SetTurnaroundTime+0xc0>)
 8003a88:	440b      	add	r3, r1
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d929      	bls.n	8003ae2 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a8e:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <USB_SetTurnaroundTime+0xc4>)
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <USB_SetTurnaroundTime+0xc8>)
 8003a92:	440b      	add	r3, r1
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d326      	bcc.n	8003ae6 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a98:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <USB_SetTurnaroundTime+0xcc>)
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <USB_SetTurnaroundTime+0xd0>)
 8003a9c:	440b      	add	r3, r1
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d323      	bcc.n	8003aea <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003aa2:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <USB_SetTurnaroundTime+0xd4>)
 8003aa4:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8003aa8:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d31e      	bcc.n	8003aee <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ab4:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	bf34      	ite	cc
 8003aba:	2307      	movcc	r3, #7
 8003abc:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003abe:	68c2      	ldr	r2, [r0, #12]
 8003ac0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003ac4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ac6:	68c2      	ldr	r2, [r0, #12]
 8003ac8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8003acc:	60c3      	str	r3, [r0, #12]
}
 8003ace:	2000      	movs	r0, #0
 8003ad0:	4770      	bx	lr
      UsbTrd = 0xFU;
 8003ad2:	230f      	movs	r3, #15
 8003ad4:	e7f3      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 8003ad6:	230e      	movs	r3, #14
 8003ad8:	e7f1      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8003ada:	230d      	movs	r3, #13
 8003adc:	e7ef      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 8003ade:	230c      	movs	r3, #12
 8003ae0:	e7ed      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 8003ae2:	230b      	movs	r3, #11
 8003ae4:	e7eb      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	e7e9      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003aea:	2309      	movs	r3, #9
 8003aec:	e7e7      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8003aee:	2308      	movs	r3, #8
 8003af0:	e7e5      	b.n	8003abe <USB_SetTurnaroundTime+0x6e>
 8003af2:	bf00      	nop
 8003af4:	ff275340 	.word	0xff275340
 8003af8:	000c34ff 	.word	0x000c34ff
 8003afc:	ff1b1e40 	.word	0xff1b1e40
 8003b00:	000f423f 	.word	0x000f423f
 8003b04:	00124f7f 	.word	0x00124f7f
 8003b08:	0013d620 	.word	0x0013d620
 8003b0c:	fee5b660 	.word	0xfee5b660
 8003b10:	0016e35f 	.word	0x0016e35f
 8003b14:	feced300 	.word	0xfeced300
 8003b18:	001b7740 	.word	0x001b7740
 8003b1c:	feb35bc0 	.word	0xfeb35bc0
 8003b20:	002191c0 	.word	0x002191c0
 8003b24:	00387520 	.word	0x00387520
 8003b28:	fe5954e0 	.word	0xfe5954e0
 8003b2c:	00419ce0 	.word	0x00419ce0

08003b30 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b30:	6883      	ldr	r3, [r0, #8]
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6083      	str	r3, [r0, #8]
}
 8003b38:	2000      	movs	r0, #0
 8003b3a:	4770      	bx	lr

08003b3c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b3c:	6883      	ldr	r3, [r0, #8]
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	6083      	str	r3, [r0, #8]
}
 8003b44:	2000      	movs	r0, #0
 8003b46:	4770      	bx	lr

08003b48 <USB_SetCurrentMode>:
{
 8003b48:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b4a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003b4c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b4e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b52:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003b54:	d108      	bne.n	8003b68 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b56:	68c3      	ldr	r3, [r0, #12]
 8003b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b5c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003b5e:	2032      	movs	r0, #50	; 0x32
 8003b60:	f7fe f8ca 	bl	8001cf8 <HAL_Delay>
  return HAL_OK;
 8003b64:	2000      	movs	r0, #0
}
 8003b66:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003b68:	b919      	cbnz	r1, 8003b72 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b6a:	68c3      	ldr	r3, [r0, #12]
 8003b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b70:	e7f4      	b.n	8003b5c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003b72:	2001      	movs	r0, #1
 8003b74:	e7f7      	b.n	8003b66 <USB_SetCurrentMode+0x1e>
	...

08003b78 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b78:	0189      	lsls	r1, r1, #6
 8003b7a:	f041 0120 	orr.w	r1, r1, #32
 8003b7e:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <USB_FlushTxFifo+0x20>)
 8003b80:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003b82:	3a01      	subs	r2, #1
 8003b84:	d005      	beq.n	8003b92 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b86:	6903      	ldr	r3, [r0, #16]
 8003b88:	f013 0320 	ands.w	r3, r3, #32
 8003b8c:	d1f9      	bne.n	8003b82 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003b8e:	4618      	mov	r0, r3
 8003b90:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003b92:	2003      	movs	r0, #3
}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	00030d41 	.word	0x00030d41

08003b9c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	4a06      	ldr	r2, [pc, #24]	; (8003bb8 <USB_FlushRxFifo+0x1c>)
 8003ba0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003ba2:	3a01      	subs	r2, #1
 8003ba4:	d005      	beq.n	8003bb2 <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ba6:	6903      	ldr	r3, [r0, #16]
 8003ba8:	f013 0310 	ands.w	r3, r3, #16
 8003bac:	d1f9      	bne.n	8003ba2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003bae:	4618      	mov	r0, r3
 8003bb0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003bb2:	2003      	movs	r0, #3
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	00030d41 	.word	0x00030d41

08003bbc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003bbc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003bc0:	4319      	orrs	r1, r3
 8003bc2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	4770      	bx	lr
	...

08003bcc <USB_DevInit>:
{
 8003bcc:	b084      	sub	sp, #16
 8003bce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	a809      	add	r0, sp, #36	; 0x24
 8003bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003bda:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8003be0:	4619      	mov	r1, r3
 8003be2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003be6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8003bea:	3301      	adds	r3, #1
 8003bec:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8003bee:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003bf0:	d1f7      	bne.n	8003be2 <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bf2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	d164      	bne.n	8003cc4 <USB_DevInit+0xf8>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bfa:	6873      	ldr	r3, [r6, #4]
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c08:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c10:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c18:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003c1a:	2500      	movs	r5, #0
 8003c1c:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c20:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003c24:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c28:	2103      	movs	r1, #3
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff ffc6 	bl	8003bbc <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c30:	2110      	movs	r1, #16
 8003c32:	4620      	mov	r0, r4
 8003c34:	f7ff ffa0 	bl	8003b78 <USB_FlushTxFifo>
 8003c38:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7ff ffae 	bl	8003b9c <USB_FlushRxFifo>
 8003c40:	4308      	orrs	r0, r1
 8003c42:	b2c0      	uxtb	r0, r0
    ret = HAL_ERROR;
 8003c44:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 8003c46:	6135      	str	r5, [r6, #16]
    ret = HAL_ERROR;
 8003c48:	bf18      	it	ne
 8003c4a:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8003c4c:	6175      	str	r5, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c4e:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8003c52:	61f5      	str	r5, [r6, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c54:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c56:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c5a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c5e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c62:	4545      	cmp	r5, r8
 8003c64:	d133      	bne.n	8003cce <USB_DevInit+0x102>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c66:	2200      	movs	r2, #0
 8003c68:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c6c:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c6e:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c72:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c76:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7a:	4542      	cmp	r2, r8
 8003c7c:	d139      	bne.n	8003cf2 <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c7e:	6933      	ldr	r3, [r6, #16]
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c8a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003c8e:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c90:	69a3      	ldr	r3, [r4, #24]
 8003c92:	f043 0310 	orr.w	r3, r3, #16
 8003c96:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c98:	69a2      	ldr	r2, [r4, #24]
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <USB_DevInit+0x14c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ca2:	b11b      	cbz	r3, 8003cac <USB_DevInit+0xe0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ca4:	69a3      	ldr	r3, [r4, #24]
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003cac:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cae:	bf01      	itttt	eq
 8003cb0:	69a3      	ldreq	r3, [r4, #24]
 8003cb2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003cb6:	f043 0304 	orreq.w	r3, r3, #4
 8003cba:	61a3      	streq	r3, [r4, #24]
}
 8003cbc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	b004      	add	sp, #16
 8003cc2:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003cc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cca:	63a3      	str	r3, [r4, #56]	; 0x38
 8003ccc:	e7a5      	b.n	8003c1a <USB_DevInit+0x4e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cce:	f8d3 9000 	ldr.w	r9, [r3]
 8003cd2:	f1b9 0f00 	cmp.w	r9, #0
 8003cd6:	da0a      	bge.n	8003cee <USB_DevInit+0x122>
      if (i == 0U)
 8003cd8:	b93d      	cbnz	r5, 8003cea <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cda:	f8c3 c000 	str.w	ip, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cde:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce0:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ce2:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce6:	3320      	adds	r3, #32
 8003ce8:	e7bb      	b.n	8003c62 <USB_DevInit+0x96>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cea:	6019      	str	r1, [r3, #0]
 8003cec:	e7f7      	b.n	8003cde <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e7f5      	b.n	8003cde <USB_DevInit+0x112>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf2:	f8d3 9000 	ldr.w	r9, [r3]
 8003cf6:	f1b9 0f00 	cmp.w	r9, #0
 8003cfa:	da0a      	bge.n	8003d12 <USB_DevInit+0x146>
      if (i == 0U)
 8003cfc:	b93a      	cbnz	r2, 8003d0e <USB_DevInit+0x142>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cfe:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d02:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d04:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d06:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d0a:	3320      	adds	r3, #32
 8003d0c:	e7b5      	b.n	8003c7a <USB_DevInit+0xae>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d0e:	601d      	str	r5, [r3, #0]
 8003d10:	e7f7      	b.n	8003d02 <USB_DevInit+0x136>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d12:	6019      	str	r1, [r3, #0]
 8003d14:	e7f5      	b.n	8003d02 <USB_DevInit+0x136>
 8003d16:	bf00      	nop
 8003d18:	803c3800 	.word	0x803c3800

08003d1c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d1c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
    speed = 0xFU;
 8003d20:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d24:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 8003d28:	bf14      	ite	ne
 8003d2a:	2002      	movne	r0, #2
 8003d2c:	200f      	moveq	r0, #15
 8003d2e:	4770      	bx	lr

08003d30 <USB_ActivateEndpoint>:
{
 8003d30:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003d32:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d34:	2201      	movs	r2, #1
 8003d36:	f004 050f 	and.w	r5, r4, #15
 8003d3a:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
 8003d3c:	784d      	ldrb	r5, [r1, #1]
 8003d3e:	2d01      	cmp	r5, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d40:	f500 6300 	add.w	r3, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d44:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
 8003d48:	d119      	bne.n	8003d7e <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d4a:	69dd      	ldr	r5, [r3, #28]
 8003d4c:	432a      	orrs	r2, r5
 8003d4e:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d50:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003d54:	041a      	lsls	r2, r3, #16
 8003d56:	d410      	bmi.n	8003d7a <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d58:	688a      	ldr	r2, [r1, #8]
 8003d5a:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8003d5e:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d62:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d64:	432b      	orrs	r3, r5
 8003d66:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003d6a:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d76:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d7e:	69dc      	ldr	r4, [r3, #28]
 8003d80:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8003d84:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d86:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	d4f5      	bmi.n	8003d7a <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d8e:	688b      	ldr	r3, [r1, #8]
 8003d90:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d98:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8003d9a:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d9c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003dac:	e7e5      	b.n	8003d7a <USB_ActivateEndpoint+0x4a>
	...

08003db0 <USB_DeactivateEndpoint>:
{
 8003db0:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003db2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003db4:	7849      	ldrb	r1, [r1, #1]
 8003db6:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003db8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003dbc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003dc0:	f002 020f 	and.w	r2, r2, #15
  if (ep->is_in == 1U)
 8003dc4:	d122      	bne.n	8003e0c <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dc6:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	da0b      	bge.n	8003de6 <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dce:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003dd2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003dd6:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dda:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003dde:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003de2:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003de6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003de8:	2101      	movs	r1, #1
 8003dea:	fa01 f202 	lsl.w	r2, r1, r2
 8003dee:	ea24 0402 	bic.w	r4, r4, r2
 8003df2:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003df4:	69c1      	ldr	r1, [r0, #28]
 8003df6:	ea21 0202 	bic.w	r2, r1, r2
 8003dfa:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003dfc:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <USB_DeactivateEndpoint+0xa4>)
 8003e02:	400a      	ands	r2, r1
 8003e04:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8003e08:	2000      	movs	r0, #0
 8003e0a:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e0c:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e10:	2900      	cmp	r1, #0
 8003e12:	da0b      	bge.n	8003e2c <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e14:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e18:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003e1c:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e20:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e24:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003e28:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e2c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003e2e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e32:	fa01 f202 	lsl.w	r2, r1, r2
 8003e36:	ea24 0402 	bic.w	r4, r4, r2
 8003e3a:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e3c:	69c1      	ldr	r1, [r0, #28]
 8003e3e:	ea21 0202 	bic.w	r2, r1, r2
 8003e42:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e44:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e48:	4a03      	ldr	r2, [pc, #12]	; (8003e58 <USB_DeactivateEndpoint+0xa8>)
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003e50:	e7da      	b.n	8003e08 <USB_DeactivateEndpoint+0x58>
 8003e52:	bf00      	nop
 8003e54:	ec337800 	.word	0xec337800
 8003e58:	eff37800 	.word	0xeff37800

08003e5c <USB_EP0StartXfer>:
{
 8003e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003e5e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003e60:	780d      	ldrb	r5, [r1, #0]
    if (ep->xfer_len == 0U)
 8003e62:	694e      	ldr	r6, [r1, #20]
 8003e64:	4f2d      	ldr	r7, [pc, #180]	; (8003f1c <USB_EP0StartXfer+0xc0>)
 8003e66:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003f20 <USB_EP0StartXfer+0xc4>
  if (ep->is_in == 1U)
 8003e6a:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e6c:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 8003e70:	d134      	bne.n	8003edc <USB_EP0StartXfer+0x80>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e72:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8003e76:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0U)
 8003e78:	b9e6      	cbnz	r6, 8003eb4 <USB_EP0StartXfer+0x58>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e7a:	403a      	ands	r2, r7
 8003e7c:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e84:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	ea02 020c 	and.w	r2, r2, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e8c:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e8e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e96:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8003e9a:	694b      	ldr	r3, [r1, #20]
 8003e9c:	b143      	cbz	r3, 8003eb0 <USB_EP0StartXfer+0x54>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e9e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003ea2:	f005 050f 	and.w	r5, r5, #15
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	40ab      	lsls	r3, r5
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eb4:	ea02 020c 	and.w	r2, r2, ip
 8003eb8:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	403a      	ands	r2, r7
 8003ebe:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003ec0:	688a      	ldr	r2, [r1, #8]
 8003ec2:	42b2      	cmp	r2, r6
        ep->xfer_len = ep->maxpacket;
 8003ec4:	bf38      	it	cc
 8003ec6:	614a      	strcc	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ece:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ed0:	694a      	ldr	r2, [r1, #20]
 8003ed2:	691e      	ldr	r6, [r3, #16]
 8003ed4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003ed8:	4332      	orrs	r2, r6
 8003eda:	e7d7      	b.n	8003e8c <USB_EP0StartXfer+0x30>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003edc:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 8003ee0:	ea02 020c 	and.w	r2, r2, ip
 8003ee4:	f8c4 2b10 	str.w	r2, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ee8:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 8003eec:	403a      	ands	r2, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eee:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ef2:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003ef4:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8003ef6:	b106      	cbz	r6, 8003efa <USB_EP0StartXfer+0x9e>
      ep->xfer_len = ep->maxpacket;
 8003ef8:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003efa:	6919      	ldr	r1, [r3, #16]
 8003efc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8003f00:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003f02:	6919      	ldr	r1, [r3, #16]
 8003f04:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f0c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003f10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f14:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8003f18:	e7ca      	b.n	8003eb0 <USB_EP0StartXfer+0x54>
 8003f1a:	bf00      	nop
 8003f1c:	e007ffff 	.word	0xe007ffff
 8003f20:	fff80000 	.word	0xfff80000

08003f24 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8003f24:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f26:	3201      	adds	r2, #1
  count32b = ((uint32_t)len + 3U) / 4U;
 8003f28:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f2a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003f2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 8003f32:	4299      	cmp	r1, r3
 8003f34:	d101      	bne.n	8003f3a <USB_WritePacket+0x16>
}
 8003f36:	2000      	movs	r0, #0
 8003f38:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f3a:	f851 2b04 	ldr.w	r2, [r1], #4
 8003f3e:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < count32b; i++)
 8003f40:	e7f7      	b.n	8003f32 <USB_WritePacket+0xe>
	...

08003f44 <USB_EPStartXfer>:
{
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003f46:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003f48:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 8003f4a:	694b      	ldr	r3, [r1, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003f4c:	78ce      	ldrb	r6, [r1, #3]
 8003f4e:	4f53      	ldr	r7, [pc, #332]	; (800409c <USB_EPStartXfer+0x158>)
 8003f50:	f8df c150 	ldr.w	ip, [pc, #336]	; 80040a4 <USB_EPStartXfer+0x160>
  if (ep->is_in == 1U)
 8003f54:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f56:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8003f5a:	d15e      	bne.n	800401a <USB_EPStartXfer+0xd6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f5c:	f505 6410 	add.w	r4, r5, #2304	; 0x900
 8003f60:	f8d4 e010 	ldr.w	lr, [r4, #16]
    if (ep->xfer_len == 0U)
 8003f64:	b9f3      	cbnz	r3, 8003fa4 <USB_EPStartXfer+0x60>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f66:	ea0e 0707 	and.w	r7, lr, r7
 8003f6a:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f6c:	6927      	ldr	r7, [r4, #16]
 8003f6e:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8003f72:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f74:	6927      	ldr	r7, [r4, #16]
 8003f76:	ea07 070c 	and.w	r7, r7, ip
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f7a:	6127      	str	r7, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f7c:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8003f80:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f82:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003f86:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8003f8a:	d034      	beq.n	8003ff6 <USB_EPStartXfer+0xb2>
      if (ep->xfer_len > 0U)
 8003f8c:	b143      	cbz	r3, 8003fa0 <USB_EPStartXfer+0x5c>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f8e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003f92:	f002 010f 	and.w	r1, r2, #15
 8003f96:	2201      	movs	r2, #1
 8003f98:	408a      	lsls	r2, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa4:	ea0e 0c0c 	and.w	ip, lr, ip
 8003fa8:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fac:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003fb0:	ea0c 0707 	and.w	r7, ip, r7
 8003fb4:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003fb6:	688f      	ldr	r7, [r1, #8]
 8003fb8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003fbc:	eb07 0c03 	add.w	ip, r7, r3
 8003fc0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8003fc4:	fbbc fcf7 	udiv	ip, ip, r7
 8003fc8:	4f35      	ldr	r7, [pc, #212]	; (80040a0 <USB_EPStartXfer+0x15c>)
 8003fca:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8003fce:	ea47 070e 	orr.w	r7, r7, lr
 8003fd2:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fd4:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003fd8:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8003fdc:	ea47 070c 	orr.w	r7, r7, ip
      if (ep->type == EP_TYPE_ISOC)
 8003fe0:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fe2:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003fe4:	d1ca      	bne.n	8003f7c <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fe6:	6927      	ldr	r7, [r4, #16]
 8003fe8:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8003fec:	6127      	str	r7, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003fee:	6927      	ldr	r7, [r4, #16]
 8003ff0:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8003ff4:	e7c1      	b.n	8003f7a <USB_EPStartXfer+0x36>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff6:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003ffa:	68c9      	ldr	r1, [r1, #12]
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ffc:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004000:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8004004:	bf0c      	ite	eq
 8004006:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800400a:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 800400e:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004012:	b29b      	uxth	r3, r3
 8004014:	f7ff ff86 	bl	8003f24 <USB_WritePacket>
 8004018:	e7c2      	b.n	8003fa0 <USB_EPStartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800401a:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800401e:	6889      	ldr	r1, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004020:	ea04 040c 	and.w	r4, r4, ip
 8004024:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004028:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
 800402c:	403c      	ands	r4, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800402e:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004032:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 8004034:	b9f3      	cbnz	r3, 8004074 <USB_EPStartXfer+0x130>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004036:	6913      	ldr	r3, [r2, #16]
 8004038:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800403c:	4319      	orrs	r1, r3
 800403e:	6111      	str	r1, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004040:	6913      	ldr	r3, [r2, #16]
 8004042:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (ep->type == EP_TYPE_ISOC)
 8004046:	2e01      	cmp	r6, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004048:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800404a:	d10c      	bne.n	8004066 <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800404c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004050:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004054:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8004058:	bf0c      	ite	eq
 800405a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800405e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8004062:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004066:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800406a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800406e:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 8004072:	e795      	b.n	8003fa0 <USB_EPStartXfer+0x5c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004074:	4f0a      	ldr	r7, [pc, #40]	; (80040a0 <USB_EPStartXfer+0x15c>)
 8004076:	f8d2 c010 	ldr.w	ip, [r2, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800407a:	440b      	add	r3, r1
 800407c:	3b01      	subs	r3, #1
 800407e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004082:	b29c      	uxth	r4, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004084:	ea07 43c3 	and.w	r3, r7, r3, lsl #19
 8004088:	ea43 030c 	orr.w	r3, r3, ip
 800408c:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800408e:	6917      	ldr	r7, [r2, #16]
 8004090:	fb01 f304 	mul.w	r3, r1, r4
 8004094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004098:	433b      	orrs	r3, r7
 800409a:	e7d4      	b.n	8004046 <USB_EPStartXfer+0x102>
 800409c:	e007ffff 	.word	0xe007ffff
 80040a0:	1ff80000 	.word	0x1ff80000
 80040a4:	fff80000 	.word	0xfff80000

080040a8 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80040a8:	3203      	adds	r2, #3
 80040aa:	0892      	lsrs	r2, r2, #2
 80040ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040b0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80040b4:	4291      	cmp	r1, r2
 80040b6:	d101      	bne.n	80040bc <USB_ReadPacket+0x14>
}
 80040b8:	4608      	mov	r0, r1
 80040ba:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040bc:	6803      	ldr	r3, [r0, #0]
 80040be:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 80040c2:	e7f7      	b.n	80040b4 <USB_ReadPacket+0xc>

080040c4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80040c4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80040c6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80040c8:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040ca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80040ce:	d112      	bne.n	80040f6 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040d0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	db06      	blt.n	80040e6 <USB_EPSetStall+0x22>
 80040d8:	b12b      	cbz	r3, 80040e6 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040ee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80040f2:	2000      	movs	r0, #0
 80040f4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040f6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80040fa:	2a00      	cmp	r2, #0
 80040fc:	db06      	blt.n	800410c <USB_EPSetStall+0x48>
 80040fe:	b12b      	cbz	r3, 800410c <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004100:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004104:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004108:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800410c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004114:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004118:	e7eb      	b.n	80040f2 <USB_EPSetStall+0x2e>

0800411a <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800411a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800411c:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800411e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004122:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 8004124:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004126:	f1a3 0302 	sub.w	r3, r3, #2
 800412a:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800412c:	d10f      	bne.n	800414e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800412e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004132:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004134:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004138:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800413c:	d805      	bhi.n	800414a <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800413e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004146:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800414a:	2000      	movs	r0, #0
 800414c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800414e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004152:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004156:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004158:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800415c:	bf9e      	ittt	ls
 800415e:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8004162:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8004166:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 800416a:	e7ee      	b.n	800414a <USB_EPClearStall+0x30>

0800416c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800416c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004170:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004174:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004178:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800417c:	0109      	lsls	r1, r1, #4
 800417e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8004182:	4319      	orrs	r1, r3
 8004184:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004188:	2000      	movs	r0, #0
 800418a:	4770      	bx	lr

0800418c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800418c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004190:	f023 0303 	bic.w	r3, r3, #3
 8004194:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004198:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800419c:	f023 0302 	bic.w	r3, r3, #2
 80041a0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80041a4:	2000      	movs	r0, #0
 80041a6:	4770      	bx	lr

080041a8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041a8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80041ac:	f023 0303 	bic.w	r3, r3, #3
 80041b0:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80041b8:	f043 0302 	orr.w	r3, r3, #2
 80041bc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80041c0:	2000      	movs	r0, #0
 80041c2:	4770      	bx	lr

080041c4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80041c4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80041c6:	6980      	ldr	r0, [r0, #24]
}
 80041c8:	4010      	ands	r0, r2
 80041ca:	4770      	bx	lr

080041cc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80041cc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80041d0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041d4:	69c0      	ldr	r0, [r0, #28]
 80041d6:	4018      	ands	r0, r3
}
 80041d8:	0c00      	lsrs	r0, r0, #16
 80041da:	4770      	bx	lr

080041dc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80041dc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80041e0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041e4:	69c0      	ldr	r0, [r0, #28]
 80041e6:	4018      	ands	r0, r3
}
 80041e8:	b280      	uxth	r0, r0
 80041ea:	4770      	bx	lr

080041ec <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041ec:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041f0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041f4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041f8:	6940      	ldr	r0, [r0, #20]
}
 80041fa:	4010      	ands	r0, r2
 80041fc:	4770      	bx	lr

080041fe <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80041fe:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004202:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004206:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800420a:	f001 010f 	and.w	r1, r1, #15
 800420e:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004210:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004214:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004216:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4313      	orrs	r3, r2
}
 800421c:	4018      	ands	r0, r3
 800421e:	4770      	bx	lr

08004220 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004220:	6940      	ldr	r0, [r0, #20]
}
 8004222:	f000 0001 	and.w	r0, r0, #1
 8004226:	4770      	bx	lr

08004228 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004228:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800422c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004230:	f023 0307 	bic.w	r3, r3, #7
 8004234:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004238:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004244:	2000      	movs	r0, #0
 8004246:	4770      	bx	lr

08004248 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004248:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800424a:	4a0c      	ldr	r2, [pc, #48]	; (800427c <USB_EP0_OutStart+0x34>)
 800424c:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800424e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004252:	d903      	bls.n	800425c <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004254:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004258:	2a00      	cmp	r2, #0
 800425a:	db0d      	blt.n	8004278 <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004266:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	f042 0218 	orr.w	r2, r2, #24
 800426e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8004276:	611a      	str	r2, [r3, #16]
}
 8004278:	2000      	movs	r0, #0
 800427a:	4770      	bx	lr
 800427c:	4f54300a 	.word	0x4f54300a

08004280 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004280:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004282:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004286:	b184      	cbz	r4, 80042aa <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004288:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800428c:	b15b      	cbz	r3, 80042a6 <USBD_CDC_EP0_RxReady+0x26>
 800428e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004292:	28ff      	cmp	r0, #255	; 0xff
 8004294:	d007      	beq.n	80042a6 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800429c:	4621      	mov	r1, r4
 800429e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80042a0:	23ff      	movs	r3, #255	; 0xff
 80042a2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80042a6:	2000      	movs	r0, #0
 80042a8:	e000      	b.n	80042ac <USBD_CDC_EP0_RxReady+0x2c>
    return (uint8_t)USBD_FAIL;
 80042aa:	2003      	movs	r0, #3
}
 80042ac:	bd10      	pop	{r4, pc}
	...

080042b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80042b0:	2343      	movs	r3, #67	; 0x43
 80042b2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80042b4:	4800      	ldr	r0, [pc, #0]	; (80042b8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80042b6:	4770      	bx	lr
 80042b8:	20000080 	.word	0x20000080

080042bc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80042bc:	2343      	movs	r3, #67	; 0x43
 80042be:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80042c0:	4800      	ldr	r0, [pc, #0]	; (80042c4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80042c2:	4770      	bx	lr
 80042c4:	200000c4 	.word	0x200000c4

080042c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80042c8:	2343      	movs	r3, #67	; 0x43
 80042ca:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80042cc:	4800      	ldr	r0, [pc, #0]	; (80042d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80042ce:	4770      	bx	lr
 80042d0:	20000108 	.word	0x20000108

080042d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80042d4:	230a      	movs	r3, #10
 80042d6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80042d8:	4800      	ldr	r0, [pc, #0]	; (80042dc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80042da:	4770      	bx	lr
 80042dc:	2000014c 	.word	0x2000014c

080042e0 <USBD_CDC_DataOut>:
{
 80042e0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80042e2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 80042e6:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 80042e8:	b16c      	cbz	r4, 8004306 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80042ea:	f7fd fc17 	bl	8001b1c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80042ee:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80042f2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80042fc:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004300:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004302:	2000      	movs	r0, #0
}
 8004304:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004306:	2003      	movs	r0, #3
 8004308:	e7fc      	b.n	8004304 <USBD_CDC_DataOut+0x24>

0800430a <USBD_CDC_DataIn>:
{
 800430a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800430c:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004310:	f8d0 72c4 	ldr.w	r7, [r0, #708]	; 0x2c4
{
 8004314:	4603      	mov	r3, r0
 8004316:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 8004318:	b325      	cbz	r5, 8004364 <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800431a:	2614      	movs	r6, #20
 800431c:	fb06 0601 	mla	r6, r6, r1, r0
 8004320:	69b4      	ldr	r4, [r6, #24]
 8004322:	b184      	cbz	r4, 8004346 <USBD_CDC_DataIn+0x3c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004324:	f04f 0c1c 	mov.w	ip, #28
 8004328:	fb0c 7701 	mla	r7, ip, r1, r7
 800432c:	6c7f      	ldr	r7, [r7, #68]	; 0x44
 800432e:	fbb4 fcf7 	udiv	ip, r4, r7
 8004332:	fb07 441c 	mls	r4, r7, ip, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004336:	b934      	cbnz	r4, 8004346 <USBD_CDC_DataIn+0x3c>
    pdev->ep_in[epnum].total_length = 0U;
 8004338:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800433a:	4623      	mov	r3, r4
 800433c:	4622      	mov	r2, r4
 800433e:	f7fd fbdf 	bl	8001b00 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004342:	4620      	mov	r0, r4
 8004344:	e00d      	b.n	8004362 <USBD_CDC_DataIn+0x58>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800434a:	691c      	ldr	r4, [r3, #16]
    hcdc->TxState = 0U;
 800434c:	2600      	movs	r6, #0
 800434e:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004352:	2c00      	cmp	r4, #0
 8004354:	d0f5      	beq.n	8004342 <USBD_CDC_DataIn+0x38>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004356:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800435a:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800435e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8004360:	4630      	mov	r0, r6
}
 8004362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8004364:	2003      	movs	r0, #3
 8004366:	e7fc      	b.n	8004362 <USBD_CDC_DataIn+0x58>

08004368 <USBD_CDC_Setup>:
{
 8004368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800436c:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8004370:	f04f 0800 	mov.w	r8, #0
{
 8004374:	4605      	mov	r5, r0
 8004376:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8004378:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800437c:	f8ad 8006 	strh.w	r8, [sp, #6]
  if (hcdc == NULL)
 8004380:	2f00      	cmp	r7, #0
 8004382:	d06a      	beq.n	800445a <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004384:	780a      	ldrb	r2, [r1, #0]
 8004386:	f012 0460 	ands.w	r4, r2, #96	; 0x60
 800438a:	d02b      	beq.n	80043e4 <USBD_CDC_Setup+0x7c>
 800438c:	2c20      	cmp	r4, #32
 800438e:	d160      	bne.n	8004452 <USBD_CDC_Setup+0xea>
      if (req->wLength != 0U)
 8004390:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004392:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength != 0U)
 8004394:	b1fc      	cbz	r4, 80043d6 <USBD_CDC_Setup+0x6e>
        if ((req->bmRequest & 0x80U) != 0U)
 8004396:	0612      	lsls	r2, r2, #24
 8004398:	d514      	bpl.n	80043c4 <USBD_CDC_Setup+0x5c>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800439a:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800439e:	4639      	mov	r1, r7
 80043a0:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80043a4:	4618      	mov	r0, r3
 80043a6:	4622      	mov	r2, r4
 80043a8:	47c8      	blx	r9
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80043aa:	88f2      	ldrh	r2, [r6, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80043ac:	2a07      	cmp	r2, #7
 80043ae:	bf28      	it	cs
 80043b0:	2207      	movcs	r2, #7
 80043b2:	4639      	mov	r1, r7
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 fca1 	bl	8004cfc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80043ba:	4644      	mov	r4, r8
}
 80043bc:	4620      	mov	r0, r4
 80043be:	b003      	add	sp, #12
 80043c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 80043c4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80043c8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80043cc:	4622      	mov	r2, r4
 80043ce:	4639      	mov	r1, r7
 80043d0:	f000 fca9 	bl	8004d26 <USBD_CtlPrepareRx>
 80043d4:	e7f1      	b.n	80043ba <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043d6:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80043da:	4618      	mov	r0, r3
 80043dc:	6895      	ldr	r5, [r2, #8]
 80043de:	4622      	mov	r2, r4
 80043e0:	47a8      	blx	r5
 80043e2:	e7eb      	b.n	80043bc <USBD_CDC_Setup+0x54>
      switch (req->bRequest)
 80043e4:	784f      	ldrb	r7, [r1, #1]
 80043e6:	2f0b      	cmp	r7, #11
 80043e8:	d833      	bhi.n	8004452 <USBD_CDC_Setup+0xea>
 80043ea:	a301      	add	r3, pc, #4	; (adr r3, 80043f0 <USBD_CDC_Setup+0x88>)
 80043ec:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80043f0:	08004421 	.word	0x08004421
 80043f4:	080043bd 	.word	0x080043bd
 80043f8:	08004453 	.word	0x08004453
 80043fc:	08004453 	.word	0x08004453
 8004400:	08004453 	.word	0x08004453
 8004404:	08004453 	.word	0x08004453
 8004408:	08004453 	.word	0x08004453
 800440c:	08004453 	.word	0x08004453
 8004410:	08004453 	.word	0x08004453
 8004414:	08004453 	.word	0x08004453
 8004418:	08004437 	.word	0x08004437
 800441c:	0800444b 	.word	0x0800444b
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004420:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004424:	2b03      	cmp	r3, #3
 8004426:	d114      	bne.n	8004452 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004428:	2202      	movs	r2, #2
 800442a:	f10d 0106 	add.w	r1, sp, #6
 800442e:	f000 fc65 	bl	8004cfc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004432:	463c      	mov	r4, r7
 8004434:	e7c2      	b.n	80043bc <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004436:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800443a:	2b03      	cmp	r3, #3
 800443c:	d109      	bne.n	8004452 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800443e:	2201      	movs	r2, #1
 8004440:	f10d 0105 	add.w	r1, sp, #5
 8004444:	f000 fc5a 	bl	8004cfc <USBD_CtlSendData>
 8004448:	e7b8      	b.n	80043bc <USBD_CDC_Setup+0x54>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800444a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800444e:	2b03      	cmp	r3, #3
 8004450:	d0b4      	beq.n	80043bc <USBD_CDC_Setup+0x54>
          USBD_CtlError(pdev, req);
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	f000 fc2a 	bl	8004cae <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800445a:	2403      	movs	r4, #3
 800445c:	e7ae      	b.n	80043bc <USBD_CDC_Setup+0x54>
 800445e:	bf00      	nop

08004460 <USBD_CDC_DeInit>:
{
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004464:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004466:	2181      	movs	r1, #129	; 0x81
 8004468:	f7fd fb1b 	bl	8001aa2 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800446c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800446e:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004470:	4620      	mov	r0, r4
 8004472:	f7fd fb16 	bl	8001aa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004476:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800447a:	2182      	movs	r1, #130	; 0x82
 800447c:	4620      	mov	r0, r4
 800447e:	f7fd fb10 	bl	8001aa2 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004482:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004486:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8004488:	b14b      	cbz	r3, 800449e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800448a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004492:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8004496:	f014 ff63 	bl	8019360 <free>
    pdev->pClassData = NULL;
 800449a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800449e:	2000      	movs	r0, #0
 80044a0:	bd38      	pop	{r3, r4, r5, pc}

080044a2 <USBD_CDC_Init>:
{
 80044a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a6:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80044a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80044ac:	f014 ff50 	bl	8019350 <malloc>
  if (hcdc == NULL)
 80044b0:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 80044b2:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 80044b6:	b918      	cbnz	r0, 80044c0 <USBD_CDC_Init+0x1e>
    return (uint8_t)USBD_EMEM;
 80044b8:	2602      	movs	r6, #2
}
 80044ba:	4630      	mov	r0, r6
 80044bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044c0:	7c23      	ldrb	r3, [r4, #16]
 80044c2:	bb8b      	cbnz	r3, 8004528 <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c8:	2181      	movs	r1, #129	; 0x81
 80044ca:	2202      	movs	r2, #2
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7fd fade 	bl	8001a8e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044d2:	2101      	movs	r1, #1
 80044d4:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044da:	2202      	movs	r2, #2
 80044dc:	4620      	mov	r0, r4
 80044de:	f7fd fad6 	bl	8001a8e <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044e2:	2701      	movs	r7, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80044e4:	2310      	movs	r3, #16
 80044e6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044ea:	2203      	movs	r2, #3
 80044ec:	2308      	movs	r3, #8
 80044ee:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044f0:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7fd faca 	bl	8001a8e <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044fa:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044fe:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004506:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8004508:	f04f 0800 	mov.w	r8, #0
 800450c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8004510:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004514:	b996      	cbnz	r6, 800453c <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004516:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800451a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800451e:	4639      	mov	r1, r7
 8004520:	4620      	mov	r0, r4
 8004522:	f7fd faf4 	bl	8001b0e <USBD_LL_PrepareReceive>
 8004526:	e7c8      	b.n	80044ba <USBD_CDC_Init+0x18>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	2181      	movs	r1, #129	; 0x81
 800452c:	2202      	movs	r2, #2
 800452e:	4620      	mov	r0, r4
 8004530:	f7fd faad 	bl	8001a8e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004534:	2101      	movs	r1, #1
 8004536:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	e7ce      	b.n	80044da <USBD_CDC_Init+0x38>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800453c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004540:	2340      	movs	r3, #64	; 0x40
 8004542:	4639      	mov	r1, r7
 8004544:	4620      	mov	r0, r4
 8004546:	f7fd fae2 	bl	8001b0e <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800454a:	4646      	mov	r6, r8
 800454c:	e7b5      	b.n	80044ba <USBD_CDC_Init+0x18>

0800454e <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800454e:	b119      	cbz	r1, 8004558 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8004550:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004554:	2000      	movs	r0, #0
 8004556:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004558:	2003      	movs	r0, #3
}
 800455a:	4770      	bx	lr

0800455c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800455c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004560:	b12b      	cbz	r3, 800456e <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8004562:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004566:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800456a:	2000      	movs	r0, #0
 800456c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800456e:	2003      	movs	r0, #3
}
 8004570:	4770      	bx	lr

08004572 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004572:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004576:	b11b      	cbz	r3, 8004580 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8004578:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800457c:	2000      	movs	r0, #0
 800457e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004580:	2003      	movs	r0, #3
}
 8004582:	4770      	bx	lr

08004584 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004584:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8004588:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800458a:	b17a      	cbz	r2, 80045ac <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800458c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004590:	2301      	movs	r3, #1
 8004592:	b96c      	cbnz	r4, 80045b0 <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004594:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004598:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800459c:	62c3      	str	r3, [r0, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800459e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80045a2:	2181      	movs	r1, #129	; 0x81
 80045a4:	f7fd faac 	bl	8001b00 <USBD_LL_Transmit>

    ret = USBD_OK;
 80045a8:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 80045aa:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80045ac:	2003      	movs	r0, #3
 80045ae:	e7fc      	b.n	80045aa <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80045b0:	4618      	mov	r0, r3
 80045b2:	e7fa      	b.n	80045aa <USBD_CDC_TransmitPacket+0x26>

080045b4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80045b4:	b178      	cbz	r0, 80045d6 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80045bc:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80045c0:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045c4:	b109      	cbz	r1, 80045ca <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80045c6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 80045d0:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80045d2:	f7fd ba25 	b.w	8001a20 <USBD_LL_Init>

  return ret;
}
 80045d6:	2003      	movs	r0, #3
 80045d8:	4770      	bx	lr

080045da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80045da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 80045dc:	2500      	movs	r5, #0
{
 80045de:	4604      	mov	r4, r0
  uint16_t len = 0U;
 80045e0:	f8ad 5006 	strh.w	r5, [sp, #6]

  if (pclass == NULL)
 80045e4:	b159      	cbz	r1, 80045fe <USBD_RegisterClass+0x24>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80045e6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 80045e8:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80045ec:	b14b      	cbz	r3, 8004602 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80045ee:	f10d 0006 	add.w	r0, sp, #6
 80045f2:	4798      	blx	r3
 80045f4:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80045f8:	4628      	mov	r0, r5
}
 80045fa:	b003      	add	sp, #12
 80045fc:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80045fe:	2003      	movs	r0, #3
 8004600:	e7fb      	b.n	80045fa <USBD_RegisterClass+0x20>
  return USBD_OK;
 8004602:	4618      	mov	r0, r3
 8004604:	e7f9      	b.n	80045fa <USBD_RegisterClass+0x20>

08004606 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004606:	f7fd ba3b 	b.w	8001a80 <USBD_LL_Start>

0800460a <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800460a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800460e:	b10b      	cbz	r3, 8004614 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4718      	bx	r3
  }

  return ret;
}
 8004614:	2003      	movs	r0, #3
 8004616:	4770      	bx	lr

08004618 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004618:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800461a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800461e:	b10b      	cbz	r3, 8004624 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004624:	2000      	movs	r0, #0
 8004626:	bd08      	pop	{r3, pc}

08004628 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800462c:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004630:	4628      	mov	r0, r5
 8004632:	f000 fb31 	bl	8004c98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004636:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004638:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800463c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004640:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004644:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004648:	f001 031f 	and.w	r3, r1, #31
 800464c:	2b01      	cmp	r3, #1
 800464e:	d008      	beq.n	8004662 <USBD_LL_SetupStage+0x3a>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d00c      	beq.n	800466e <USBD_LL_SetupStage+0x46>
 8004654:	b98b      	cbnz	r3, 800467a <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004656:	4629      	mov	r1, r5
 8004658:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800465e:	f000 b925 	b.w	80048ac <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004662:	4629      	mov	r1, r5
 8004664:	4620      	mov	r0, r4
}
 8004666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800466a:	f000 ba61 	b.w	8004b30 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800466e:	4629      	mov	r1, r5
 8004670:	4620      	mov	r0, r4
}
 8004672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004676:	f000 ba81 	b.w	8004b7c <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800467a:	4620      	mov	r0, r4
 800467c:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8004680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004684:	f7fd ba14 	b.w	8001ab0 <USBD_LL_StallEP>

08004688 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4604      	mov	r4, r0
 800468c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800468e:	b9f9      	cbnz	r1, 80046d0 <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004690:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004694:	2b03      	cmp	r3, #3
 8004696:	d10c      	bne.n	80046b2 <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004698:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 800469c:	4293      	cmp	r3, r2
 800469e:	d90a      	bls.n	80046b6 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 80046a0:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046a2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80046a4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046a8:	bf28      	it	cs
 80046aa:	461a      	movcs	r2, r3
 80046ac:	4629      	mov	r1, r5
 80046ae:	f000 fb47 	bl	8004d40 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 80046b2:	2000      	movs	r0, #0
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d104      	bne.n	80046c8 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 80046be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	b103      	cbz	r3, 80046c8 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 80046c6:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 fb41 	bl	8004d50 <USBD_CtlSendStatus>
 80046ce:	e7f0      	b.n	80046b2 <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d1ec      	bne.n	80046b2 <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 80046d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0e7      	beq.n	80046b2 <USBD_LL_DataOutStage+0x2a>
}
 80046e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80046e6:	4718      	bx	r3

080046e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80046e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046ea:	4604      	mov	r4, r0
 80046ec:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80046ee:	2900      	cmp	r1, #0
 80046f0:	d13f      	bne.n	8004772 <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80046f2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80046f6:	2a02      	cmp	r2, #2
 80046f8:	d10f      	bne.n	800471a <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 80046fa:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 80046fe:	4295      	cmp	r5, r2
 8004700:	d915      	bls.n	800472e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8004702:	1aaa      	subs	r2, r5, r2
 8004704:	9101      	str	r1, [sp, #4]
 8004706:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004708:	4631      	mov	r1, r6
 800470a:	f000 fb04 	bl	8004d16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800470e:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004710:	461a      	mov	r2, r3
 8004712:	4619      	mov	r1, r3
 8004714:	4620      	mov	r0, r4
 8004716:	f7fd f9fa 	bl	8001b0e <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800471a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d102      	bne.n	8004728 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004728:	2000      	movs	r0, #0
 800472a:	b002      	add	sp, #8
 800472c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800472e:	d10e      	bne.n	800474e <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004730:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004732:	4295      	cmp	r5, r2
 8004734:	d80b      	bhi.n	800474e <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004736:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 800473a:	42aa      	cmp	r2, r5
 800473c:	d207      	bcs.n	800474e <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800473e:	460a      	mov	r2, r1
 8004740:	9101      	str	r1, [sp, #4]
 8004742:	f000 fae8 	bl	8004d16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004746:	9b01      	ldr	r3, [sp, #4]
 8004748:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800474c:	e7e0      	b.n	8004710 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800474e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004752:	2b03      	cmp	r3, #3
 8004754:	d105      	bne.n	8004762 <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 8004756:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	b10b      	cbz	r3, 8004762 <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 800475e:	4620      	mov	r0, r4
 8004760:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	4620      	mov	r0, r4
 8004766:	f7fd f9a3 	bl	8001ab0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800476a:	4620      	mov	r0, r4
 800476c:	f000 fafb 	bl	8004d66 <USBD_CtlReceiveStatus>
 8004770:	e7d3      	b.n	800471a <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004772:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004776:	2b03      	cmp	r3, #3
 8004778:	d1d6      	bne.n	8004728 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 800477a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0d1      	beq.n	8004728 <USBD_LL_DataInStage+0x40>
}
 8004784:	b002      	add	sp, #8
 8004786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800478a:	4718      	bx	r3

0800478c <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800478c:	2301      	movs	r3, #1
{
 800478e:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004790:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 8004794:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8004798:	2100      	movs	r1, #0
{
 800479a:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 800479c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80047a0:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80047a2:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 80047a6:	b1db      	cbz	r3, 80047e0 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80047a8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80047ac:	b112      	cbz	r2, 80047b4 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b103      	cbz	r3, 80047b4 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047b2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047b4:	2200      	movs	r2, #0
 80047b6:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047b8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047ba:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047bc:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047be:	4620      	mov	r0, r4
 80047c0:	f7fd f965 	bl	8001a8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047c4:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047c8:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047cc:	462b      	mov	r3, r5
 80047ce:	2200      	movs	r2, #0
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7fd f95b 	bl	8001a8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80047d8:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80047da:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 80047dc:	2000      	movs	r0, #0
}
 80047de:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80047e0:	2003      	movs	r0, #3
 80047e2:	e7fc      	b.n	80047de <USBD_LL_Reset+0x52>

080047e4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80047e4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80047e6:	2000      	movs	r0, #0
 80047e8:	4770      	bx	lr

080047ea <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80047ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80047f4:	2304      	movs	r3, #4
 80047f6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80047fa:	2000      	movs	r0, #0
 80047fc:	4770      	bx	lr

080047fe <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80047fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004802:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004804:	bf02      	ittt	eq
 8004806:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800480a:	b2db      	uxtbeq	r3, r3
 800480c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004810:	2000      	movs	r0, #0
 8004812:	4770      	bx	lr

08004814 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8004814:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004818:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 800481a:	b142      	cbz	r2, 800482e <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800481c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004820:	2b03      	cmp	r3, #3
 8004822:	d102      	bne.n	800482a <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 8004824:	69d3      	ldr	r3, [r2, #28]
 8004826:	b123      	cbz	r3, 8004832 <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 8004828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800482a:	2000      	movs	r0, #0
 800482c:	e000      	b.n	8004830 <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 800482e:	2003      	movs	r0, #3
}
 8004830:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8004832:	4618      	mov	r0, r3
 8004834:	e7fc      	b.n	8004830 <USBD_LL_SOF+0x1c>

08004836 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8004836:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800483a:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 800483c:	b142      	cbz	r2, 8004850 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800483e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004842:	2b03      	cmp	r3, #3
 8004844:	d102      	bne.n	800484c <USBD_LL_IsoINIncomplete+0x16>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004846:	6a13      	ldr	r3, [r2, #32]
 8004848:	b123      	cbz	r3, 8004854 <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800484a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800484c:	2000      	movs	r0, #0
 800484e:	e000      	b.n	8004852 <USBD_LL_IsoINIncomplete+0x1c>
    return USBD_FAIL;
 8004850:	2003      	movs	r0, #3
}
 8004852:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8004854:	4618      	mov	r0, r3
 8004856:	e7fc      	b.n	8004852 <USBD_LL_IsoINIncomplete+0x1c>

08004858 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8004858:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800485c:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 800485e:	b142      	cbz	r2, 8004872 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004860:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004864:	2b03      	cmp	r3, #3
 8004866:	d102      	bne.n	800486e <USBD_LL_IsoOUTIncomplete+0x16>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004868:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800486a:	b123      	cbz	r3, 8004876 <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800486c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800486e:	2000      	movs	r0, #0
 8004870:	e000      	b.n	8004874 <USBD_LL_IsoOUTIncomplete+0x1c>
    return USBD_FAIL;
 8004872:	2003      	movs	r0, #3
}
 8004874:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8004876:	4618      	mov	r0, r3
 8004878:	e7fc      	b.n	8004874 <USBD_LL_IsoOUTIncomplete+0x1c>

0800487a <USBD_LL_DevConnected>:
 800487a:	2000      	movs	r0, #0
 800487c:	4770      	bx	lr

0800487e <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800487e:	2201      	movs	r2, #1
{
 8004880:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004882:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004886:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800488a:	b112      	cbz	r2, 8004892 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	7901      	ldrb	r1, [r0, #4]
 8004890:	4790      	blx	r2
  }

  return USBD_OK;
}
 8004892:	2000      	movs	r0, #0
 8004894:	bd08      	pop	{r3, pc}

08004896 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004896:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004898:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800489a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800489c:	f7fd f908 	bl	8001ab0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80048a0:	4620      	mov	r0, r4
 80048a2:	2100      	movs	r1, #0
}
 80048a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80048a8:	f7fd b902 	b.w	8001ab0 <USBD_LL_StallEP>

080048ac <USBD_StdDevReq>:
{
 80048ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ae:	780d      	ldrb	r5, [r1, #0]
 80048b0:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048b4:	2d20      	cmp	r5, #32
{
 80048b6:	4604      	mov	r4, r0
 80048b8:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048ba:	d014      	beq.n	80048e6 <USBD_StdDevReq+0x3a>
 80048bc:	2d40      	cmp	r5, #64	; 0x40
 80048be:	d012      	beq.n	80048e6 <USBD_StdDevReq+0x3a>
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	f040 8100 	bne.w	8004ac6 <USBD_StdDevReq+0x21a>
      switch (req->bRequest)
 80048c6:	784f      	ldrb	r7, [r1, #1]
 80048c8:	2f09      	cmp	r7, #9
 80048ca:	f200 80fc 	bhi.w	8004ac6 <USBD_StdDevReq+0x21a>
 80048ce:	e8df f017 	tbh	[pc, r7, lsl #1]
 80048d2:	0101      	.short	0x0101
 80048d4:	00fa0121 	.word	0x00fa0121
 80048d8:	00fa0117 	.word	0x00fa0117
 80048dc:	00130082 	.word	0x00130082
 80048e0:	00e900fa 	.word	0x00e900fa
 80048e4:	009e      	.short	0x009e
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048e6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4631      	mov	r1, r6
 80048ee:	4620      	mov	r0, r4
}
 80048f0:	b003      	add	sp, #12
 80048f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048f6:	4718      	bx	r3
  uint16_t len = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80048fe:	884b      	ldrh	r3, [r1, #2]
 8004900:	0a1a      	lsrs	r2, r3, #8
 8004902:	3a01      	subs	r2, #1
 8004904:	2a06      	cmp	r2, #6
 8004906:	d837      	bhi.n	8004978 <USBD_StdDevReq+0xcc>
 8004908:	e8df f002 	tbb	[pc, r2]
 800490c:	36291c04 	.word	0x36291c04
 8004910:	5036      	.short	0x5036
 8004912:	5a          	.byte	0x5a
 8004913:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004914:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004918:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800491a:	7c20      	ldrb	r0, [r4, #16]
 800491c:	f10d 0106 	add.w	r1, sp, #6
 8004920:	4798      	blx	r3
  if (req->wLength != 0U)
 8004922:	88f2      	ldrh	r2, [r6, #6]
 8004924:	2a00      	cmp	r2, #0
 8004926:	f000 80f1 	beq.w	8004b0c <USBD_StdDevReq+0x260>
    if (len != 0U)
 800492a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800492e:	b31b      	cbz	r3, 8004978 <USBD_StdDevReq+0xcc>
      len = MIN(len, req->wLength);
 8004930:	429a      	cmp	r2, r3
 8004932:	bf28      	it	cs
 8004934:	461a      	movcs	r2, r3
 8004936:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800493a:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800493c:	4620      	mov	r0, r4
 800493e:	f000 f9dd 	bl	8004cfc <USBD_CtlSendData>
        break;
 8004942:	e01c      	b.n	800497e <USBD_StdDevReq+0xd2>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004944:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004946:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800494a:	b932      	cbnz	r2, 800495a <USBD_StdDevReq+0xae>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800494e:	f10d 0006 	add.w	r0, sp, #6
 8004952:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004954:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004956:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004958:	e7e3      	b.n	8004922 <USBD_StdDevReq+0x76>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	e7f7      	b.n	800494e <USBD_StdDevReq+0xa2>
      switch ((uint8_t)(req->wValue))
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b05      	cmp	r3, #5
 8004962:	d809      	bhi.n	8004978 <USBD_StdDevReq+0xcc>
 8004964:	e8df f003 	tbb	[pc, r3]
 8004968:	16120e03 	.word	0x16120e03
 800496c:	1e1a      	.short	0x1e1a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800496e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004972:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1d0      	bne.n	800491a <USBD_StdDevReq+0x6e>
      USBD_CtlError(pdev, req);
 8004978:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 800497a:	f7ff ff8c 	bl	8004896 <USBD_CtlError.constprop.0>
}
 800497e:	4628      	mov	r0, r5
 8004980:	b003      	add	sp, #12
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004984:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	e7f3      	b.n	8004974 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800498c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	e7ef      	b.n	8004974 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004994:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	e7eb      	b.n	8004974 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800499c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	e7e7      	b.n	8004974 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80049a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	e7e3      	b.n	8004974 <USBD_StdDevReq+0xc8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049ac:	7c03      	ldrb	r3, [r0, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e2      	bne.n	8004978 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80049b2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80049b6:	f10d 0006 	add.w	r0, sp, #6
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4798      	blx	r3
  if (err != 0U)
 80049be:	e7b0      	b.n	8004922 <USBD_StdDevReq+0x76>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049c0:	7c03      	ldrb	r3, [r0, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d8      	bne.n	8004978 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80049c6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80049ca:	f10d 0006 	add.w	r0, sp, #6
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80049d2:	2307      	movs	r3, #7
 80049d4:	e7bf      	b.n	8004956 <USBD_StdDevReq+0xaa>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80049d6:	888b      	ldrh	r3, [r1, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1cd      	bne.n	8004978 <USBD_StdDevReq+0xcc>
 80049dc:	88cb      	ldrh	r3, [r1, #6]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ca      	bne.n	8004978 <USBD_StdDevReq+0xcc>
 80049e2:	884e      	ldrh	r6, [r1, #2]
 80049e4:	2e7f      	cmp	r6, #127	; 0x7f
 80049e6:	d8c7      	bhi.n	8004978 <USBD_StdDevReq+0xcc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d0c3      	beq.n	8004978 <USBD_StdDevReq+0xcc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80049f0:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80049f2:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80049f6:	f7fd f87c 	bl	8001af2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 f9a8 	bl	8004d50 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004a00:	b11e      	cbz	r6, 8004a0a <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a02:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004a04:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004a08:	e7b9      	b.n	800497e <USBD_StdDevReq+0xd2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7fa      	b.n	8004a04 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8004a0e:	788e      	ldrb	r6, [r1, #2]
 8004a10:	4f46      	ldr	r7, [pc, #280]	; (8004b2c <USBD_StdDevReq+0x280>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004a12:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8004a14:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004a16:	d903      	bls.n	8004a20 <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 8004a18:	f7ff ff3d 	bl	8004896 <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8004a1c:	2503      	movs	r5, #3
      break;
 8004a1e:	e7ae      	b.n	800497e <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8004a20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	d008      	beq.n	8004a3c <USBD_StdDevReq+0x190>
 8004a2a:	2a03      	cmp	r2, #3
 8004a2c:	d014      	beq.n	8004a58 <USBD_StdDevReq+0x1ac>
      USBD_CtlError(pdev, req);
 8004a2e:	f7ff ff32 	bl	8004896 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004a32:	7839      	ldrb	r1, [r7, #0]
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7ff fdef 	bl	8004618 <USBD_ClrClassConfig>
 8004a3a:	e7ef      	b.n	8004a1c <USBD_StdDevReq+0x170>
      if (cfgidx != 0U)
 8004a3c:	2e00      	cmp	r6, #0
 8004a3e:	d065      	beq.n	8004b0c <USBD_StdDevReq+0x260>
        pdev->dev_config = cfgidx;
 8004a40:	2101      	movs	r1, #1
 8004a42:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004a44:	f7ff fde1 	bl	800460a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004a48:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 8004a4a:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 8004a4c:	2d00      	cmp	r5, #0
 8004a4e:	d194      	bne.n	800497a <USBD_StdDevReq+0xce>
          (void)USBD_CtlSendStatus(pdev);
 8004a50:	f000 f97e 	bl	8004d50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e7d5      	b.n	8004a04 <USBD_StdDevReq+0x158>
      if (cfgidx == 0U)
 8004a58:	b95e      	cbnz	r6, 8004a72 <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8004a60:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004a62:	4631      	mov	r1, r6
 8004a64:	f7ff fdd8 	bl	8004618 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 f971 	bl	8004d50 <USBD_CtlSendStatus>
 8004a6e:	4635      	mov	r5, r6
 8004a70:	e785      	b.n	800497e <USBD_StdDevReq+0xd2>
      else if (cfgidx != pdev->dev_config)
 8004a72:	6841      	ldr	r1, [r0, #4]
 8004a74:	2901      	cmp	r1, #1
 8004a76:	d049      	beq.n	8004b0c <USBD_StdDevReq+0x260>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004a78:	b2c9      	uxtb	r1, r1
 8004a7a:	f7ff fdcd 	bl	8004618 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004a7e:	7839      	ldrb	r1, [r7, #0]
 8004a80:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7ff fdc1 	bl	800460a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004a88:	4606      	mov	r6, r0
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d03e      	beq.n	8004b0c <USBD_StdDevReq+0x260>
          USBD_CtlError(pdev, req);
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7ff ff01 	bl	8004896 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004a94:	7921      	ldrb	r1, [r4, #4]
 8004a96:	4620      	mov	r0, r4
 8004a98:	f7ff fdbe 	bl	8004618 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004aa2:	e7e4      	b.n	8004a6e <USBD_StdDevReq+0x1c2>
  if (req->wLength != 1U)
 8004aa4:	88ca      	ldrh	r2, [r1, #6]
 8004aa6:	2a01      	cmp	r2, #1
 8004aa8:	f47f af66 	bne.w	8004978 <USBD_StdDevReq+0xcc>
    switch (pdev->dev_state)
 8004aac:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8004ab0:	2902      	cmp	r1, #2
 8004ab2:	b2cb      	uxtb	r3, r1
 8004ab4:	d805      	bhi.n	8004ac2 <USBD_StdDevReq+0x216>
 8004ab6:	b133      	cbz	r3, 8004ac6 <USBD_StdDevReq+0x21a>
        pdev->dev_default_config = 0U;
 8004ab8:	4601      	mov	r1, r0
 8004aba:	2300      	movs	r3, #0
 8004abc:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004ac0:	e73c      	b.n	800493c <USBD_StdDevReq+0x90>
    switch (pdev->dev_state)
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d004      	beq.n	8004ad0 <USBD_StdDevReq+0x224>
        USBD_CtlError(pdev, req);
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7ff fee5 	bl	8004896 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004acc:	2500      	movs	r5, #0
        break;
 8004ace:	e756      	b.n	800497e <USBD_StdDevReq+0xd2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004ad0:	1d01      	adds	r1, r0, #4
 8004ad2:	e733      	b.n	800493c <USBD_StdDevReq+0x90>
  switch (pdev->dev_state)
 8004ad4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d8f3      	bhi.n	8004ac6 <USBD_StdDevReq+0x21a>
      if (req->wLength != 0x2U)
 8004ade:	88ca      	ldrh	r2, [r1, #6]
 8004ae0:	2a02      	cmp	r2, #2
 8004ae2:	f47f af49 	bne.w	8004978 <USBD_StdDevReq+0xcc>
      if (pdev->dev_remote_wakeup != 0U)
 8004ae6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004aea:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf14      	ite	ne
 8004af0:	2303      	movne	r3, #3
 8004af2:	2301      	moveq	r3, #1
 8004af4:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004af8:	f000 f900 	bl	8004cfc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004afc:	463d      	mov	r5, r7
      break;
 8004afe:	e73e      	b.n	800497e <USBD_StdDevReq+0xd2>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004b00:	884b      	ldrh	r3, [r1, #2]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	f47f af3b 	bne.w	800497e <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004b08:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 f91f 	bl	8004d50 <USBD_CtlSendStatus>
 8004b12:	e734      	b.n	800497e <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8004b14:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d8d3      	bhi.n	8004ac6 <USBD_StdDevReq+0x21a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004b1e:	884b      	ldrh	r3, [r1, #2]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	f47f af2c 	bne.w	800497e <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e7ee      	b.n	8004b08 <USBD_StdDevReq+0x25c>
 8004b2a:	bf00      	nop
 8004b2c:	20017b54 	.word	0x20017b54

08004b30 <USBD_StdItfReq>:
{
 8004b30:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b32:	780b      	ldrb	r3, [r1, #0]
 8004b34:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004b38:	2a40      	cmp	r2, #64	; 0x40
{
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b3e:	d001      	beq.n	8004b44 <USBD_StdItfReq+0x14>
 8004b40:	065b      	lsls	r3, r3, #25
 8004b42:	d416      	bmi.n	8004b72 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8004b44:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d811      	bhi.n	8004b72 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b4e:	7933      	ldrb	r3, [r6, #4]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d80e      	bhi.n	8004b72 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b54:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004b58:	4631      	mov	r1, r6
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b60:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b62:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b64:	b91b      	cbnz	r3, 8004b6e <USBD_StdItfReq+0x3e>
 8004b66:	b910      	cbnz	r0, 8004b6e <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 f8f1 	bl	8004d50 <USBD_CtlSendStatus>
}
 8004b6e:	4628      	mov	r0, r5
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff fe8f 	bl	8004896 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b78:	2500      	movs	r5, #0
          break;
 8004b7a:	e7f8      	b.n	8004b6e <USBD_StdItfReq+0x3e>

08004b7c <USBD_StdEPReq>:
{
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8004b80:	888a      	ldrh	r2, [r1, #4]
 8004b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b86:	2b20      	cmp	r3, #32
{
 8004b88:	4604      	mov	r4, r0
 8004b8a:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b8c:	d058      	beq.n	8004c40 <USBD_StdEPReq+0xc4>
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d056      	beq.n	8004c40 <USBD_StdEPReq+0xc4>
 8004b92:	bb9b      	cbnz	r3, 8004bfc <USBD_StdEPReq+0x80>
      switch (req->bRequest)
 8004b94:	786b      	ldrb	r3, [r5, #1]
 8004b96:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8004b98:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004b9a:	d040      	beq.n	8004c1e <USBD_StdEPReq+0xa2>
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d026      	beq.n	8004bee <USBD_StdEPReq+0x72>
 8004ba0:	bb63      	cbnz	r3, 8004bfc <USBD_StdEPReq+0x80>
          switch (pdev->dev_state)
 8004ba2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	b2d8      	uxtb	r0, r3
 8004baa:	d05a      	beq.n	8004c62 <USBD_StdEPReq+0xe6>
 8004bac:	2803      	cmp	r0, #3
 8004bae:	d125      	bne.n	8004bfc <USBD_StdEPReq+0x80>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bb0:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8004bb4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bb8:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bbc:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 8004bc0:	d05e      	beq.n	8004c80 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bc4:	b1d3      	cbz	r3, 8004bfc <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bc6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004bca:	3501      	adds	r5, #1
 8004bcc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004bd0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004bd4:	f011 007f 	ands.w	r0, r1, #127	; 0x7f
 8004bd8:	d005      	beq.n	8004be6 <USBD_StdEPReq+0x6a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7fc ff76 	bl	8001acc <USBD_LL_IsStallEP>
 8004be0:	3800      	subs	r0, #0
 8004be2:	bf18      	it	ne
 8004be4:	2001      	movne	r0, #1
                pep->status = 0x0000U;
 8004be6:	6028      	str	r0, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004be8:	2202      	movs	r2, #2
 8004bea:	4629      	mov	r1, r5
 8004bec:	e044      	b.n	8004c78 <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 8004bee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	d02b      	beq.n	8004c50 <USBD_StdEPReq+0xd4>
 8004bf8:	2a03      	cmp	r2, #3
 8004bfa:	d003      	beq.n	8004c04 <USBD_StdEPReq+0x88>
              USBD_CtlError(pdev, req);
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7ff fe4a 	bl	8004896 <USBD_CtlError.constprop.0>
              break;
 8004c02:	e00a      	b.n	8004c1a <USBD_StdEPReq+0x9e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c04:	886b      	ldrh	r3, [r5, #2]
 8004c06:	b92b      	cbnz	r3, 8004c14 <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c08:	064a      	lsls	r2, r1, #25
 8004c0a:	d003      	beq.n	8004c14 <USBD_StdEPReq+0x98>
 8004c0c:	88eb      	ldrh	r3, [r5, #6]
 8004c0e:	b90b      	cbnz	r3, 8004c14 <USBD_StdEPReq+0x98>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c10:	f7fc ff4e 	bl	8001ab0 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8004c14:	4620      	mov	r0, r4
 8004c16:	f000 f89b 	bl	8004d50 <USBD_CtlSendStatus>
}
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8004c1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	d013      	beq.n	8004c50 <USBD_StdEPReq+0xd4>
 8004c28:	2a03      	cmp	r2, #3
 8004c2a:	d1e7      	bne.n	8004bfc <USBD_StdEPReq+0x80>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c2c:	886b      	ldrh	r3, [r5, #2]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f3      	bne.n	8004c1a <USBD_StdEPReq+0x9e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c32:	064e      	lsls	r6, r1, #25
 8004c34:	d001      	beq.n	8004c3a <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c36:	f7fc ff42 	bl	8001abe <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 f888 	bl	8004d50 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c40:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004c44:	4629      	mov	r1, r5
 8004c46:	4620      	mov	r0, r4
 8004c48:	689b      	ldr	r3, [r3, #8]
}
 8004c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c4e:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c50:	064b      	lsls	r3, r1, #25
 8004c52:	d0d3      	beq.n	8004bfc <USBD_StdEPReq+0x80>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c54:	f7fc ff2c 	bl	8001ab0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7fc ff28 	bl	8001ab0 <USBD_LL_StallEP>
 8004c60:	e7db      	b.n	8004c1a <USBD_StdEPReq+0x9e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c62:	0649      	lsls	r1, r1, #25
 8004c64:	d1ca      	bne.n	8004bfc <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c66:	0613      	lsls	r3, r2, #24
 8004c68:	bf4c      	ite	mi
 8004c6a:	f104 0114 	addmi.w	r1, r4, #20
 8004c6e:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c76:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 f83f 	bl	8004cfc <USBD_CtlSendData>
              break;
 8004c7e:	e7cc      	b.n	8004c1a <USBD_StdEPReq+0x9e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c80:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0b9      	beq.n	8004bfc <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c88:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004c8c:	2314      	movs	r3, #20
 8004c8e:	fb03 4505 	mla	r5, r3, r5, r4
 8004c92:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004c96:	e79d      	b.n	8004bd4 <USBD_StdEPReq+0x58>

08004c98 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004c98:	780b      	ldrb	r3, [r1, #0]
 8004c9a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004c9c:	784b      	ldrb	r3, [r1, #1]
 8004c9e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8004ca0:	884b      	ldrh	r3, [r1, #2]
 8004ca2:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8004ca4:	888b      	ldrh	r3, [r1, #4]
 8004ca6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8004ca8:	88cb      	ldrh	r3, [r1, #6]
 8004caa:	80c3      	strh	r3, [r0, #6]
}
 8004cac:	4770      	bx	lr

08004cae <USBD_CtlError>:
{
 8004cae:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cb0:	2180      	movs	r1, #128	; 0x80
{
 8004cb2:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cb4:	f7fc fefc 	bl	8001ab0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004cb8:	4620      	mov	r0, r4
 8004cba:	2100      	movs	r1, #0
}
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004cc0:	f7fc bef6 	b.w	8001ab0 <USBD_LL_StallEP>

08004cc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004cc4:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8004cc6:	b188      	cbz	r0, 8004cec <USBD_GetString+0x28>
 8004cc8:	2400      	movs	r4, #0
 8004cca:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004ccc:	4623      	mov	r3, r4
 8004cce:	3401      	adds	r4, #1
 8004cd0:	5d05      	ldrb	r5, [r0, r4]
 8004cd2:	2d00      	cmp	r5, #0
 8004cd4:	d1fa      	bne.n	8004ccc <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	3301      	adds	r3, #1
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8004cde:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	704b      	strb	r3, [r1, #1]
  idx++;
 8004ce4:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004ce6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004cea:	b902      	cbnz	r2, 8004cee <USBD_GetString+0x2a>
}
 8004cec:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 8004cee:	54ca      	strb	r2, [r1, r3]
    idx++;
 8004cf0:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8004cf2:	b2d2      	uxtb	r2, r2
    idx++;
 8004cf4:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8004cf6:	548d      	strb	r5, [r1, r2]
    idx++;
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e7f4      	b.n	8004ce6 <USBD_GetString+0x22>

08004cfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004d00:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004d02:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004d06:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	f7fc fef7 	bl	8001b00 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d12:	2000      	movs	r0, #0
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004d16:	b508      	push	{r3, lr}
 8004d18:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004d1a:	460a      	mov	r2, r1
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	f7fc feef 	bl	8001b00 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d22:	2000      	movs	r0, #0
 8004d24:	bd08      	pop	{r3, pc}

08004d26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004d26:	b510      	push	{r4, lr}
 8004d28:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004d2a:	2203      	movs	r2, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004d2c:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004d30:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004d34:	460a      	mov	r2, r1
 8004d36:	2100      	movs	r1, #0
 8004d38:	f7fc fee9 	bl	8001b0e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	bd10      	pop	{r4, pc}

08004d40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004d40:	b508      	push	{r3, lr}
 8004d42:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004d44:	460a      	mov	r2, r1
 8004d46:	2100      	movs	r1, #0
 8004d48:	f7fc fee1 	bl	8001b0e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	bd08      	pop	{r3, pc}

08004d50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004d50:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004d52:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004d54:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004d56:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f7fc fecf 	bl	8001b00 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d62:	2000      	movs	r0, #0
 8004d64:	bd08      	pop	{r3, pc}

08004d66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004d66:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004d68:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d6a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004d6c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d70:	4619      	mov	r1, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fecb 	bl	8001b0e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d78:	2000      	movs	r0, #0
 8004d7a:	bd08      	pop	{r3, pc}

08004d7c <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8004d7c:	3001      	adds	r0, #1
}
 8004d7e:	0080      	lsls	r0, r0, #2
 8004d80:	4770      	bx	lr

08004d82 <TfLiteIntArrayEqualsArray>:
  if (a == NULL || b == NULL) return 0;
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
}

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
 8004d82:	b530      	push	{r4, r5, lr}
  if (a == NULL) return (b_size == 0);
 8004d84:	b918      	cbnz	r0, 8004d8e <TfLiteIntArrayEqualsArray+0xc>
 8004d86:	fab1 f081 	clz	r0, r1
 8004d8a:	0940      	lsrs	r0, r0, #5
  if (a->size != b_size) return 0;
  int i = 0;
  for (; i < a->size; i++)
    if (a->data[i] != b_data[i]) return 0;
  return 1;
}
 8004d8c:	bd30      	pop	{r4, r5, pc}
  if (a->size != b_size) return 0;
 8004d8e:	6803      	ldr	r3, [r0, #0]
 8004d90:	428b      	cmp	r3, r1
 8004d92:	d10c      	bne.n	8004dae <TfLiteIntArrayEqualsArray+0x2c>
  int i = 0;
 8004d94:	2300      	movs	r3, #0
  for (; i < a->size; i++)
 8004d96:	428b      	cmp	r3, r1
 8004d98:	db01      	blt.n	8004d9e <TfLiteIntArrayEqualsArray+0x1c>
  return 1;
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	e7f6      	b.n	8004d8c <TfLiteIntArrayEqualsArray+0xa>
    if (a->data[i] != b_data[i]) return 0;
 8004d9e:	f850 5f04 	ldr.w	r5, [r0, #4]!
 8004da2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004da6:	42a5      	cmp	r5, r4
 8004da8:	d101      	bne.n	8004dae <TfLiteIntArrayEqualsArray+0x2c>
  for (; i < a->size; i++)
 8004daa:	3301      	adds	r3, #1
 8004dac:	e7f3      	b.n	8004d96 <TfLiteIntArrayEqualsArray+0x14>
  if (a->size != b_size) return 0;
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7ec      	b.n	8004d8c <TfLiteIntArrayEqualsArray+0xa>

08004db2 <TfLiteIntArrayEqual>:
  if (a == b) return 1;
 8004db2:	4288      	cmp	r0, r1
 8004db4:	d005      	beq.n	8004dc2 <TfLiteIntArrayEqual+0x10>
  if (a == NULL || b == NULL) return 0;
 8004db6:	b130      	cbz	r0, 8004dc6 <TfLiteIntArrayEqual+0x14>
 8004db8:	b131      	cbz	r1, 8004dc8 <TfLiteIntArrayEqual+0x16>
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
 8004dba:	1d0a      	adds	r2, r1, #4
 8004dbc:	6809      	ldr	r1, [r1, #0]
 8004dbe:	f7ff bfe0 	b.w	8004d82 <TfLiteIntArrayEqualsArray>
  if (a == b) return 1;
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	4770      	bx	lr
 8004dc6:	4770      	bx	lr
  if (a == NULL || b == NULL) return 0;
 8004dc8:	4608      	mov	r0, r1
}
 8004dca:	4770      	bx	lr

08004dcc <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 8004dcc:	280b      	cmp	r0, #11
 8004dce:	bf9a      	itte	ls
 8004dd0:	4b02      	ldrls	r3, [pc, #8]	; (8004ddc <TfLiteTypeGetName+0x10>)
 8004dd2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 8004dd6:	4802      	ldrhi	r0, [pc, #8]	; (8004de0 <TfLiteTypeGetName+0x14>)
      return "FLOAT16";
    case kTfLiteFloat64:
      return "FLOAT64";
  }
  return "Unknown type";
}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	08047a64 	.word	0x08047a64
 8004de0:	0804d7f1 	.word	0x0804d7f1

08004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8004de4:	b40e      	push	{r1, r2, r3}
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8004dee:	f107 0320 	add.w	r3, r7, #32
 8004df2:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	69f9      	ldr	r1, [r7, #28]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
 8004e04:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e12:	b003      	add	sp, #12
 8004e14:	4770      	bx	lr

08004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8004e16:	b40c      	push	{r2, r3}
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8004e22:	f107 031c 	add.w	r3, r7, #28
 8004e26:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	69b9      	ldr	r1, [r7, #24]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
 8004e38:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e46:	b002      	add	sp, #8
 8004e48:	4770      	bx	lr

08004e4a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8004e62:	b590      	push	{r4, r7, lr}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8004e6a:	687c      	ldr	r4, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fee0 	bl	8005c34 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004e74:	4603      	mov	r3, r0
 8004e76:	425b      	negs	r3, r3
 8004e78:	4423      	add	r3, r4
  }
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd90      	pop	{r4, r7, pc}

08004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffe7 	bl	8004e62 <_ZNK11flatbuffers5Table9GetVTableEv>
 8004e94:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 feb0 	bl	8005bfc <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004ea0:	887a      	ldrh	r2, [r7, #2]
 8004ea2:	897b      	ldrh	r3, [r7, #10]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d207      	bcs.n	8004eb8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fea4 	bl	8005bfc <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	e000      	b.n	8004eba <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8004eb8:	2300      	movs	r3, #0
  }
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2104      	movs	r1, #4
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 ff1a 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	b2db      	uxtb	r3, r3
  }
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	2106      	movs	r1, #6
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 ff0a 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	b2db      	uxtb	r3, r3
  }
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2108      	movs	r1, #8
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fe9d 	bl	8005c50 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
  }
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	210a      	movs	r1, #10
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fe89 	bl	8005c50 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
  }
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004f78 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8004f62:	2104      	movs	r1, #4
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fef0 	bl	8005d4a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8004f6a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8004f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	00000000 	.word	0x00000000

08004f7c <_ZNK6tflite20ConcatenationOptions4axisEv>:
  int32_t axis() const {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_AXIS, 0);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2104      	movs	r1, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fe8f 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004f90:	4603      	mov	r3, r0
  }
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <_ZNK6tflite20ConcatenationOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2106      	movs	r1, #6
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 feae 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	b2db      	uxtb	r3, r3
  }
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZNK6tflite10AddOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fe9e 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	b2db      	uxtb	r3, r3
  }
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <_ZNK6tflite10MulOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2104      	movs	r1, #4
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fe8e 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	b2db      	uxtb	r3, r3
  }
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZNK6tflite13L2NormOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	2104      	movs	r1, #4
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fe7e 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800500e:	4603      	mov	r3, r0
 8005010:	b2db      	uxtb	r3, r3
  }
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
  const flatbuffers::Vector<int32_t> *new_shape() const {
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2104      	movs	r1, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fe5f 	bl	8005cea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800502c:	4603      	mov	r3, r0
  }
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <_ZNK6tflite19StridedSliceOptions10begin_maskEv>:
  int32_t begin_mask() const {
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	2104      	movs	r1, #4
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fe32 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800504a:	4603      	mov	r3, r0
  }
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <_ZNK6tflite19StridedSliceOptions8end_maskEv>:
  int32_t end_mask() const {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_END_MASK, 0);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	2106      	movs	r1, #6
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fe23 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005068:	4603      	mov	r3, r0
  }
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <_ZNK6tflite19StridedSliceOptions13ellipsis_maskEv>:
  int32_t ellipsis_mask() const {
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	2108      	movs	r1, #8
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fe14 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005086:	4603      	mov	r3, r0
  }
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <_ZNK6tflite19StridedSliceOptions13new_axis_maskEv>:
  int32_t new_axis_mask() const {
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	210a      	movs	r1, #10
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fe05 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80050a4:	4603      	mov	r3, r0
  }
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <_ZNK6tflite19StridedSliceOptions16shrink_axis_maskEv>:
  int32_t shrink_axis_mask() const {
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	210c      	movs	r1, #12
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fdf6 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80050c2:	4603      	mov	r3, r0
  }
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	210a      	movs	r1, #10
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fdb8 	bl	8005c50 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80050e0:	4603      	mov	r3, r0
  }
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	210c      	movs	r1, #12
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fdc9 	bl	8005c8e <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 80050fc:	4603      	mov	r3, r0
  }
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff ffdc 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8005114:	4603      	mov	r3, r0
 8005116:	2b08      	cmp	r3, #8
 8005118:	d104      	bne.n	8005124 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ffe5 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 8005120:	4603      	mov	r3, r0
 8005122:	e000      	b.n	8005126 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8005124:	2300      	movs	r3, #0
  }
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ffc8 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 800513c:	4603      	mov	r3, r0
 800513e:	2b09      	cmp	r3, #9
 8005140:	d104      	bne.n	800514c <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ffd1 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 8005148:	4603      	mov	r3, r0
 800514a:	e000      	b.n	800514e <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 800514c:	2300      	movs	r3, #0
  }
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv>:
  const tflite::ConcatenationOptions *builtin_options_as_ConcatenationOptions() const {
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ffb4 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8005164:	4603      	mov	r3, r0
 8005166:	2b0a      	cmp	r3, #10
 8005168:	d104      	bne.n	8005174 <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv+0x1e>
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff ffbd 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 8005170:	4603      	mov	r3, r0
 8005172:	e000      	b.n	8005176 <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv+0x20>
 8005174:	2300      	movs	r3, #0
  }
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv>:
  const tflite::AddOptions *builtin_options_as_AddOptions() const {
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ffa0 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 800518c:	4603      	mov	r3, r0
 800518e:	2b0b      	cmp	r3, #11
 8005190:	d104      	bne.n	800519c <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv+0x1e>
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff ffa9 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 8005198:	4603      	mov	r3, r0
 800519a:	e000      	b.n	800519e <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv+0x20>
 800519c:	2300      	movs	r3, #0
  }
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv>:
  const tflite::L2NormOptions *builtin_options_as_L2NormOptions() const {
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_L2NormOptions ? static_cast<const tflite::L2NormOptions *>(builtin_options()) : nullptr;
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff8c 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d104      	bne.n	80051c4 <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv+0x1e>
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff ff95 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 80051c0:	4603      	mov	r3, r0
 80051c2:	e000      	b.n	80051c6 <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv+0x20>
 80051c4:	2300      	movs	r3, #0
  }
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff ff78 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b11      	cmp	r3, #17
 80051e0:	d104      	bne.n	80051ec <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff ff81 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 80051e8:	4603      	mov	r3, r0
 80051ea:	e000      	b.n	80051ee <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 80051ec:	2300      	movs	r3, #0
  }
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv>:
  const tflite::MulOptions *builtin_options_as_MulOptions() const {
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_MulOptions ? static_cast<const tflite::MulOptions *>(builtin_options()) : nullptr;
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff ff64 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 8005204:	4603      	mov	r3, r0
 8005206:	2b15      	cmp	r3, #21
 8005208:	d104      	bne.n	8005214 <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv+0x1e>
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff ff6d 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 8005210:	4603      	mov	r3, r0
 8005212:	e000      	b.n	8005216 <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv+0x20>
 8005214:	2300      	movs	r3, #0
  }
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv>:
  const tflite::StridedSliceOptions *builtin_options_as_StridedSliceOptions() const {
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_StridedSliceOptions ? static_cast<const tflite::StridedSliceOptions *>(builtin_options()) : nullptr;
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff ff50 	bl	80050cc <_ZNK6tflite8Operator20builtin_options_typeEv>
 800522c:	4603      	mov	r3, r0
 800522e:	2b20      	cmp	r3, #32
 8005230:	d104      	bne.n	800523c <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv+0x1e>
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff ff59 	bl	80050ea <_ZNK6tflite8Operator15builtin_optionsEv>
 8005238:	4603      	mov	r3, r0
 800523a:	e000      	b.n	800523e <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv+0x20>
 800523c:	2300      	movs	r3, #0
  }
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3304      	adds	r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	4610      	mov	r0, r2
 8005280:	4798      	blx	r3
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 80052bc:	f014 f81c 	bl	80192f8 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 80052c6:	f014 f817 	bl	80192f8 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 80052d0:	f014 f812 	bl	80192f8 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 80052da:	f014 f80d 	bl	80192f8 <abort>
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 80052fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fe:	4917      	ldr	r1, [pc, #92]	; (800535c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8005300:	6838      	ldr	r0, [r7, #0]
 8005302:	f7ff fd6f 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8005306:	2301      	movs	r3, #1
 8005308:	e024      	b.n	8005354 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	f000 fd3f 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005310:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	089b      	lsrs	r3, r3, #2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d906      	bls.n	800532a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 800531c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531e:	4910      	ldr	r1, [pc, #64]	; (8005360 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8005320:	6838      	ldr	r0, [r7, #0]
 8005322:	f7ff fd5f 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8005326:	2301      	movs	r3, #1
 8005328:	e014      	b.n	8005354 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e00c      	b.n	800534a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x62>
        buffer[i] = flat_vector->Get(i);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	18d4      	adds	r4, r2, r3
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	68b8      	ldr	r0, [r7, #8]
 800533c:	f000 fd36 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005340:	4603      	mov	r3, r0
 8005342:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3301      	adds	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d3ee      	bcc.n	8005330 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x48>
      }
    }
  }
  return kTfLiteOk;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	08047ab4 	.word	0x08047ab4
 8005360:	08047ae4 	.word	0x08047ae4

08005364 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2b05      	cmp	r3, #5
 8005372:	d81b      	bhi.n	80053ac <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	08005395 	.word	0x08005395
 8005380:	08005399 	.word	0x08005399
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a1 	.word	0x080053a1
 800538c:	080053a5 	.word	0x080053a5
 8005390:	080053a9 	.word	0x080053a9
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8005394:	2300      	movs	r3, #0
 8005396:	e00a      	b.n	80053ae <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8005398:	2301      	movs	r3, #1
 800539a:	e008      	b.n	80053ae <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 800539c:	2302      	movs	r3, #2
 800539e:	e006      	b.n	80053ae <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e004      	b.n	80053ae <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 80053a4:	2304      	movs	r3, #4
 80053a6:	e002      	b.n	80053ae <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 80053a8:	2305      	movs	r3, #5
 80053aa:	e000      	b.n	80053ae <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop

080053bc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b0a      	cmp	r3, #10
 80053ce:	d850      	bhi.n	8005472 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xb6>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	0800540f 	.word	0x0800540f
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800542d 	.word	0x0800542d
 80053e4:	08005437 	.word	0x08005437
 80053e8:	0800544b 	.word	0x0800544b
 80053ec:	08005455 	.word	0x08005455
 80053f0:	0800545f 	.word	0x0800545f
 80053f4:	08005423 	.word	0x08005423
 80053f8:	08005469 	.word	0x08005469
 80053fc:	08005441 	.word	0x08005441
 8005400:	08005419 	.word	0x08005419
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	220a      	movs	r2, #10
 8005408:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800540a:	2300      	movs	r3, #0
 800540c:	e03b      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005414:	2300      	movs	r3, #0
 8005416:	e036      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	220b      	movs	r2, #11
 800541c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800541e:	2300      	movs	r3, #0
 8005420:	e031      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2207      	movs	r2, #7
 8005426:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005428:	2300      	movs	r3, #0
 800542a:	e02c      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2202      	movs	r2, #2
 8005430:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005432:	2300      	movs	r3, #0
 8005434:	e027      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2203      	movs	r2, #3
 800543a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800543c:	2300      	movs	r3, #0
 800543e:	e022      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2209      	movs	r2, #9
 8005444:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005446:	2300      	movs	r3, #0
 8005448:	e01d      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2204      	movs	r2, #4
 800544e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005450:	2300      	movs	r3, #0
 8005452:	e018      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_STRING:
      *type = kTfLiteString;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2205      	movs	r2, #5
 8005458:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800545a:	2300      	movs	r3, #0
 800545c:	e013      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2206      	movs	r2, #6
 8005462:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005464:	2300      	movs	r3, #0
 8005466:	e00e      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2208      	movs	r2, #8
 800546c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800546e:	2300      	movs	r3, #0
 8005470:	e009      	b.n	8005486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    default:
      *type = kTfLiteNoType;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	461a      	mov	r2, r3
 800547c:	4904      	ldr	r1, [pc, #16]	; (8005490 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd4>)
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fcb0 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8005484:	2301      	movs	r3, #1
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	08047c78 	.word	0x08047c78

08005494 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      void**) {
  return kTfLiteOk;
}

TfLiteStatus ParseAdd(const Operator* op, ErrorReporter* error_reporter,
                      BuiltinDataAllocator* allocator, void** builtin_data) {
 8005494:	b5b0      	push	{r4, r5, r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fefd 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80054ae:	f107 0318 	add.w	r3, r7, #24
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fee8 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteAddParams, SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteAddParams>();
 80054ba:	f107 0310 	add.w	r3, r7, #16
 80054be:	f107 0218 	add.w	r2, r7, #24
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fc97 	bl	8005df8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteAddParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fcd1 	bl	8005e78 <_ZStneI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f083 0301 	eor.w	r3, r3, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80054e2:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	f240 3379 	movw	r3, #889	; 0x379
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	68b8      	ldr	r0, [r7, #8]
 80054f4:	f7ff fc8f 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80054f8:	2401      	movs	r4, #1
 80054fa:	e01f      	b.n	800553c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>

  const AddOptions* schema_params = op->builtin_options_as_AddOptions();
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fe3e 	bl	800517e <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv>
 8005502:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00f      	beq.n	800552a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800550a:	69f8      	ldr	r0, [r7, #28]
 800550c:	f7ff fd55 	bl	8004fba <_ZNK6tflite10AddOptions25fused_activation_functionEv>
 8005510:	4603      	mov	r3, r0
 8005512:	461d      	mov	r5, r3
    params->activation =
 8005514:	f107 0310 	add.w	r3, r7, #16
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fcba 	bl	8005e92 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800551e:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8005520:	4628      	mov	r0, r5
 8005522:	f7ff ff1f 	bl	8005364 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8005526:	4603      	mov	r3, r0
    params->activation =
 8005528:	7023      	strb	r3, [r4, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800552a:	f107 0310 	add.w	r3, r7, #16
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fcbb 	bl	8005eaa <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005534:	4602      	mov	r2, r0
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800553a:	2400      	movs	r4, #0
}
 800553c:	f107 0310 	add.w	r3, r7, #16
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fc77 	bl	8005e34 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005546:	4623      	mov	r3, r4
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bdb0      	pop	{r4, r5, r7, pc}
 8005550:	08047bf0 	.word	0x08047bf0
 8005554:	08047b28 	.word	0x08047b28
 8005558:	08047bd8 	.word	0x08047bd8

0800555c <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseConcatenation(const Operator* op,
                                ErrorReporter* error_reporter,
                                BuiltinDataAllocator* allocator,
                                void** builtin_data) {
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fe99 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005576:	f107 0318 	add.w	r3, r7, #24
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fe84 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConcatenationParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConcatenationParams>();
 8005582:	f107 0310 	add.w	r3, r7, #16
 8005586:	f107 0218 	add.w	r2, r7, #24
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fc99 	bl	8005ec4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteConcatenationParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8005592:	f107 0310 	add.w	r3, r7, #16
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fcd3 	bl	8005f44 <_ZStneI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800559e:	4603      	mov	r3, r0
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00c      	beq.n	80055c4 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>)
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	f240 33ce 	movw	r3, #974	; 0x3ce
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>)
 80055b6:	4a20      	ldr	r2, [pc, #128]	; (8005638 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>)
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68b8      	ldr	r0, [r7, #8]
 80055bc:	f7ff fc2b 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80055c0:	2401      	movs	r4, #1
 80055c2:	e02a      	b.n	800561a <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbe>

  const ConcatenationOptions* schema_params =
      op->builtin_options_as_ConcatenationOptions();
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff fdc6 	bl	8005156 <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv>
 80055ca:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01a      	beq.n	8005608 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80055d2:	69f8      	ldr	r0, [r7, #28]
 80055d4:	f7ff fce1 	bl	8004f9a <_ZNK6tflite20ConcatenationOptions25fused_activation_functionEv>
 80055d8:	4603      	mov	r3, r0
 80055da:	461d      	mov	r5, r3
    params->activation =
 80055dc:	f107 0310 	add.w	r3, r7, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fcbc 	bl	8005f5e <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80055e6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80055e8:	4628      	mov	r0, r5
 80055ea:	f7ff febb 	bl	8005364 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80055ee:	4603      	mov	r3, r0
    params->activation =
 80055f0:	7123      	strb	r3, [r4, #4]
    params->axis = schema_params->axis();
 80055f2:	f107 0310 	add.w	r3, r7, #16
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fcb1 	bl	8005f5e <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80055fc:	4604      	mov	r4, r0
 80055fe:	69f8      	ldr	r0, [r7, #28]
 8005600:	f7ff fcbc 	bl	8004f7c <_ZNK6tflite20ConcatenationOptions4axisEv>
 8005604:	4603      	mov	r3, r0
 8005606:	6023      	str	r3, [r4, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fcb2 	bl	8005f76 <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005612:	4602      	mov	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005618:	2400      	movs	r4, #0
}
 800561a:	f107 0310 	add.w	r3, r7, #16
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fc6e 	bl	8005f00 <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005624:	4623      	mov	r3, r4
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bdb0      	pop	{r4, r5, r7, pc}
 800562e:	bf00      	nop
 8005630:	08047bf0 	.word	0x08047bf0
 8005634:	08047b28 	.word	0x08047b28
 8005638:	08047bd8 	.word	0x08047bd8

0800563c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 800563c:	b5b0      	push	{r4, r5, r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff fe29 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005656:	f107 0318 	add.w	r3, r7, #24
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fe14 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8005662:	f107 0310 	add.w	r3, r7, #16
 8005666:	f107 0218 	add.w	r2, r7, #24
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fc8f 	bl	8005f90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8005672:	f107 0310 	add.w	r3, r7, #16
 8005676:	2100      	movs	r1, #0
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fcc9 	bl	8006010 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800567e:	4603      	mov	r3, r0
 8005680:	f083 0301 	eor.w	r3, r3, #1
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800568a:	4b37      	ldr	r3, [pc, #220]	; (8005768 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	f240 434f 	movw	r3, #1103	; 0x44f
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	4b35      	ldr	r3, [pc, #212]	; (800576c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8005696:	4a36      	ldr	r2, [pc, #216]	; (8005770 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	68b8      	ldr	r0, [r7, #8]
 800569c:	f7ff fbbb 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80056a0:	2401      	movs	r4, #1
 80056a2:	e056      	b.n	8005752 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff fd2e 	bl	8005106 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 80056aa:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d046      	beq.n	8005740 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80056b2:	69f8      	ldr	r0, [r7, #28]
 80056b4:	f7ff fc05 	bl	8004ec2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461d      	mov	r5, r3
    params->activation =
 80056bc:	f107 0310 	add.w	r3, r7, #16
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fcb2 	bl	800602a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80056c6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80056c8:	4628      	mov	r0, r5
 80056ca:	f7ff fe4b 	bl	8005364 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80056ce:	4603      	mov	r3, r0
    params->activation =
 80056d0:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 80056d2:	f107 0310 	add.w	r3, r7, #16
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fca7 	bl	800602a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80056dc:	4604      	mov	r4, r0
 80056de:	69f8      	ldr	r0, [r7, #28]
 80056e0:	f7ff fc0f 	bl	8004f02 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 80056e4:	4603      	mov	r3, r0
 80056e6:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 80056e8:	f107 0310 	add.w	r3, r7, #16
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fc9c 	bl	800602a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80056f2:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 80056f4:	69f8      	ldr	r0, [r7, #28]
 80056f6:	f7ff fc18 	bl	8004f2a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 80056fa:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 80056fc:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 80056fe:	69f8      	ldr	r0, [r7, #28]
 8005700:	f7ff fbef 	bl	8004ee2 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 800570a:	2b01      	cmp	r3, #1
 800570c:	d009      	beq.n	8005722 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 800570e:	e011      	b.n	8005734 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8005710:	f107 0310 	add.w	r3, r7, #16
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fc88 	bl	800602a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800571a:	4603      	mov	r3, r0
 800571c:	2200      	movs	r2, #0
 800571e:	705a      	strb	r2, [r3, #1]
        break;
 8005720:	e00e      	b.n	8005740 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8005722:	f107 0310 	add.w	r3, r7, #16
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fc7f 	bl	800602a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800572c:	4603      	mov	r3, r0
 800572e:	2201      	movs	r2, #1
 8005730:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8005732:	e005      	b.n	8005740 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8005734:	490f      	ldr	r1, [pc, #60]	; (8005774 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8005736:	68b8      	ldr	r0, [r7, #8]
 8005738:	f7ff fb54 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800573c:	2401      	movs	r4, #1
 800573e:	e008      	b.n	8005752 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8005740:	f107 0310 	add.w	r3, r7, #16
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fc7c 	bl	8006042 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800574a:	4602      	mov	r2, r0
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005750:	2400      	movs	r4, #0
}
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fc38 	bl	8005fcc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800575c:	4623      	mov	r3, r4
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bdb0      	pop	{r4, r5, r7, pc}
 8005766:	bf00      	nop
 8005768:	08047bf0 	.word	0x08047bf0
 800576c:	08047b28 	.word	0x08047b28
 8005770:	08047bd8 	.word	0x08047bd8
 8005774:	08047c9c 	.word	0x08047c9c

08005778 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseL2Normalization(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 8005778:	b5b0      	push	{r4, r5, r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fd8b 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005792:	f107 0318 	add.w	r3, r7, #24
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fd76 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteL2NormParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteL2NormParams>();
 800579e:	f107 0310 	add.w	r3, r7, #16
 80057a2:	f107 0218 	add.w	r2, r7, #24
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fc57 	bl	800605c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteL2NormParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fc91 	bl	80060dc <_ZStneI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f083 0301 	eor.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00c      	beq.n	80057e0 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	f240 4394 	movw	r3, #1172	; 0x494
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4b19      	ldr	r3, [pc, #100]	; (8005838 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80057d2:	4a1a      	ldr	r2, [pc, #104]	; (800583c <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	68b8      	ldr	r0, [r7, #8]
 80057d8:	f7ff fb1d 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80057dc:	2401      	movs	r4, #1
 80057de:	e01f      	b.n	8005820 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>

  const L2NormOptions* schema_params = op->builtin_options_as_L2NormOptions();
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff fce0 	bl	80051a6 <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv>
 80057e6:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00f      	beq.n	800580e <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80057ee:	69f8      	ldr	r0, [r7, #28]
 80057f0:	f7ff fc03 	bl	8004ffa <_ZNK6tflite13L2NormOptions25fused_activation_functionEv>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461d      	mov	r5, r3
    params->activation =
 80057f8:	f107 0310 	add.w	r3, r7, #16
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fc7a 	bl	80060f6 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005802:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8005804:	4628      	mov	r0, r5
 8005806:	f7ff fdad 	bl	8005364 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800580a:	4603      	mov	r3, r0
    params->activation =
 800580c:	7023      	strb	r3, [r4, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800580e:	f107 0310 	add.w	r3, r7, #16
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fc7b 	bl	800610e <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005818:	4602      	mov	r2, r0
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800581e:	2400      	movs	r4, #0
}
 8005820:	f107 0310 	add.w	r3, r7, #16
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fc37 	bl	8006098 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800582a:	4623      	mov	r3, r4
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bdb0      	pop	{r4, r5, r7, pc}
 8005834:	08047bf0 	.word	0x08047bf0
 8005838:	08047b28 	.word	0x08047b28
 800583c:	08047bd8 	.word	0x08047bd8

08005840 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          BuiltinDataAllocator*, void**) {
  return kTfLiteOk;
}

TfLiteStatus ParseMul(const Operator* op, ErrorReporter* error_reporter,
                      BuiltinDataAllocator* allocator, void** builtin_data) {
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fd27 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800585a:	f107 0318 	add.w	r3, r7, #24
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fd12 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteMulParams, SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteMulParams>();
 8005866:	f107 0310 	add.w	r3, r7, #16
 800586a:	f107 0218 	add.w	r2, r7, #24
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fc59 	bl	8006128 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteMulParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8005876:	f107 0310 	add.w	r3, r7, #16
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fc93 	bl	80061a8 <_ZStneI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8005882:	4603      	mov	r3, r0
 8005884:	f083 0301 	eor.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	f240 43f4 	movw	r3, #1268	; 0x4f4
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	4b19      	ldr	r3, [pc, #100]	; (8005900 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	68b8      	ldr	r0, [r7, #8]
 80058a0:	f7ff fab9 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80058a4:	2401      	movs	r4, #1
 80058a6:	e01f      	b.n	80058e8 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>

  const MulOptions* schema_params = op->builtin_options_as_MulOptions();
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff fca4 	bl	80051f6 <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv>
 80058ae:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00f      	beq.n	80058d6 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80058b6:	69f8      	ldr	r0, [r7, #28]
 80058b8:	f7ff fb8f 	bl	8004fda <_ZNK6tflite10MulOptions25fused_activation_functionEv>
 80058bc:	4603      	mov	r3, r0
 80058be:	461d      	mov	r5, r3
    params->activation =
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fc7c 	bl	80061c2 <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80058ca:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80058cc:	4628      	mov	r0, r5
 80058ce:	f7ff fd49 	bl	8005364 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80058d2:	4603      	mov	r3, r0
    params->activation =
 80058d4:	7023      	strb	r3, [r4, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80058d6:	f107 0310 	add.w	r3, r7, #16
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fc7d 	bl	80061da <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80058e0:	4602      	mov	r2, r0
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80058e6:	2400      	movs	r4, #0
}
 80058e8:	f107 0310 	add.w	r3, r7, #16
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fc39 	bl	8006164 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80058f2:	4623      	mov	r3, r4
 80058f4:	4618      	mov	r0, r3
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bdb0      	pop	{r4, r5, r7, pc}
 80058fc:	08047bf0 	.word	0x08047bf0
 8005900:	08047b28 	.word	0x08047b28
 8005904:	08047bd8 	.word	0x08047bd8

08005908 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b08d      	sub	sp, #52	; 0x34
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fcc3 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005922:	f107 0318 	add.w	r3, r7, #24
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fcae 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800592e:	f107 0310 	add.w	r3, r7, #16
 8005932:	f107 0218 	add.w	r2, r7, #24
 8005936:	4611      	mov	r1, r2
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fc5b 	bl	80061f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800593e:	f107 0310 	add.w	r3, r7, #16
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fc95 	bl	8006274 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800594a:	4603      	mov	r3, r0
 800594c:	f083 0301 	eor.w	r3, r3, #1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 8005962:	4a26      	ldr	r2, [pc, #152]	; (80059fc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	68b8      	ldr	r0, [r7, #8]
 8005968:	f7ff fa55 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800596c:	2401      	movs	r4, #1
 800596e:	e037      	b.n	80059e0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff fc2c 	bl	80051ce <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 8005976:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	2b00      	cmp	r3, #0
 800597c:	d027      	beq.n	80059ce <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 800597e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005980:	f7ff fb4b 	bl	800501a <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8005984:	6238      	str	r0, [r7, #32]
    // TODO(b/147203660): We need to figure out when dynamic reshape
    // (new_shape is a tensor) happens, why the option is not a nullptr.
    // But nonethless, we should only copy when new_shape is not a nullptr.
    if (new_shape != nullptr) {
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d020      	beq.n	80059ce <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 800598c:	f107 0310 	add.w	r3, r7, #16
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fc7c 	bl	800628e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6a39      	ldr	r1, [r7, #32]
 80059a2:	2020      	movs	r0, #32
 80059a4:	f7ff fca0 	bl	80052e8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 80059a8:	4603      	mov	r3, r0
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	7ffb      	ldrb	r3, [r7, #31]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 80059b2:	7ffc      	ldrb	r4, [r7, #31]
 80059b4:	e014      	b.n	80059e0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 80059b6:	6a38      	ldr	r0, [r7, #32]
 80059b8:	f000 f9e9 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80059bc:	4604      	mov	r4, r0
 80059be:	f107 0310 	add.w	r3, r7, #16
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fc63 	bl	800628e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4622      	mov	r2, r4
 80059cc:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80059ce:	f107 0310 	add.w	r3, r7, #16
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fc67 	bl	80062a6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80059d8:	4602      	mov	r2, r0
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80059de:	2400      	movs	r4, #0
}
 80059e0:	f107 0310 	add.w	r3, r7, #16
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fc23 	bl	8006230 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80059ea:	4623      	mov	r3, r4
 80059ec:	4618      	mov	r0, r3
 80059ee:	372c      	adds	r7, #44	; 0x2c
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd90      	pop	{r4, r7, pc}
 80059f4:	08047bf0 	.word	0x08047bf0
 80059f8:	08047b28 	.word	0x08047b28
 80059fc:	08047bd8 	.word	0x08047bd8
 8005a00:	08047cc8 	.word	0x08047cc8

08005a04 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b08b      	sub	sp, #44	; 0x2c
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7ff fc45 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005a1e:	f107 0318 	add.w	r3, r7, #24
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fc30 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8005a2a:	f107 0310 	add.w	r3, r7, #16
 8005a2e:	f107 0218 	add.w	r2, r7, #24
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fc43 	bl	80062c0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8005a3a:	f107 0310 	add.w	r3, r7, #16
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fc7d 	bl	8006340 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f083 0301 	eor.w	r3, r3, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8005a52:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 8005a5e:	4a19      	ldr	r2, [pc, #100]	; (8005ac4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	68b8      	ldr	r0, [r7, #8]
 8005a64:	f7ff f9d7 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8005a68:	2401      	movs	r4, #1
 8005a6a:	e01c      	b.n	8005aa6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fb5e 	bl	800512e <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 8005a72:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00c      	beq.n	8005a94 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 8005a7a:	f107 0310 	add.w	r3, r7, #16
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fc6b 	bl	800635a <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005a84:	4604      	mov	r4, r0
 8005a86:	69f8      	ldr	r0, [r7, #28]
 8005a88:	f7ff fa64 	bl	8004f54 <_ZNK6tflite14SoftmaxOptions4betaEv>
 8005a8c:	eef0 7a40 	vmov.f32	s15, s0
 8005a90:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8005a94:	f107 0310 	add.w	r3, r7, #16
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fc6a 	bl	8006372 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005aa4:	2400      	movs	r4, #0
}
 8005aa6:	f107 0310 	add.w	r3, r7, #16
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fc26 	bl	80062fc <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3724      	adds	r7, #36	; 0x24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd90      	pop	{r4, r7, pc}
 8005aba:	bf00      	nop
 8005abc:	08047bf0 	.word	0x08047bf0
 8005ac0:	08047b28 	.word	0x08047b28
 8005ac4:	08047bd8 	.word	0x08047bd8

08005ac8 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseStridedSlice(const Operator* op,
                               ErrorReporter* error_reporter,
                               BuiltinDataAllocator* allocator,
                               void** builtin_data) {
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b08b      	sub	sp, #44	; 0x2c
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff fbe3 	bl	80052a8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005ae2:	f107 0318 	add.w	r3, r7, #24
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fbce 	bl	800528a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteStridedSliceParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteStridedSliceParams>();
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	f107 0218 	add.w	r2, r7, #24
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fc47 	bl	800638c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteStridedSliceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8005afe:	f107 0310 	add.w	r3, r7, #16
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fc81 	bl	800640c <_ZStneI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f083 0301 	eor.w	r3, r3, #1
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00c      	beq.n	8005b30 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8005b16:	4b2f      	ldr	r3, [pc, #188]	; (8005bd4 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>)
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	f240 633c 	movw	r3, #1596	; 0x63c
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x110>)
 8005b22:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>)
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	f7ff f975 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8005b2c:	2401      	movs	r4, #1
 8005b2e:	e046      	b.n	8005bbe <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf6>

  const StridedSliceOptions* schema_params =
      op->builtin_options_as_StridedSliceOptions();
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fb74 	bl	800521e <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv>
 8005b36:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d036      	beq.n	8005bac <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe4>
    params->begin_mask = schema_params->begin_mask();
 8005b3e:	f107 0310 	add.w	r3, r7, #16
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fc6f 	bl	8006426 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005b48:	4604      	mov	r4, r0
 8005b4a:	69f8      	ldr	r0, [r7, #28]
 8005b4c:	f7ff fa73 	bl	8005036 <_ZNK6tflite19StridedSliceOptions10begin_maskEv>
 8005b50:	4603      	mov	r3, r0
 8005b52:	6023      	str	r3, [r4, #0]
    params->end_mask = schema_params->end_mask();
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fc64 	bl	8006426 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005b5e:	4604      	mov	r4, r0
 8005b60:	69f8      	ldr	r0, [r7, #28]
 8005b62:	f7ff fa77 	bl	8005054 <_ZNK6tflite19StridedSliceOptions8end_maskEv>
 8005b66:	4603      	mov	r3, r0
 8005b68:	6063      	str	r3, [r4, #4]
    params->ellipsis_mask = schema_params->ellipsis_mask();
 8005b6a:	f107 0310 	add.w	r3, r7, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fc59 	bl	8006426 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005b74:	4604      	mov	r4, r0
 8005b76:	69f8      	ldr	r0, [r7, #28]
 8005b78:	f7ff fa7b 	bl	8005072 <_ZNK6tflite19StridedSliceOptions13ellipsis_maskEv>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	60a3      	str	r3, [r4, #8]
    params->new_axis_mask = schema_params->new_axis_mask();
 8005b80:	f107 0310 	add.w	r3, r7, #16
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fc4e 	bl	8006426 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	69f8      	ldr	r0, [r7, #28]
 8005b8e:	f7ff fa7f 	bl	8005090 <_ZNK6tflite19StridedSliceOptions13new_axis_maskEv>
 8005b92:	4603      	mov	r3, r0
 8005b94:	60e3      	str	r3, [r4, #12]
    params->shrink_axis_mask = schema_params->shrink_axis_mask();
 8005b96:	f107 0310 	add.w	r3, r7, #16
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fc43 	bl	8006426 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	69f8      	ldr	r0, [r7, #28]
 8005ba4:	f7ff fa83 	bl	80050ae <_ZNK6tflite19StridedSliceOptions16shrink_axis_maskEv>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	6123      	str	r3, [r4, #16]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8005bac:	f107 0310 	add.w	r3, r7, #16
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fc44 	bl	800643e <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005bbc:	2400      	movs	r4, #0
}
 8005bbe:	f107 0310 	add.w	r3, r7, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fc00 	bl	80063c8 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005bc8:	4623      	mov	r3, r4
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3724      	adds	r7, #36	; 0x24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd90      	pop	{r4, r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08047bf0 	.word	0x08047bf0
 8005bd8:	08047b28 	.word	0x08047b28
 8005bdc:	08047bd8 	.word	0x08047bd8

08005be0 <_ZN6tflite14ParseTransposeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
//
// We have this parse function instead of directly returning kTfLiteOk from the
// switch-case in ParseOpData because this function is used as part of the
// selective registration for the OpResolver implementation in micro.
TfLiteStatus ParseTranspose(const Operator*, ErrorReporter*,
                            BuiltinDataAllocator*, void**) {
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  return kTfLiteOk;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fc30 	bl	800646e <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8005c0e:	4603      	mov	r3, r0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fb fb0a 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fc09 	bl	8006458 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8005c46:	4603      	mov	r3, r0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	807b      	strh	r3, [r7, #2]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff f90c 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	89fb      	ldrh	r3, [r7, #14]
 8005c78:	4413      	add	r3, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fc0f 	bl	800649e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8005c80:	4603      	mov	r3, r0
 8005c82:	e000      	b.n	8005c86 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8005c84:	787b      	ldrb	r3, [r7, #1]
  }
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005c9a:	887b      	ldrh	r3, [r7, #2]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fc0b 	bl	80064ba <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8005ca4:	4603      	mov	r3, r0
  }
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8005cbc:	897b      	ldrh	r3, [r7, #10]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff f8de 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005cca:	8afb      	ldrh	r3, [r7, #22]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	8afb      	ldrh	r3, [r7, #22]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff ffac 	bl	8005c34 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	e000      	b.n	8005ce2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8005ce0:	687b      	ldr	r3, [r7, #4]
  }
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005cf6:	887b      	ldrh	r3, [r7, #2]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fbfd 	bl	80064fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005d00:	4603      	mov	r3, r0
  }
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	807b      	strh	r3, [r7, #2]
 8005d16:	4613      	mov	r3, r2
 8005d18:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8005d1a:	887b      	ldrh	r3, [r7, #2]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff f8af 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005d24:	4603      	mov	r3, r0
 8005d26:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005d28:	89fb      	ldrh	r3, [r7, #14]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	89fb      	ldrh	r3, [r7, #14]
 8005d32:	4413      	add	r3, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fc00 	bl	800653a <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	e001      	b.n	8005d42 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8005d3e:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	460b      	mov	r3, r1
 8005d54:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d58:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8005d5a:	897b      	ldrh	r3, [r7, #10]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7ff f88f 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005d64:	4603      	mov	r3, r0
 8005d66:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005d68:	8afb      	ldrh	r3, [r7, #22]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	8afb      	ldrh	r3, [r7, #22]
 8005d72:	4413      	add	r3, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fbef 	bl	8006558 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8005d7a:	eef0 7a40 	vmov.f32	s15, s0
 8005d7e:	e001      	b.n	8005d84 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8005d80:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8005d84:	eeb0 0a67 	vmov.f32	s0, s15
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fb fa4f 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff ffe9 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d306      	bcc.n	8005dd2 <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8005dc4:	4b09      	ldr	r3, [pc, #36]	; (8005dec <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8005dc8:	f240 1101 	movw	r1, #257	; 0x101
 8005dcc:	4809      	ldr	r0, [pc, #36]	; (8005df4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8005dce:	f013 fa9b 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fbe4 	bl	80065a0 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fbcd 	bl	800657c <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8005de2:	4603      	mov	r3, r0
  }
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	08047cd0 	.word	0x08047cd0
 8005df0:	08047cdc 	.word	0x08047cdc
 8005df4:	08047dac 	.word	0x08047dac

08005df8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteAddParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fbd6 	bl	80065b8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteAddParamsEEPT_v>
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	4611      	mov	r1, r2
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fa14 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	461a      	mov	r2, r3
 8005e24:	4621      	mov	r1, r4
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fbed 	bl	8006606 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd90      	pop	{r4, r7, pc}

08005e34 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fbf6 	bl	8006630 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005e44:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fbfb 	bl	800664a <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005e54:	4604      	mov	r4, r0
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fc04 	bl	8006664 <_ZSt4moveIRP15TfLiteAddParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4619      	mov	r1, r3
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff f9fe 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
      }
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd90      	pop	{r4, r7, pc}

08005e78 <_ZStneI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    { return __x.get() != __y.get(); }

  /// unique_ptr comparison with nullptr
  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fbf9 	bl	800667a <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
	return get();
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fbfe 	bl	800669c <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005ea0:	4603      	mov	r3, r0
      }
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fbfe 	bl	80066b6 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteConcatenationParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fc04 	bl	80066e0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteConcatenationParamsEEPT_v>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff f9ae 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005eea:	f107 030c 	add.w	r3, r7, #12
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fc1b 	bl	800672e <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd90      	pop	{r4, r7, pc}

08005f00 <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8005f00:	b590      	push	{r4, r7, lr}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fc24 	bl	8006758 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005f10:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fc29 	bl	8006772 <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005f20:	4604      	mov	r4, r0
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fc32 	bl	800678c <_ZSt4moveIRP25TfLiteConcatenationParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f7ff f998 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
      }
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd90      	pop	{r4, r7, pc}

08005f44 <_ZStneI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fc27 	bl	80067a2 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
	return get();
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fc2c 	bl	80067c4 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005f6c:	4603      	mov	r3, r0
      }
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fc2c 	bl	80067de <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005f86:	4603      	mov	r3, r0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fc32 	bl	8006808 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff f948 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fc49 	bl	8006856 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd90      	pop	{r4, r7, pc}

08005fcc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fc52 	bl	8006880 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005fdc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fc57 	bl	800689a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005fec:	4604      	mov	r4, r0
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fc60 	bl	80068b4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff f932 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
      }
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	bd90      	pop	{r4, r7, pc}

08006010 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fc55 	bl	80068ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8006020:	4603      	mov	r3, r0
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
	return get();
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fc5a 	bl	80068ec <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006038:	4603      	mov	r3, r0
      }
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fc5a 	bl	8006906 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8006052:	4603      	mov	r3, r0
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteL2NormParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc60 	bl	8006930 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteL2NormParamsEEPT_v>
 8006070:	4604      	mov	r4, r0
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	f107 030c 	add.w	r3, r7, #12
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff f8e2 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8006082:	f107 030c 	add.w	r3, r7, #12
 8006086:	461a      	mov	r2, r3
 8006088:	4621      	mov	r1, r4
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc77 	bl	800697e <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	bd90      	pop	{r4, r7, pc}

08006098 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fc80 	bl	80069a8 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80060a8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00c      	beq.n	80060cc <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fc85 	bl	80069c2 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80060b8:	4604      	mov	r4, r0
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fc8e 	bl	80069dc <_ZSt4moveIRP18TfLiteL2NormParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80060c0:	4603      	mov	r3, r0
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff f8cc 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
      }
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd90      	pop	{r4, r7, pc}

080060dc <_ZStneI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fc83 	bl	80069f2 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80060ec:	4603      	mov	r3, r0
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
	return get();
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fc88 	bl	8006a14 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006104:	4603      	mov	r3, r0
      }
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fc88 	bl	8006a2e <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800611e:	4603      	mov	r3, r0
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteMulParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fc8e 	bl	8006a58 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteMulParamsEEPT_v>
 800613c:	4604      	mov	r4, r0
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	f107 030c 	add.w	r3, r7, #12
 8006146:	4611      	mov	r1, r2
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f87c 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800614e:	f107 030c 	add.w	r3, r7, #12
 8006152:	461a      	mov	r2, r3
 8006154:	4621      	mov	r1, r4
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fca5 	bl	8006aa6 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fcae 	bl	8006ad0 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006174:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00c      	beq.n	8006198 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fcb3 	bl	8006aea <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8006184:	4604      	mov	r4, r0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fcbc 	bl	8006b04 <_ZSt4moveIRP15TfLiteMulParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800618c:	4603      	mov	r3, r0
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4619      	mov	r1, r3
 8006192:	4620      	mov	r0, r4
 8006194:	f7ff f866 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
      }
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd90      	pop	{r4, r7, pc}

080061a8 <_ZStneI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fcb1 	bl	8006b1a <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
	return get();
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fcb6 	bl	8006b3c <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80061d0:	4603      	mov	r3, r0
      }
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fcb6 	bl	8006b56 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80061ea:	4603      	mov	r3, r0
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fcbc 	bl	8006b80 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8006208:	4604      	mov	r4, r0
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	f107 030c 	add.w	r3, r7, #12
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff f816 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	461a      	mov	r2, r3
 8006220:	4621      	mov	r1, r4
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fcd3 	bl	8006bce <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	bd90      	pop	{r4, r7, pc}

08006230 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fcdc 	bl	8006bf8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006240:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fce1 	bl	8006c12 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8006250:	4604      	mov	r4, r0
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fcea 	bl	8006c2c <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8006258:	4603      	mov	r3, r0
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4619      	mov	r1, r3
 800625e:	4620      	mov	r0, r4
 8006260:	f7ff f800 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
      }
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	bd90      	pop	{r4, r7, pc}

08006274 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fcdf 	bl	8006c42 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8006284:	4603      	mov	r3, r0
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
	return get();
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fce4 	bl	8006c64 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800629c:	4603      	mov	r3, r0
      }
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fce4 	bl	8006c7e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fcea 	bl	8006ca8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 80062d4:	4604      	mov	r4, r0
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	f107 030c 	add.w	r3, r7, #12
 80062de:	4611      	mov	r1, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe ffb0 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80062e6:	f107 030c 	add.w	r3, r7, #12
 80062ea:	461a      	mov	r2, r3
 80062ec:	4621      	mov	r1, r4
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fd01 	bl	8006cf6 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd90      	pop	{r4, r7, pc}

080062fc <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fd0a 	bl	8006d20 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800630c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fd0f 	bl	8006d3a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800631c:	4604      	mov	r4, r0
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 fd18 	bl	8006d54 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8006324:	4603      	mov	r3, r0
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4619      	mov	r1, r3
 800632a:	4620      	mov	r0, r4
 800632c:	f7fe ff9a 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
      }
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}

08006340 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fd0d 	bl	8006d6a <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8006350:	4603      	mov	r3, r0
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
	return get();
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fd12 	bl	8006d8c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006368:	4603      	mov	r3, r0
      }
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fd12 	bl	8006da6 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8006382:	4603      	mov	r3, r0
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteStridedSliceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fd18 	bl	8006dd0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteStridedSliceParamsEEPT_v>
 80063a0:	4604      	mov	r4, r0
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe ff4a 	bl	8005246 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80063b2:	f107 030c 	add.w	r3, r7, #12
 80063b6:	461a      	mov	r2, r3
 80063b8:	4621      	mov	r1, r4
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fd2f 	bl	8006e1e <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd90      	pop	{r4, r7, pc}

080063c8 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fd38 	bl	8006e48 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80063d8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fd3d 	bl	8006e62 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80063e8:	4604      	mov	r4, r0
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fd46 	bl	8006e7c <_ZSt4moveIRP24TfLiteStridedSliceParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80063f0:	4603      	mov	r3, r0
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4619      	mov	r1, r3
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7fe ff34 	bl	8005264 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
      }
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	bd90      	pop	{r4, r7, pc}

0800640c <_ZStneI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fd3b 	bl	8006e92 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800641c:	4603      	mov	r3, r0
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
	return get();
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fd40 	bl	8006eb4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006434:	4603      	mov	r3, r0
      }
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fd40 	bl	8006ece <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800644e:	4603      	mov	r3, r0
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
    return t;
 8006460:	687b      	ldr	r3, [r7, #4]
}
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	4603      	mov	r3, r0
 8006476:	80fb      	strh	r3, [r7, #6]
    return t;
 8006478:	88fb      	ldrh	r3, [r7, #6]
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	4603      	mov	r3, r0
 800648e:	71fb      	strb	r3, [r7, #7]
    return t;
 8006490:	79fb      	ldrb	r3, [r7, #7]
}
 8006492:	4618      	mov	r0, r3
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff ffeb 	bl	8006486 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 80064b0:	4603      	mov	r3, r0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80064c6:	887b      	ldrh	r3, [r7, #2]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fe fcd9 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80064d0:	4603      	mov	r3, r0
 80064d2:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	89fb      	ldrh	r3, [r7, #14]
 80064d8:	4413      	add	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80064dc:	89fb      	ldrh	r3, [r7, #14]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 80064e2:	68b8      	ldr	r0, [r7, #8]
 80064e4:	f7ff fb98 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4413      	add	r3, r2
                        : nullptr;
 80064ee:	e000      	b.n	80064f2 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80064f0:	2300      	movs	r3, #0
  }
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006506:	887b      	ldrh	r3, [r7, #2]
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fe fcb9 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006510:	4603      	mov	r3, r0
 8006512:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	89fb      	ldrh	r3, [r7, #14]
 8006518:	4413      	add	r3, r2
 800651a:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800651c:	89fb      	ldrh	r3, [r7, #14]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d006      	beq.n	8006530 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8006522:	68b8      	ldr	r0, [r7, #8]
 8006524:	f7ff fb78 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006528:	4602      	mov	r2, r0
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4413      	add	r3, r2
                        : nullptr;
 800652e:	e000      	b.n	8006532 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006530:	2300      	movs	r3, #0
  }
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f993 3000 	ldrsb.w	r3, [r3]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fcd5 	bl	8006ef8 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 800654e:	4603      	mov	r3, r0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	edd3 7a00 	vldr	s15, [r3]
 8006566:	eeb0 0a67 	vmov.f32	s0, s15
 800656a:	f000 fcd2 	bl	8006f12 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800656e:	eef0 7a40 	vmov.f32	s15, s0
}
 8006572:	eeb0 0a67 	vmov.f32	s0, s15
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ff61 	bl	8006458 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8006596:	4603      	mov	r3, r0
  }
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
  }
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteAddParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2201      	movs	r2, #1
 80065c8:	2101      	movs	r1, #1
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4619      	mov	r1, r3
 80065d4:	2001      	movs	r0, #1
 80065d6:	f7fe fc38 	bl	8004e4a <_ZnwjPv>
 80065da:	4603      	mov	r3, r0
  }
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <_ZNSt15__uniq_ptr_dataI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fca5 	bl	8006f46 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006606:	b590      	push	{r4, r7, lr}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006612:	68fc      	ldr	r4, [r7, #12]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fc8b 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800661a:	4603      	mov	r3, r0
 800661c:	461a      	mov	r2, r3
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	4620      	mov	r0, r4
 8006622:	f7ff ffdf 	bl	80065e4 <_ZNSt15__uniq_ptr_dataI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	bd90      	pop	{r4, r7, pc}

08006630 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fc99 	bl	8006f72 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006640:	4603      	mov	r3, r0
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fc99 	bl	8006f8c <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800665a:	4603      	mov	r3, r0
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <_ZSt4moveIRP15TfLiteAddParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f80a 	bl	800669c <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fc7d 	bl	8006fa6 <_ZNKSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80066ac:	4603      	mov	r3, r0
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ffb6 	bl	8006630 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80066c4:	4603      	mov	r3, r0
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff ffb0 	bl	8006630 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
	return __p;
 80066d6:	68fb      	ldr	r3, [r7, #12]
      }
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteConcatenationParamsEEPT_v>:
  T* AllocatePOD() {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2204      	movs	r2, #4
 80066f0:	2108      	movs	r1, #8
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
 80066f6:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4619      	mov	r1, r3
 80066fc:	2008      	movs	r0, #8
 80066fe:	f7fe fba4 	bl	8004e4a <_ZnwjPv>
 8006702:	4603      	mov	r3, r0
  }
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <_ZNSt15__uniq_ptr_dataI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fc4f 	bl	8006fc2 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800672e:	b590      	push	{r4, r7, lr}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800673a:	68fc      	ldr	r4, [r7, #12]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fbf7 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	4620      	mov	r0, r4
 800674a:	f7ff ffdf 	bl	800670c <_ZNSt15__uniq_ptr_dataI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	bd90      	pop	{r4, r7, pc}

08006758 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fc43 	bl	8006fee <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006768:	4603      	mov	r3, r0
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fc43 	bl	8007008 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8006782:	4603      	mov	r3, r0
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <_ZSt4moveIRP25TfLiteConcatenationParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f80a 	bl	80067c4 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fc27 	bl	8007022 <_ZNKSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff ffb6 	bl	8006758 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80067ec:	4603      	mov	r3, r0
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ffb0 	bl	8006758 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
	return __p;
 80067fe:	68fb      	ldr	r3, [r7, #12]
      }
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2201      	movs	r2, #1
 8006818:	2104      	movs	r1, #4
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	4798      	blx	r3
 800681e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4619      	mov	r1, r3
 8006824:	2004      	movs	r0, #4
 8006826:	f7fe fb10 	bl	8004e4a <_ZnwjPv>
 800682a:	4603      	mov	r3, r0
  }
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fbf9 	bl	800703e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006856:	b590      	push	{r4, r7, lr}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006862:	68fc      	ldr	r4, [r7, #12]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb63 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	4620      	mov	r0, r4
 8006872:	f7ff ffdf 	bl	8006834 <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	bd90      	pop	{r4, r7, pc}

08006880 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fbed 	bl	800706a <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006890:	4603      	mov	r3, r0
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fbed 	bl	8007084 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80068aa:	4603      	mov	r3, r0
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f80a 	bl	80068ec <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	bf14      	ite	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	2300      	moveq	r3, #0
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fbd1 	bl	800709e <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80068fc:	4603      	mov	r3, r0
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff ffb6 	bl	8006880 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006914:	4603      	mov	r3, r0
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff ffb0 	bl	8006880 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006920:	4603      	mov	r3, r0
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
	return __p;
 8006926:	68fb      	ldr	r3, [r7, #12]
      }
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteL2NormParamsEEPT_v>:
  T* AllocatePOD() {
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2201      	movs	r2, #1
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
 8006946:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4619      	mov	r1, r3
 800694c:	2001      	movs	r0, #1
 800694e:	f7fe fa7c 	bl	8004e4a <_ZnwjPv>
 8006952:	4603      	mov	r3, r0
  }
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <_ZNSt15__uniq_ptr_dataI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fba3 	bl	80070ba <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800697e:	b590      	push	{r4, r7, lr}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800698a:	68fc      	ldr	r4, [r7, #12]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 facf 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006992:	4603      	mov	r3, r0
 8006994:	461a      	mov	r2, r3
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	4620      	mov	r0, r4
 800699a:	f7ff ffdf 	bl	800695c <_ZNSt15__uniq_ptr_dataI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd90      	pop	{r4, r7, pc}

080069a8 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fb97 	bl	80070e6 <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80069b8:	4603      	mov	r3, r0
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fb97 	bl	8007100 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <_ZSt4moveIRP18TfLiteL2NormParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f80a 	bl	8006a14 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bf14      	ite	ne
 8006a06:	2301      	movne	r3, #1
 8006a08:	2300      	moveq	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fb7b 	bl	800711a <_ZNKSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006a24:	4603      	mov	r3, r0
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ffb6 	bl	80069a8 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff ffb0 	bl	80069a8 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
	return __p;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
      }
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteMulParamsEEPT_v>:
  T* AllocatePOD() {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2201      	movs	r2, #1
 8006a68:	2101      	movs	r1, #1
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4619      	mov	r1, r3
 8006a74:	2001      	movs	r0, #1
 8006a76:	f7fe f9e8 	bl	8004e4a <_ZnwjPv>
 8006a7a:	4603      	mov	r3, r0
  }
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <_ZNSt15__uniq_ptr_dataI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fb4d 	bl	8007136 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006aa6:	b590      	push	{r4, r7, lr}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006ab2:	68fc      	ldr	r4, [r7, #12]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fa3b 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff ffdf 	bl	8006a84 <_ZNSt15__uniq_ptr_dataI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd90      	pop	{r4, r7, pc}

08006ad0 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fb41 	bl	8007162 <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fb41 	bl	800717c <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8006afa:	4603      	mov	r3, r0
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <_ZSt4moveIRP15TfLiteMulParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f80a 	bl	8006b3c <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fb25 	bl	8007196 <_ZNKSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff ffb6 	bl	8006ad0 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006b64:	4603      	mov	r3, r0
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ffb0 	bl	8006ad0 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
	return __p;
 8006b76:	68fb      	ldr	r3, [r7, #12]
      }
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	2124      	movs	r1, #36	; 0x24
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	2024      	movs	r0, #36	; 0x24
 8006b9e:	f7fe f954 	bl	8004e4a <_ZnwjPv>
 8006ba2:	4603      	mov	r3, r0
  }
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZNSt15__uniq_ptr_dataI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 faf7 	bl	80071b2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006bce:	b590      	push	{r4, r7, lr}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006bda:	68fc      	ldr	r4, [r7, #12]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f9a7 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006be2:	4603      	mov	r3, r0
 8006be4:	461a      	mov	r2, r3
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7ff ffdf 	bl	8006bac <_ZNSt15__uniq_ptr_dataI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd90      	pop	{r4, r7, pc}

08006bf8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 faeb 	bl	80071de <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 faeb 	bl	80071f8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8006c22:	4603      	mov	r3, r0
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f80a 	bl	8006c64 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 facf 	bl	8007212 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff ffb6 	bl	8006bf8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff ffb0 	bl	8006bf8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
	return __p;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
      }
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	2104      	movs	r1, #4
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
 8006cbe:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	2004      	movs	r0, #4
 8006cc6:	f7fe f8c0 	bl	8004e4a <_ZnwjPv>
 8006cca:	4603      	mov	r3, r0
  }
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <_ZNSt15__uniq_ptr_dataI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 faa1 	bl	800722e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006cf6:	b590      	push	{r4, r7, lr}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006d02:	68fc      	ldr	r4, [r7, #12]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f913 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7ff ffdf 	bl	8006cd4 <_ZNSt15__uniq_ptr_dataI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd90      	pop	{r4, r7, pc}

08006d20 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fa95 	bl	800725a <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006d30:	4603      	mov	r3, r0
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fa95 	bl	8007274 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f80a 	bl	8006d8c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf14      	ite	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	2300      	moveq	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fa79 	bl	800728e <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff ffb6 	bl	8006d20 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006db4:	4603      	mov	r3, r0
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff ffb0 	bl	8006d20 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
	return __p;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
      }
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteStridedSliceParamsEEPT_v>:
  T* AllocatePOD() {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2204      	movs	r2, #4
 8006de0:	2114      	movs	r1, #20
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
 8006de6:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4619      	mov	r1, r3
 8006dec:	2014      	movs	r0, #20
 8006dee:	f7fe f82c 	bl	8004e4a <_ZnwjPv>
 8006df2:	4603      	mov	r3, r0
  }
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <_ZNSt15__uniq_ptr_dataI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fa4b 	bl	80072aa <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006e1e:	b590      	push	{r4, r7, lr}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006e2a:	68fc      	ldr	r4, [r7, #12]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f87f 	bl	8006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006e32:	4603      	mov	r3, r0
 8006e34:	461a      	mov	r2, r3
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff ffdf 	bl	8006dfc <_ZNSt15__uniq_ptr_dataI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd90      	pop	{r4, r7, pc}

08006e48 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fa3f 	bl	80072d6 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fa3f 	bl	80072f0 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8006e72:	4603      	mov	r3, r0
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <_ZSt4moveIRP24TfLiteStridedSliceParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f80a 	bl	8006eb4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fa23 	bl	800730a <_ZNKSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff ffb6 	bl	8006e48 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006edc:	4603      	mov	r3, r0
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff ffb0 	bl	8006e48 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
	return __p;
 8006eee:	68fb      	ldr	r3, [r7, #12]
      }
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	71fb      	strb	r3, [r7, #7]
    return t;
 8006f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	ee07 3a90 	vmov	s15, r3
}
 8006f22:	eeb0 0a67 	vmov.f32	s0, s15
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006f46:	b590      	push	{r4, r7, lr}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8006f52:	68fc      	ldr	r4, [r7, #12]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f9e6 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	f107 0308 	add.w	r3, r7, #8
 8006f60:	4619      	mov	r1, r3
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 f9ea 	bl	800733c <_ZNSt5tupleIJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd90      	pop	{r4, r7, pc}

08006f72 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f9f6 	bl	800736e <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006f82:	4603      	mov	r3, r0
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f9f5 	bl	8007386 <_ZSt3getILj1EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <_ZNKSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 f9f5 	bl	80073a0 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006fc2:	b590      	push	{r4, r7, lr}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8006fce:	68fc      	ldr	r4, [r7, #12]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f9a8 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	f107 0308 	add.w	r3, r7, #8
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 f9eb 	bl	80073ba <_ZNSt5tupleIJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}

08006fee <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f9f7 	bl	80073ec <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006ffe:	4603      	mov	r3, r0
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 f9f6 	bl	8007404 <_ZSt3getILj1EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8007018:	4603      	mov	r3, r0
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <_ZNKSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f9f6 	bl	800741e <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8007032:	4603      	mov	r3, r0
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800703e:	b590      	push	{r4, r7, lr}
 8007040:	b085      	sub	sp, #20
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800704a:	68fc      	ldr	r4, [r7, #12]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f96a 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007052:	4602      	mov	r2, r0
 8007054:	f107 0308 	add.w	r3, r7, #8
 8007058:	4619      	mov	r1, r3
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f9ec 	bl	8007438 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	bd90      	pop	{r4, r7, pc}

0800706a <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f9f8 	bl	800746a <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800707a:	4603      	mov	r3, r0
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f9f7 	bl	8007482 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8007094:	4603      	mov	r3, r0
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 f9f7 	bl	800749c <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80070ae:	4603      	mov	r3, r0
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80070ba:	b590      	push	{r4, r7, lr}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80070c6:	68fc      	ldr	r4, [r7, #12]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f92c 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80070ce:	4602      	mov	r2, r0
 80070d0:	f107 0308 	add.w	r3, r7, #8
 80070d4:	4619      	mov	r1, r3
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f9ed 	bl	80074b6 <_ZNSt5tupleIJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd90      	pop	{r4, r7, pc}

080070e6 <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 f9f9 	bl	80074e8 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80070f6:	4603      	mov	r3, r0
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 f9f8 	bl	8007500 <_ZSt3getILj1EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8007110:	4603      	mov	r3, r0
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZNKSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f9f8 	bl	800751a <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800712a:	4603      	mov	r3, r0
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8007136:	b590      	push	{r4, r7, lr}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8007142:	68fc      	ldr	r4, [r7, #12]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8ee 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800714a:	4602      	mov	r2, r0
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	4619      	mov	r1, r3
 8007152:	4620      	mov	r0, r4
 8007154:	f000 f9ee 	bl	8007534 <_ZNSt5tupleIJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	bd90      	pop	{r4, r7, pc}

08007162 <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f9fa 	bl	8007566 <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8007172:	4603      	mov	r3, r0
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f9f9 	bl	800757e <_ZSt3getILj1EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800718c:	4603      	mov	r3, r0
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <_ZNKSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 f9f9 	bl	8007598 <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80071a6:	4603      	mov	r3, r0
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80071b2:	b590      	push	{r4, r7, lr}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80071be:	68fc      	ldr	r4, [r7, #12]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f8b0 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80071c6:	4602      	mov	r2, r0
 80071c8:	f107 0308 	add.w	r3, r7, #8
 80071cc:	4619      	mov	r1, r3
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f9ef 	bl	80075b2 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd90      	pop	{r4, r7, pc}

080071de <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 f9fb 	bl	80075e4 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f9fa 	bl	80075fc <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8007208:	4603      	mov	r3, r0
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f9fa 	bl	8007616 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8007222:	4603      	mov	r3, r0
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800722e:	b590      	push	{r4, r7, lr}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800723a:	68fc      	ldr	r4, [r7, #12]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f872 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007242:	4602      	mov	r2, r0
 8007244:	f107 0308 	add.w	r3, r7, #8
 8007248:	4619      	mov	r1, r3
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f9f0 	bl	8007630 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	bd90      	pop	{r4, r7, pc}

0800725a <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f9fc 	bl	8007662 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800726a:	4603      	mov	r3, r0
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f9fb 	bl	800767a <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8007284:	4603      	mov	r3, r0
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 f9fb 	bl	8007694 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800729e:	4603      	mov	r3, r0
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80072aa:	b590      	push	{r4, r7, lr}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80072b6:	68fc      	ldr	r4, [r7, #12]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f834 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80072be:	4602      	mov	r2, r0
 80072c0:	f107 0308 	add.w	r3, r7, #8
 80072c4:	4619      	mov	r1, r3
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f9f1 	bl	80076ae <_ZNSt5tupleIJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd90      	pop	{r4, r7, pc}

080072d6 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f9fd 	bl	80076e0 <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80072e6:	4603      	mov	r3, r0
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f9fc 	bl	80076f8 <_ZSt3getILj1EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8007300:	4603      	mov	r3, r0
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <_ZNKSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 f9fc 	bl	8007712 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800731a:	4603      	mov	r3, r0
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <_ZNSt5tupleIJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800733c:	b5b0      	push	{r4, r5, r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8007348:	68fc      	ldr	r4, [r7, #12]
 800734a:	68b8      	ldr	r0, [r7, #8]
 800734c:	f000 f9fa 	bl	8007744 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007350:	4605      	mov	r5, r0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff ffe7 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	4629      	mov	r1, r5
 800735e:	4620      	mov	r0, r4
 8007360:	f000 f9fb 	bl	800775a <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bdb0      	pop	{r4, r5, r7, pc}

0800736e <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa0d 	bl	8007796 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800737c:	4603      	mov	r3, r0
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <_ZSt3getILj1EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4618      	mov	r0, r3
 8007392:	f000 f9cb 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007396:	4603      	mov	r3, r0
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fa01 	bl	80077b2 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80073b0:	4603      	mov	r3, r0
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <_ZNSt5tupleIJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 80073ba:	b5b0      	push	{r4, r5, r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80073c6:	68fc      	ldr	r4, [r7, #12]
 80073c8:	68b8      	ldr	r0, [r7, #8]
 80073ca:	f000 f9fe 	bl	80077ca <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80073ce:	4605      	mov	r5, r0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ffa8 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461a      	mov	r2, r3
 80073da:	4629      	mov	r1, r5
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 f9ff 	bl	80077e0 <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bdb0      	pop	{r4, r5, r7, pc}

080073ec <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fa11 	bl	800781c <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80073fa:	4603      	mov	r3, r0
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <_ZSt3getILj1EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 f98c 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007414:	4603      	mov	r3, r0
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fa05 	bl	8007838 <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800742e:	4603      	mov	r3, r0
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8007438:	b5b0      	push	{r4, r5, r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8007444:	68fc      	ldr	r4, [r7, #12]
 8007446:	68b8      	ldr	r0, [r7, #8]
 8007448:	f000 fa02 	bl	8007850 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800744c:	4605      	mov	r5, r0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff ff69 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	4629      	mov	r1, r5
 800745a:	4620      	mov	r0, r4
 800745c:	f000 fa03 	bl	8007866 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bdb0      	pop	{r4, r5, r7, pc}

0800746a <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fa15 	bl	80078a2 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8007478:	4603      	mov	r3, r0
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 f94d 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007492:	4603      	mov	r3, r0
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fa09 	bl	80078be <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <_ZNSt5tupleIJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 80074b6:	b5b0      	push	{r4, r5, r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80074c2:	68fc      	ldr	r4, [r7, #12]
 80074c4:	68b8      	ldr	r0, [r7, #8]
 80074c6:	f000 fa06 	bl	80078d6 <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80074ca:	4605      	mov	r5, r0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ff2a 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80074d2:	4603      	mov	r3, r0
 80074d4:	461a      	mov	r2, r3
 80074d6:	4629      	mov	r1, r5
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 fa07 	bl	80078ec <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bdb0      	pop	{r4, r5, r7, pc}

080074e8 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa19 	bl	8007928 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZSt3getILj1EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f90e 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007510:	4603      	mov	r3, r0
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fa0d 	bl	8007944 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800752a:	4603      	mov	r3, r0
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <_ZNSt5tupleIJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8007534:	b5b0      	push	{r4, r5, r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8007540:	68fc      	ldr	r4, [r7, #12]
 8007542:	68b8      	ldr	r0, [r7, #8]
 8007544:	f000 fa0a 	bl	800795c <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007548:	4605      	mov	r5, r0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff feeb 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	4629      	mov	r1, r5
 8007556:	4620      	mov	r0, r4
 8007558:	f000 fa0b 	bl	8007972 <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bdb0      	pop	{r4, r5, r7, pc}

08007566 <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa1d 	bl	80079ae <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8007574:	4603      	mov	r3, r0
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <_ZSt3getILj1EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f8cf 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800758e:	4603      	mov	r3, r0
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa11 	bl	80079ca <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80075a8:	4603      	mov	r3, r0
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 80075b2:	b5b0      	push	{r4, r5, r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80075be:	68fc      	ldr	r4, [r7, #12]
 80075c0:	68b8      	ldr	r0, [r7, #8]
 80075c2:	f000 fa0e 	bl	80079e2 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80075c6:	4605      	mov	r5, r0
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff feac 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80075ce:	4603      	mov	r3, r0
 80075d0:	461a      	mov	r2, r3
 80075d2:	4629      	mov	r1, r5
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fa0f 	bl	80079f8 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bdb0      	pop	{r4, r5, r7, pc}

080075e4 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fa21 	bl	8007a34 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80075f2:	4603      	mov	r3, r0
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f890 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800760c:	4603      	mov	r3, r0
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fa15 	bl	8007a50 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8007626:	4603      	mov	r3, r0
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8007630:	b5b0      	push	{r4, r5, r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800763c:	68fc      	ldr	r4, [r7, #12]
 800763e:	68b8      	ldr	r0, [r7, #8]
 8007640:	f000 fa12 	bl	8007a68 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007644:	4605      	mov	r5, r0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff fe6d 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	4629      	mov	r1, r5
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fa13 	bl	8007a7e <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bdb0      	pop	{r4, r5, r7, pc}

08007662 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa25 	bl	8007aba <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8007670:	4603      	mov	r3, r0
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f851 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800768a:	4603      	mov	r3, r0
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fa19 	bl	8007ad6 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <_ZNSt5tupleIJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 80076ae:	b5b0      	push	{r4, r5, r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80076ba:	68fc      	ldr	r4, [r7, #12]
 80076bc:	68b8      	ldr	r0, [r7, #8]
 80076be:	f000 fa16 	bl	8007aee <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80076c2:	4605      	mov	r5, r0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff fe2e 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	4629      	mov	r1, r5
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 fa17 	bl	8007b04 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bdb0      	pop	{r4, r5, r7, pc}

080076e0 <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa29 	bl	8007b40 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80076ee:	4603      	mov	r3, r0
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <_ZSt3getILj1EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f812 	bl	800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007708:	4603      	mov	r3, r0
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fa1d 	bl	8007b5c <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8007722:	4603      	mov	r3, r0
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa30 	bl	8007b9a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800773a:	4603      	mov	r3, r0
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800775a:	b590      	push	{r4, r7, lr}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8007766:	68fc      	ldr	r4, [r7, #12]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff fddc 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800776e:	4603      	mov	r3, r0
 8007770:	4619      	mov	r1, r3
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f9fe 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	1d1c      	adds	r4, r3, #4
 800777c:	68b8      	ldr	r0, [r7, #8]
 800777e:	f7ff ffe1 	bl	8007744 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007782:	4603      	mov	r3, r0
 8007784:	4619      	mov	r1, r3
 8007786:	4620      	mov	r0, r4
 8007788:	f000 fa14 	bl	8007bb4 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EEC1IRS1_EEOT_>
	{ }
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	bd90      	pop	{r4, r7, pc}

08007796 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fa17 	bl	8007bd6 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERS2_>
 80077a8:	4603      	mov	r3, r0
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa16 	bl	8007bec <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80077c0:	4603      	mov	r3, r0
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80077e0:	b590      	push	{r4, r7, lr}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 80077ec:	68fc      	ldr	r4, [r7, #12]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fd99 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80077f4:	4603      	mov	r3, r0
 80077f6:	4619      	mov	r1, r3
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 f9bb 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1d1c      	adds	r4, r3, #4
 8007802:	68b8      	ldr	r0, [r7, #8]
 8007804:	f7ff ffe1 	bl	80077ca <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007808:	4603      	mov	r3, r0
 800780a:	4619      	mov	r1, r3
 800780c:	4620      	mov	r0, r4
 800780e:	f000 f9fb 	bl	8007c08 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EEC1IRS1_EEOT_>
	{ }
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	bd90      	pop	{r4, r7, pc}

0800781c <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f9fe 	bl	8007c2a <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERS2_>
 800782e:	4603      	mov	r3, r0
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9fd 	bl	8007c40 <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8007846:	4603      	mov	r3, r0
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8007866:	b590      	push	{r4, r7, lr}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8007872:	68fc      	ldr	r4, [r7, #12]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fd56 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800787a:	4603      	mov	r3, r0
 800787c:	4619      	mov	r1, r3
 800787e:	4620      	mov	r0, r4
 8007880:	f000 f978 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	1d1c      	adds	r4, r3, #4
 8007888:	68b8      	ldr	r0, [r7, #8]
 800788a:	f7ff ffe1 	bl	8007850 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800788e:	4603      	mov	r3, r0
 8007890:	4619      	mov	r1, r3
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f9e2 	bl	8007c5c <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
	{ }
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd90      	pop	{r4, r7, pc}

080078a2 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 f9e5 	bl	8007c7e <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 80078b4:	4603      	mov	r3, r0
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9e4 	bl	8007c94 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80078cc:	4603      	mov	r3, r0
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80078ec:	b590      	push	{r4, r7, lr}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 80078f8:	68fc      	ldr	r4, [r7, #12]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fd13 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007900:	4603      	mov	r3, r0
 8007902:	4619      	mov	r1, r3
 8007904:	4620      	mov	r0, r4
 8007906:	f000 f935 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1d1c      	adds	r4, r3, #4
 800790e:	68b8      	ldr	r0, [r7, #8]
 8007910:	f7ff ffe1 	bl	80078d6 <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007914:	4603      	mov	r3, r0
 8007916:	4619      	mov	r1, r3
 8007918:	4620      	mov	r0, r4
 800791a:	f000 f9c9 	bl	8007cb0 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EEC1IRS1_EEOT_>
	{ }
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	bd90      	pop	{r4, r7, pc}

08007928 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f000 f9cc 	bl	8007cd2 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERS2_>
 800793a:	4603      	mov	r3, r0
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f9cb 	bl	8007ce8 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8007952:	4603      	mov	r3, r0
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8007972:	b590      	push	{r4, r7, lr}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800797e:	68fc      	ldr	r4, [r7, #12]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fcd0 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007986:	4603      	mov	r3, r0
 8007988:	4619      	mov	r1, r3
 800798a:	4620      	mov	r0, r4
 800798c:	f000 f8f2 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	1d1c      	adds	r4, r3, #4
 8007994:	68b8      	ldr	r0, [r7, #8]
 8007996:	f7ff ffe1 	bl	800795c <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800799a:	4603      	mov	r3, r0
 800799c:	4619      	mov	r1, r3
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 f9b0 	bl	8007d04 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EEC1IRS1_EEOT_>
	{ }
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd90      	pop	{r4, r7, pc}

080079ae <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3304      	adds	r3, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f9b3 	bl	8007d26 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERS2_>
 80079c0:	4603      	mov	r3, r0
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9b2 	bl	8007d3c <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80079d8:	4603      	mov	r3, r0
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80079f8:	b590      	push	{r4, r7, lr}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8007a04:	68fc      	ldr	r4, [r7, #12]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fc8d 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 f8af 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	1d1c      	adds	r4, r3, #4
 8007a1a:	68b8      	ldr	r0, [r7, #8]
 8007a1c:	f7ff ffe1 	bl	80079e2 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4619      	mov	r1, r3
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 f997 	bl	8007d58 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
	{ }
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd90      	pop	{r4, r7, pc}

08007a34 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 f99a 	bl	8007d7a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8007a46:	4603      	mov	r3, r0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f999 	bl	8007d90 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8007a7e:	b590      	push	{r4, r7, lr}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8007a8a:	68fc      	ldr	r4, [r7, #12]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff fc4a 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4619      	mov	r1, r3
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f86c 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	1d1c      	adds	r4, r3, #4
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f7ff ffe1 	bl	8007a68 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 f97e 	bl	8007dac <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
	{ }
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd90      	pop	{r4, r7, pc}

08007aba <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f981 	bl	8007dce <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f980 	bl	8007de4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8007b04:	b590      	push	{r4, r7, lr}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8007b10:	68fc      	ldr	r4, [r7, #12]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff fc07 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 f829 	bl	8007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	1d1c      	adds	r4, r3, #4
 8007b26:	68b8      	ldr	r0, [r7, #8]
 8007b28:	f7ff ffe1 	bl	8007aee <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 f965 	bl	8007e00 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EEC1IRS1_EEOT_>
	{ }
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd90      	pop	{r4, r7, pc}

08007b40 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f968 	bl	8007e22 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERS2_>
 8007b52:	4603      	mov	r3, r0
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f967 	bl	8007e38 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8007b7e:	687c      	ldr	r4, [r7, #4]
 8007b80:	6838      	ldr	r0, [r7, #0]
 8007b82:	f7ff fbd0 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007b86:	4603      	mov	r3, r0
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 f962 	bl	8007e54 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
	{ }
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd90      	pop	{r4, r7, pc}

08007b9a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f966 	bl	8007e76 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8007baa:	4603      	mov	r3, r0
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007bbe:	6838      	ldr	r0, [r7, #0]
 8007bc0:	f7ff fdc0 	bl	8007744 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f947 	bl	8007e8c <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERKS2_>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007c12:	6838      	ldr	r0, [r7, #0]
 8007c14:	f7ff fdd9 	bl	80077ca <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f928 	bl	8007ea2 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERKS2_>
 8007c52:	4603      	mov	r3, r0
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007c66:	6838      	ldr	r0, [r7, #0]
 8007c68:	f7ff fdf2 	bl	8007850 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f909 	bl	8007eb8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007cba:	6838      	ldr	r0, [r7, #0]
 8007cbc:	f7ff fe0b 	bl	80078d6 <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 f8ea 	bl	8007ece <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERKS2_>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	f7ff fe24 	bl	800795c <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007d14:	4603      	mov	r3, r0
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f8cb 	bl	8007ee4 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERKS2_>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007d62:	6838      	ldr	r0, [r7, #0]
 8007d64:	f7ff fe3d 	bl	80079e2 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 f8ac 	bl	8007efa <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8007da2:	4603      	mov	r3, r0
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007db6:	6838      	ldr	r0, [r7, #0]
 8007db8:	f7ff fe56 	bl	8007a68 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f88d 	bl	8007f10 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 8007df6:	4603      	mov	r3, r0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007e0a:	6838      	ldr	r0, [r7, #0]
 8007e0c:	f7ff fe6f 	bl	8007aee <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8007e10:	4603      	mov	r3, r0
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f86e 	bl	8007f26 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERKS2_>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007e5e:	6838      	ldr	r0, [r7, #0]
 8007e60:	f7ff fa61 	bl	8007326 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007e64:	4602      	mov	r2, r0
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERKS2_>:
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERKS2_>:
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERKS2_>:
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERKS2_>:
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f8da 	bl	8008100 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
  return names;
 8007f5c:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	0804d84c 	.word	0x0804d84c

08007f6c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
 8007f76:	2300      	movs	r3, #0
 8007f78:	72bb      	strb	r3, [r7, #10]
 8007f7a:	237e      	movs	r3, #126	; 0x7e
 8007f7c:	72fb      	strb	r3, [r7, #11]
 8007f7e:	f107 020b 	add.w	r2, r7, #11
 8007f82:	f107 010a 	add.w	r1, r7, #10
 8007f86:	1dfb      	adds	r3, r7, #7
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f8c5 	bl	8008118 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8007f96:	e008      	b.n	8007faa <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8007f9c:	f7ff ffdc 	bl	8007f58 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	681b      	ldr	r3, [r3, #0]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	08048438 	.word	0x08048438

08007fb8 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2104      	movs	r1, #4
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd fe9f 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	b2db      	uxtb	r3, r3
  }
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2106      	movs	r1, #6
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f8b2 	bl	800814e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8007fea:	4603      	mov	r3, r0
  }
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	2108      	movs	r1, #8
 8008002:	4618      	mov	r0, r3
 8008004:	f7fd fe53 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008008:	4603      	mov	r3, r0
  }
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b089      	sub	sp, #36	; 0x24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8008022:	2300      	movs	r3, #0
 8008024:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
  auto builtin_code = opcode->builtin_code();
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff ffc3 	bl	8007fb8 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8008032:	4603      	mov	r3, r0
 8008034:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff ffdc 	bl	8007ff4 <_ZNK6tflite12OperatorCode7versionEv>
 800803c:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800803e:	7fbb      	ldrb	r3, [r7, #30]
 8008040:	2b7e      	cmp	r3, #126	; 0x7e
 8008042:	d908      	bls.n	8008056 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 8008044:	7fbb      	ldrb	r3, [r7, #30]
 8008046:	461a      	mov	r2, r3
 8008048:	492a      	ldr	r1, [pc, #168]	; (80080f4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7fc feca 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8008050:	2301      	movs	r3, #1
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e049      	b.n	80080ea <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8008056:	7fbb      	ldrb	r3, [r7, #30]
 8008058:	2b20      	cmp	r3, #32
 800805a:	d01b      	beq.n	8008094 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
    *registration = op_resolver.FindOp(builtin_code, version);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	7fb9      	ldrb	r1, [r7, #30]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	68b8      	ldr	r0, [r7, #8]
 8008068:	4798      	blx	r3
 800806a:	4602      	mov	r2, r0
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d138      	bne.n	80080ea <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
      TF_LITE_REPORT_ERROR(
 8008078:	687c      	ldr	r4, [r7, #4]
 800807a:	7fbb      	ldrb	r3, [r7, #30]
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff ff75 	bl	8007f6c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8008082:	4602      	mov	r2, r0
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	491c      	ldr	r1, [pc, #112]	; (80080f8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8008088:	4620      	mov	r0, r4
 800808a:	f7fc feab 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800808e:	2301      	movs	r3, #1
 8008090:	77fb      	strb	r3, [r7, #31]
 8008092:	e02a      	b.n	80080ea <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
    }
  } else if (!opcode->custom_code()) {
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff ff9f 	bl	8007fd8 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	bf0c      	ite	eq
 80080a0:	2301      	moveq	r3, #1
 80080a2:	2300      	movne	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d006      	beq.n	80080b8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>
    TF_LITE_REPORT_ERROR(
 80080aa:	4914      	ldr	r1, [pc, #80]	; (80080fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7fc fe99 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 80080b2:	2301      	movs	r3, #1
 80080b4:	77fb      	strb	r3, [r7, #31]
 80080b6:	e018      	b.n	80080ea <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
  } else {
    const char* name = opcode->custom_code()->c_str();
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff ff8d 	bl	8007fd8 <_ZNK6tflite12OperatorCode11custom_codeEv>
 80080be:	4603      	mov	r3, r0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff ff3b 	bl	8007f3c <_ZNK11flatbuffers6String5c_strEv>
 80080c6:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3304      	adds	r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	6979      	ldr	r1, [r7, #20]
 80080d4:	68b8      	ldr	r0, [r7, #8]
 80080d6:	4798      	blx	r3
 80080d8:	4602      	mov	r2, r0
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 80080e6:	2301      	movs	r3, #1
 80080e8:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 80080ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3724      	adds	r7, #36	; 0x24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd90      	pop	{r4, r7, pc}
 80080f4:	0804843c 	.word	0x0804843c
 80080f8:	08048490 	.word	0x08048490
 80080fc:	080484c8 	.word	0x080484c8

08008100 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3304      	adds	r3, #4
  }
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d305      	bcc.n	800813c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	781a      	ldrb	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d201      	bcs.n	8008140 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800813c:	2301      	movs	r3, #1
 800813e:	e000      	b.n	8008142 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800815a:	887b      	ldrh	r3, [r7, #2]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f805 	bl	800816e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8008164:	4603      	mov	r3, r0
  }
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800817a:	887b      	ldrh	r3, [r7, #2]
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fc fe7f 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008184:	4603      	mov	r3, r0
 8008186:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	89fb      	ldrh	r3, [r7, #14]
 800818c:	4413      	add	r3, r2
 800818e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d006      	beq.n	80081a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8008196:	68b8      	ldr	r0, [r7, #8]
 8008198:	f7fd fd3e 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800819c:	4602      	mov	r2, r0
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4413      	add	r3, r2
                        : nullptr;
 80081a2:	e000      	b.n	80081a6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081a4:	2300      	movs	r3, #0
  }
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
 80081ae:	b480      	push	{r7}
 80081b0:	b087      	sub	sp, #28
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  if (!tensor->is_variable) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081bc:	f083 0301 	eor.w	r3, r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1c>
    return kTfLiteOk;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e01e      	b.n	8008208 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x5a>
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
  if (tensor->type == kTfLiteInt8) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	d102      	bne.n	80081dc <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2e>
    value = tensor->params.zero_point;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	617b      	str	r3, [r7, #20]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	e009      	b.n	80081fc <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x4e>
    *raw_ptr = value;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	701a      	strb	r2, [r3, #0]
    raw_ptr++;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	3301      	adds	r3, #1
 80081f4:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	429a      	cmp	r2, r3
 8008204:	d3f0      	bcc.n	80081e8 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x3a>
  }
#endif
  return kTfLiteOk;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	ed87 0a01 	vstr	s0, [r7, #4]
 800821e:	ed97 0a01 	vldr	s0, [r7, #4]
 8008222:	f010 ff77 	bl	8019114 <roundf>
 8008226:	eef0 7a40 	vmov.f32	s15, s0
 800822a:	eeb0 0a67 	vmov.f32	s0, s15
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZNSt14numeric_limitsIiE3maxEv>:

      static _GLIBCXX_CONSTEXPR int
      min() _GLIBCXX_USE_NOEXCEPT { return -__INT_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR int
      max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
 8008238:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800823c:	4618      	mov	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8008246:	b480      	push	{r7}
 8008248:	af00      	add	r7, sp, #0
 800824a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800824e:	4618      	mov	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8008258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800825c:	b088      	sub	sp, #32
 800825e:	af00      	add	r7, sp, #0
 8008260:	ed87 0b02 	vstr	d0, [r7, #8]
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008274:	f7f8 fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d006      	beq.n	800828c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
    return;
 800828a:	e068      	b.n	800835e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800828c:	6838      	ldr	r0, [r7, #0]
 800828e:	ed97 0b02 	vldr	d0, [r7, #8]
 8008292:	f010 fd75 	bl	8018d80 <frexp>
 8008296:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	4b32      	ldr	r3, [pc, #200]	; (8008368 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80082a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082a4:	f7f8 f9b0 	bl	8000608 <__aeabi_dmul>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	ec43 2b17 	vmov	d7, r2, r3
 80082b0:	eeb0 0a47 	vmov.f32	s0, s14
 80082b4:	eef0 0a67 	vmov.f32	s1, s15
 80082b8:	f000 f9af 	bl	800861a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80082bc:	ec53 2b10 	vmov	r2, r3, d0
 80082c0:	4610      	mov	r0, r2
 80082c2:	4619      	mov	r1, r3
 80082c4:	f7f8 fcb2 	bl	8000c2c <__aeabi_d2lz>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 80082d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082d4:	4925      	ldr	r1, [pc, #148]	; (800836c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 80082d6:	428a      	cmp	r2, r1
 80082d8:	f173 0300 	sbcs.w	r3, r3, #0
 80082dc:	db01      	blt.n	80082e2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 80082de:	f011 f80b 	bl	80192f8 <abort>
  if (q_fixed == (1ll << 31)) {
 80082e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082e6:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80082ea:	430b      	orrs	r3, r1
 80082ec:	d118      	bne.n	8008320 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 80082ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082f2:	0fd9      	lsrs	r1, r3, #31
 80082f4:	2000      	movs	r0, #0
 80082f6:	468a      	mov	sl, r1
 80082f8:	4683      	mov	fp, r0
 80082fa:	eb1a 0402 	adds.w	r4, sl, r2
 80082fe:	eb4b 0503 	adc.w	r5, fp, r3
 8008302:	f04f 0200 	mov.w	r2, #0
 8008306:	f04f 0300 	mov.w	r3, #0
 800830a:	0862      	lsrs	r2, r4, #1
 800830c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8008310:	106b      	asrs	r3, r5, #1
 8008312:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8008320:	f7ff ff91 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 8008324:	4603      	mov	r3, r0
 8008326:	17da      	asrs	r2, r3, #31
 8008328:	4698      	mov	r8, r3
 800832a:	4691      	mov	r9, r2
 800832c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008330:	4590      	cmp	r8, r2
 8008332:	eb79 0303 	sbcs.w	r3, r9, r3
 8008336:	da01      	bge.n	800833c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8008338:	f010 ffde 	bl	80192f8 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f113 0f1f 	cmn.w	r3, #31
 8008344:	da08      	bge.n	8008358 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
}
 800835e:	3720      	adds	r7, #32
 8008360:	46bd      	mov	sp, r7
 8008362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008366:	bf00      	nop
 8008368:	41e00000 	.word	0x41e00000
 800836c:	80000001 	.word	0x80000001

08008370 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	ed87 0b02 	vstr	d0, [r7, #8]
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800837e:	f04f 0200 	mov.w	r2, #0
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8008384:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008388:	f7f8 fbce 	bl	8000b28 <__aeabi_dcmpgt>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8008392:	f010 ffb1 	bl	80192f8 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	ed97 0b02 	vldr	d0, [r7, #8]
 800839e:	f7ff ff5b 	bl	8008258 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da01      	bge.n	80083ae <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 80083aa:	f010 ffa5 	bl	80192f8 <abort>
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	3ff00000 	.word	0x3ff00000

080083bc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	ed87 0b02 	vstr	d0, [r7, #8]
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_LT(double_multiplier, 1.);
 80083ca:	f04f 0200 	mov.w	r2, #0
 80083ce:	4b15      	ldr	r3, [pc, #84]	; (8008424 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x68>)
 80083d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083d4:	f7f8 fb8a 	bl	8000aec <__aeabi_dcmplt>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x26>
 80083de:	f010 ff8b 	bl	80192f8 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083ee:	f7f8 fb9b 	bl	8000b28 <__aeabi_dcmpgt>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
 80083f8:	f010 ff7e 	bl	80192f8 <abort>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
 80083fc:	f107 0314 	add.w	r3, r7, #20
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	ed97 0b02 	vldr	d0, [r7, #8]
 8008408:	f7ff ff26 	bl	8008258 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b00      	cmp	r3, #0
 8008410:	dd01      	ble.n	8008416 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x5a>
 8008412:	f010 ff71 	bl	80192f8 <abort>
  *left_shift = shift;
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	601a      	str	r2, [r3, #0]
}
 800841c:	bf00      	nop
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	3ff00000 	.word	0x3ff00000

08008428 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f8 fb55 	bl	8000aec <__aeabi_dcmplt>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	e000      	b.n	800844e <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800844c:	687b      	ldr	r3, [r7, #4]
    }
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8008458:	b5b0      	push	{r4, r5, r7, lr}
 800845a:	b08e      	sub	sp, #56	; 0x38
 800845c:	af00      	add	r7, sp, #0
 800845e:	ed87 0b06 	vstr	d0, [r7, #24]
 8008462:	ed87 1b04 	vstr	d1, [r7, #16]
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800846c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008470:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008474:	f7f8 f8c8 	bl	8000608 <__aeabi_dmul>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4614      	mov	r4, r2
 800847e:	461d      	mov	r5, r3
 8008480:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	fa22 f303 	lsr.w	r3, r2, r3
 800848a:	4618      	mov	r0, r3
 800848c:	f7f8 f852 	bl	8000534 <__aeabi_i2d>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4620      	mov	r0, r4
 8008496:	4629      	mov	r1, r5
 8008498:	f7f8 f8b6 	bl	8000608 <__aeabi_dmul>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80084a4:	a30e      	add	r3, pc, #56	; (adr r3, 80084e0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double input_beta_real_multiplier = std::min(
 80084ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80084b2:	f107 0320 	add.w	r3, r7, #32
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff ffb5 	bl	8008428 <_ZSt3minIdERKT_S2_S2_>
 80084be:	4603      	mov	r3, r0
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	68b8      	ldr	r0, [r7, #8]
 80084cc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80084d0:	f7ff ff4e 	bl	8008370 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 80084d4:	bf00      	nop
 80084d6:	3738      	adds	r7, #56	; 0x38
 80084d8:	46bd      	mov	sp, r7
 80084da:	bdb0      	pop	{r4, r5, r7, pc}
 80084dc:	f3af 8000 	nop.w
 80084e0:	ffc00000 	.word	0xffc00000
 80084e4:	41dfffff 	.word	0x41dfffff

080084e8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	b087      	sub	sp, #28
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 80084f6:	2201      	movs	r2, #1
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	4618      	mov	r0, r3
 8008502:	f7f8 f817 	bl	8000534 <__aeabi_i2d>
 8008506:	4682      	mov	sl, r0
 8008508:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	1ad1      	subs	r1, r2, r3
 8008510:	f04f 0201 	mov.w	r2, #1
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	f1a1 0620 	sub.w	r6, r1, #32
 800851c:	f1c1 0020 	rsb	r0, r1, #32
 8008520:	fa03 f901 	lsl.w	r9, r3, r1
 8008524:	fa02 f606 	lsl.w	r6, r2, r6
 8008528:	ea49 0906 	orr.w	r9, r9, r6
 800852c:	fa22 f000 	lsr.w	r0, r2, r0
 8008530:	ea49 0900 	orr.w	r9, r9, r0
 8008534:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8008538:	4640      	mov	r0, r8
 800853a:	4649      	mov	r1, r9
 800853c:	f7f8 f836 	bl	80005ac <__aeabi_l2d>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4650      	mov	r0, sl
 8008546:	4659      	mov	r1, fp
 8008548:	f7f8 f85e 	bl	8000608 <__aeabi_dmul>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4690      	mov	r8, r2
 8008552:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8008554:	f04f 0201 	mov.w	r2, #1
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	f1a1 0620 	sub.w	r6, r1, #32
 8008562:	f1c1 0020 	rsb	r0, r1, #32
 8008566:	fa03 f501 	lsl.w	r5, r3, r1
 800856a:	fa02 f606 	lsl.w	r6, r2, r6
 800856e:	4335      	orrs	r5, r6
 8008570:	fa22 f000 	lsr.w	r0, r2, r0
 8008574:	4305      	orrs	r5, r0
 8008576:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	f7f8 f815 	bl	80005ac <__aeabi_l2d>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8008586:	4640      	mov	r0, r8
 8008588:	4649      	mov	r1, r9
 800858a:	f7f8 f967 	bl	800085c <__aeabi_ddiv>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8008596:	ed97 0b04 	vldr	d0, [r7, #16]
 800859a:	f010 fcb1 	bl	8018f00 <floor>
 800859e:	ec53 2b10 	vmov	r2, r3, d0
 80085a2:	4610      	mov	r0, r2
 80085a4:	4619      	mov	r1, r3
 80085a6:	f7f8 fac9 	bl	8000b3c <__aeabi_d2iz>
 80085aa:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085b6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	ed93 7a00 	vldr	s14, [r3]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	edd3 7a00 	vldr	s15, [r3]
 80085cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d4:	d501      	bpl.n	80085da <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	e000      	b.n	80085dc <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80085da:	687b      	ldr	r3, [r7, #4]
    }
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	ed93 7a00 	vldr	s14, [r3]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	edd3 7a00 	vldr	s15, [r3]
 80085fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008606:	d501      	bpl.n	800860c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	e000      	b.n	800860e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800860c:	687b      	ldr	r3, [r7, #4]
    }
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	ed87 0b00 	vstr	d0, [r7]
 8008624:	ed97 0b00 	vldr	d0, [r7]
 8008628:	f010 fcea 	bl	8019000 <round>
 800862c:	eeb0 7a40 	vmov.f32	s14, s0
 8008630:	eef0 7a60 	vmov.f32	s15, s1
 8008634:	eeb0 0a47 	vmov.f32	s0, s14
 8008638:	eef0 0a67 	vmov.f32	s1, s15
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	ed87 0a01 	vstr	s0, [r7, #4]
 800864c:	ed97 0a01 	vldr	s0, [r7, #4]
 8008650:	f7ff fde0 	bl	8008214 <_ZSt5roundf>
 8008654:	eef0 7a40 	vmov.f32	s15, s0
 8008658:	eeb0 0a67 	vmov.f32	s0, s15
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8008662:	b480      	push	{r7}
 8008664:	af00      	add	r7, sp, #0
 8008666:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800866a:	4618      	mov	r0, r3
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
 8008678:	237f      	movs	r3, #127	; 0x7f
 800867a:	4618      	mov	r0, r3
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4618      	mov	r0, r3
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
 8008698:	23ff      	movs	r3, #255	; 0xff
 800869a:	4618      	mov	r0, r3
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80086aa:	4618      	mov	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	ffff8000 	.word	0xffff8000

080086b8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80086c0:	4618      	mov	r0, r3
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
}
#endif  // TF_LITE_STATIC_MEMORY
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }

inline int64_t NumElements(const TfLiteIntArray* dims) {
 80086e4:	b4b0      	push	{r4, r5, r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 80086ec:	f04f 0001 	mov.w	r0, #1
 80086f0:	f04f 0100 	mov.w	r1, #0
 80086f4:	e9c7 0104 	strd	r0, r1, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 80086f8:	2100      	movs	r1, #0
 80086fa:	60f9      	str	r1, [r7, #12]
 80086fc:	e01a      	b.n	8008734 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x50>
    count *= dims->data[i];
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	68f9      	ldr	r1, [r7, #12]
 8008702:	0089      	lsls	r1, r1, #2
 8008704:	4401      	add	r1, r0
 8008706:	6849      	ldr	r1, [r1, #4]
 8008708:	17c8      	asrs	r0, r1, #31
 800870a:	460c      	mov	r4, r1
 800870c:	4605      	mov	r5, r0
 800870e:	6979      	ldr	r1, [r7, #20]
 8008710:	fb04 f001 	mul.w	r0, r4, r1
 8008714:	6939      	ldr	r1, [r7, #16]
 8008716:	fb05 f101 	mul.w	r1, r5, r1
 800871a:	4401      	add	r1, r0
 800871c:	6938      	ldr	r0, [r7, #16]
 800871e:	fba0 2304 	umull	r2, r3, r0, r4
 8008722:	4419      	add	r1, r3
 8008724:	460b      	mov	r3, r1
 8008726:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800872a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	3101      	adds	r1, #1
 8008732:	60f9      	str	r1, [r7, #12]
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	6809      	ldr	r1, [r1, #0]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	4288      	cmp	r0, r1
 800873c:	dbdf      	blt.n	80086fe <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x1a>
  }
  return count;
 800873e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8008742:	4610      	mov	r0, r2
 8008744:	4619      	mov	r1, r3
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	bcb0      	pop	{r4, r5, r7}
 800874c:	4770      	bx	lr

0800874e <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff ffc2 	bl	80086e4 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
}
 8008764:	4610      	mov	r0, r2
 8008766:	4619      	mov	r1, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	ed87 0b00 	vstr	d0, [r7]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008780:	ec43 2b17 	vmov	d7, r2, r3
 8008784:	eeb0 0a47 	vmov.f32	s0, s14
 8008788:	eef0 0a67 	vmov.f32	s1, s15
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8008798:	b5b0      	push	{r4, r5, r7, lr}
 800879a:	b08e      	sub	sp, #56	; 0x38
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f7 fed4 	bl	8000558 <__aeabi_f2d>
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7f7 fecd 	bl	8000558 <__aeabi_f2d>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80087c2:	4620      	mov	r0, r4
 80087c4:	4629      	mov	r1, r5
 80087c6:	f7f7 ff1f 	bl	8000608 <__aeabi_dmul>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d04a      	beq.n	800886e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7f7 febb 	bl	8000558 <__aeabi_f2d>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80087ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087f2:	f7f7 fd51 	bl	8000298 <__aeabi_dsub>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	ec43 2b17 	vmov	d7, r2, r3
 80087fe:	eeb0 0a47 	vmov.f32	s0, s14
 8008802:	eef0 0a67 	vmov.f32	s1, s15
 8008806:	f7ff ffb2 	bl	800876e <_ZSt3absd>
 800880a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800880e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	4618      	mov	r0, r3
 8008814:	f7f7 fea0 	bl	8000558 <__aeabi_f2d>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8008820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008824:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008828:	f7f8 f818 	bl	800085c <__aeabi_ddiv>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	2301      	movs	r3, #1
 8008836:	461c      	mov	r4, r3
 8008838:	a318      	add	r3, pc, #96	; (adr r3, 800889c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f7f8 f95f 	bl	8000b00 <__aeabi_dcmple>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8008848:	2300      	movs	r3, #0
 800884a:	461c      	mov	r4, r3
 800884c:	b2e3      	uxtb	r3, r4
 800884e:	f083 0301 	eor.w	r3, r3, #1
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00a      	beq.n	800886e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	695c      	ldr	r4, [r3, #20]
 800885c:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	239a      	movs	r3, #154	; 0x9a
 8008862:	4a0c      	ldr	r2, [pc, #48]	; (8008894 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8008864:	490c      	ldr	r1, [pc, #48]	; (8008898 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	47a0      	blx	r4
 800886a:	2301      	movs	r3, #1
 800886c:	e009      	b.n	8008882 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800886e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f813 	bl	80088a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800887e:	4603      	mov	r3, r0
                                          multiplier);
 8008880:	bf00      	nop
}
 8008882:	4618      	mov	r0, r3
 8008884:	3730      	adds	r7, #48	; 0x30
 8008886:	46bd      	mov	sp, r7
 8008888:	bdb0      	pop	{r4, r5, r7, pc}
 800888a:	bf00      	nop
 800888c:	f3af 8000 	nop.w
 8008890:	08048734 	.word	0x08048734
 8008894:	0804850c 	.word	0x0804850c
 8008898:	08048620 	.word	0x08048620
 800889c:	47ae147b 	.word	0x47ae147b
 80088a0:	3f947ae1 	.word	0x3f947ae1

080088a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b089      	sub	sp, #36	; 0x24
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80088be:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80088c2:	ee17 0a90 	vmov	r0, s15
 80088c6:	f7f7 fe47 	bl	8000558 <__aeabi_f2d>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80088d2:	2301      	movs	r3, #1
 80088d4:	461c      	mov	r4, r3
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	f04f 0300 	mov.w	r3, #0
 80088de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088e2:	f7f8 f917 	bl	8000b14 <__aeabi_dcmpge>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80088ec:	2300      	movs	r3, #0
 80088ee:	461c      	mov	r4, r3
 80088f0:	b2e3      	uxtb	r3, r4
 80088f2:	f083 0301 	eor.w	r3, r3, #1
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	695c      	ldr	r4, [r3, #20]
 8008900:	4b0e      	ldr	r3, [pc, #56]	; (800893c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	23a7      	movs	r3, #167	; 0xa7
 8008906:	4a0e      	ldr	r2, [pc, #56]	; (8008940 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8008908:	490e      	ldr	r1, [pc, #56]	; (8008944 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	47a0      	blx	r4
 800890e:	2301      	movs	r3, #1
 8008910:	e010      	b.n	8008934 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	4618      	mov	r0, r3
 8008918:	f7f7 fe1e 	bl	8000558 <__aeabi_f2d>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008924:	f7f7 ff9a 	bl	800085c <__aeabi_ddiv>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800892e:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	bd90      	pop	{r4, r7, pc}
 800893c:	08048758 	.word	0x08048758
 8008940:	0804850c 	.word	0x0804850c
 8008944:	08048620 	.word	0x08048620

08008948 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	ed87 0a00 	vstr	s0, [r7]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800895a:	ed97 7a00 	vldr	s14, [r7]
 800895e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008962:	eeb0 0a66 	vmov.f32	s0, s13
 8008966:	f7ff fe6c 	bl	8008642 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800896a:	eef0 7a40 	vmov.f32	s15, s0
 800896e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008972:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800897a:	4413      	add	r3, r2
  };
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8008984:	b580      	push	{r7, lr}
 8008986:	b08e      	sub	sp, #56	; 0x38
 8008988:	af00      	add	r7, sp, #0
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d118      	bne.n	80089e0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 80089ae:	f107 0314 	add.w	r3, r7, #20
 80089b2:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8008aa8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff ffc6 	bl	8008948 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80089bc:	4603      	mov	r3, r0
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	f107 021c 	add.w	r2, r7, #28
 80089c4:	f107 0308 	add.w	r3, r7, #8
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 f8d9 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 80089d0:	4603      	mov	r3, r0
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d6:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089dc:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 80089de:	e05f      	b.n	8008aa0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d129      	bne.n	8008a3a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 80089e6:	f107 0314 	add.w	r3, r7, #20
 80089ea:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8008aa8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ffaa 	bl	8008948 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80089f4:	4603      	mov	r3, r0
 80089f6:	623b      	str	r3, [r7, #32]
 80089f8:	f107 0220 	add.w	r2, r7, #32
 80089fc:	f107 0308 	add.w	r3, r7, #8
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 f8bd 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0e:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff ff95 	bl	8008948 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
 8008a22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008a26:	1d3b      	adds	r3, r7, #4
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f8bd 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 8008a30:	4603      	mov	r3, r0
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a36:	601a      	str	r2, [r3, #0]
}
 8008a38:	e032      	b.n	8008aa0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d129      	bne.n	8008a94 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8008a40:	f107 0314 	add.w	r3, r7, #20
 8008a44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff ff7d 	bl	8008948 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008a56:	f107 0308 	add.w	r3, r7, #8
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f890 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8008a62:	4603      	mov	r3, r0
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a68:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8008a6a:	f107 0314 	add.w	r3, r7, #20
 8008a6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff ff68 	bl	8008948 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008a80:	1d3b      	adds	r3, r7, #4
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f890 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a90:	601a      	str	r2, [r3, #0]
}
 8008a92:	e005      	b.n	8008aa0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a98:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a9e:	601a      	str	r2, [r3, #0]
}
 8008aa0:	bf00      	nop
 8008aa2:	3738      	adds	r7, #56	; 0x38
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	00000000 	.word	0x00000000

08008aac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b089      	sub	sp, #36	; 0x24
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d108      	bne.n	8008ade <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8008acc:	f7ff fdda 	bl	8008684 <_ZNSt14numeric_limitsIhE3minEv>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8008ad4:	f7ff fdde 	bl	8008694 <_ZNSt14numeric_limitsIhE3maxEv>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	e024      	b.n	8008b28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d108      	bne.n	8008af8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8008ae6:	f7ff fdbc 	bl	8008662 <_ZNSt14numeric_limitsIaE3minEv>
 8008aea:	4603      	mov	r3, r0
 8008aec:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8008aee:	f7ff fdc1 	bl	8008674 <_ZNSt14numeric_limitsIaE3maxEv>
 8008af2:	4603      	mov	r3, r0
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	e017      	b.n	8008b28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b07      	cmp	r3, #7
 8008afe:	d108      	bne.n	8008b12 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8008b00:	f7ff fdd0 	bl	80086a4 <_ZNSt14numeric_limitsIsE3minEv>
 8008b04:	4603      	mov	r3, r0
 8008b06:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8008b08:	f7ff fdd6 	bl	80086b8 <_ZNSt14numeric_limitsIsE3maxEv>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	613b      	str	r3, [r7, #16]
 8008b10:	e00a      	b.n	8008b28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	695c      	ldr	r4, [r3, #20]
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	23da      	movs	r3, #218	; 0xda
 8008b1c:	4a0b      	ldr	r2, [pc, #44]	; (8008b4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8008b1e:	490c      	ldr	r1, [pc, #48]	; (8008b50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	47a0      	blx	r4
 8008b24:	2301      	movs	r3, #1
 8008b26:	e00a      	b.n	8008b3e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8008b28:	7af8      	ldrb	r0, [r7, #11]
 8008b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	6979      	ldr	r1, [r7, #20]
 8008b38:	f7ff ff24 	bl	8008984 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd90      	pop	{r4, r7, pc}
 8008b46:	bf00      	nop
 8008b48:	08048774 	.word	0x08048774
 8008b4c:	0804850c 	.word	0x0804850c
 8008b50:	08048620 	.word	0x08048620

08008b54 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f7fc f922 	bl	8004db2 <TfLiteIntArrayEqual>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf14      	ite	ne
 8008b74:	2301      	movne	r3, #1
 8008b76:	2300      	moveq	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	da01      	bge.n	8008b9c <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	e000      	b.n	8008b9e <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8008b9c:	687b      	ldr	r3, [r7, #4]
    }
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	da01      	bge.n	8008bc4 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	e000      	b.n	8008bc6 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8008bc4:	687b      	ldr	r3, [r7, #4]
    }
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2104      	movs	r1, #4
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd f883 	bl	8005cea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008be4:	4603      	mov	r3, r0
  }
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2106      	movs	r1, #6
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fd f884 	bl	8005d0a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008c02:	4603      	mov	r3, r0
 8008c04:	b2db      	uxtb	r3, r3
  }
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	68b9      	ldr	r1, [r7, #8]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 f866 	bl	8008d12 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	dd08      	ble.n	8008c72 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f010 f859 	bl	8018d24 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b05      	cmp	r3, #5
 8008ca2:	dd02      	ble.n	8008caa <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	e001      	b.n	8008cae <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3304      	adds	r3, #4
  }
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b05      	cmp	r3, #5
 8008cca:	dd08      	ble.n	8008cde <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d004      	beq.n	8008cde <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f010 f823 	bl	8018d24 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	dd0f      	ble.n	8008d0a <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d201      	bcs.n	8008cf8 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	e001      	b.n	8008cfc <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8008cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f010 f833 	bl	8018d68 <_Znaj>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b086      	sub	sp, #24
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8008d1e:	68b9      	ldr	r1, [r7, #8]
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff ffca 	bl	8008cba <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff ffb4 	bl	8008c94 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8008d2c:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	461a      	mov	r2, r3
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f010 fe63 	bl	8019a02 <memcpy>
  }
 8008d3c:	bf00      	nop
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d103      	bne.n	8008d5c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff ff5a 	bl	8008c0e <_ZN6tflite12RuntimeShapeC1Ev>
 8008d5a:	e00d      	b.n	8008d78 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	6939      	ldr	r1, [r7, #16]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff ff59 	bl	8008c2a <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8008da2:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8008da4:	68bb      	ldr	r3, [r7, #8]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8008dce:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8008dde:	b480      	push	{r7}
 8008de0:	b085      	sub	sp, #20
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	1e5a      	subs	r2, r3, #1
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	fb02 f303 	mul.w	r3, r2, r3
 8008dfc:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	6039      	str	r1, [r7, #0]
 8008e16:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	d835      	bhi.n	8008e8c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x80>
 8008e20:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e4d 	.word	0x08008e4d
 8008e2c:	08008e5d 	.word	0x08008e5d
 8008e30:	08008e65 	.word	0x08008e65
 8008e34:	08008e75 	.word	0x08008e75
 8008e38:	08008e8d 	.word	0x08008e8d
 8008e3c:	08008e7d 	.word	0x08008e7d
 8008e40:	08008e55 	.word	0x08008e55
 8008e44:	08008e85 	.word	0x08008e85
 8008e48:	08008e6d 	.word	0x08008e6d
    case kTfLiteFloat32:
      *size = sizeof(float);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2204      	movs	r2, #4
 8008e50:	601a      	str	r2, [r3, #0]
      break;
 8008e52:	e01d      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2202      	movs	r2, #2
 8008e58:	601a      	str	r2, [r3, #0]
      break;
 8008e5a:	e019      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	601a      	str	r2, [r3, #0]
      break;
 8008e62:	e015      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
      break;
 8008e6a:	e011      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
      break;
 8008e72:	e00d      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2208      	movs	r2, #8
 8008e78:	601a      	str	r2, [r3, #0]
      break;
 8008e7a:	e009      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteBool:
      *size = sizeof(bool);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
      break;
 8008e82:	e005      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2208      	movs	r2, #8
 8008e88:	601a      	str	r2, [r3, #0]
      break;
 8008e8a:	e001      	b.n	8008e90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    default:
      return kTfLiteError;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e000      	b.n	8008e92 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x86>
  }
  return kTfLiteOk;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop

08008ea0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fe8d 	bl	8008bd2 <_ZNK6tflite6Tensor5shapeEv>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	bf14      	ite	ne
 8008ebe:	2301      	movne	r3, #1
 8008ec0:	2300      	moveq	r3, #0
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d022      	beq.n	8008f0e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	e00f      	b.n	8008eee <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fe7f 	bl	8008bd2 <_ZNK6tflite6Tensor5shapeEv>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	69b9      	ldr	r1, [r7, #24]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fc ff67 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	fb02 f303 	mul.w	r3, r2, r3
 8008ee6:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7ff fe6f 	bl	8008bd2 <_ZNK6tflite6Tensor5shapeEv>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f833 	bl	8008f62 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8008efc:	4602      	mov	r2, r0
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	4293      	cmp	r3, r2
 8008f02:	bf34      	ite	cc
 8008f04:	2301      	movcc	r3, #1
 8008f06:	2300      	movcs	r3, #0
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1df      	bne.n	8008ece <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2e>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff fe6d 	bl	8008bee <_ZNK6tflite6Tensor4typeEv>
 8008f14:	4603      	mov	r3, r0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f107 0315 	add.w	r3, r7, #21
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	f7fc fa4c 	bl	80053bc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	e013      	b.n	8008f5a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8008f32:	7d7b      	ldrb	r3, [r7, #21]
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff ff68 	bl	8008e0c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75bb      	strb	r3, [r7, #22]
 8008f40:	7dbb      	ldrb	r3, [r7, #22]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8008f46:	7dbb      	ldrb	r3, [r7, #22]
 8008f48:	e007      	b.n	8008f5a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	fb03 f202 	mul.w	r2, r3, r2
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3720      	adds	r7, #32
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7fc ff0f 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008f70:	4603      	mov	r3, r0
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2108      	movs	r1, #8
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fc68 	bl	800a85c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8008f8c:	4603      	mov	r3, r0
  }
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	210a      	movs	r1, #10
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 fc6a 	bl	800a87c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8008fa8:	4603      	mov	r3, r0
  }
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2110      	movs	r1, #16
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fc fe74 	bl	8005cae <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008fc6:	4603      	mov	r3, r0
  }
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2108      	movs	r1, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 fc5c 	bl	800a89c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8008fe4:	4603      	mov	r3, r0
  }
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	210c      	movs	r1, #12
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 fc6c 	bl	800a8d8 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8009000:	4603      	mov	r3, r0
  }
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	210e      	movs	r1, #14
 8009018:	4618      	mov	r0, r3
 800901a:	f7fc fe19 	bl	8005c50 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	bf14      	ite	ne
 8009024:	2301      	movne	r3, #1
 8009026:	2300      	moveq	r3, #0
 8009028:	b2db      	uxtb	r3, r3
  }
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	2104      	movs	r1, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f001 fc2b 	bl	800a89c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8009046:	4603      	mov	r3, r0
  }
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2106      	movs	r1, #6
 800905c:	4618      	mov	r0, r3
 800905e:	f7fc fe44 	bl	8005cea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8009062:	4603      	mov	r3, r0
  }
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2108      	movs	r1, #8
 8009078:	4618      	mov	r0, r3
 800907a:	f7fc fe36 	bl	8005cea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800907e:	4603      	mov	r3, r0
  }
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	210e      	movs	r1, #14
 8009094:	4618      	mov	r0, r3
 8009096:	f001 fbd1 	bl	800a83c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800909a:	4603      	mov	r3, r0
  }
 800909c:	4618      	mov	r0, r3
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2104      	movs	r1, #4
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 fc21 	bl	800a8f8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80090b6:	4603      	mov	r3, r0
  }
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2106      	movs	r1, #6
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fc fe0c 	bl	8005cea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80090d2:	4603      	mov	r3, r0
  }
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2108      	movs	r1, #8
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fc fdfe 	bl	8005cea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80090ee:	4603      	mov	r3, r0
  }
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	210a      	movs	r1, #10
 8009104:	4618      	mov	r0, r3
 8009106:	f001 fc07 	bl	800a918 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800910a:	4603      	mov	r3, r0
  }
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2104      	movs	r1, #4
 8009120:	4618      	mov	r0, r3
 8009122:	f001 fb8b 	bl	800a83c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8009126:	4603      	mov	r3, r0
  }
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2104      	movs	r1, #4
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff f806 	bl	800814e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8009142:	4603      	mov	r3, r0
  }
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	2106      	movs	r1, #6
 800915a:	4618      	mov	r0, r3
 800915c:	f001 fb9e 	bl	800a89c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8009160:	4603      	mov	r3, r0
  }
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2106      	movs	r1, #6
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fbde 	bl	800a938 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800917c:	4603      	mov	r3, r0
  }
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2108      	movs	r1, #8
 8009192:	4618      	mov	r0, r3
 8009194:	f001 fbe0 	bl	800a958 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8009198:	4603      	mov	r3, r0
  }
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	210c      	movs	r1, #12
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 fbe2 	bl	800a978 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80091b4:	4603      	mov	r3, r0
  }
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2110      	movs	r1, #16
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 fbe4 	bl	800a998 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 80091d0:	4603      	mov	r3, r0
  }
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	4a04      	ldr	r2, [pc, #16]	; (80091f8 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	0804da54 	.word	0x0804da54

080091fc <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff ffe9 	bl	80091dc <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800920a:	2104      	movs	r1, #4
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f00f fd87 	bl	8018d20 <_ZdlPvj>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	4a04      	ldr	r2, [pc, #16]	; (8009238 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	0804da54 	.word	0x0804da54

0800923c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
// the flexible array element to be initialized.
const TfLiteIntArray kZeroLengthIntArray = {0};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff ffe7 	bl	800921c <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800924e:	4a05      	ldr	r2, [pc, #20]	; (8009264 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	605a      	str	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	08049e98 	.word	0x08049e98

08009268 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6858      	ldr	r0, [r3, #4]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	330c      	adds	r3, #12
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	68b9      	ldr	r1, [r7, #8]
 8009286:	4798      	blx	r3
 8009288:	4603      	mov	r3, r0
  }
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(ErrorReporter* reporter,
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
                        SimpleMemoryAllocator* allocator)
      : reporter_(reporter), allocator_(allocator) {}
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	605a      	str	r2, [r3, #4]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	609a      	str	r2, [r3, #8]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	60da      	str	r2, [r3, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	611a      	str	r2, [r3, #16]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>:

  // Initializes the builder by allocating AllocationInfo array from the
  // simple memory allocator.
  TfLiteStatus Init(size_t tensor_count, size_t scratch_buffer_count) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
    tensor_count_ = tensor_count;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	609a      	str	r2, [r3, #8]
    buffer_count_ = scratch_buffer_count;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	60da      	str	r2, [r3, #12]
    return Allocate();
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 f821 	bl	8009340 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>
 80092fe:	4603      	mov	r3, r0
  }
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>:

  // Add allocation information for the scratch buffers.
  TfLiteStatus AddScratchBuffers(internal::ScratchBufferHandle* buffer_handles);

  // Returns a pointer to the built AllocationInfo array.
  const AllocationInfo* Finish() const { return info_; }
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>:
  size_t Size() const { return tensor_count_ + buffer_count_; }
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	4413      	add	r3, r2
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
	...

08009340 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>:
  size_t tensor_count_ = 0;
  size_t buffer_count_ = 0;
  AllocationInfo* info_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::Allocate() {
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  size_t bytes = sizeof(AllocationInfo) * Size();
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ffe9 	bl	8009320 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 800934e:	4602      	mov	r2, r0
 8009350:	4613      	mov	r3, r2
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	4413      	add	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	60fb      	str	r3, [r7, #12]
  info_ = reinterpret_cast<AllocationInfo*>(
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6858      	ldr	r0, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2204      	movs	r2, #4
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	4798      	blx	r3
 800936e:	4602      	mov	r2, r0
  info_ = reinterpret_cast<AllocationInfo*>(
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	611a      	str	r2, [r3, #16]
  if (info_ == nullptr) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d108      	bne.n	800938e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x4e>
    TF_LITE_REPORT_ERROR(
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4905      	ldr	r1, [pc, #20]	; (8009398 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x58>)
 8009384:	4618      	mov	r0, r3
 8009386:	f7fb fd2d 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x50>
  }
  return kTfLiteOk;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	08048f38 	.word	0x08048f38

0800939c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>:

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteTensor* runtime_tensors) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b09a      	sub	sp, #104	; 0x68
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 80093aa:	2300      	movs	r3, #0
 80093ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093ae:	e04e      	b.n	800944e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xb2>
    AllocationInfo* current = &info_[i];
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6919      	ldr	r1, [r3, #16]
 80093b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093b6:	4613      	mov	r3, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	440b      	add	r3, r1
 80093c0:	617b      	str	r3, [r7, #20]
    // TfLiteTensor.uint8 field is deprecated so use .data field instead.
    current->output_ptr = &(runtime_tensors[i].data.data);
 80093c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c4:	019b      	lsls	r3, r3, #6
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	4413      	add	r3, r2
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
 80093d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093d2:	019b      	lsls	r3, r3, #6
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	4413      	add	r3, r2
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	601a      	str	r2, [r3, #0]
    current->first_created = -1;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093e4:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ec:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 80093ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f0:	019b      	lsls	r3, r3, #6
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4413      	add	r3, r2
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d113      	bne.n	8009424 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x88>
                                (!subgraph->tensors()->Get(i)->is_variable());
 80093fc:	68b8      	ldr	r0, [r7, #8]
 80093fe:	f7ff fe51 	bl	80090a4 <_ZNK6tflite8SubGraph7tensorsEv>
 8009402:	4603      	mov	r3, r0
 8009404:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009406:	4618      	mov	r0, r3
 8009408:	f001 fb5e 	bl	800aac8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800940c:	4603      	mov	r3, r0
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff fdfb 	bl	800900a <_ZNK6tflite6Tensor11is_variableEv>
 8009414:	4603      	mov	r3, r0
 8009416:	f083 0301 	eor.w	r3, r3, #1
 800941a:	b2db      	uxtb	r3, r3
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x88>
 8009420:	2201      	movs	r2, #1
 8009422:	e000      	b.n	8009426 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x8a>
 8009424:	2200      	movs	r2, #0
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xa4>
      current->offline_offset = offline_offsets[i];
 8009430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	4413      	add	r3, r2
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	611a      	str	r2, [r3, #16]
 800943e:	e003      	b.n	8009448 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xac>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009446:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8009448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800944a:	3301      	adds	r3, #1
 800944c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009454:	429a      	cmp	r2, r3
 8009456:	d3ab      	bcc.n	80093b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x14>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8009458:	2300      	movs	r3, #0
 800945a:	65bb      	str	r3, [r7, #88]	; 0x58
 800945c:	e017      	b.n	800948e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xf2>
    const int tensor_index = subgraph->inputs()->Get(i);
 800945e:	68b8      	ldr	r0, [r7, #8]
 8009460:	f7ff fe2e 	bl	80090c0 <_ZNK6tflite8SubGraph6inputsEv>
 8009464:	4603      	mov	r3, r0
 8009466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009468:	4618      	mov	r0, r3
 800946a:	f7fc fc9f 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 800946e:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6919      	ldr	r1, [r3, #16]
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	4613      	mov	r3, r2
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	4413      	add	r3, r2
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	440b      	add	r3, r1
 8009480:	61bb      	str	r3, [r7, #24]
    current->first_created = 0;
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2200      	movs	r2, #0
 8009486:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8009488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800948a:	3301      	adds	r3, #1
 800948c:	65bb      	str	r3, [r7, #88]	; 0x58
 800948e:	68b8      	ldr	r0, [r7, #8]
 8009490:	f7ff fe16 	bl	80090c0 <_ZNK6tflite8SubGraph6inputsEv>
 8009494:	4603      	mov	r3, r0
 8009496:	4618      	mov	r0, r3
 8009498:	f7fc fc79 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800949c:	4602      	mov	r2, r0
 800949e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094a0:	4293      	cmp	r3, r2
 80094a2:	bf34      	ite	cc
 80094a4:	2301      	movcc	r3, #1
 80094a6:	2300      	movcs	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1d7      	bne.n	800945e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xc2>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80094ae:	2300      	movs	r3, #0
 80094b0:	657b      	str	r3, [r7, #84]	; 0x54
 80094b2:	e020      	b.n	80094f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x15a>
    const int tensor_index = subgraph->outputs()->Get(i);
 80094b4:	68b8      	ldr	r0, [r7, #8]
 80094b6:	f7ff fe11 	bl	80090dc <_ZNK6tflite8SubGraph7outputsEv>
 80094ba:	4603      	mov	r3, r0
 80094bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fc fc74 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 80094c4:	6278      	str	r0, [r7, #36]	; 0x24
    AllocationInfo* current = &info_[tensor_index];
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6919      	ldr	r1, [r3, #16]
 80094ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094cc:	4613      	mov	r3, r2
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	4413      	add	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	440b      	add	r3, r1
 80094d6:	623b      	str	r3, [r7, #32]
    current->last_used = subgraph->operators()->size() - 1;
 80094d8:	68b8      	ldr	r0, [r7, #8]
 80094da:	f7ff fe0d 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 80094de:	4603      	mov	r3, r0
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fb17 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80094e6:	4603      	mov	r3, r0
 80094e8:	3b01      	subs	r3, #1
 80094ea:	461a      	mov	r2, r3
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80094f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f2:	3301      	adds	r3, #1
 80094f4:	657b      	str	r3, [r7, #84]	; 0x54
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f7ff fdf0 	bl	80090dc <_ZNK6tflite8SubGraph7outputsEv>
 80094fc:	4603      	mov	r3, r0
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fc fc45 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009504:	4602      	mov	r2, r0
 8009506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009508:	4293      	cmp	r3, r2
 800950a:	bf34      	ite	cc
 800950c:	2301      	movcc	r3, #1
 800950e:	2300      	movcs	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1ce      	bne.n	80094b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x118>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8009516:	68b8      	ldr	r0, [r7, #8]
 8009518:	f7ff fdee 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800951c:	4603      	mov	r3, r0
 800951e:	4618      	mov	r0, r3
 8009520:	f001 faf8 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8009524:	4603      	mov	r3, r0
 8009526:	3b01      	subs	r3, #1
 8009528:	653b      	str	r3, [r7, #80]	; 0x50
 800952a:	e076      	b.n	800961a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x27e>
    const auto* op = subgraph->operators()->Get(i);
 800952c:	68b8      	ldr	r0, [r7, #8]
 800952e:	f7ff fde3 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 8009532:	4602      	mov	r2, r0
 8009534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f001 faf9 	bl	800ab30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800953e:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8009540:	2300      	movs	r3, #0
 8009542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009544:	e021      	b.n	800958a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1ee>
      const int tensor_index = op->inputs()->Get(n);
 8009546:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009548:	f7ff fd82 	bl	8009050 <_ZNK6tflite8Operator6inputsEv>
 800954c:	4603      	mov	r3, r0
 800954e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009550:	4618      	mov	r0, r3
 8009552:	f7fc fc2b 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009556:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6919      	ldr	r1, [r3, #16]
 800955c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955e:	4613      	mov	r3, r2
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	4413      	add	r3, r2
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	440b      	add	r3, r1
 8009568:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009572:	d004      	beq.n	800957e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1e2>
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800957a:	429a      	cmp	r2, r3
 800957c:	dd02      	ble.n	8009584 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1e8>
        current->last_used = i;
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009582:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8009584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009586:	3301      	adds	r3, #1
 8009588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800958a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800958c:	f7ff fd60 	bl	8009050 <_ZNK6tflite8Operator6inputsEv>
 8009590:	4603      	mov	r3, r0
 8009592:	4618      	mov	r0, r3
 8009594:	f7fc fbfb 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009598:	4602      	mov	r2, r0
 800959a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959c:	4293      	cmp	r3, r2
 800959e:	bf34      	ite	cc
 80095a0:	2301      	movcc	r3, #1
 80095a2:	2300      	movcs	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1cd      	bne.n	8009546 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1aa>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80095aa:	2300      	movs	r3, #0
 80095ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ae:	e021      	b.n	80095f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x258>
      const int tensor_index = op->outputs()->Get(n);
 80095b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095b2:	f7ff fd5b 	bl	800906c <_ZNK6tflite8Operator7outputsEv>
 80095b6:	4603      	mov	r3, r0
 80095b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fc fbf6 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 80095c0:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6919      	ldr	r1, [r3, #16]
 80095c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095c8:	4613      	mov	r3, r2
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	4413      	add	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	440b      	add	r3, r1
 80095d2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095dc:	d004      	beq.n	80095e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x24c>
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095e4:	429a      	cmp	r2, r3
 80095e6:	da02      	bge.n	80095ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x252>
        current->first_created = i;
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095ec:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80095ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f0:	3301      	adds	r3, #1
 80095f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095f6:	f7ff fd39 	bl	800906c <_ZNK6tflite8Operator7outputsEv>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fc fbc6 	bl	8005d8e <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009602:	4602      	mov	r2, r0
 8009604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009606:	4293      	cmp	r3, r2
 8009608:	bf34      	ite	cc
 800960a:	2301      	movcc	r3, #1
 800960c:	2300      	movcs	r3, #0
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1cd      	bne.n	80095b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x214>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8009614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009616:	3b01      	subs	r3, #1
 8009618:	653b      	str	r3, [r7, #80]	; 0x50
 800961a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961c:	2b00      	cmp	r3, #0
 800961e:	da85      	bge.n	800952c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x190>
      }
    }
  }

  // Work out which tensors need to be allocated.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8009620:	2300      	movs	r3, #0
 8009622:	647b      	str	r3, [r7, #68]	; 0x44
 8009624:	e04d      	b.n	80096c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x326>
    AllocationInfo* current = &info_[i];
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6919      	ldr	r1, [r3, #16]
 800962a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800962c:	4613      	mov	r3, r2
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	4413      	add	r3, r2
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	440b      	add	r3, r1
 8009636:	643b      	str	r3, [r7, #64]	; 0x40
    const bool is_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 8009638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009640:	d106      	bne.n	8009650 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b4>
 8009642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800964a:	d001      	beq.n	8009650 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b4>
 800964c:	2301      	movs	r3, #1
 800964e:	e000      	b.n	8009652 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b6>
 8009650:	2300      	movs	r3, #0
    const bool is_read_only =
 8009652:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (is_read_only) {
 8009656:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2c8>
      current->needs_allocating = false;
 800965e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009660:	2200      	movs	r2, #0
 8009662:	751a      	strb	r2, [r3, #20]
    }
    const bool has_partial_lifetime =
        !is_read_only &&
 8009664:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009668:	f083 0301 	eor.w	r3, r3, #1
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ee>
        ((current->first_created == -1) || (current->last_used == -1));
 8009672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009674:	689b      	ldr	r3, [r3, #8]
        !is_read_only &&
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800967a:	d004      	beq.n	8009686 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ea>
        ((current->first_created == -1) || (current->last_used == -1));
 800967c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009684:	d101      	bne.n	800968a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ee>
        !is_read_only &&
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f0>
 800968a:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 800968c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    if (has_partial_lifetime && current->needs_allocating) {
 8009690:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009694:	2b00      	cmp	r3, #0
 8009696:	d011      	beq.n	80096bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x320>
 8009698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969a:	7d1b      	ldrb	r3, [r3, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00d      	beq.n	80096bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x320>
      TF_LITE_REPORT_ERROR(
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	4613      	mov	r3, r2
 80096b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096b2:	4909      	ldr	r1, [pc, #36]	; (80096d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x33c>)
 80096b4:	f7fb fb96 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e008      	b.n	80096ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x332>
  for (size_t i = 0; i < tensor_count_; ++i) {
 80096bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096be:	3301      	adds	r3, #1
 80096c0:	647b      	str	r3, [r7, #68]	; 0x44
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d3ac      	bcc.n	8009626 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x28a>
    }
  }
  return kTfLiteOk;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3760      	adds	r7, #96	; 0x60
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	08048f7c 	.word	0x08048f7c

080096dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08c      	sub	sp, #48	; 0x30
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 80096e8:	68b8      	ldr	r0, [r7, #8]
 80096ea:	f7ff fd68 	bl	80091be <_ZNK6tflite5Model8metadataEv>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bf14      	ite	ne
 80096f4:	2301      	movne	r3, #1
 80096f6:	2300      	moveq	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d060      	beq.n	80097c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80096fe:	2300      	movs	r3, #0
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009702:	e04d      	b.n	80097a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xc4>
      auto metadata = model->metadata()->Get(i);
 8009704:	68b8      	ldr	r0, [r7, #8]
 8009706:	f7ff fd5a 	bl	80091be <_ZNK6tflite5Model8metadataEv>
 800970a:	4603      	mov	r3, r0
 800970c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800970e:	4618      	mov	r0, r3
 8009710:	f001 fade 	bl	800acd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8009714:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8009716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009718:	f7ff fd0a 	bl	8009130 <_ZNK6tflite8Metadata4nameEv>
 800971c:	4603      	mov	r3, r0
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe fc0c 	bl	8007f3c <_ZNK11flatbuffers6String5c_strEv>
 8009724:	4603      	mov	r3, r0
 8009726:	2217      	movs	r2, #23
 8009728:	4928      	ldr	r1, [pc, #160]	; (80097cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800972a:	4618      	mov	r0, r3
 800972c:	f010 f890 	bl	8019850 <strncmp>
 8009730:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8009732:	2b00      	cmp	r3, #0
 8009734:	bf0c      	ite	eq
 8009736:	2301      	moveq	r3, #1
 8009738:	2300      	movne	r3, #0
 800973a:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800973c:	2b00      	cmp	r3, #0
 800973e:	d02c      	beq.n	800979a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xbe>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8009740:	68b8      	ldr	r0, [r7, #8]
 8009742:	f7ff fd2e 	bl	80091a2 <_ZNK6tflite5Model7buffersEv>
 8009746:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8009748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800974a:	f7ff fcff 	bl	800914c <_ZNK6tflite8Metadata6bufferEv>
 800974e:	4603      	mov	r3, r0
 8009750:	4619      	mov	r1, r3
 8009752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009754:	f001 faf0 	bl	800ad38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8009758:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800975a:	6a38      	ldr	r0, [r7, #32]
 800975c:	f7ff fcda 	bl	8009114 <_ZNK6tflite6Buffer4dataEv>
 8009760:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8009762:	69f8      	ldr	r0, [r7, #28]
 8009764:	f001 faf6 	bl	800ad54 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8009768:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	3308      	adds	r3, #8
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	429a      	cmp	r2, r3
 8009784:	d009      	beq.n	800979a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xbe>
          TF_LITE_REPORT_ERROR(reporter_,
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	490f      	ldr	r1, [pc, #60]	; (80097d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8009792:	f7fb fb27 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8009796:	2301      	movs	r3, #1
 8009798:	e013      	b.n	80097c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	3301      	adds	r3, #1
 800979e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a0:	68b8      	ldr	r0, [r7, #8]
 80097a2:	f7ff fd0c 	bl	80091be <_ZNK6tflite5Model8metadataEv>
 80097a6:	4603      	mov	r3, r0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 fa83 	bl	800acb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b2:	4293      	cmp	r3, r2
 80097b4:	bf34      	ite	cc
 80097b6:	2301      	movcc	r3, #1
 80097b8:	2300      	movcs	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1a1      	bne.n	8009704 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x28>
        }
      }
    }
  }
  return kTfLiteOk;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3730      	adds	r7, #48	; 0x30
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	08048ddc 	.word	0x08048ddc
 80097d0:	08048eec 	.word	0x08048eec

080097d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferHandle* buffer_handles) {
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	e02d      	b.n	8009842 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x6e>
    AllocationInfo* current = &info_[i];
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6919      	ldr	r1, [r3, #16]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	4613      	mov	r3, r2
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	4413      	add	r3, r2
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	440b      	add	r3, r1
 80097f6:	613b      	str	r3, [r7, #16]
    internal::ScratchBufferHandle* handle =
        &(buffer_handles[i - tensor_count_]);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	4613      	mov	r3, r2
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	461a      	mov	r2, r3
    internal::ScratchBufferHandle* handle =
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	4413      	add	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	605a      	str	r2, [r3, #4]
    current->bytes = handle->bytes;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	601a      	str	r2, [r3, #0]
    current->first_created = handle->node_idx;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	609a      	str	r2, [r3, #8]
    current->last_used = handle->node_idx;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	689a      	ldr	r2, [r3, #8]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2201      	movs	r2, #1
 8009832:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800983a:	611a      	str	r2, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	3301      	adds	r3, #1
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	689a      	ldr	r2, [r3, #8]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	4413      	add	r3, r2
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	429a      	cmp	r2, r3
 8009850:	d3c9      	bcc.n	80097e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	371c      	adds	r7, #28
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8009860:	b590      	push	{r4, r7, lr}
 8009862:	b08b      	sub	sp, #44	; 0x2c
 8009864:	af02      	add	r7, sp, #8
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800986e:	2300      	movs	r3, #0
 8009870:	61fb      	str	r3, [r7, #28]
 8009872:	e046      	b.n	8009902 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
    const AllocationInfo* current = &allocation_info[i];
 8009874:	69fa      	ldr	r2, [r7, #28]
 8009876:	4613      	mov	r3, r2
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4413      	add	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	461a      	mov	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4413      	add	r3, r2
 8009884:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	7d1b      	ldrb	r3, [r3, #20]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d036      	beq.n	80098fc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2110      	movs	r1, #16
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff faa2 	bl	8008dde <_ZN6tflite11AlignSizeUpEjj>
 800989a:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a4:	d114      	bne.n	80098d0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x70>
        TF_LITE_ENSURE_STATUS(
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	681c      	ldr	r4, [r3, #0]
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	6899      	ldr	r1, [r3, #8]
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	460b      	mov	r3, r1
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	68b8      	ldr	r0, [r7, #8]
 80098c0:	47a0      	blx	r4
 80098c2:	4603      	mov	r3, r0
 80098c4:	74bb      	strb	r3, [r7, #18]
 80098c6:	7cbb      	ldrb	r3, [r7, #18]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d017      	beq.n	80098fc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
 80098cc:	7cbb      	ldrb	r3, [r7, #18]
 80098ce:	e01d      	b.n	800990c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 80098d0:	6979      	ldr	r1, [r7, #20]
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	6898      	ldr	r0, [r3, #8]
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	6912      	ldr	r2, [r2, #16]
 80098de:	9201      	str	r2, [sp, #4]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4603      	mov	r3, r0
 80098e4:	460a      	mov	r2, r1
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	68b8      	ldr	r0, [r7, #8]
 80098ea:	f00d fb47 	bl	8016f7c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 80098ee:	4603      	mov	r3, r0
 80098f0:	74fb      	strb	r3, [r7, #19]
 80098f2:	7cfb      	ldrb	r3, [r7, #19]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
 80098f8:	7cfb      	ldrb	r3, [r7, #19]
 80098fa:	e007      	b.n	800990c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	3301      	adds	r3, #1
 8009900:	61fb      	str	r3, [r7, #28]
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d3b4      	bcc.n	8009874 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x14>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3724      	adds	r7, #36	; 0x24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd90      	pop	{r4, r7, pc}

08009914 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b08b      	sub	sp, #44	; 0x2c
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8009926:	2300      	movs	r3, #0
 8009928:	623b      	str	r3, [r7, #32]
 800992a:	e02d      	b.n	8009988 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
    const AllocationInfo* current = &allocation_info[i];
 800992c:	6a3a      	ldr	r2, [r7, #32]
 800992e:	4613      	mov	r3, r2
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	4413      	add	r3, r2
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	461a      	mov	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	4413      	add	r3, r2
 800993c:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	7d1b      	ldrb	r3, [r3, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d01d      	beq.n	8009982 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x6e>
      int offset = -1;
 8009946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800994a:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3314      	adds	r3, #20
 8009952:	681c      	ldr	r4, [r3, #0]
 8009954:	f107 0314 	add.w	r3, r7, #20
 8009958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995a:	68f9      	ldr	r1, [r7, #12]
 800995c:	68b8      	ldr	r0, [r7, #8]
 800995e:	47a0      	blx	r4
 8009960:	4603      	mov	r3, r0
 8009962:	76fb      	strb	r3, [r7, #27]
 8009964:	7efb      	ldrb	r3, [r7, #27]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x5a>
 800996a:	7efb      	ldrb	r3, [r7, #27]
 800996c:	e011      	b.n	8009992 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4619      	mov	r1, r3
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	440a      	add	r2, r1
 800997a:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	3301      	adds	r3, #1
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	3301      	adds	r3, #1
 8009986:	623b      	str	r3, [r7, #32]
 8009988:	6a3a      	ldr	r2, [r7, #32]
 800998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998c:	429a      	cmp	r2, r3
 800998e:	d3cd      	bcc.n	800992c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
    }
  }
  return kTfLiteOk;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	372c      	adds	r7, #44	; 0x2c
 8009996:	46bd      	mov	sp, r7
 8009998:	bd90      	pop	{r4, r7, pc}
	...

0800999c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
}

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800999c:	b5b0      	push	{r4, r5, r7, lr}
 800999e:	b090      	sub	sp, #64	; 0x40
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
  *result = {};
 80099aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ac:	4618      	mov	r0, r3
 80099ae:	2340      	movs	r3, #64	; 0x40
 80099b0:	461a      	mov	r2, r3
 80099b2:	2100      	movs	r1, #0
 80099b4:	f00f ff44 	bl	8019840 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80099b8:	68b8      	ldr	r0, [r7, #8]
 80099ba:	f7ff f918 	bl	8008bee <_ZNK6tflite6Tensor4typeEv>
 80099be:	4603      	mov	r3, r0
 80099c0:	4618      	mov	r0, r3
 80099c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	4619      	mov	r1, r3
 80099c8:	f7fb fcf8 	bl	80053bc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
 80099da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80099de:	e125      	b.n	8009c2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 80099e0:	68b8      	ldr	r0, [r7, #8]
 80099e2:	f7ff fb12 	bl	800900a <_ZNK6tflite6Tensor11is_variableEv>
 80099e6:	4603      	mov	r3, r0
 80099e8:	461a      	mov	r2, r3
 80099ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	f7ff faed 	bl	8008fd0 <_ZNK6tflite6Tensor6bufferEv>
 80099f6:	4603      	mov	r3, r0
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 f99c 	bl	800ad38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8009a00:	6378      	str	r0, [r7, #52]	; 0x34
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01a      	beq.n	8009a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8009a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a0a:	f7ff fb83 	bl	8009114 <_ZNK6tflite6Buffer4dataEv>
 8009a0e:	6338      	str	r0, [r7, #48]	; 0x30
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d013      	beq.n	8009a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8009a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a18:	f000 ffce 	bl	800a9b8 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bf14      	ite	ne
 8009a22:	2301      	movne	r3, #1
 8009a24:	2300      	moveq	r3, #0
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d008      	beq.n	8009a3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.data =
            const_cast<void*>(static_cast<const void*>(array->data()));
 8009a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a2e:	f001 f991 	bl	800ad54 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8009a32:	4602      	mov	r2, r0
        result->data.data =
 8009a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a36:	605a      	str	r2, [r3, #4]
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
 8009a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	751a      	strb	r2, [r3, #20]
    // it less ambiguous.
  }

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8009a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8009a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a48:	2202      	movs	r2, #2
 8009a4a:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8009a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4e:	f103 0118 	add.w	r1, r3, #24
 8009a52:	f107 0214 	add.w	r2, r7, #20
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68b8      	ldr	r0, [r7, #8]
 8009a5a:	f7ff fa21 	bl	8008ea0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd6>
 8009a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a70:	e0dc      	b.n	8009c2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	f7ff f8ad 	bl	8008bd2 <_ZNK6tflite6Tensor5shapeEv>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bf0c      	ite	eq
 8009a7e:	2301      	moveq	r3, #1
 8009a80:	2300      	movne	r3, #0
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8009a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8a:	4a6a      	ldr	r2, [pc, #424]	; (8009c34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x298>)
 8009a8c:	609a      	str	r2, [r3, #8]
 8009a8e:	e013      	b.n	8009ab8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8009a90:	68b8      	ldr	r0, [r7, #8]
 8009a92:	f7ff f89e 	bl	8008bd2 <_ZNK6tflite6Tensor5shapeEv>
 8009a96:	4602      	mov	r2, r0
 8009a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f001 f964 	bl	800ad6c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009aaa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
 8009ab2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ab6:	e0b9      	b.n	8009c2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8009ab8:	68b8      	ldr	r0, [r7, #8]
 8009aba:	f7ff fa98 	bl	8008fee <_ZNK6tflite6Tensor12quantizationEv>
 8009abe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d021      	beq.n	8009b0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
  if (src_quantization && src_quantization->scale() &&
 8009ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac8:	f7ff fa57 	bl	8008f7a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01b      	beq.n	8009b0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->scale()->size() > 0) &&
 8009ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad4:	f7ff fa51 	bl	8008f7a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 ff7a 	bl	800a9d4 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8009ae0:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d011      	beq.n	8009b0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      src_quantization->zero_point() &&
 8009ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae8:	f7ff fa55 	bl	8008f96 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009aec:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00b      	beq.n	8009b0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->zero_point()->size() > 0)) {
 8009af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af4:	f7ff fa4f 	bl	8008f96 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009af8:	4603      	mov	r3, r0
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 ffa0 	bl	800aa40 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8009b00:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
 8009b0a:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 808c 	beq.w	8009c2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8009b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b14:	f7ff fa31 	bl	8008f7a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 ff67 	bl	800a9f0 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8009b22:	eef0 7a40 	vmov.f32	s15, s0
 8009b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b28:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8009b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b2e:	f7ff fa32 	bl	8008f96 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 ff90 	bl	800aa5c <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
    result->params.zero_point =
 8009b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b42:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8009b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b46:	f7ff fa18 	bl	8008f7a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 ff41 	bl	800a9d4 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8009b52:	4603      	mov	r3, r0
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	330c      	adds	r3, #12
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2204      	movs	r2, #4
 8009b60:	210c      	movs	r1, #12
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	4798      	blx	r3
 8009b66:	6238      	str	r0, [r7, #32]
                                        alignof(TfLiteAffineQuantization)));
    if (quantization == nullptr) {
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d105      	bne.n	8009b7a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1de>
      TF_LITE_REPORT_ERROR(error_reporter,
 8009b6e:	4932      	ldr	r1, [pc, #200]	; (8009c38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29c>)
 8009b70:	6838      	ldr	r0, [r7, #0]
 8009b72:	f7fb f937 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e058      	b.n	8009c2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>

    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8009b7a:	68fd      	ldr	r5, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	330c      	adds	r3, #12
 8009b82:	681c      	ldr	r4, [r3, #0]
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
 8009b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b86:	f7fb f8f9 	bl	8004d7c <TfLiteIntArrayGetSizeInBytes>
 8009b8a:	4603      	mov	r3, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8009b8c:	2204      	movs	r2, #4
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4628      	mov	r0, r5
 8009b92:	47a0      	blx	r4
 8009b94:	4602      	mov	r2, r0
    quantization->zero_point =
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d105      	bne.n	8009bae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x212>
      TF_LITE_REPORT_ERROR(error_reporter,
 8009ba2:	4926      	ldr	r1, [pc, #152]	; (8009c3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>)
 8009ba4:	6838      	ldr	r0, [r7, #0]
 8009ba6:	f7fb f91d 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e03e      	b.n	8009c2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8009bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb0:	f7ff f9e3 	bl	8008f7a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f001 f8ef 	bl	800ad9e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	77fb      	strb	r3, [r7, #31]
 8009bc4:	7ffb      	ldrb	r3, [r7, #31]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 8009bca:	7ffb      	ldrb	r3, [r7, #31]
 8009bcc:	e02e      	b.n	8009c2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd4:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 8009bde:	2300      	movs	r3, #0
 8009be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be2:	e011      	b.n	8009c08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26c>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8009be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009be6:	f7ff f9d6 	bl	8008f96 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009bea:	4602      	mov	r2, r0
 8009bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f000 ff33 	bl	800aa5c <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	4602      	mov	r2, r0
 8009c00:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8009c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c04:	3301      	adds	r3, #1
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	dbe9      	blt.n	8009be4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8009c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c12:	f7ff f9ce 	bl	8008fb2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8009c16:	4602      	mov	r2, r0
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8009c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8009c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c26:	6a3a      	ldr	r2, [r7, #32]
 8009c28:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3740      	adds	r7, #64	; 0x40
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bdb0      	pop	{r4, r5, r7, pc}
 8009c34:	08048df4 	.word	0x08048df4
 8009c38:	08048fe0 	.word	0x08048fe0
 8009c3c:	08049010 	.word	0x08049010

08009c40 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8009c4c:	4a0c      	ldr	r2, [pc, #48]	; (8009c80 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]
    : memory_allocator_(memory_allocator),
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	605a      	str	r2, [r3, #4]
      error_reporter_(error_reporter),
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	609a      	str	r2, [r3, #8]
      model_is_allocating_(false) {}
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	731a      	strb	r2, [r3, #12]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	611a      	str	r2, [r3, #16]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	615a      	str	r2, [r3, #20]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	08049eb0 	.word	0x08049eb0

08009c84 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	4a04      	ldr	r2, [pc, #16]	; (8009ca0 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	08049eb0 	.word	0x08049eb0

08009ca4 <_ZN6tflite14MicroAllocatorD0Ev>:
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff ffe9 	bl	8009c84 <_ZN6tflite14MicroAllocatorD1Ev>
 8009cb2:	2118      	movs	r1, #24
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f00f f833 	bl	8018d20 <_ZdlPvj>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8009cd0:	2110      	movs	r1, #16
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff f854 	bl	8008d80 <_ZN6tflite14AlignPointerUpEPhj>
 8009cd8:	6178      	str	r0, [r7, #20]
  if (aligned_arena != tensor_arena) {
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d007      	beq.n	8009cf2 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x2e>
    TF_LITE_REPORT_ERROR(
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	490c      	ldr	r1, [pc, #48]	; (8009d1c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x58>)
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7fb f879 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "%d bytes lost due to alignment. To avoid this loss, please make sure "
        "the tensor_arena is 16 bytes aligned.",
        aligned_arena - tensor_arena);
  }
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	441a      	add	r2, r3
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	6979      	ldr	r1, [r7, #20]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f002 faf2 	bl	800c2ec <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f807 	bl	8009d20 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8009d12:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	08049040 	.word	0x08049040

08009d20 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8009d30:	f00f fae2 	bl	80192f8 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8009d3a:	f00f fadd 	bl	80192f8 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	330c      	adds	r3, #12
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2204      	movs	r2, #4
 8009d48:	2118      	movs	r1, #24
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	4798      	blx	r3
 8009d4e:	60f8      	str	r0, [r7, #12]
      sizeof(MicroAllocator), alignof(MicroAllocator));
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4619      	mov	r1, r3
 8009d54:	2018      	movs	r0, #24
 8009d56:	f7fb f878 	bl	8004e4a <_ZnwjPv>
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff ff6d 	bl	8009c40 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8009d66:	60bc      	str	r4, [r7, #8]
  return allocator;
 8009d68:	68bb      	ldr	r3, [r7, #8]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd90      	pop	{r4, r7, pc}
	...

08009d74 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, TfLiteContext* context,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations) {
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b089      	sub	sp, #36	; 0x24
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x18>
 8009d88:	f00f fab6 	bl	80192f8 <abort>
  TFLITE_DCHECK(context != nullptr);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x22>
 8009d92:	f00f fab1 	bl	80192f8 <abort>

  if (model_is_allocating_) {
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	7b1b      	ldrb	r3, [r3, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d007      	beq.n	8009dae <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	492c      	ldr	r1, [pc, #176]	; (8009e54 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xe0>)
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fb f81d 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e04e      	b.n	8009e4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009dae:	68b9      	ldr	r1, [r7, #8]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fbc3 	bl	800a53c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009db6:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x4e>
 8009dbe:	f00f fa9b 	bl	80192f8 <abort>
  model_is_allocating_ = true;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3308      	adds	r3, #8
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	4798      	blx	r3
 8009dd8:	4603      	mov	r3, r0
 8009dda:	74fb      	strb	r3, [r7, #19]
 8009ddc:	7cfb      	ldrb	r3, [r7, #19]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x72>
 8009de2:	7cfb      	ldrb	r3, [r7, #19]
 8009de4:	e032      	b.n	8009e4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
  TF_LITE_ENSURE_STATUS(
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	330c      	adds	r3, #12
 8009dec:	681c      	ldr	r4, [r3, #0]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	47a0      	blx	r4
 8009df8:	4603      	mov	r3, r0
 8009dfa:	74bb      	strb	r3, [r7, #18]
 8009dfc:	7cbb      	ldrb	r3, [r7, #18]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x92>
 8009e02:	7cbb      	ldrb	r3, [r7, #18]
 8009e04:	e022      	b.n	8009e4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
      PopulateTfLiteTensorArrayFromFlatbuffer(model, context, subgraph));
  TF_LITE_ENSURE_STATUS(
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3310      	adds	r3, #16
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e10:	6979      	ldr	r1, [r7, #20]
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	4798      	blx	r3
 8009e16:	4603      	mov	r3, r0
 8009e18:	747b      	strb	r3, [r7, #17]
 8009e1a:	7c7b      	ldrb	r3, [r7, #17]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb0>
 8009e20:	7c7b      	ldrb	r3, [r7, #17]
 8009e22:	e013      	b.n	8009e4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
      AllocateNodeAndRegistrations(subgraph, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3314      	adds	r3, #20
 8009e2a:	681c      	ldr	r4, [r3, #0]
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	47a0      	blx	r4
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	743b      	strb	r3, [r7, #16]
 8009e40:	7c3b      	ldrb	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd6>
 8009e46:	7c3b      	ldrb	r3, [r7, #16]
 8009e48:	e000      	b.n	8009e4c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
      model, subgraph, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd90      	pop	{r4, r7, pc}
 8009e54:	080490ac 	.word	0x080490ac

08009e58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:

TfLiteStatus MicroAllocator::FinishModelAllocation(const Model* model,
                                                   TfLiteContext* context) {
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
  if (!model_is_allocating_) {
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	7b1b      	ldrb	r3, [r3, #12]
 8009e68:	f083 0301 	eor.w	r3, r3, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	491b      	ldr	r1, [pc, #108]	; (8009ee4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x8c>)
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fa ffb3 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e02c      	b.n	8009edc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fb59 	bl	800a53c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009e8a:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3e>
 8009e92:	f00f fa31 	bl	80192f8 <abort>

  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	331c      	adds	r3, #28
 8009e9c:	681c      	ldr	r4, [r3, #0]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	47a0      	blx	r4
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	74fb      	strb	r3, [r7, #19]
 8009eac:	7cfb      	ldrb	r3, [r7, #19]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5e>
 8009eb2:	7cfb      	ldrb	r3, [r7, #19]
 8009eb4:	e012      	b.n	8009edc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3318      	adds	r3, #24
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	4798      	blx	r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	74bb      	strb	r3, [r7, #18]
 8009eca:	7cbb      	ldrb	r3, [r7, #18]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x7c>
 8009ed0:	7cbb      	ldrb	r3, [r7, #18]
 8009ed2:	e003      	b.n	8009edc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>

  model_is_allocating_ = false;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd90      	pop	{r4, r7, pc}
 8009ee4:	08049104 	.word	0x08049104

08009ee8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6858      	ldr	r0, [r3, #4]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	330c      	adds	r3, #12
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2210      	movs	r2, #16
 8009f04:	68b9      	ldr	r1, [r7, #8]
 8009f06:	4798      	blx	r3
 8009f08:	6178      	str	r0, [r7, #20]
  if (data == nullptr) {
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d108      	bne.n	8009f22 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	4907      	ldr	r1, [pc, #28]	; (8009f34 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x4c>)
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fa ff63 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e003      	b.n	8009f2a <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x42>
  }
  (*ptr) = data;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	08049150 	.word	0x08049150

08009f38 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
 8009f38:	b590      	push	{r4, r7, lr}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	691c      	ldr	r4, [r3, #16]
          memory_allocator_->GetTail()) {
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f002 fa8c 	bl	800c474 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8009f5c:	4603      	mov	r3, r0
  if (scratch_buffer_handles_ != nullptr &&
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	d001      	beq.n	8009f66 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x30>
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d007      	beq.n	8009f7c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	491d      	ldr	r1, [pc, #116]	; (8009fe8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb0>)
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fa ff36 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Internal error: AllocateFromTail can not be called "
                         "between two RequestScratchBufferInArena calls.");
    return kTfLiteError;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e030      	b.n	8009fde <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }

  internal::ScratchBufferHandle* handle =
      reinterpret_cast<internal::ScratchBufferHandle*>(
          memory_allocator_->AllocateFromTail(
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6858      	ldr	r0, [r3, #4]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	330c      	adds	r3, #12
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2204      	movs	r2, #4
 8009f8c:	210c      	movs	r1, #12
 8009f8e:	4798      	blx	r3
 8009f90:	6178      	str	r0, [r7, #20]
              sizeof(internal::ScratchBufferHandle),
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d108      	bne.n	8009faa <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x72>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	4913      	ldr	r1, [pc, #76]	; (8009fec <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb4>)
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fa ff1f 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e019      	b.n	8009fde <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }
  *handle = {};
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	461a      	mov	r2, r3
 8009fae:	2300      	movs	r3, #0
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	6053      	str	r3, [r2, #4]
 8009fb4:	6093      	str	r3, [r2, #8]
  handle->bytes = bytes;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	605a      	str	r2, [r3, #4]
  handle->node_idx = node_id;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	609a      	str	r2, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	601a      	str	r2, [r3, #0]
  scratch_buffer_count_ += 1;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	615a      	str	r2, [r3, #20]
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd90      	pop	{r4, r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	08049180 	.word	0x08049180
 8009fec:	080491e4 	.word	0x080491e4

08009ff0 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	695a      	ldr	r2, [r3, #20]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d809      	bhi.n	800a018 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6898      	ldr	r0, [r3, #8]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	490b      	ldr	r1, [pc, #44]	; (800a03c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x4c>)
 800a010:	f7fa fee8 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
 800a014:	2300      	movs	r3, #0
 800a016:	e00c      	b.n	800a032 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x42>
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6919      	ldr	r1, [r3, #16]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	695a      	ldr	r2, [r3, #20]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	4613      	mov	r3, r2
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	3b0c      	subs	r3, #12
 800a02e:	440b      	add	r3, r1
 800a030:	681b      	ldr	r3, [r3, #0]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	0804921c 	.word	0x0804921c

0800a040 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateTfLiteTensorArray(
    TfLiteContext* context, const SubGraph* subgraph) {
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  context->tensors_size = subgraph->tensors()->size();
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff f829 	bl	80090a4 <_ZNK6tflite8SubGraph7tensorsEv>
 800a052:	4603      	mov	r3, r0
 800a054:	4618      	mov	r0, r3
 800a056:	f000 fd29 	bl	800aaac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800a05a:	4602      	mov	r2, r0
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	601a      	str	r2, [r3, #0]
  context->tensors =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6858      	ldr	r0, [r3, #4]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	330c      	adds	r3, #12
 800a06c:	681b      	ldr	r3, [r3, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	6812      	ldr	r2, [r2, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800a072:	0191      	lsls	r1, r2, #6
 800a074:	2204      	movs	r2, #4
 800a076:	4798      	blx	r3
 800a078:	4602      	mov	r2, r0
  context->tensors =
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	609a      	str	r2, [r3, #8]
  if (context->tensors == nullptr) {
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5c>
    TF_LITE_REPORT_ERROR(
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6898      	ldr	r0, [r3, #8]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	019b      	lsls	r3, r3, #6
 800a090:	461a      	mov	r2, r3
 800a092:	4905      	ldr	r1, [pc, #20]	; (800a0a8 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x68>)
 800a094:	f7fa fea6 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->tensors, %d bytes required",
        sizeof(TfLiteTensor) * context->tensors_size);
    return kTfLiteError;
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5e>
  }
  return kTfLiteOk;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	08049248 	.word	0x08049248

0800a0ac <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorArrayFromFlatbuffer(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 800a0ac:	b5b0      	push	{r4, r5, r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
  // Initialize tensors in context_ using the flatbuffer for quantization data.
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	e02c      	b.n	800a11a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6e>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800a0c4:	6838      	ldr	r0, [r7, #0]
 800a0c6:	f7fe ffed 	bl	80090a4 <_ZNK6tflite8SubGraph7tensorsEv>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6979      	ldr	r1, [r7, #20]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fcfa 	bl	800aac8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800a0d4:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 800a0d6:	68b8      	ldr	r0, [r7, #8]
 800a0d8:	f7ff f863 	bl	80091a2 <_ZNK6tflite5Model7buffersEv>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &context->tensors[i]);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	019b      	lsls	r3, r3, #6
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 800a0e8:	4413      	add	r3, r2
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f7ff fc52 	bl	800999c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	74fb      	strb	r3, [r7, #19]
    if (status != kTfLiteOk) {
 800a0fc:	7cfb      	ldrb	r3, [r7, #19]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d008      	beq.n	800a114 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x68>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	490e      	ldr	r1, [pc, #56]	; (800a144 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>)
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fa fe6a 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 800a110:	2301      	movs	r3, #1
 800a112:	e013      	b.n	800a13c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	3301      	adds	r3, #1
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	6838      	ldr	r0, [r7, #0]
 800a11c:	f7fe ffc2 	bl	80090a4 <_ZNK6tflite8SubGraph7tensorsEv>
 800a120:	4603      	mov	r3, r0
 800a122:	4618      	mov	r0, r3
 800a124:	f000 fcc2 	bl	800aaac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800a128:	4602      	mov	r2, r0
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	bf34      	ite	cc
 800a130:	2301      	movcc	r3, #1
 800a132:	2300      	movcs	r3, #0
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1c2      	bne.n	800a0c0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14>
    }
  }
  return kTfLiteOk;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bdb0      	pop	{r4, r5, r7, pc}
 800a144:	0804928c 	.word	0x0804928c

0800a148 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
 800a148:	b5b0      	push	{r4, r5, r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685d      	ldr	r5, [r3, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	330c      	adds	r3, #12
 800a160:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800a162:	68b8      	ldr	r0, [r7, #8]
 800a164:	f7fe ffc8 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800a168:	4603      	mov	r3, r0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fcd2 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800a170:	4602      	mov	r2, r0
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800a17a:	2204      	movs	r2, #4
 800a17c:	4619      	mov	r1, r3
 800a17e:	4628      	mov	r0, r5
 800a180:	47a0      	blx	r4
 800a182:	6178      	str	r0, [r7, #20]
          alignof(NodeAndRegistration)));
  if (output == nullptr) {
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d107      	bne.n	800a19a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x52>
    TF_LITE_REPORT_ERROR(
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4907      	ldr	r1, [pc, #28]	; (800a1ac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x64>)
 800a190:	4618      	mov	r0, r3
 800a192:	f7fa fe27 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 800a196:	2301      	movs	r3, #1
 800a198:	e003      	b.n	800a1a2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x5a>
  }
  *node_and_registrations = output;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	080492ac 	.word	0x080492ac

0800a1b0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const SubGraph* subgraph,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 800a1b0:	b5b0      	push	{r4, r5, r7, lr}
 800a1b2:	b096      	sub	sp, #88	; 0x58
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  auto* opcodes = model->operator_codes();
 800a1c4:	68b8      	ldr	r0, [r7, #8]
 800a1c6:	f7fe ffd0 	bl	800916a <_ZNK6tflite5Model14operator_codesEv>
 800a1ca:	6478      	str	r0, [r7, #68]	; 0x44
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	f107 031c 	add.w	r3, r7, #28
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7ff f830 	bl	800923c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800a1dc:	2300      	movs	r3, #0
 800a1de:	657b      	str	r3, [r7, #84]	; 0x54
 800a1e0:	e12a      	b.n	800a438 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x288>
    const auto* op = subgraph->operators()->Get(i);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7fe ff88 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fc9f 	bl	800ab30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800a1f2:	6438      	str	r0, [r7, #64]	; 0x40
    const size_t index = op->opcode_index();
 800a1f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a1f6:	f7fe ff1c 	bl	8009032 <_ZNK6tflite8Operator12opcode_indexEv>
 800a1fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (index >= opcodes->size()) {
 800a1fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a1fe:	f000 fcbd 	bl	800ab7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800a202:	4602      	mov	r2, r0
 800a204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a206:	4293      	cmp	r3, r2
 800a208:	bf2c      	ite	cs
 800a20a:	2301      	movcs	r3, #1
 800a20c:	2300      	movcc	r3, #0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x76>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a21a:	4995      	ldr	r1, [pc, #596]	; (800a470 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c0>)
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fa fde1 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 800a222:	2401      	movs	r4, #1
 800a224:	e11a      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
    }
    auto* opcode = (*opcodes)[index];
 800a226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a228:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a22a:	f000 fdd1 	bl	800add0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 800a22e:	63b8      	str	r0, [r7, #56]	; 0x38
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 800a236:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a238:	4613      	mov	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	461a      	mov	r2, r3
 800a242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a244:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 800a246:	3324      	adds	r3, #36	; 0x24
 800a248:	4602      	mov	r2, r0
 800a24a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a24c:	f7fd fee2 	bl	8008014 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 800a250:	4603      	mov	r3, r0
 800a252:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (status != kTfLiteOk) {
 800a256:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d011      	beq.n	800a282 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xd2>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	689c      	ldr	r4, [r3, #8]
 800a262:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a264:	f7fd fea8 	bl	8007fb8 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800a268:	4603      	mov	r3, r0
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fd fe7e 	bl	8007f6c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a270:	4603      	mov	r3, r0
 800a272:	461a      	mov	r2, r3
 800a274:	497f      	ldr	r1, [pc, #508]	; (800a474 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c4>)
 800a276:	4620      	mov	r0, r4
 800a278:	f7fa fdb4 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(opcode->builtin_code()));
      return status;
 800a27c:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 800a280:	e0ec      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
    }
    const auto* registration = node_and_registrations[i].registration;
 800a282:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	461a      	mov	r2, r3
 800a28e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a290:	4413      	add	r3, r2
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
    if (registration == nullptr) {
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d108      	bne.n	800a2ae <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xfe>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2a2:	4975      	ldr	r1, [pc, #468]	; (800a478 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fa fd9d 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 800a2aa:	2401      	movs	r4, #1
 800a2ac:	e0d6      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b0:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    const char* custom_data = nullptr;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	653b      	str	r3, [r7, #80]	; 0x50
    size_t custom_data_size = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char* builtin_data = nullptr;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61bb      	str	r3, [r7, #24]

    if (op_type == BuiltinOperator_CUSTOM) {
 800a2c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	d11b      	bne.n	800a302 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x152>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 800a2ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a2cc:	f7fe fedc 	bl	8009088 <_ZNK6tflite8Operator14custom_optionsEv>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	bf14      	ite	ne
 800a2d6:	2301      	movne	r3, #1
 800a2d8:	2300      	moveq	r3, #0
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d059      	beq.n	800a394 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1e4>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 800a2e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a2e2:	f7fe fed1 	bl	8009088 <_ZNK6tflite8Operator14custom_optionsEv>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 fd33 	bl	800ad54 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800a2ee:	6538      	str	r0, [r7, #80]	; 0x50
        custom_data_size = op->custom_options()->size();
 800a2f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a2f2:	f7fe fec9 	bl	8009088 <_ZNK6tflite8Operator14custom_optionsEv>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 fb5d 	bl	800a9b8 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800a2fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a300:	e048      	b.n	800a394 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1e4>
      }
    } else {
      if (op->custom_options() != nullptr) {
 800a302:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a304:	f7fe fec0 	bl	8009088 <_ZNK6tflite8Operator14custom_optionsEv>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bf14      	ite	ne
 800a30e:	2301      	movne	r3, #1
 800a310:	2300      	moveq	r3, #0
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00e      	beq.n	800a336 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x186>
        TF_LITE_REPORT_ERROR(
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689c      	ldr	r4, [r3, #8]
 800a31c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a320:	4618      	mov	r0, r3
 800a322:	f7fd fe23 	bl	8007f6c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	4954      	ldr	r1, [pc, #336]	; (800a47c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7fa fd59 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 800a332:	2401      	movs	r4, #1
 800a334:	e092      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3318      	adds	r3, #24
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a342:	4611      	mov	r1, r2
 800a344:	6838      	ldr	r0, [r7, #0]
 800a346:	4798      	blx	r3
 800a348:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (parser == nullptr) {
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10e      	bne.n	800a36e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1be>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	689c      	ldr	r4, [r3, #8]
 800a354:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fd fe07 	bl	8007f6c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a35e:	4603      	mov	r3, r0
 800a360:	461a      	mov	r2, r3
 800a362:	4947      	ldr	r1, [pc, #284]	; (800a480 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
 800a364:	4620      	mov	r0, r4
 800a366:	f7fa fd3d 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 800a36a:	2401      	movs	r4, #1
 800a36c:	e076      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6899      	ldr	r1, [r3, #8]
 800a372:	f107 0318 	add.w	r3, r7, #24
 800a376:	f107 021c 	add.w	r2, r7, #28
 800a37a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800a37c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a37e:	47a0      	blx	r4
 800a380:	4603      	mov	r3, r0
 800a382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1e4>
 800a38e:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 800a392:	e063      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685c      	ldr	r4, [r3, #4]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	689d      	ldr	r5, [r3, #8]
 800a39c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a39e:	f7fe fe57 	bl	8009050 <_ZNK6tflite8Operator6inputsEv>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	f107 0314 	add.w	r3, r7, #20
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 fcde 	bl	800ad6c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a3b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x214>
 800a3be:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
 800a3c2:	e04b      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685c      	ldr	r4, [r3, #4]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	689d      	ldr	r5, [r3, #8]
 800a3cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a3ce:	f7fe fe4d 	bl	800906c <_ZNK6tflite8Operator7outputsEv>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	f107 0310 	add.w	r3, r7, #16
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fcc6 	bl	800ad6c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a3e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x244>
 800a3ee:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 800a3f2:	e033      	b.n	800a45c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 800a3f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	461a      	mov	r2, r3
 800a400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a402:	4413      	add	r3, r2
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
    *node = {};
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	4618      	mov	r0, r3
 800a40a:	2324      	movs	r3, #36	; 0x24
 800a40c:	461a      	mov	r2, r3
 800a40e:	2100      	movs	r1, #0
 800a410:	f00f fa16 	bl	8019840 <memset>
    node->inputs = inputs_array;
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a42a:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 800a42c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800a432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a434:	3301      	adds	r3, #1
 800a436:	657b      	str	r3, [r7, #84]	; 0x54
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7fe fe5d 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800a43e:	4603      	mov	r3, r0
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fb67 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800a446:	4602      	mov	r2, r0
 800a448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a44a:	4293      	cmp	r3, r2
 800a44c:	bf34      	ite	cc
 800a44e:	2301      	movcc	r3, #1
 800a450:	2300      	movcs	r3, #0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	f47f aec4 	bne.w	800a1e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x32>
  }

  return kTfLiteOk;
 800a45a:	2400      	movs	r4, #0
}
 800a45c:	f107 031c 	add.w	r3, r7, #28
 800a460:	4618      	mov	r0, r3
 800a462:	f000 ff21 	bl	800b2a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800a466:	4623      	mov	r3, r4
 800a468:	4618      	mov	r0, r3
 800a46a:	3758      	adds	r7, #88	; 0x58
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bdb0      	pop	{r4, r5, r7, pc}
 800a470:	080492e4 	.word	0x080492e4
 800a474:	08049310 	.word	0x08049310
 800a478:	08049340 	.word	0x08049340
 800a47c:	08049364 	.word	0x08049364
 800a480:	080493ac 	.word	0x080493ac

0800a484 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
 800a484:	b5b0      	push	{r4, r5, r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < context->tensors_size; ++i) {
 800a490:	2300      	movs	r3, #0
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	e046      	b.n	800a524 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xa0>
    if (subgraph->tensors()->Get(i)->is_variable()) {
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fe fe04 	bl	80090a4 <_ZNK6tflite8SubGraph7tensorsEv>
 800a49c:	4603      	mov	r3, r0
 800a49e:	6979      	ldr	r1, [r7, #20]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fb11 	bl	800aac8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe fdae 	bl	800900a <_ZNK6tflite6Tensor11is_variableEv>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d02c      	beq.n	800a50e <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x8a>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6858      	ldr	r0, [r3, #4]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	681b      	ldr	r3, [r3, #0]
          context->tensors[i].bytes, kBufferAlignment);
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	6891      	ldr	r1, [r2, #8]
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	0192      	lsls	r2, r2, #6
 800a4ca:	440a      	add	r2, r1
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 800a4cc:	6995      	ldr	r5, [r2, #24]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	6891      	ldr	r1, [r2, #8]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	0192      	lsls	r2, r2, #6
 800a4d6:	188c      	adds	r4, r1, r2
 800a4d8:	2210      	movs	r2, #16
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4798      	blx	r3
 800a4de:	4603      	mov	r3, r0
 800a4e0:	6063      	str	r3, [r4, #4]
      // Allocation failure.
      if (context->tensors[i].data.data == nullptr) {
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	019b      	lsls	r3, r3, #6
 800a4ea:	4413      	add	r3, r2
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10d      	bne.n	800a50e <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x8a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6898      	ldr	r0, [r3, #8]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	689a      	ldr	r2, [r3, #8]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	019b      	lsls	r3, r3, #6
 800a4fe:	4413      	add	r3, r2
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	461a      	mov	r2, r3
 800a504:	490c      	ldr	r1, [pc, #48]	; (800a538 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb4>)
 800a506:	f7fa fc6d 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e010      	b.n	800a530 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xac>
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	689a      	ldr	r2, [r3, #8]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	019b      	lsls	r3, r3, #6
 800a516:	4413      	add	r3, r2
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fd fe48 	bl	80081ae <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	3301      	adds	r3, #1
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d3b3      	bcc.n	800a496 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x12>
  }

  return kTfLiteOk;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bdb0      	pop	{r4, r5, r7, pc}
 800a538:	080493cc 	.word	0x080493cc

0800a53c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 800a546:	6838      	ldr	r0, [r7, #0]
 800a548:	f7fe fe1d 	bl	8009186 <_ZNK6tflite5Model9subgraphsEv>
 800a54c:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 fb48 	bl	800abe4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800a554:	4603      	mov	r3, r0
 800a556:	2b01      	cmp	r3, #1
 800a558:	bf14      	ite	ne
 800a55a:	2301      	movne	r3, #1
 800a55c:	2300      	moveq	r3, #0
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	4907      	ldr	r1, [pc, #28]	; (800a588 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fa fc3a 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 800a570:	2300      	movs	r3, #0
 800a572:	e004      	b.n	800a57e <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 800a574:	2100      	movs	r1, #0
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fbd0 	bl	800ad1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800a57c:	4603      	mov	r3, r0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	080493fc 	.word	0x080493fc

0800a58c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
 800a58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58e:	b0a7      	sub	sp, #156	; 0x9c
 800a590:	af02      	add	r7, sp, #8
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
 800a59a:	2400      	movs	r4, #0
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689d      	ldr	r5, [r3, #8]
                                        memory_allocator_->GetHead(),
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685b      	ldr	r3, [r3, #4]
                                        memory_allocator_->GetTail());
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 ff59 	bl	800c45c <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f001 ff5f 	bl	800c474 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4629      	mov	r1, r5
 800a5c0:	f001 fe5e 	bl	800c280 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6899      	ldr	r1, [r3, #8]
 800a5c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a5cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fe fe69 	bl	80092a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>
    TF_LITE_ENSURE_STATUS(
 800a5d6:	6838      	ldr	r0, [r7, #0]
 800a5d8:	f7fe fd64 	bl	80090a4 <_ZNK6tflite8SubGraph7tensorsEv>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 fa64 	bl	800aaac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fe76 	bl	80092e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800a5fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7e>
 800a602:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 800a606:	2500      	movs	r5, #0
 800a608:	e0ff      	b.n	800a80a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
 800a60a:	2300      	movs	r3, #0
 800a60c:	643b      	str	r3, [r7, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(
 800a60e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a612:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a616:	68b9      	ldr	r1, [r7, #8]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff f85f 	bl	80096dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800a61e:	4603      	mov	r3, r0
 800a620:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800a624:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xa8>
 800a62c:	f897 408e 	ldrb.w	r4, [r7, #142]	; 0x8e
 800a630:	2500      	movs	r5, #0
 800a632:	e0ea      	b.n	800a80a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
 800a634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	f7fe feac 	bl	800939c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>
 800a644:	4603      	mov	r3, r0
 800a646:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800a64a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
 800a652:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 800a656:	2500      	movs	r5, #0
 800a658:	e0d7      	b.n	800a80a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
                                             context->tensors));

    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	691a      	ldr	r2, [r3, #16]
 800a65e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a662:	4611      	mov	r1, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff f8b5 	bl	80097d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800a670:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf4>
 800a678:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 800a67c:	2500      	movs	r5, #0
 800a67e:	e0c4      	b.n	800a80a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    const AllocationInfo* allocation_info = builder.Finish();
 800a680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fe3f 	bl	8009308 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>
 800a68a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
 800a68e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a692:	4618      	mov	r0, r3
 800a694:	f001 fefa 	bl	800c48c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 800a698:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
 800a69c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f001 fe76 	bl	800c398 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
 800a6ac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800a6b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10f      	bne.n	800a6d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6898      	ldr	r0, [r3, #8]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6899      	ldr	r1, [r3, #8]
 800a6c0:	4b59      	ldr	r3, [pc, #356]	; (800a828 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x29c>)
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	f240 338f 	movw	r3, #911	; 0x38f
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	4b58      	ldr	r3, [pc, #352]	; (800a82c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 800a6cc:	4a58      	ldr	r2, [pc, #352]	; (800a830 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 800a6ce:	f7fa fba2 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800a6d2:	2401      	movs	r4, #1
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	e098      	b.n	800a80a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800a6d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a6dc:	f107 0314 	add.w	r3, r7, #20
 800a6e0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f00c fb9b 	bl	8016e20 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	689d      	ldr	r5, [r3, #8]
 800a6ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fe14 	bl	8009320 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f107 0114 	add.w	r1, r7, #20
 800a6fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a702:	4628      	mov	r0, r5
 800a704:	f7ff f8ac 	bl	8009860 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800a708:	4603      	mov	r3, r0
 800a70a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a70e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x192>
 800a716:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 800a71a:	2500      	movs	r5, #0
 800a71c:	e06b      	b.n	800a7f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
        CreatePlan(error_reporter_, &planner, allocation_info, builder.Size()));

    size_t actual_available_arena_size =
        memory_allocator_->GetAvailableMemory();
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4618      	mov	r0, r3
 800a724:	f001 feb2 	bl	800c48c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 800a728:	67b8      	str	r0, [r7, #120]	; 0x78
    // Make sure we have enough arena size.
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 800a72a:	f107 0314 	add.w	r3, r7, #20
 800a72e:	4618      	mov	r0, r3
 800a730:	f00c fe30 	bl	8017394 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800a734:	4602      	mov	r2, r0
 800a736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a738:	4293      	cmp	r3, r2
 800a73a:	bf34      	ite	cc
 800a73c:	2301      	movcc	r3, #1
 800a73e:	2300      	movcs	r3, #0
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00f      	beq.n	800a766 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1da>
      TF_LITE_REPORT_ERROR(
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	689c      	ldr	r4, [r3, #8]
 800a74a:	f107 0314 	add.w	r3, r7, #20
 800a74e:	4618      	mov	r0, r3
 800a750:	f00c fe20 	bl	8017394 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800a754:	4602      	mov	r2, r0
 800a756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a758:	4936      	ldr	r1, [pc, #216]	; (800a834 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a8>)
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7fa fb42 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Arena size is too small for activation buffers. Needed %d but only "
          "%d was available.",
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
 800a760:	2401      	movs	r4, #1
 800a762:	2500      	movs	r5, #0
 800a764:	e047      	b.n	800a7f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	689d      	ldr	r5, [r3, #8]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 fe74 	bl	800c45c <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 800a774:	4606      	mov	r6, r0
 800a776:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe fdd0 	bl	8009320 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 800a780:	4603      	mov	r3, r0
 800a782:	f107 0114 	add.w	r1, r7, #20
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a78c:	4632      	mov	r2, r6
 800a78e:	4628      	mov	r0, r5
 800a790:	f7ff f8c0 	bl	8009914 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800a794:	4603      	mov	r3, r0
 800a796:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800a79a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21e>
 800a7a2:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 800a7a6:	2500      	movs	r5, #0
 800a7a8:	e025      	b.n	800a7f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
                                     memory_allocator_->GetHead(),
                                     allocation_info, builder.Size()));
    // Allocate the planned area, so the allocator knows it's used.
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685e      	ldr	r6, [r3, #4]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3308      	adds	r3, #8
 800a7b6:	681d      	ldr	r5, [r3, #0]
 800a7b8:	f107 0314 	add.w	r3, r7, #20
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f00c fde9 	bl	8017394 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	47a8      	blx	r5
 800a7cc:	6738      	str	r0, [r7, #112]	; 0x70
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
 800a7ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10f      	bne.n	800a7f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6898      	ldr	r0, [r3, #8]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6899      	ldr	r1, [r3, #8]
 800a7dc:	4b16      	ldr	r3, [pc, #88]	; (800a838 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>)
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	f44f 736a 	mov.w	r3, #936	; 0x3a8
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	4b11      	ldr	r3, [pc, #68]	; (800a82c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 800a7e8:	4a11      	ldr	r2, [pc, #68]	; (800a830 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 800a7ea:	f7fa fb14 	bl	8004e16 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800a7ee:	2401      	movs	r4, #1
 800a7f0:	2500      	movs	r5, #0
 800a7f2:	e000      	b.n	800a7f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
  }
 800a7f4:	2501      	movs	r5, #1
 800a7f6:	f107 0314 	add.w	r3, r7, #20
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f00c fb62 	bl	8016ec4 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800a800:	2d01      	cmp	r5, #1
 800a802:	d101      	bne.n	800a808 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27c>
 800a804:	2501      	movs	r5, #1
 800a806:	e000      	b.n	800a80a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
 800a808:	2500      	movs	r5, #0
 800a80a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a80e:	4618      	mov	r0, r3
 800a810:	f001 fda2 	bl	800c358 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800a814:	2d01      	cmp	r5, #1
 800a816:	d101      	bne.n	800a81c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x290>
 800a818:	bf00      	nop
  return kTfLiteOk;
 800a81a:	2400      	movs	r4, #0
}
 800a81c:	4623      	mov	r3, r4
 800a81e:	4618      	mov	r0, r3
 800a820:	3794      	adds	r7, #148	; 0x94
 800a822:	46bd      	mov	sp, r7
 800a824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a826:	bf00      	nop
 800a828:	080494e8 	.word	0x080494e8
 800a82c:	08049428 	.word	0x08049428
 800a830:	080494d0 	.word	0x080494d0
 800a834:	08049504 	.word	0x08049504
 800a838:	0804955c 	.word	0x0804955c

0800a83c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a848:	887b      	ldrh	r3, [r7, #2]
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 facd 	bl	800adec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800a852:	4603      	mov	r3, r0
  }
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a868:	887b      	ldrh	r3, [r7, #2]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fadd 	bl	800ae2c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800a872:	4603      	mov	r3, r0
  }
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a888:	887b      	ldrh	r3, [r7, #2]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 faed 	bl	800ae6c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800a892:	4603      	mov	r3, r0
  }
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800a8aa:	897b      	ldrh	r3, [r7, #10]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7fa fae7 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800a8b8:	8afb      	ldrh	r3, [r7, #22]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d007      	beq.n	800a8ce <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	8afb      	ldrh	r3, [r7, #22]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fb f9a7 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	e000      	b.n	800a8d0 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800a8ce:	687b      	ldr	r3, [r7, #4]
  }
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a8e4:	887b      	ldrh	r3, [r7, #2]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fadf 	bl	800aeac <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800a8ee:	4603      	mov	r3, r0
  }
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	460b      	mov	r3, r1
 800a902:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a904:	887b      	ldrh	r3, [r7, #2]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 faef 	bl	800aeec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800a90e:	4603      	mov	r3, r0
  }
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a924:	887b      	ldrh	r3, [r7, #2]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 faff 	bl	800af2c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800a92e:	4603      	mov	r3, r0
  }
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	460b      	mov	r3, r1
 800a942:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a944:	887b      	ldrh	r3, [r7, #2]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fb0f 	bl	800af6c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800a94e:	4603      	mov	r3, r0
  }
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a964:	887b      	ldrh	r3, [r7, #2]
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fb1f 	bl	800afac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800a96e:	4603      	mov	r3, r0
  }
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a984:	887b      	ldrh	r3, [r7, #2]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fb2f 	bl	800afec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800a98e:	4603      	mov	r3, r0
  }
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a9a4:	887b      	ldrh	r3, [r7, #2]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fb3f 	bl	800b02c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800a9ae:	4603      	mov	r3, r0
  }
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f6 fc3a 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f6 fc2c 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff ffea 	bl	800a9d4 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800aa00:	4602      	mov	r2, r0
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d306      	bcc.n	800aa16 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800aa0a:	4a0b      	ldr	r2, [pc, #44]	; (800aa38 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800aa0c:	f240 1101 	movw	r1, #257	; 0x101
 800aa10:	480a      	ldr	r0, [pc, #40]	; (800aa3c <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800aa12:	f00e fc79 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fb4a 	bl	800b0b0 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 fb2f 	bl	800b084 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800aa26:	eef0 7a40 	vmov.f32	s15, s0
  }
 800aa2a:	eeb0 0a67 	vmov.f32	s0, s15
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	08049580 	.word	0x08049580
 800aa38:	0804958c 	.word	0x0804958c
 800aa3c:	08049654 	.word	0x08049654

0800aa40 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7f6 fbf6 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800aa52:	4603      	mov	r3, r0
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7ff ffea 	bl	800aa40 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d306      	bcc.n	800aa82 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 800aa74:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800aa76:	4a0b      	ldr	r2, [pc, #44]	; (800aaa4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800aa78:	f240 1101 	movw	r1, #257	; 0x101
 800aa7c:	480a      	ldr	r0, [pc, #40]	; (800aaa8 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800aa7e:	f00e fc43 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fb36 	bl	800b0f4 <_ZNK11flatbuffers6VectorIxE4DataEv>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fb1b 	bl	800b0c8 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
  }
 800aa96:	4610      	mov	r0, r2
 800aa98:	4619      	mov	r1, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	08049580 	.word	0x08049580
 800aaa4:	08049700 	.word	0x08049700
 800aaa8:	08049654 	.word	0x08049654

0800aaac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f6 fbc0 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800aabe:	4603      	mov	r3, r0
 800aac0:	4618      	mov	r0, r3
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7ff ffea 	bl	800aaac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800aad8:	4602      	mov	r2, r0
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	4293      	cmp	r3, r2
 800aade:	d306      	bcc.n	800aaee <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 800aae0:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 800aae2:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 800aae4:	f240 1101 	movw	r1, #257	; 0x101
 800aae8:	4809      	ldr	r0, [pc, #36]	; (800ab10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800aaea:	f00e fc0d 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fb20 	bl	800b134 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fb07 	bl	800b10c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800aafe:	4603      	mov	r3, r0
  }
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	08049580 	.word	0x08049580
 800ab0c:	080498a8 	.word	0x080498a8
 800ab10:	08049654 	.word	0x08049654

0800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f6 fb8c 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800ab26:	4603      	mov	r3, r0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7ff ffea 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ab40:	4602      	mov	r2, r0
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d306      	bcc.n	800ab56 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800ab4a:	4a0a      	ldr	r2, [pc, #40]	; (800ab74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 800ab4c:	f240 1101 	movw	r1, #257	; 0x101
 800ab50:	4809      	ldr	r0, [pc, #36]	; (800ab78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 800ab52:	f00e fbd9 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fb0c 	bl	800b174 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 faf3 	bl	800b14c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800ab66:	4603      	mov	r3, r0
  }
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	08049580 	.word	0x08049580
 800ab74:	080499a0 	.word	0x080499a0
 800ab78:	08049654 	.word	0x08049654

0800ab7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f6 fb58 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff ffea 	bl	800ab7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800aba8:	4602      	mov	r2, r0
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	4293      	cmp	r3, r2
 800abae:	d306      	bcc.n	800abbe <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800abb0:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800abb2:	4a0a      	ldr	r2, [pc, #40]	; (800abdc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800abb4:	f240 1101 	movw	r1, #257	; 0x101
 800abb8:	4809      	ldr	r0, [pc, #36]	; (800abe0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800abba:	f00e fba5 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 faf8 	bl	800b1b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800abc4:	4603      	mov	r3, r0
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fadf 	bl	800b18c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800abce:	4603      	mov	r3, r0
  }
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	08049580 	.word	0x08049580
 800abdc:	08049a9c 	.word	0x08049a9c
 800abe0:	08049654 	.word	0x08049654

0800abe4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f6 fb24 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800abf6:	4603      	mov	r3, r0
 800abf8:	4618      	mov	r0, r3
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff ffea 	bl	800abe4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ac10:	4602      	mov	r2, r0
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d306      	bcc.n	800ac26 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800ac18:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800ac1c:	f240 1101 	movw	r1, #257	; 0x101
 800ac20:	4809      	ldr	r0, [pc, #36]	; (800ac48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800ac22:	f00e fb71 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fae4 	bl	800b1f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 facb 	bl	800b1cc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800ac36:	4603      	mov	r3, r0
  }
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	08049580 	.word	0x08049580
 800ac44:	08049ba0 	.word	0x08049ba0
 800ac48:	08049654 	.word	0x08049654

0800ac4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f6 faf0 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff ffea 	bl	800ac4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d306      	bcc.n	800ac8e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800ac80:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800ac82:	4a0a      	ldr	r2, [pc, #40]	; (800acac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800ac84:	f240 1101 	movw	r1, #257	; 0x101
 800ac88:	4809      	ldr	r0, [pc, #36]	; (800acb0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800ac8a:	f00e fb3d 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fad0 	bl	800b234 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800ac94:	4603      	mov	r3, r0
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fab7 	bl	800b20c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800ac9e:	4603      	mov	r3, r0
  }
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	08049580 	.word	0x08049580
 800acac:	08049c9c 	.word	0x08049c9c
 800acb0:	08049654 	.word	0x08049654

0800acb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7f6 fabc 	bl	800123e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800acc6:	4603      	mov	r3, r0
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff ffea 	bl	800acb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800ace0:	4602      	mov	r2, r0
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d306      	bcc.n	800acf6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800ace8:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800acea:	4a0a      	ldr	r2, [pc, #40]	; (800ad14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800acec:	f240 1101 	movw	r1, #257	; 0x101
 800acf0:	4809      	ldr	r0, [pc, #36]	; (800ad18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800acf2:	f00e fb09 	bl	8019308 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fabc 	bl	800b274 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800acfc:	4603      	mov	r3, r0
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 faa3 	bl	800b24c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800ad06:	4603      	mov	r3, r0
  }
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	08049580 	.word	0x08049580
 800ad14:	08049d94 	.word	0x08049d94
 800ad18:	08049654 	.word	0x08049654

0800ad1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff ff69 	bl	800ac00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7ff ff8f 	bl	800ac68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f985 	bl	800b06c <_ZNK11flatbuffers6VectorIhE4DataEv>
 800ad62:	4603      	mov	r3, r0
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800ad80:	f00e faba 	bl	80192f8 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800ad8a:	f00e fab5 	bl	80192f8 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	60f8      	str	r0, [r7, #12]
 800ada6:	60b9      	str	r1, [r7, #8]
 800ada8:	607a      	str	r2, [r7, #4]
 800adaa:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800adb2:	f00e faa1 	bl	80192f8 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800adbc:	f00e fa9c 	bl	80192f8 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff fedb 	bl	800ab98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800ade2:	4603      	mov	r3, r0
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800adf8:	887b      	ldrh	r3, [r7, #2]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7fa f840 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ae02:	4603      	mov	r3, r0
 800ae04:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	89fb      	ldrh	r3, [r7, #14]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ae0e:	89fb      	ldrh	r3, [r7, #14]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d006      	beq.n	800ae22 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800ae14:	68b8      	ldr	r0, [r7, #8]
 800ae16:	f7fa feff 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	4413      	add	r3, r2
                        : nullptr;
 800ae20:	e000      	b.n	800ae24 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ae22:	2300      	movs	r3, #0
  }
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ae38:	887b      	ldrh	r3, [r7, #2]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fa f820 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ae42:	4603      	mov	r3, r0
 800ae44:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	89fb      	ldrh	r3, [r7, #14]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ae4e:	89fb      	ldrh	r3, [r7, #14]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d006      	beq.n	800ae62 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800ae54:	68b8      	ldr	r0, [r7, #8]
 800ae56:	f7fa fedf 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	4413      	add	r3, r2
                        : nullptr;
 800ae60:	e000      	b.n	800ae64 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ae62:	2300      	movs	r3, #0
  }
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800ae78:	887b      	ldrh	r3, [r7, #2]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7fa f800 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800ae82:	4603      	mov	r3, r0
 800ae84:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	89fb      	ldrh	r3, [r7, #14]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ae8e:	89fb      	ldrh	r3, [r7, #14]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d006      	beq.n	800aea2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800ae94:	68b8      	ldr	r0, [r7, #8]
 800ae96:	f7fa febf 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4413      	add	r3, r2
                        : nullptr;
 800aea0:	e000      	b.n	800aea4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aea2:	2300      	movs	r3, #0
  }
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aeb8:	887b      	ldrh	r3, [r7, #2]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7f9 ffe0 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aec2:	4603      	mov	r3, r0
 800aec4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	89fb      	ldrh	r3, [r7, #14]
 800aeca:	4413      	add	r3, r2
 800aecc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aece:	89fb      	ldrh	r3, [r7, #14]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d006      	beq.n	800aee2 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800aed4:	68b8      	ldr	r0, [r7, #8]
 800aed6:	f7fa fe9f 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800aeda:	4602      	mov	r2, r0
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	4413      	add	r3, r2
                        : nullptr;
 800aee0:	e000      	b.n	800aee4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aee2:	2300      	movs	r3, #0
  }
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aef8:	887b      	ldrh	r3, [r7, #2]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7f9 ffc0 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800af02:	4603      	mov	r3, r0
 800af04:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	89fb      	ldrh	r3, [r7, #14]
 800af0a:	4413      	add	r3, r2
 800af0c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800af0e:	89fb      	ldrh	r3, [r7, #14]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d006      	beq.n	800af22 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800af14:	68b8      	ldr	r0, [r7, #8]
 800af16:	f7fa fe7f 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800af1a:	4602      	mov	r2, r0
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	4413      	add	r3, r2
                        : nullptr;
 800af20:	e000      	b.n	800af24 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800af22:	2300      	movs	r3, #0
  }
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800af38:	887b      	ldrh	r3, [r7, #2]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7f9 ffa0 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800af42:	4603      	mov	r3, r0
 800af44:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	89fb      	ldrh	r3, [r7, #14]
 800af4a:	4413      	add	r3, r2
 800af4c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800af4e:	89fb      	ldrh	r3, [r7, #14]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d006      	beq.n	800af62 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800af54:	68b8      	ldr	r0, [r7, #8]
 800af56:	f7fa fe5f 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800af5a:	4602      	mov	r2, r0
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	4413      	add	r3, r2
                        : nullptr;
 800af60:	e000      	b.n	800af64 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800af62:	2300      	movs	r3, #0
  }
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800af78:	887b      	ldrh	r3, [r7, #2]
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7f9 ff80 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800af82:	4603      	mov	r3, r0
 800af84:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	89fb      	ldrh	r3, [r7, #14]
 800af8a:	4413      	add	r3, r2
 800af8c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800af8e:	89fb      	ldrh	r3, [r7, #14]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d006      	beq.n	800afa2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800af94:	68b8      	ldr	r0, [r7, #8]
 800af96:	f7fa fe3f 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800af9a:	4602      	mov	r2, r0
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	4413      	add	r3, r2
                        : nullptr;
 800afa0:	e000      	b.n	800afa4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800afa2:	2300      	movs	r3, #0
  }
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800afb8:	887b      	ldrh	r3, [r7, #2]
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7f9 ff60 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800afc2:	4603      	mov	r3, r0
 800afc4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	89fb      	ldrh	r3, [r7, #14]
 800afca:	4413      	add	r3, r2
 800afcc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800afce:	89fb      	ldrh	r3, [r7, #14]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d006      	beq.n	800afe2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800afd4:	68b8      	ldr	r0, [r7, #8]
 800afd6:	f7fa fe1f 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800afda:	4602      	mov	r2, r0
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	4413      	add	r3, r2
                        : nullptr;
 800afe0:	e000      	b.n	800afe4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800afe2:	2300      	movs	r3, #0
  }
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aff8:	887b      	ldrh	r3, [r7, #2]
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7f9 ff40 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800b002:	4603      	mov	r3, r0
 800b004:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	89fb      	ldrh	r3, [r7, #14]
 800b00a:	4413      	add	r3, r2
 800b00c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800b00e:	89fb      	ldrh	r3, [r7, #14]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d006      	beq.n	800b022 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800b014:	68b8      	ldr	r0, [r7, #8]
 800b016:	f7fa fdff 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b01a:	4602      	mov	r2, r0
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	4413      	add	r3, r2
                        : nullptr;
 800b020:	e000      	b.n	800b024 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800b022:	2300      	movs	r3, #0
  }
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800b038:	887b      	ldrh	r3, [r7, #2]
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7f9 ff20 	bl	8004e82 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800b042:	4603      	mov	r3, r0
 800b044:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	89fb      	ldrh	r3, [r7, #14]
 800b04a:	4413      	add	r3, r2
 800b04c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800b04e:	89fb      	ldrh	r3, [r7, #14]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d006      	beq.n	800b062 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800b054:	68b8      	ldr	r0, [r7, #8]
 800b056:	f7fa fddf 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b05a:	4602      	mov	r2, r0
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4413      	add	r3, r2
                        : nullptr;
 800b060:	e000      	b.n	800b064 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800b062:	2300      	movs	r3, #0
  }
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
  }
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	4413      	add	r3, r2
 800b096:	edd3 7a00 	vldr	s15, [r3]
 800b09a:	eeb0 0a67 	vmov.f32	s0, s15
 800b09e:	f7fb ff38 	bl	8006f12 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800b0a2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3304      	adds	r3, #4
  }
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	4413      	add	r3, r2
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	4610      	mov	r0, r2
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	f000 f8d3 	bl	800b28c <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
  }
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3304      	adds	r3, #4
  }
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	4413      	add	r3, r2
 800b11e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7fa fd79 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b126:	4602      	mov	r2, r0
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4413      	add	r3, r2
  }
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3304      	adds	r3, #4
  }
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7fa fd59 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b166:	4602      	mov	r2, r0
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4413      	add	r3, r2
  }
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3304      	adds	r3, #4
  }
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	4413      	add	r3, r2
 800b19e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7fa fd39 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4413      	add	r3, r2
  }
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3304      	adds	r3, #4
  }
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	4413      	add	r3, r2
 800b1de:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fa fd19 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4413      	add	r3, r2
  }
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3304      	adds	r3, #4
  }
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7fa fcf9 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b226:	4602      	mov	r2, r0
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4413      	add	r3, r2
  }
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3304      	adds	r3, #4
  }
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	4413      	add	r3, r2
 800b25e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7fa fcd9 	bl	8005c18 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800b266:	4602      	mov	r2, r0
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4413      	add	r3, r2
  }
 800b26c:	4618      	mov	r0, r3
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
  }
 800b280:	4618      	mov	r0, r3
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800b296:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800b29a:	4610      	mov	r0, r2
 800b29c:	4619      	mov	r1, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	4a05      	ldr	r2, [pc, #20]	; (800b2c8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fd ff8f 	bl	80091dc <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	08049e98 	.word	0x08049e98

0800b2cc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7ff ffe7 	bl	800b2a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800b2da:	2108      	movs	r1, #8
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f00d fd1f 	bl	8018d20 <_ZdlPvj>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b0c4      	sub	sp, #272	; 0x110
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2fa:	6018      	str	r0, [r3, #0]
 800b2fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b304:	6019      	str	r1, [r3, #0]
 800b306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b30a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b30e:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800b310:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b314:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b318:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800b31c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800b320:	f107 0010 	add.w	r0, r7, #16
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6812      	ldr	r2, [r2, #0]
 800b328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b32c:	f000 fe30 	bl	800bf90 <MicroVsnprintf>
  DebugLog(log_buffer);
 800b330:	f107 0310 	add.w	r3, r7, #16
 800b334:	4618      	mov	r0, r3
 800b336:	f7f5 fe3b 	bl	8000fb0 <DebugLog>
  DebugLog("\r\n");
 800b33a:	4804      	ldr	r0, [pc, #16]	; (800b34c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x60>)
 800b33c:	f7f5 fe38 	bl	8000fb0 <DebugLog>
#endif
  return 0;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	08049ed4 	.word	0x08049ed4

0800b350 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 800b350:	b590      	push	{r4, r7, lr}
 800b352:	b089      	sub	sp, #36	; 0x24
 800b354:	af04      	add	r7, sp, #16
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3308      	adds	r3, #8
 800b362:	681c      	ldr	r4, [r3, #0]
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	f04f 0300 	mov.w	r3, #0
 800b36c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b370:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b374:	e9cd 2300 	strd	r2, r3, [sp]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	68b9      	ldr	r1, [r7, #8]
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	47a0      	blx	r4
 800b380:	4603      	mov	r3, r0
  }
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	bd90      	pop	{r4, r7, pc}

0800b38a <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b086      	sub	sp, #24
 800b38e:	af02      	add	r7, sp, #8
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	607a      	str	r2, [r7, #4]
 800b396:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	605a      	str	r2, [r3, #4]
    if (profiler) {
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00c      	beq.n	800b3c4 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6818      	ldr	r0, [r3, #0]
 800b3ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3b2:	e9cd 2300 	strd	r2, r3, [sp]
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	f7ff ffc9 	bl	800b350 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	605a      	str	r2, [r3, #4]
    }
  }
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3310      	adds	r3, #16
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	6852      	ldr	r2, [r2, #4]
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4798      	blx	r3
    }
  }
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 800b3fe:	b5b0      	push	{r4, r5, r7, lr}
 800b400:	b086      	sub	sp, #24
 800b402:	af02      	add	r7, sp, #8
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	607a      	str	r2, [r7, #4]
 800b40a:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2200      	movs	r2, #0
 800b412:	461c      	mov	r4, r3
 800b414:	4615      	mov	r5, r2
 800b416:	e9cd 4500 	strd	r4, r5, [sp]
 800b41a:	2302      	movs	r3, #2
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	68b9      	ldr	r1, [r7, #8]
 800b420:	f7ff ffb3 	bl	800b38a <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bdb0      	pop	{r4, r5, r7, pc}

0800b42e <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>:
// A helper class to encapsulate the implementation of APIs in Context.
// context->impl_ points to an instance of this class.
// Check tensorflow/lite/c/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
 800b42e:	b480      	push	{r7}
 800b430:	b085      	sub	sp, #20
 800b432:	af00      	add	r7, sp, #0
 800b434:	60f8      	str	r0, [r7, #12]
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	607a      	str	r2, [r7, #4]
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	605a      	str	r2, [r3, #4]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b44c:	609a      	str	r2, [r3, #8]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>:
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	609a      	str	r2, [r3, #8]
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b484:	4618      	mov	r0, r3
 800b486:	f7fd fe1b 	bl	80090c0 <_ZNK6tflite8SubGraph6inputsEv>
 800b48a:	4603      	mov	r3, r0
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fd fd68 	bl	8008f62 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800b492:	4603      	mov	r3, r0
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fd fe09 	bl	80090c0 <_ZNK6tflite8SubGraph6inputsEv>
 800b4ae:	4603      	mov	r3, r0
  }
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fd fe09 	bl	80090dc <_ZNK6tflite8SubGraph7outputsEv>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fd fd48 	bl	8008f62 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fd fdf7 	bl	80090dc <_ZNK6tflite8SubGraph7outputsEv>
 800b4ee:	4603      	mov	r3, r0
  }
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	2b20      	cmp	r3, #32
 800b506:	d102      	bne.n	800b50e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	e007      	b.n	800b51e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	4618      	mov	r0, r3
 800b516:	f7fc fd29 	bl	8007f6c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800b51a:	4603      	mov	r3, r0
 800b51c:	bf00      	nop
  }
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	60f8      	str	r0, [r7, #12]
 800b52e:	60b9      	str	r1, [r7, #8]
 800b530:	607a      	str	r2, [r7, #4]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fcd3 	bl	8009ee8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>
 800b542:	4603      	mov	r3, r0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	6818      	ldr	r0, [r3, #0]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	6899      	ldr	r1, [r3, #8]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	f7fe fce5 	bl	8009f38 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>
 800b56e:	4603      	mov	r3, r0
      helper->current_node_idx_, bytes, buffer_idx);
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68db      	ldr	r3, [r3, #12]
      ->allocator_->GetScratchBuffer(buffer_idx);
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fe fd30 	bl	8009ff0 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>
 800b590:	4603      	mov	r3, r0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 800b59a:	b40e      	push	{r1, r2, r3}
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 800b5aa:	f107 0320 	add.w	r3, r7, #32
 800b5ae:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6858      	ldr	r0, [r3, #4]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	69f9      	ldr	r1, [r7, #28]
 800b5c2:	4798      	blx	r3
  va_end(args);
}
 800b5c4:	bf00      	nop
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5ce:	b003      	add	sp, #12
 800b5d0:	4770      	bx	lr

0800b5d2 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	607a      	str	r2, [r7, #4]
 800b5de:	603b      	str	r3, [r7, #0]
      error_reporter_(error_reporter),
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
                                         error_reporter)),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
    : model_(model),
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	605a      	str	r2, [r3, #4]
      op_resolver_(op_resolver),
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	609a      	str	r2, [r3, #8]
      error_reporter_(error_reporter),
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	69fa      	ldr	r2, [r7, #28]
 800b5f6:	60da      	str	r2, [r3, #12]
      context_helper_(error_reporter_, &allocator_) {
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3310      	adds	r3, #16
 800b5fc:	2258      	movs	r2, #88	; 0x58
 800b5fe:	2100      	movs	r1, #0
 800b600:	4618      	mov	r0, r3
 800b602:	f00e f91d 	bl	8019840 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800b606:	69fa      	ldr	r2, [r7, #28]
 800b608:	69b9      	ldr	r1, [r7, #24]
 800b60a:	6838      	ldr	r0, [r7, #0]
 800b60c:	f7fe fb5a 	bl	8009cc4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800b610:	4602      	mov	r2, r0
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	669a      	str	r2, [r3, #104]	; 0x68
      tensors_allocated_(false),
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      initialization_status_(kTfLiteError),
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      context_helper_(error_reporter_, &allocator_) {
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	68d9      	ldr	r1, [r3, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b634:	461a      	mov	r2, r3
 800b636:	f7ff fefa 	bl	800b42e <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>
  Init(profiler);
 800b63a:	6a39      	ldr	r1, [r7, #32]
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 f84d 	bl	800b6dc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <_ZN6tflite16MicroInterpreterD1Ev>:
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d03a      	beq.n	800b6d2 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e025      	b.n	800b6ae <_ZN6tflite16MicroInterpreterD1Ev+0x62>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6819      	ldr	r1, [r3, #0]
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	4613      	mov	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4413      	add	r3, r2
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	440b      	add	r3, r1
 800b672:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6819      	ldr	r1, [r3, #0]
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	4613      	mov	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4413      	add	r3, r2
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 800b684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b686:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00c      	beq.n	800b6a8 <_ZN6tflite16MicroInterpreterD1Ev+0x5c>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d008      	beq.n	800b6a8 <_ZN6tflite16MicroInterpreterD1Ev+0x5c>
        registration->free(&context_, node->user_data);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	f102 0010 	add.w	r0, r2, #16
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	6912      	ldr	r2, [r2, #16]
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fd fd20 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff fa2a 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	bf34      	ite	cc
 800b6c8:	2301      	movcc	r3, #1
 800b6ca:	2300      	movcs	r3, #0
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1c7      	bne.n	800b662 <_ZN6tflite16MicroInterpreterD1Ev+0x16>
      }
    }
  }
}
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fd fd4b 	bl	8009186 <_ZNK6tflite5Model9subgraphsEv>
 800b6f0:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff fa76 	bl	800abe4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	bf14      	ite	ne
 800b6fe:	2301      	movne	r3, #1
 800b700:	2300      	moveq	r3, #0
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	4912      	ldr	r1, [pc, #72]	; (800b758 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x7c>)
 800b70e:	4618      	mov	r0, r3
 800b710:	f7f9 fb68 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 800b71c:	e018      	b.n	800b750 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x74>
  }
  subgraph_ = (*subgraphs)[0];
 800b71e:	2100      	movs	r1, #0
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f7ff fafb 	bl	800ad1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800b726:	4602      	mov	r2, r0
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4a08      	ldr	r2, [pc, #32]	; (800b75c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>)
 800b73a:	625a      	str	r2, [r3, #36]	; 0x24
  context_.recommended_num_threads = 1;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	0804a4d0 	.word	0x0804a4d0
 800b75c:	0800b59b 	.word	0x0800b59b

0800b760 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b08f      	sub	sp, #60	; 0x3c
 800b764:	af02      	add	r7, sp, #8
 800b766:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6859      	ldr	r1, [r3, #4]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f103 0210 	add.w	r2, r3, #16
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	689c      	ldr	r4, [r3, #8]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	4623      	mov	r3, r4
 800b780:	f7fe faf8 	bl	8009d74 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
 800b784:	4603      	mov	r3, r0
                                      &node_and_registrations_) != kTfLiteOk) {
 800b786:	2b00      	cmp	r3, #0
 800b788:	bf14      	ite	ne
 800b78a:	2301      	movne	r3, #1
 800b78c:	2300      	moveq	r3, #0
 800b78e:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	4973      	ldr	r1, [pc, #460]	; (800b968 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x208>)
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7f9 fb22 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e0d9      	b.n	800b960 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a6f      	ldr	r2, [pc, #444]	; (800b96c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20c>)
 800b7b0:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b7be:	2300      	movs	r3, #0
 800b7c0:	623b      	str	r3, [r7, #32]
 800b7c2:	e03b      	b.n	800b83c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xdc>
    context_helper_.SetNodeIndex(i);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	3374      	adds	r3, #116	; 0x74
 800b7c8:	6a3a      	ldr	r2, [r7, #32]
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fe45 	bl	800b45c <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6819      	ldr	r1, [r3, #0]
 800b7d6:	6a3a      	ldr	r2, [r7, #32]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	440b      	add	r3, r1
 800b7e2:	60fb      	str	r3, [r7, #12]
    auto* registration = node_and_registrations_[i].registration;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6819      	ldr	r1, [r3, #0]
 800b7e8:	6a3a      	ldr	r2, [r7, #32]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	00db      	lsls	r3, r3, #3
 800b7f2:	440b      	add	r3, r1
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	60bb      	str	r3, [r7, #8]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	d106      	bne.n	800b80e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xae>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	62bb      	str	r3, [r7, #40]	; 0x28
      init_data_size = node->custom_initial_data_size;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b80c:	e004      	b.n	800b818 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb8>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	62bb      	str	r3, [r7, #40]	; 0x28
      init_data_size = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (registration->init) {
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00a      	beq.n	800b836 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd6>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	f102 0010 	add.w	r0, r2, #16
 800b82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b82c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b82e:	4798      	blx	r3
 800b830:	4602      	mov	r2, r0
      node->user_data =
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b836:	6a3b      	ldr	r3, [r7, #32]
 800b838:	3301      	adds	r3, #1
 800b83a:	623b      	str	r3, [r7, #32]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b840:	4618      	mov	r0, r3
 800b842:	f7fd fc59 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800b846:	4603      	mov	r3, r0
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff f963 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b84e:	4602      	mov	r2, r0
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	4293      	cmp	r3, r2
 800b854:	bf34      	ite	cc
 800b856:	2301      	movcc	r3, #1
 800b858:	2300      	movcs	r3, #0
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1b1      	bne.n	800b7c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x64>
    }
  }
  context_helper_.SetNodeIndex(-1);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3374      	adds	r3, #116	; 0x74
 800b864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff fdf7 	bl	800b45c <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a3f      	ldr	r2, [pc, #252]	; (800b970 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x210>)
 800b872:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b874:	2300      	movs	r3, #0
 800b876:	627b      	str	r3, [r7, #36]	; 0x24
 800b878:	e03b      	b.n	800b8f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x192>
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	3374      	adds	r3, #116	; 0x74
 800b87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b880:	4611      	mov	r1, r2
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff fdea 	bl	800b45c <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6819      	ldr	r1, [r3, #0]
 800b88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	440b      	add	r3, r1
 800b898:	61bb      	str	r3, [r7, #24]
    auto* registration = node_and_registrations_[i].registration;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6819      	ldr	r1, [r3, #0]
 800b89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	00db      	lsls	r3, r3, #3
 800b8a8:	440b      	add	r3, r1
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	617b      	str	r3, [r7, #20]
    if (registration->prepare) {
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01a      	beq.n	800b8ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	3210      	adds	r2, #16
 800b8be:	69b9      	ldr	r1, [r7, #24]
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	74fb      	strb	r3, [r7, #19]
      if (prepare_status != kTfLiteOk) {
 800b8c8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00e      	beq.n	800b8ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>
        TF_LITE_REPORT_ERROR(
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68dc      	ldr	r4, [r3, #12]
 800b8d2:	6978      	ldr	r0, [r7, #20]
 800b8d4:	f7ff fe10 	bl	800b4f8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	7cfb      	ldrb	r3, [r7, #19]
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	4924      	ldr	r1, [pc, #144]	; (800b974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x214>)
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7f9 fa7e 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e039      	b.n	800b960 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fd fbfe 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7ff f908 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800b904:	4602      	mov	r2, r0
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	4293      	cmp	r3, r2
 800b90a:	bf34      	ite	cc
 800b90c:	2301      	movcc	r3, #1
 800b90e:	2300      	movcs	r3, #0
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1b1      	bne.n	800b87a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
      }
    }
  }
  context_helper_.SetNodeIndex(-1);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	3374      	adds	r3, #116	; 0x74
 800b91a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fd9c 	bl	800b45c <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a11      	ldr	r2, [pc, #68]	; (800b978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>)
 800b934:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6859      	ldr	r1, [r3, #4]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3310      	adds	r3, #16
 800b942:	461a      	mov	r2, r3
 800b944:	f7fe fa88 	bl	8009e58 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
 800b948:	4603      	mov	r3, r0
 800b94a:	77fb      	strb	r3, [r7, #31]
 800b94c:	7ffb      	ldrb	r3, [r7, #31]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 800b952:	7ffb      	ldrb	r3, [r7, #31]
 800b954:	e004      	b.n	800b960 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  return kTfLiteOk;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3734      	adds	r7, #52	; 0x34
 800b964:	46bd      	mov	sp, r7
 800b966:	bd90      	pop	{r4, r7, pc}
 800b968:	0804a4fc 	.word	0x0804a4fc
 800b96c:	0800b527 	.word	0x0800b527
 800b970:	0800b54d 	.word	0x0800b54d
 800b974:	0804a520 	.word	0x0804a520
 800b978:	0800b579 	.word	0x0800b579

0800b97c <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff fd21 	bl	800b3ce <_ZN6tflite13ScopedProfileD1Ev>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800b998:	b5b0      	push	{r4, r5, r7, lr}
 800b99a:	b08c      	sub	sp, #48	; 0x30
 800b99c:	af02      	add	r7, sp, #8
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	2400      	movs	r4, #0
  if (initialization_status_ != kTfLiteOk) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <_ZN6tflite16MicroInterpreter6InvokeEv+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	4943      	ldr	r1, [pc, #268]	; (800bac0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>)
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7f9 fa16 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800b9b8:	2401      	movs	r4, #1
 800b9ba:	e07b      	b.n	800bab4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b9c2:	f083 0301 	eor.w	r3, r3, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00c      	beq.n	800b9e6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7ff fec7 	bl	800b760 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
 800b9e0:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 800b9e4:	e066      	b.n	800bab4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ea:	e050      	b.n	800ba8e <_ZN6tflite16MicroInterpreter6InvokeEv+0xf6>
    auto* node = &(node_and_registrations_[i].node);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6819      	ldr	r1, [r3, #0]
 800b9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	440b      	add	r3, r1
 800b9fc:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6819      	ldr	r1, [r3, #0]
 800ba02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	440b      	add	r3, r1
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	61bb      	str	r3, [r7, #24]

    if (registration->invoke) {
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d036      	beq.n	800ba88 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf0>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by ScopedOperatorProfile.
      tflite::Profiler* profiler =
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba1e:	617b      	str	r3, [r7, #20]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 800ba20:	69b8      	ldr	r0, [r7, #24]
 800ba22:	f7ff fd69 	bl	800b4f8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ba26:	4602      	mov	r2, r0
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2a:	f107 0008 	add.w	r0, r7, #8
 800ba2e:	6979      	ldr	r1, [r7, #20]
 800ba30:	f7ff fce5 	bl	800b3fe <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	3210      	adds	r2, #16
 800ba3c:	69f9      	ldr	r1, [r7, #28]
 800ba3e:	4610      	mov	r0, r2
 800ba40:	4798      	blx	r3
 800ba42:	4603      	mov	r3, r0
 800ba44:	74fb      	strb	r3, [r7, #19]

      if (invoke_status == kTfLiteError) {
 800ba46:	7cfb      	ldrb	r3, [r7, #19]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d10f      	bne.n	800ba6c <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>
        TF_LITE_REPORT_ERROR(
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68dc      	ldr	r4, [r3, #12]
 800ba50:	69b8      	ldr	r0, [r7, #24]
 800ba52:	f7ff fd51 	bl	800b4f8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ba56:	4602      	mov	r2, r0
 800ba58:	7cfb      	ldrb	r3, [r7, #19]
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	4919      	ldr	r1, [pc, #100]	; (800bac4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x12c>)
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7f9 f9bf 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 800ba66:	2401      	movs	r4, #1
 800ba68:	2500      	movs	r5, #0
 800ba6a:	e006      	b.n	800ba7a <_ZN6tflite16MicroInterpreter6InvokeEv+0xe2>
      } else if (invoke_status != kTfLiteOk) {
 800ba6c:	7cfb      	ldrb	r3, [r7, #19]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d002      	beq.n	800ba78 <_ZN6tflite16MicroInterpreter6InvokeEv+0xe0>
        return invoke_status;
 800ba72:	7cfc      	ldrb	r4, [r7, #19]
 800ba74:	2500      	movs	r5, #0
 800ba76:	e000      	b.n	800ba7a <_ZN6tflite16MicroInterpreter6InvokeEv+0xe2>
      }
    }
 800ba78:	2501      	movs	r5, #1
 800ba7a:	f107 0308 	add.w	r3, r7, #8
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff ff7c 	bl	800b97c <_ZN6tflite21ScopedOperatorProfileD1Ev>
 800ba84:	2d01      	cmp	r5, #1
 800ba86:	d115      	bne.n	800bab4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fd fb30 	bl	80090f8 <_ZNK6tflite8SubGraph9operatorsEv>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff f83a 	bl	800ab14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800baa0:	4602      	mov	r2, r0
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	4293      	cmp	r3, r2
 800baa6:	bf34      	ite	cc
 800baa8:	2301      	movcc	r3, #1
 800baaa:	2300      	movcs	r3, #0
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d19c      	bne.n	800b9ec <_ZN6tflite16MicroInterpreter6InvokeEv+0x54>
  }
  return kTfLiteOk;
 800bab2:	2400      	movs	r4, #0
}
 800bab4:	4623      	mov	r3, r4
 800bab6:	4618      	mov	r0, r3
 800bab8:	3728      	adds	r7, #40	; 0x28
 800baba:	46bd      	mov	sp, r7
 800babc:	bdb0      	pop	{r4, r5, r7, pc}
 800babe:	bf00      	nop
 800bac0:	0804a558 	.word	0x0804a558
 800bac4:	0804a588 	.word	0x0804a588

0800bac8 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800bac8:	b590      	push	{r4, r7, lr}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff fcd0 	bl	800b478 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800bad8:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d308      	bcc.n	800baf4 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68d8      	ldr	r0, [r3, #12]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	490b      	ldr	r1, [pc, #44]	; (800bb18 <_ZN6tflite16MicroInterpreter5inputEj+0x50>)
 800baec:	f7f9 f97a 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800baf0:	2300      	movs	r3, #0
 800baf2:	e00c      	b.n	800bb0e <_ZN6tflite16MicroInterpreter5inputEj+0x46>
  }
  return &(context_.tensors[inputs().Get(index)]);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	699c      	ldr	r4, [r3, #24]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7ff fccf 	bl	800b49c <_ZNK6tflite16MicroInterpreter6inputsEv>
 800bafe:	4603      	mov	r3, r0
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fa f952 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	019b      	lsls	r3, r3, #6
 800bb0c:	4423      	add	r3, r4
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd90      	pop	{r4, r7, pc}
 800bb16:	bf00      	nop
 800bb18:	0804a5bc 	.word	0x0804a5bc

0800bb1c <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800bb1c:	b590      	push	{r4, r7, lr}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff fcc6 	bl	800b4b8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800bb2c:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d308      	bcc.n	800bb48 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68d8      	ldr	r0, [r3, #12]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	683a      	ldr	r2, [r7, #0]
 800bb3e:	490b      	ldr	r1, [pc, #44]	; (800bb6c <_ZN6tflite16MicroInterpreter6outputEj+0x50>)
 800bb40:	f7f9 f950 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800bb44:	2300      	movs	r3, #0
 800bb46:	e00c      	b.n	800bb62 <_ZN6tflite16MicroInterpreter6outputEj+0x46>
  }
  return &(context_.tensors[outputs().Get(index)]);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	699c      	ldr	r4, [r3, #24]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff fcc5 	bl	800b4dc <_ZNK6tflite16MicroInterpreter7outputsEv>
 800bb52:	4603      	mov	r3, r0
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fa f928 	bl	8005dac <_ZNK11flatbuffers6VectorIlE3GetEm>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	019b      	lsls	r3, r3, #6
 800bb60:	4423      	add	r3, r4
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd90      	pop	{r4, r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	0804a5e8 	.word	0x0804a5e8

0800bb70 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800bb84:	e00d      	b.n	800bba2 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x32>
    char tmp = *p1;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	617a      	str	r2, [r7, #20]
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	7812      	ldrb	r2, [r2, #0]
 800bb96:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	1e5a      	subs	r2, r3, #1
 800bb9c:	613a      	str	r2, [r7, #16]
 800bb9e:	7bfa      	ldrb	r2, [r7, #15]
 800bba0:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d3ed      	bcc.n	800bb86 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x16>
  }
  return start;
 800bbaa:	687b      	ldr	r3, [r7, #4]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	371c      	adds	r7, #28
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
  char* current = main;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800bbc8:	e002      	b.n	800bbd0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x18>
    ++current;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1f8      	bne.n	800bbca <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x12>
  }
  char* current_end = main + (main_max_length - 1);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800bbe2:	e009      	b.n	800bbf8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x40>
    *current = *to_append;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	781a      	ldrb	r2, [r3, #0]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	701a      	strb	r2, [r3, #0]
    ++current;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	617b      	str	r3, [r7, #20]
    ++to_append;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d3ed      	bcc.n	800bbe4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2c>
  }
  *current = 0;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
  return current;
 800bc0e:	697b      	ldr	r3, [r7, #20]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	371c      	adds	r7, #28
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc34:	fb01 f202 	mul.w	r2, r1, r2
 800bc38:	1a9b      	subs	r3, r3, r2
 800bc3a:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	2b09      	cmp	r3, #9
 800bc40:	dc04      	bgt.n	800bc4c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	3330      	adds	r3, #48	; 0x30
 800bc48:	77fb      	strb	r3, [r7, #31]
 800bc4a:	e003      	b.n	800bc54 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	3357      	adds	r3, #87	; 0x57
 800bc52:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	60ba      	str	r2, [r7, #8]
 800bc5a:	7ffa      	ldrb	r2, [r7, #31]
 800bc5c:	701a      	strb	r2, [r3, #0]
    i /= base;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc66:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1de      	bne.n	800bc2c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800bc74:	68b9      	ldr	r1, [r7, #8]
 800bc76:	69b8      	ldr	r0, [r7, #24]
 800bc78:	f7ff ff7a 	bl	800bb70 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3720      	adds	r7, #32
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	da07      	bge.n	800bcaa <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	1c5a      	adds	r2, r3, #1
 800bc9e:	603a      	str	r2, [r7, #0]
 800bca0:	222d      	movs	r2, #45	; 0x2d
 800bca2:	701a      	strb	r2, [r3, #0]
    u = -u;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	425b      	negs	r3, r3
 800bca8:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800bcaa:	220a      	movs	r2, #10
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff ffb4 	bl	800bc1c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800bcb4:	4603      	mov	r3, r0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b090      	sub	sp, #64	; 0x40
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800bcca:	f107 0310 	add.w	r3, r7, #16
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff ffd8 	bl	800bc86 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800bcd6:	f107 0310 	add.w	r3, r7, #16
 800bcda:	461a      	mov	r2, r3
 800bcdc:	68b9      	ldr	r1, [r7, #8]
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f7ff ff6a 	bl	800bbb8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bce4:	4603      	mov	r3, r0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3740      	adds	r7, #64	; 0x40
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b090      	sub	sp, #64	; 0x40
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60f8      	str	r0, [r7, #12]
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	607a      	str	r2, [r7, #4]
 800bcfa:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800bcfc:	f107 0310 	add.w	r3, r7, #16
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff ff89 	bl	800bc1c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800bd0a:	f107 0310 	add.w	r3, r7, #16
 800bd0e:	461a      	mov	r2, r3
 800bd10:	68b9      	ldr	r1, [r7, #8]
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f7ff ff50 	bl	800bbb8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bd18:	4603      	mov	r3, r0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3740      	adds	r7, #64	; 0x40
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
	...

0800bd24 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800bd24:	b590      	push	{r4, r7, lr}
 800bd26:	b09b      	sub	sp, #108	; 0x6c
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	ed87 0a01 	vstr	s0, [r7, #4]
 800bd2e:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	332f      	adds	r3, #47	; 0x2f
 800bd38:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800bd3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800bd40:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800bd44:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800bd46:	2317      	movs	r3, #23
 800bd48:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800bd4a:	237f      	movs	r3, #127	; 0x7f
 800bd4c:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800bd4e:	4b69      	ldr	r3, [pc, #420]	; (800bef4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d0>)
 800bd50:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 800bd52:	1d3b      	adds	r3, r7, #4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800bd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5a:	0ddb      	lsrs	r3, r3, #23
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800bd60:	637b      	str	r3, [r7, #52]	; 0x34
  const uint32_t fraction = (u & fraction_mask);
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd68:	633b      	str	r3, [r7, #48]	; 0x30
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	da05      	bge.n	800bd7c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 800bd70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd72:	222d      	movs	r2, #45	; 0x2d
 800bd74:	701a      	strb	r2, [r3, #0]
    current += 1;
 800bd76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd78:	3301      	adds	r3, #1
 800bd7a:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800bd7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd84:	2b80      	cmp	r3, #128	; 0x80
 800bd86:	d118      	bne.n	800bdba <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d10a      	bne.n	800bda4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 800bd8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	4a58      	ldr	r2, [pc, #352]	; (800bef8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800bd96:	4619      	mov	r1, r3
 800bd98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bd9a:	f7ff ff0d 	bl	800bbb8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bd9e:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800bda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bda2:	e0a2      	b.n	800beea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800bda4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bda6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	4a54      	ldr	r2, [pc, #336]	; (800befc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800bdac:	4619      	mov	r1, r3
 800bdae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bdb0:	f7ff ff02 	bl	800bbb8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bdb4:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800bdb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdb8:	e097      	b.n	800beea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800bdba:	230d      	movs	r3, #13
 800bdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800bdbe:	4b50      	ldr	r3, [pc, #320]	; (800bf00 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800bdc0:	f107 040c 	add.w	r4, r7, #12
 800bdc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdc6:	c407      	stmia	r4!, {r0, r1, r2}
 800bdc8:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800bdce:	2300      	movs	r3, #0
 800bdd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdd2:	e00e      	b.n	800bdf2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800bdd4:	f107 020c 	add.w	r2, r7, #12
 800bdd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdda:	4413      	add	r3, r2
 800bddc:	f993 3000 	ldrsb.w	r3, [r3]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	40d3      	lsrs	r3, r2
 800bde6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bde8:	4413      	add	r3, r2
 800bdea:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800bdec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdee:	3301      	adds	r3, #1
 800bdf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdf4:	2b0c      	cmp	r3, #12
 800bdf6:	dded      	ble.n	800bdd4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb0>
  }
  *current = '1';
 800bdf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdfa:	2231      	movs	r2, #49	; 0x31
 800bdfc:	701a      	strb	r2, [r3, #0]
  current += 1;
 800bdfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be00:	3301      	adds	r3, #1
 800be02:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800be04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be06:	222e      	movs	r2, #46	; 0x2e
 800be08:	701a      	strb	r2, [r3, #0]
  current += 1;
 800be0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be0c:	3301      	adds	r3, #1
 800be0e:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800be10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800be16:	2307      	movs	r3, #7
 800be18:	62bb      	str	r3, [r7, #40]	; 0x28

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800be1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	2b07      	cmp	r3, #7
 800be22:	dc01      	bgt.n	800be28 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>
    return current;
 800be24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be26:	e060      	b.n	800beea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800be28:	2301      	movs	r3, #1
 800be2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be2c:	e007      	b.n	800be3e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11a>
    *(current + i) = '0';
 800be2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be32:	4413      	add	r3, r2
 800be34:	2230      	movs	r2, #48	; 0x30
 800be36:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800be38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be3a:	3301      	adds	r3, #1
 800be3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be40:	2b06      	cmp	r3, #6
 800be42:	ddf4      	ble.n	800be2e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x10a>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800be44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800be48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be4c:	1ad1      	subs	r1, r2, r3
 800be4e:	230a      	movs	r3, #10
 800be50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be52:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800be54:	f7ff ff4b 	bl	800bcee <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800be58:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800be5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	623b      	str	r3, [r7, #32]
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800be62:	6a3b      	ldr	r3, [r7, #32]
 800be64:	f1c3 0307 	rsb	r3, r3, #7
 800be68:	61fb      	str	r3, [r7, #28]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800be6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be6c:	2230      	movs	r2, #48	; 0x30
 800be6e:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepent zeros.
  for (int i = 0; i < fraction_digits; i++) {
 800be70:	2300      	movs	r3, #0
 800be72:	657b      	str	r3, [r7, #84]	; 0x54
 800be74:	e00e      	b.n	800be94 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x170>
    current--;
 800be76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be78:	3b01      	subs	r3, #1
 800be7a:	667b      	str	r3, [r7, #100]	; 0x64
    *(current + leading_zeros) = *current;
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be80:	4413      	add	r3, r2
 800be82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be84:	7812      	ldrb	r2, [r2, #0]
 800be86:	701a      	strb	r2, [r3, #0]
    *current = '0';
 800be88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be8a:	2230      	movs	r2, #48	; 0x30
 800be8c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < fraction_digits; i++) {
 800be8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be90:	3301      	adds	r3, #1
 800be92:	657b      	str	r3, [r7, #84]	; 0x54
 800be94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	429a      	cmp	r2, r3
 800be9a:	dbec      	blt.n	800be76 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x152>
  }
  current += kMaxFractionalDigits;
 800be9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be9e:	3307      	adds	r3, #7
 800bea0:	667b      	str	r3, [r7, #100]	; 0x64

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800bea2:	e002      	b.n	800beaa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x186>
    current--;
 800bea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bea6:	3b01      	subs	r3, #1
 800bea8:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800beaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beac:	3b01      	subs	r3, #1
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b30      	cmp	r3, #48	; 0x30
 800beb2:	d104      	bne.n	800bebe <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19a>
 800beb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beb6:	3b01      	subs	r3, #1
 800beb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beba:	429a      	cmp	r2, r3
 800bebc:	d3f2      	bcc.n	800bea4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x180>
  }
  *current = 0;
 800bebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bec0:	2200      	movs	r2, #0
 800bec2:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800bec4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	4a0e      	ldr	r2, [pc, #56]	; (800bf04 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800becc:	4619      	mov	r1, r3
 800bece:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bed0:	f7ff fe72 	bl	800bbb8 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800bed4:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800bed6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bede:	4619      	mov	r1, r3
 800bee0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bee2:	f7ff feec 	bl	800bcbe <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800bee6:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800bee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800beea:	4618      	mov	r0, r3
 800beec:	376c      	adds	r7, #108	; 0x6c
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd90      	pop	{r4, r7, pc}
 800bef2:	bf00      	nop
 800bef4:	007fffff 	.word	0x007fffff
 800bef8:	0804a904 	.word	0x0804a904
 800befc:	0804a908 	.word	0x0804a908
 800bf00:	0804a910 	.word	0x0804a910
 800bf04:	0804a90c 	.word	0x0804a90c

0800bf08 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	6838      	ldr	r0, [r7, #0]
 800bf16:	f7ff feb6 	bl	800bc86 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	1ad3      	subs	r3, r2, r3
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800bf32:	220a      	movs	r2, #10
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	6838      	ldr	r0, [r7, #0]
 800bf38:	f7ff fe70 	bl	800bc1c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	1ad3      	subs	r3, r2, r3
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800bf54:	2210      	movs	r2, #16
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	6838      	ldr	r0, [r7, #0]
 800bf5a:	f7ff fe5f 	bl	800bc1c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	1ad3      	subs	r3, r2, r3
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	ed97 0a00 	vldr	s0, [r7]
 800bf7e:	f7ff fed1 	bl	800bd24 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800bf82:	4602      	mov	r2, r0
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	1ad3      	subs	r3, r2, r3
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b08b      	sub	sp, #44	; 0x2c
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
 800bf9c:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800bfac:	e12c      	b.n	800c208 <MicroVsnprintf+0x278>
    if (*current == '%') {
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	2b25      	cmp	r3, #37	; 0x25
 800bfb4:	f040 811d 	bne.w	800c1f2 <MicroVsnprintf+0x262>
      current++;
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	2b25      	cmp	r3, #37	; 0x25
 800bfc4:	f000 80e3 	beq.w	800c18e <MicroVsnprintf+0x1fe>
 800bfc8:	2b25      	cmp	r3, #37	; 0x25
 800bfca:	f2c0 811d 	blt.w	800c208 <MicroVsnprintf+0x278>
 800bfce:	2b78      	cmp	r3, #120	; 0x78
 800bfd0:	f300 811a 	bgt.w	800c208 <MicroVsnprintf+0x278>
 800bfd4:	2b64      	cmp	r3, #100	; 0x64
 800bfd6:	f2c0 8117 	blt.w	800c208 <MicroVsnprintf+0x278>
 800bfda:	3b64      	subs	r3, #100	; 0x64
 800bfdc:	2b14      	cmp	r3, #20
 800bfde:	f200 8113 	bhi.w	800c208 <MicroVsnprintf+0x278>
 800bfe2:	a201      	add	r2, pc, #4	; (adr r2, 800bfe8 <MicroVsnprintf+0x58>)
 800bfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe8:	0800c03d 	.word	0x0800c03d
 800bfec:	0800c209 	.word	0x0800c209
 800bff0:	0800c123 	.word	0x0800c123
 800bff4:	0800c209 	.word	0x0800c209
 800bff8:	0800c209 	.word	0x0800c209
 800bffc:	0800c209 	.word	0x0800c209
 800c000:	0800c209 	.word	0x0800c209
 800c004:	0800c209 	.word	0x0800c209
 800c008:	0800c209 	.word	0x0800c209
 800c00c:	0800c209 	.word	0x0800c209
 800c010:	0800c209 	.word	0x0800c209
 800c014:	0800c209 	.word	0x0800c209
 800c018:	0800c209 	.word	0x0800c209
 800c01c:	0800c209 	.word	0x0800c209
 800c020:	0800c209 	.word	0x0800c209
 800c024:	0800c1a7 	.word	0x0800c1a7
 800c028:	0800c209 	.word	0x0800c209
 800c02c:	0800c07f 	.word	0x0800c07f
 800c030:	0800c209 	.word	0x0800c209
 800c034:	0800c209 	.word	0x0800c209
 800c038:	0800c0c1 	.word	0x0800c0c1
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	2b0a      	cmp	r3, #10
 800c044:	dc09      	bgt.n	800c05a <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	627a      	str	r2, [r7, #36]	; 0x24
 800c04c:	461a      	mov	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	4413      	add	r3, r2
 800c052:	2200      	movs	r2, #0
 800c054:	701a      	strb	r2, [r3, #0]
            return output_index;
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	e0e8      	b.n	800c22c <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	18d0      	adds	r0, r2, r3
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	1d1a      	adds	r2, r3, #4
 800c064:	603a      	str	r2, [r7, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4619      	mov	r1, r3
 800c06a:	f7ff ff4d 	bl	800bf08 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800c06e:	4602      	mov	r2, r0
          output_index +=
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	4413      	add	r3, r2
 800c074:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	3301      	adds	r3, #1
 800c07a:	623b      	str	r3, [r7, #32]
          break;
 800c07c:	e0c4      	b.n	800c208 <MicroVsnprintf+0x278>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800c07e:	69ba      	ldr	r2, [r7, #24]
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	2b0a      	cmp	r3, #10
 800c086:	dc09      	bgt.n	800c09c <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	627a      	str	r2, [r7, #36]	; 0x24
 800c08e:	461a      	mov	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4413      	add	r3, r2
 800c094:	2200      	movs	r2, #0
 800c096:	701a      	strb	r2, [r3, #0]
            return output_index;
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	e0c7      	b.n	800c22c <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	18d0      	adds	r0, r2, r3
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	1d1a      	adds	r2, r3, #4
 800c0a6:	603a      	str	r2, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	f7ff ff3c 	bl	800bf28 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800c0b0:	4602      	mov	r2, r0
          output_index +=
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	4413      	add	r3, r2
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	623b      	str	r3, [r7, #32]
          break;
 800c0be:	e0a3      	b.n	800c208 <MicroVsnprintf+0x278>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	2b09      	cmp	r3, #9
 800c0c8:	dc09      	bgt.n	800c0de <MicroVsnprintf+0x14e>
            output[output_index++] = '\0';
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	627a      	str	r2, [r7, #36]	; 0x24
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	701a      	strb	r2, [r3, #0]
            return output_index;
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0dc:	e0a6      	b.n	800c22c <MicroVsnprintf+0x29c>
          }
          output[output_index++] = '0';
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	627a      	str	r2, [r7, #36]	; 0x24
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	2230      	movs	r2, #48	; 0x30
 800c0ec:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	627a      	str	r2, [r7, #36]	; 0x24
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	2278      	movs	r2, #120	; 0x78
 800c0fc:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	18d0      	adds	r0, r2, r3
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	1d1a      	adds	r2, r3, #4
 800c108:	603a      	str	r2, [r7, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4619      	mov	r1, r3
 800c10e:	f7ff ff1c 	bl	800bf4a <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800c112:	4602      	mov	r2, r0
          output_index +=
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	4413      	add	r3, r2
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800c11a:	6a3b      	ldr	r3, [r7, #32]
 800c11c:	3301      	adds	r3, #1
 800c11e:	623b      	str	r3, [r7, #32]
          break;
 800c120:	e072      	b.n	800c208 <MicroVsnprintf+0x278>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c130:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800c134:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	d509      	bpl.n	800c152 <MicroVsnprintf+0x1c2>
            output[output_index++] = '\0';
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	627a      	str	r2, [r7, #36]	; 0x24
 800c144:	461a      	mov	r2, r3
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	4413      	add	r3, r2
 800c14a:	2200      	movs	r2, #0
 800c14c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	e06c      	b.n	800c22c <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	18d4      	adds	r4, r2, r3
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	3307      	adds	r3, #7
 800c15c:	f023 0307 	bic.w	r3, r3, #7
 800c160:	f103 0208 	add.w	r2, r3, #8
 800c164:	603a      	str	r2, [r7, #0]
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	4610      	mov	r0, r2
 800c16c:	4619      	mov	r1, r3
 800c16e:	f7f4 fd0d 	bl	8000b8c <__aeabi_d2f>
 800c172:	4603      	mov	r3, r0
 800c174:	ee00 3a10 	vmov	s0, r3
 800c178:	4620      	mov	r0, r4
 800c17a:	f7ff fef7 	bl	800bf6c <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800c17e:	4602      	mov	r2, r0
          output_index +=
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	4413      	add	r3, r2
 800c184:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	3301      	adds	r3, #1
 800c18a:	623b      	str	r3, [r7, #32]
          break;
 800c18c:	e03c      	b.n	800c208 <MicroVsnprintf+0x278>
        case '%':
          output[output_index++] = *current++;
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	623a      	str	r2, [r7, #32]
 800c194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c196:	1c51      	adds	r1, r2, #1
 800c198:	6279      	str	r1, [r7, #36]	; 0x24
 800c19a:	4611      	mov	r1, r2
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	440a      	add	r2, r1
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	7013      	strb	r3, [r2, #0]
          break;
 800c1a4:	e030      	b.n	800c208 <MicroVsnprintf+0x278>
        case 's':
          char* string = va_arg(args, char*);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	1d1a      	adds	r2, r3, #4
 800c1aa:	603a      	str	r2, [r7, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800c1b4:	e00d      	b.n	800c1d2 <MicroVsnprintf+0x242>
                 string[string_idx] != '\0') {
            output[output_index++] = string[string_idx++];
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	61fa      	str	r2, [r7, #28]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	441a      	add	r2, r3
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	1c59      	adds	r1, r3, #1
 800c1c6:	6279      	str	r1, [r7, #36]	; 0x24
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	440b      	add	r3, r1
 800c1ce:	7812      	ldrb	r2, [r2, #0]
 800c1d0:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800c1d2:	69fa      	ldr	r2, [r7, #28]
 800c1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d6:	4413      	add	r3, r2
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	dd05      	ble.n	800c1ea <MicroVsnprintf+0x25a>
                 string[string_idx] != '\0') {
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e5      	bne.n	800c1b6 <MicroVsnprintf+0x226>
          }
          current++;
 800c1ea:	6a3b      	ldr	r3, [r7, #32]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	623b      	str	r3, [r7, #32]
 800c1f0:	e00a      	b.n	800c208 <MicroVsnprintf+0x278>
      }
    } else {
      output[output_index++] = *current++;
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	623a      	str	r2, [r7, #32]
 800c1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fa:	1c51      	adds	r1, r2, #1
 800c1fc:	6279      	str	r1, [r7, #36]	; 0x24
 800c1fe:	4611      	mov	r1, r2
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	440a      	add	r2, r1
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d004      	beq.n	800c21a <MicroVsnprintf+0x28a>
 800c210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	429a      	cmp	r2, r3
 800c216:	f6ff aeca 	blt.w	800bfae <MicroVsnprintf+0x1e>
    }
  }
  output[output_index++] = '\0';
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	1c5a      	adds	r2, r3, #1
 800c21e:	627a      	str	r2, [r7, #36]	; 0x24
 800c220:	461a      	mov	r2, r3
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4413      	add	r3, r2
 800c226:	2200      	movs	r2, #0
 800c228:	701a      	strb	r2, [r3, #0]
  return output_index;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	372c      	adds	r7, #44	; 0x2c
 800c230:	46bd      	mov	sp, r7
 800c232:	bd90      	pop	{r4, r7, pc}

0800c234 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
 800c23e:	4a0f      	ldr	r2, [pc, #60]	; (800c27c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x48>)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	605a      	str	r2, [r3, #4]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	689a      	ldr	r2, [r3, #8]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	609a      	str	r2, [r3, #8]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	60da      	str	r2, [r3, #12]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	691a      	ldr	r2, [r3, #16]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	611a      	str	r2, [r3, #16]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	695a      	ldr	r2, [r3, #20]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	615a      	str	r2, [r3, #20]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	0804a98c 	.word	0x0804a98c

0800c280 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer_tail)
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail) {}
 800c28e:	4a0c      	ldr	r2, [pc, #48]	; (800c2c0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x40>)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	601a      	str	r2, [r3, #0]
    : error_reporter_(error_reporter),
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	605a      	str	r2, [r3, #4]
      buffer_head_(buffer_head),
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	609a      	str	r2, [r3, #8]
      buffer_tail_(buffer_tail),
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	60da      	str	r2, [r3, #12]
      head_(buffer_head),
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	611a      	str	r2, [r3, #16]
      tail_(buffer_tail) {}
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	615a      	str	r2, [r3, #20]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	0804a98c 	.word	0x0804a98c

0800c2c4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
 800c2d0:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f7ff ffcf 	bl	800c280 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b08d      	sub	sp, #52	; 0x34
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800c2fe:	f00c fffb 	bl	80192f8 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800c308:	f00c fff6 	bl	80192f8 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800c30c:	f107 0014 	add.w	r0, r7, #20
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	68f9      	ldr	r1, [r7, #12]
 800c316:	f7ff ffd5 	bl	800c2c4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800c31a:	f107 0314 	add.w	r3, r7, #20
 800c31e:	2204      	movs	r2, #4
 800c320:	2118      	movs	r1, #24
 800c322:	4618      	mov	r0, r3
 800c324:	f000 f868 	bl	800c3f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800c328:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	4619      	mov	r1, r3
 800c32e:	2018      	movs	r0, #24
 800c330:	f7f8 fd8b 	bl	8004e4a <_ZnwjPv>
 800c334:	4604      	mov	r4, r0
 800c336:	f107 0314 	add.w	r3, r7, #20
 800c33a:	4619      	mov	r1, r3
 800c33c:	4620      	mov	r0, r4
 800c33e:	f7ff ff79 	bl	800c234 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
}
 800c342:	f107 0314 	add.w	r3, r7, #20
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f806 	bl	800c358 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800c34c:	4623      	mov	r3, r4
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3734      	adds	r7, #52	; 0x34
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}
	...

0800c358 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	4a04      	ldr	r2, [pc, #16]	; (800c374 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	601a      	str	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	0804a98c 	.word	0x0804a98c

0800c378 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff ffe9 	bl	800c358 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800c386:	2118      	movs	r1, #24
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f00c fcc9 	bl	8018d20 <_ZdlPvj>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	6879      	ldr	r1, [r7, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fc fce8 	bl	8008d80 <_ZN6tflite14AlignPointerUpEPhj>
 800c3b0:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	695a      	ldr	r2, [r3, #20]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d20c      	bcs.n	800c3de <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x46>
    TF_LITE_REPORT_ERROR(
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6858      	ldr	r0, [r3, #4]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	4907      	ldr	r1, [pc, #28]	; (800c3f4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x5c>)
 800c3d6:	f7f8 fd05 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e005      	b.n	800c3ea <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x52>
  }
  head_ = aligned_result + size;
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	441a      	add	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	611a      	str	r2, [r3, #16]
  return aligned_result;
 800c3e8:	697b      	ldr	r3, [r7, #20]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	0804a940 	.word	0x0804a940

0800c3f8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	425b      	negs	r3, r3
 800c40c:	4413      	add	r3, r2
 800c40e:	6879      	ldr	r1, [r7, #4]
 800c410:	4618      	mov	r0, r3
 800c412:	f7fc fcce 	bl	8008db2 <_ZN6tflite16AlignPointerDownEPhj>
 800c416:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d212      	bcs.n	800c448 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
    const size_t missing_memory = head_ - aligned_result;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	691a      	ldr	r2, [r3, #16]
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6858      	ldr	r0, [r3, #4]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	1ad2      	subs	r2, r2, r3
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	4613      	mov	r3, r2
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	4906      	ldr	r1, [pc, #24]	; (800c458 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 800c440:	f7f8 fcd0 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
 800c444:	2300      	movs	r3, #0
 800c446:	e003      	b.n	800c450 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800c44e:	697b      	ldr	r3, [r7, #20]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	0804a940 	.word	0x0804a940

0800c45c <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	695b      	ldr	r3, [r3, #20]
 800c480:	4618      	mov	r0, r3
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  return tail_ - head_;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	695a      	ldr	r2, [r3, #20]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	1ad3      	subs	r3, r2, r3
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	370c      	adds	r7, #12
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                                    const TfLiteNode* node, int index) {
 800c4aa:	b480      	push	{r7}
 800c4ac:	b085      	sub	sp, #20
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	689a      	ldr	r2, [r3, #8]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	6819      	ldr	r1, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	440b      	add	r3, r1
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	019b      	lsls	r3, r3, #6
 800c4c8:	4413      	add	r3, r2
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                               int index) {
 800c4d6:	b480      	push	{r7}
 800c4d8:	b085      	sub	sp, #20
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	689a      	ldr	r2, [r3, #8]
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6859      	ldr	r1, [r3, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	440b      	add	r3, r1
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	019b      	lsls	r3, r3, #6
 800c4f4:	4413      	add	r3, r2
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800c514:	e000      	b.n	800c518 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	e000      	b.n	800c53a <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d002      	beq.n	800c55a <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor+0x14>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	e000      	b.n	800c55c <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor+0x16>
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	da01      	bge.n	800c57c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800c578:	f00c febe 	bl	80192f8 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	429a      	cmp	r2, r3
 800c584:	db01      	blt.n	800c58a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800c586:	f00c feb7 	bl	80192f8 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b05      	cmp	r3, #5
 800c590:	dd06      	ble.n	800c5a0 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	e004      	b.n	800c5aa <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	685b      	ldr	r3, [r3, #4]
  }
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b05      	cmp	r3, #5
 800c5c0:	dd02      	ble.n	800c5c8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	e001      	b.n	800c5cc <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3304      	adds	r3, #4
  }
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff ffe4 	bl	800c5b2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800c5ea:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	613b      	str	r3, [r7, #16]
 800c5f0:	e00b      	b.n	800c60a <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	fb02 f303 	mul.w	r3, r2, r3
 800c602:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	3301      	adds	r3, #1
 800c608:	613b      	str	r3, [r7, #16]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	429a      	cmp	r2, r3
 800c612:	dbee      	blt.n	800c5f2 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 800c614:	697b      	ldr	r3, [r7, #20]
  }
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 800c61e:	b590      	push	{r4, r7, lr}
 800c620:	b085      	sub	sp, #20
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7fc fb27 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c62e:	4604      	mov	r4, r0
 800c630:	6838      	ldr	r0, [r7, #0]
 800c632:	f7fc fb23 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c636:	4603      	mov	r3, r0
 800c638:	429c      	cmp	r4, r3
 800c63a:	d001      	beq.n	800c640 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 800c63c:	f00c fe5c 	bl	80192f8 <abort>
  const int dims_count = shape.DimensionsCount();
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7fc fb1b 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c646:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 800c648:	2300      	movs	r3, #0
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	e010      	b.n	800c670 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800c64e:	68f9      	ldr	r1, [r7, #12]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7ff ff89 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c656:	4604      	mov	r4, r0
 800c658:	68f9      	ldr	r1, [r7, #12]
 800c65a:	6838      	ldr	r0, [r7, #0]
 800c65c:	f7ff ff84 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c660:	4603      	mov	r3, r0
 800c662:	429c      	cmp	r4, r3
 800c664:	d001      	beq.n	800c66a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4c>
 800c666:	f00c fe47 	bl	80192f8 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3301      	adds	r3, #1
 800c66e:	60fb      	str	r3, [r7, #12]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	429a      	cmp	r2, r3
 800c676:	dbea      	blt.n	800c64e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x30>
  }
  return shape.FlatSize();
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ffad 	bl	800c5d8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800c67e:	4603      	mov	r3, r0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	bd90      	pop	{r4, r7, pc}

0800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d002      	beq.n	800c69c <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800c69a:	e000      	b.n	800c69e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	e000      	b.n	800c6c0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d002      	beq.n	800c6e0 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800c6de:	e000      	b.n	800c6e2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800c6ee:	b480      	push	{r7}
 800c6f0:	b083      	sub	sp, #12
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	e000      	b.n	800c704 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d002      	beq.n	800c724 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800c722:	e000      	b.n	800c726 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	370c      	adds	r7, #12
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr

0800c732 <_ZSt4ceilf>:
  { return __builtin_ceilf(__x); }
 800c732:	b580      	push	{r7, lr}
 800c734:	b082      	sub	sp, #8
 800c736:	af00      	add	r7, sp, #0
 800c738:	ed87 0a01 	vstr	s0, [r7, #4]
 800c73c:	ed97 0a01 	vldr	s0, [r7, #4]
 800c740:	f00c fca6 	bl	8019090 <ceilf>
 800c744:	eef0 7a40 	vmov.f32	s15, s0
 800c748:	eeb0 0a67 	vmov.f32	s0, s15
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800c752:	b480      	push	{r7}
 800c754:	b083      	sub	sp, #12
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4618      	mov	r0, r3
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800c786:	b480      	push	{r7}
 800c788:	af00      	add	r7, sp, #0
 800c78a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c78e:	4618      	mov	r0, r3
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800c798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c79c:	b092      	sub	sp, #72	; 0x48
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	61f8      	str	r0, [r7, #28]
 800c7a2:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800c7a4:	69fa      	ldr	r2, [r7, #28]
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d107      	bne.n	800c7bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800c7ac:	f7ff ffeb 	bl	800c786 <_ZNSt14numeric_limitsIlE3minEv>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d101      	bne.n	800c7bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e000      	b.n	800c7be <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	17da      	asrs	r2, r3, #31
 800c7c6:	60bb      	str	r3, [r7, #8]
 800c7c8:	60fa      	str	r2, [r7, #12]
 800c7ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	17da      	asrs	r2, r3, #31
 800c7d6:	603b      	str	r3, [r7, #0]
 800c7d8:	607a      	str	r2, [r7, #4]
 800c7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 800c7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e6:	fb03 f202 	mul.w	r2, r3, r2
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7ee:	fb01 f303 	mul.w	r3, r1, r3
 800c7f2:	4413      	add	r3, r2
 800c7f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f8:	fba1 4502 	umull	r4, r5, r1, r2
 800c7fc:	442b      	add	r3, r5
 800c7fe:	461d      	mov	r5, r3
 800c800:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800c804:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800c808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	db02      	blt.n	800c816 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 800c810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c814:	e000      	b.n	800c818 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 800c816:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 800c818:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	17da      	asrs	r2, r3, #31
 800c81e:	4698      	mov	r8, r3
 800c820:	4691      	mov	r9, r2
 800c822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c826:	eb18 0102 	adds.w	r1, r8, r2
 800c82a:	6139      	str	r1, [r7, #16]
 800c82c:	eb49 0303 	adc.w	r3, r9, r3
 800c830:	617b      	str	r3, [r7, #20]
 800c832:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c836:	2b00      	cmp	r3, #0
 800c838:	da07      	bge.n	800c84a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 800c83a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c83e:	eb12 0a01 	adds.w	sl, r2, r1
 800c842:	f143 0b00 	adc.w	fp, r3, #0
 800c846:	4652      	mov	r2, sl
 800c848:	465b      	mov	r3, fp
 800c84a:	f04f 0000 	mov.w	r0, #0
 800c84e:	f04f 0100 	mov.w	r1, #0
 800c852:	0fd0      	lsrs	r0, r2, #31
 800c854:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c858:	17d9      	asrs	r1, r3, #31
 800c85a:	4602      	mov	r2, r0
 800c85c:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800c85e:	4613      	mov	r3, r2
 800c860:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800c862:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c866:	2b00      	cmp	r3, #0
 800c868:	d003      	beq.n	800c872 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 800c86a:	f7fb fcec 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 800c86e:	4603      	mov	r3, r0
 800c870:	e000      	b.n	800c874 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 800c872:	6a3b      	ldr	r3, [r7, #32]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3748      	adds	r7, #72	; 0x48
 800c878:	46bd      	mov	sp, r7
 800c87a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c87e:	bf00      	nop
 800c880:	c0000001 	.word	0xc0000001

0800c884 <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32 val) {
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
    TFLITE_DCHECK_GE(i, 0);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2b00      	cmp	r3, #0
 800c894:	da01      	bge.n	800c89a <_ZN6tflite12RuntimeShape6SetDimEil+0x16>
 800c896:	f00c fd2f 	bl	80192f8 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	db01      	blt.n	800c8a8 <_ZN6tflite12RuntimeShape6SetDimEil+0x24>
 800c8a4:	f00c fd28 	bl	80192f8 <abort>
    if (size_ > kMaxSmallSize) {
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b05      	cmp	r3, #5
 800c8ae:	dd07      	ble.n	800c8c0 <_ZN6tflite12RuntimeShape6SetDimEil+0x3c>
      dims_pointer_[i] = val;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	601a      	str	r2, [r3, #0]
  }
 800c8be:	e005      	b.n	800c8cc <_ZN6tflite12RuntimeShape6SetDimEil+0x48>
      dims_[i] = val;
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	605a      	str	r2, [r3, #4]
  }
 800c8cc:	bf00      	nop
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32* DimsDataUpTo5D() const { return dims_; }
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3304      	adds	r3, #4
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>:
  inline static RuntimeShape ExtendedShape(int new_shape_size,
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
    return RuntimeShape(new_shape_size, shape, 1);
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f804 	bl	800c90c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  }
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 800c90c:	b5b0      	push	{r4, r5, r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
      : size_(0) {
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	601a      	str	r2, [r3, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7fc f9ab 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c926:	4602      	mov	r2, r0
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	4293      	cmp	r3, r2
 800c92c:	da01      	bge.n	800c932 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x26>
 800c92e:	f00c fce3 	bl	80192f8 <abort>
    Resize(new_shape_size);
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f7fc f9c0 	bl	8008cba <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7fc f99e 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c940:	4602      	mov	r2, r0
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	1a9b      	subs	r3, r3, r2
 800c946:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size_increase; ++i) {
 800c948:	2300      	movs	r3, #0
 800c94a:	617b      	str	r3, [r7, #20]
 800c94c:	e007      	b.n	800c95e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x52>
      SetDim(i, pad_value);
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	6979      	ldr	r1, [r7, #20]
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f7ff ff96 	bl	800c884 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	3301      	adds	r3, #1
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	429a      	cmp	r2, r3
 800c964:	dbf3      	blt.n	800c94e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x42>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f7fc f994 	bl	8008c94 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800c96c:	4602      	mov	r2, r0
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	18d4      	adds	r4, r2, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff fe1c 	bl	800c5b2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800c97a:	4605      	mov	r5, r0
                sizeof(int32) * shape.DimensionsCount());
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7fc f97d 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c982:	4603      	mov	r3, r0
 800c984:	009b      	lsls	r3, r3, #2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800c986:	461a      	mov	r2, r3
 800c988:	4629      	mov	r1, r5
 800c98a:	4620      	mov	r0, r4
 800c98c:	f00d f839 	bl	8019a02 <memcpy>
  }
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	4618      	mov	r0, r3
 800c994:	3718      	adds	r7, #24
 800c996:	46bd      	mov	sp, r7
 800c998:	bdb0      	pop	{r4, r5, r7, pc}

0800c99a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b086      	sub	sp, #24
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	607a      	str	r2, [r7, #4]
 800c9a6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f7fc f967 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	d001      	beq.n	800c9b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800c9b4:	f00c fca0 	bl	80192f8 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff ff8b 	bl	800c8d4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800c9be:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	db04      	blt.n	800c9d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	db01      	blt.n	800c9d4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800c9d0:	f00c fc92 	bl	80192f8 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	db05      	blt.n	800c9e6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	db01      	blt.n	800c9ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800c9e6:	f00c fc87 	bl	80192f8 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	db05      	blt.n	800c9fc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	db01      	blt.n	800ca00 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800c9fc:	f00c fc7c 	bl	80192f8 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	db05      	blt.n	800ca12 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	330c      	adds	r3, #12
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	6a3a      	ldr	r2, [r7, #32]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	db01      	blt.n	800ca16 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800ca12:	f00c fc71 	bl	80192f8 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	fb03 f202 	mul.w	r2, r3, r2
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4413      	add	r3, r2
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	3208      	adds	r2, #8
 800ca2a:	6812      	ldr	r2, [r2, #0]
 800ca2c:	fb03 f202 	mul.w	r2, r3, r2
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	4413      	add	r3, r2
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	320c      	adds	r2, #12
 800ca38:	6812      	ldr	r2, [r2, #0]
 800ca3a:	fb03 f202 	mul.w	r2, r3, r2
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	4413      	add	r3, r2
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>:

inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0,
                            const RuntimeShape& check_shape_1) {
 800ca4a:	b590      	push	{r4, r7, lr}
 800ca4c:	b087      	sub	sp, #28
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	60b9      	str	r1, [r7, #8]
 800ca54:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f7fc f910 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	68b8      	ldr	r0, [r7, #8]
 800ca60:	f7fc f90c 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ca64:	4603      	mov	r3, r0
 800ca66:	429c      	cmp	r4, r3
 800ca68:	d001      	beq.n	800ca6e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x24>
 800ca6a:	f00c fc45 	bl	80192f8 <abort>
  const int dims_count = shape.DimensionsCount();
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7fc f904 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ca74:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800ca76:	2300      	movs	r3, #0
 800ca78:	617b      	str	r3, [r7, #20]
 800ca7a:	e010      	b.n	800ca9e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x54>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800ca7c:	6979      	ldr	r1, [r7, #20]
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff fd72 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ca84:	4604      	mov	r4, r0
 800ca86:	6979      	ldr	r1, [r7, #20]
 800ca88:	68b8      	ldr	r0, [r7, #8]
 800ca8a:	f7ff fd6d 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	429c      	cmp	r4, r3
 800ca92:	d001      	beq.n	800ca98 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x4e>
 800ca94:	f00c fc30 	bl	80192f8 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	dbea      	blt.n	800ca7c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x32>
  }
  return MatchingFlatSize(shape, check_shape_1);
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f7ff fdb8 	bl	800c61e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800caae:	4603      	mov	r3, r0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	371c      	adds	r7, #28
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd90      	pop	{r4, r7, pc}

0800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7ff fe66 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800cacc:	4602      	mov	r2, r0
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	425b      	negs	r3, r3
 800cad2:	4619      	mov	r1, r3
 800cad4:	4610      	mov	r0, r2
 800cad6:	f000 f84f 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800cada:	4603      	mov	r3, r0
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
// DO NOT USE THIS FUNCTION FOR NEW FUNCTIONALITY BEYOND IMPLEMENTING
// BROADCASTING.
//
// Same as Offset(), except takes as NdArrayDesc<N> instead of Dims<N>.
inline int SubscriptToIndex(const NdArrayDesc<4>& desc, int i0, int i1, int i2,
                            int i3) {
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	db04      	blt.n	800cb02 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x1e>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	db01      	blt.n	800cb06 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x22>
 800cb02:	f00c fbf9 	bl	80192f8 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	db04      	blt.n	800cb16 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x32>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	db01      	blt.n	800cb1a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x36>
 800cb16:	f00c fbef 	bl	80192f8 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	db04      	blt.n	800cb2a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x46>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	db01      	blt.n	800cb2e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x4a>
 800cb2a:	f00c fbe5 	bl	80192f8 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	db04      	blt.n	800cb3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5a>
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	69ba      	ldr	r2, [r7, #24]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	db01      	blt.n	800cb42 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5e>
 800cb3e:	f00c fbdb 	bl	80192f8 <abort>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	fb03 f202 	mul.w	r2, r3, r2
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	6879      	ldr	r1, [r7, #4]
 800cb52:	fb01 f303 	mul.w	r3, r1, r3
 800cb56:	441a      	add	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	fb01 f303 	mul.w	r3, r1, r3
 800cb62:	441a      	add	r2, r3
         i3 * desc.strides[3];
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	69db      	ldr	r3, [r3, #28]
 800cb68:	69b9      	ldr	r1, [r7, #24]
 800cb6a:	fb01 f303 	mul.w	r3, r1, r3
 800cb6e:	4413      	add	r3, r2
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800cb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7a:	b089      	sub	sp, #36	; 0x24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800cb82:	6839      	ldr	r1, [r7, #0]
 800cb84:	2900      	cmp	r1, #0
 800cb86:	da06      	bge.n	800cb96 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800cb88:	4b31      	ldr	r3, [pc, #196]	; (800cc50 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800cb8a:	4a32      	ldr	r2, [pc, #200]	; (800cc54 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800cb8c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800cb90:	4831      	ldr	r0, [pc, #196]	; (800cc58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800cb92:	f00c fbb9 	bl	8019308 <__assert_func>
  assert(exponent <= 31);
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	291f      	cmp	r1, #31
 800cb9a:	dd06      	ble.n	800cbaa <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800cb9c:	4b2f      	ldr	r3, [pc, #188]	; (800cc5c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800cb9e:	4a2d      	ldr	r2, [pc, #180]	; (800cc54 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800cba0:	f240 1167 	movw	r1, #359	; 0x167
 800cba4:	482c      	ldr	r0, [pc, #176]	; (800cc58 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800cba6:	f00c fbaf 	bl	8019308 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800cbaa:	f04f 0001 	mov.w	r0, #1
 800cbae:	f04f 0100 	mov.w	r1, #0
 800cbb2:	683c      	ldr	r4, [r7, #0]
 800cbb4:	f1a4 0620 	sub.w	r6, r4, #32
 800cbb8:	f1c4 0520 	rsb	r5, r4, #32
 800cbbc:	fa01 f304 	lsl.w	r3, r1, r4
 800cbc0:	fa00 f606 	lsl.w	r6, r0, r6
 800cbc4:	4333      	orrs	r3, r6
 800cbc6:	fa20 f505 	lsr.w	r5, r0, r5
 800cbca:	432b      	orrs	r3, r5
 800cbcc:	fa00 f204 	lsl.w	r2, r0, r4
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 f8b5 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cbda:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800cbdc:	2000      	movs	r0, #0
 800cbde:	f000 f8b1 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cbe2:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f000 f8ad 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cbea:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800cbec:	69f9      	ldr	r1, [r7, #28]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f8b3 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800cbf4:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800cbf6:	2101      	movs	r1, #1
 800cbf8:	69f8      	ldr	r0, [r7, #28]
 800cbfa:	f000 f8bc 	bl	800cd76 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800cbfe:	4604      	mov	r4, r0
 800cc00:	69b9      	ldr	r1, [r7, #24]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f8c6 	bl	800cd94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	6979      	ldr	r1, [r7, #20]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f000 f8a4 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800cc12:	4603      	mov	r3, r0
 800cc14:	4619      	mov	r1, r3
 800cc16:	4620      	mov	r0, r4
 800cc18:	f000 f8d0 	bl	800cdbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800cc1c:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f8a8 	bl	800cd76 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800cc26:	4604      	mov	r4, r0
 800cc28:	68f9      	ldr	r1, [r7, #12]
 800cc2a:	6938      	ldr	r0, [r7, #16]
 800cc2c:	f000 f8d4 	bl	800cdd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800cc30:	4603      	mov	r3, r0
 800cc32:	6979      	ldr	r1, [r7, #20]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 f890 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 f8bc 	bl	800cdbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800cc44:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3724      	adds	r7, #36	; 0x24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	0804abd4 	.word	0x0804abd4
 800cc54:	0804abe4 	.word	0x0804abe4
 800cc58:	0804ac40 	.word	0x0804ac40
 800cc5c:	0804ace0 	.word	0x0804ace0

0800cc60 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    desc_stride *= input_shape.Dims(i);
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b094      	sub	sp, #80	; 0x50
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
 800cc6c:	603b      	str	r3, [r7, #0]
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x18>
 800cc74:	f00c fb40 	bl	80192f8 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d101      	bne.n	800cc82 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x22>
 800cc7e:	f00c fb3b 	bl	80192f8 <abort>

  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
 800cc82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	2104      	movs	r1, #4
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff fe2e 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
 800cc90:	f107 0314 	add.w	r3, r7, #20
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	2104      	movs	r1, #4
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7ff fe27 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Copy dims to desc, calculating strides.
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
 800cc9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 f8ab 	bl	800ce00 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
 800ccaa:	f107 0314 	add.w	r3, r7, #20
 800ccae:	6839      	ldr	r1, [r7, #0]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 f8a5 	bl	800ce00 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccba:	e033      	b.n	800cd24 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc4>
    const int extent0 = extended_input0_shape.Dims(i);
 800ccbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ccc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7ff fc50 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ccc8:	64b8      	str	r0, [r7, #72]	; 0x48
    const int extent1 = extended_input1_shape.Dims(i);
 800ccca:	f107 0314 	add.w	r3, r7, #20
 800ccce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff fc49 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ccd6:	6478      	str	r0, [r7, #68]	; 0x44
    if (extent0 != extent1) {
 800ccd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d01e      	beq.n	800cd1e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xbe>
      if (extent0 == 1) {
 800cce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d10b      	bne.n	800ccfe <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x9e>
        desc0_out->strides[i] = 0;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccea:	3204      	adds	r2, #4
 800ccec:	2100      	movs	r1, #0
 800ccee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc0_out->extents[i] = extent1;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ccfc:	e00f      	b.n	800cd1e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xbe>
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
 800ccfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d001      	beq.n	800cd08 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa8>
 800cd04:	f00c faf8 	bl	80192f8 <abort>
        desc1_out->strides[i] = 0;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd0c:	3204      	adds	r2, #4
 800cd0e:	2100      	movs	r1, #0
 800cd10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc1_out->extents[i] = extent0;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < N; ++i) {
 800cd1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd20:	3301      	adds	r3, #1
 800cd22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	ddc8      	ble.n	800ccbc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x5c>
      }
    }
  }
}
 800cd2a:	f107 0314 	add.w	r3, r7, #20
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fb ff8e 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800cd34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fb ff89 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800cd3e:	3750      	adds	r7, #80	; 0x50
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  return x;
 800cd4c:	687b      	ldr	r3, [r7, #4]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6039      	str	r1, [r7, #0]
  return a & b;
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	4013      	ands	r3, r2
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800cd76:	b480      	push	{r7}
 800cd78:	b083      	sub	sp, #12
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	fa42 f303 	asr.w	r3, r2, r3
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	bfb4      	ite	lt
 800cda6:	2301      	movlt	r3, #1
 800cda8:	2300      	movge	r3, #0
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 f854 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800cdb2:	4603      	mov	r3, r0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  return a + b;
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	4413      	add	r3, r2
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	bfcc      	ite	gt
 800cdea:	2301      	movgt	r3, #1
 800cdec:	2300      	movle	r3, #0
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 f832 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800cdf6:	4603      	mov	r3, r0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  int desc_stride = 1;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 800ce0e:	2303      	movs	r3, #3
 800ce10:	60bb      	str	r3, [r7, #8]
 800ce12:	e01a      	b.n	800ce4a <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x4a>
    desc_out->extents[i] = input_shape.Dims(i);
 800ce14:	68b9      	ldr	r1, [r7, #8]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff fba6 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ce1c:	4601      	mov	r1, r0
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_out->strides[i] = desc_stride;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	3204      	adds	r2, #4
 800ce2c:	68f9      	ldr	r1, [r7, #12]
 800ce2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_stride *= input_shape.Dims(i);
 800ce32:	68b9      	ldr	r1, [r7, #8]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f7ff fb97 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	fb02 f303 	mul.w	r3, r2, r3
 800ce42:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	60bb      	str	r3, [r7, #8]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	dae1      	bge.n	800ce14 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x14>
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b082      	sub	sp, #8
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d004      	beq.n	800ce72 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800ce68:	2000      	movs	r0, #0
 800ce6a:	f000 f807 	bl	800ce7c <_ZN8gemmlowp6BitNotIlEET_S1_>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	e000      	b.n	800ce74 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  return ~a;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	43db      	mvns	r3, r3
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 800ce94:	b590      	push	{r4, r7, lr}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff fb5f 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ceaa:	4604      	mov	r4, r0
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff fb5a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	429c      	cmp	r4, r3
 800ceb8:	d001      	beq.n	800cebe <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800ceba:	f00c fa1d 	bl	80192f8 <abort>
  return shape1.Dims(index1);
 800cebe:	68b9      	ldr	r1, [r7, #8]
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7ff fb51 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cec6:	4603      	mov	r3, r0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}

0800ced0 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>:
// when optimizng this routine further.
inline void ConcatenationWithScaling(const ConcatenationParams& params,
                                     const RuntimeShape* const* input_shapes,
                                     const uint8* const* input_data,
                                     const RuntimeShape& output_shape,
                                     uint8* output_data) {
 800ced0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ced4:	b0ac      	sub	sp, #176	; 0xb0
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6378      	str	r0, [r7, #52]	; 0x34
 800ceda:	6339      	str	r1, [r7, #48]	; 0x30
 800cedc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cede:	62bb      	str	r3, [r7, #40]	; 0x28
  int axis = params.axis;
 800cee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee2:	f993 3000 	ldrsb.w	r3, [r3]
 800cee6:	673b      	str	r3, [r7, #112]	; 0x70
  const int32* input_zeropoint = params.input_zeropoint;
 800cee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	66fb      	str	r3, [r7, #108]	; 0x6c
  const float* input_scale = params.input_scale;
 800ceee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	66bb      	str	r3, [r7, #104]	; 0x68
  int inputs_count = params.inputs_count;
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	899b      	ldrh	r3, [r3, #12]
 800cef8:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 output_zeropoint = params.output_zeropoint;
 800cefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	663b      	str	r3, [r7, #96]	; 0x60
  const float output_scale = params.output_scale;
 800cf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	65fb      	str	r3, [r7, #92]	; 0x5c

  const int concat_dimensions = output_shape.DimensionsCount();
 800cf06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf08:	f7fb feb8 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cf0c:	65b8      	str	r0, [r7, #88]	; 0x58
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800cf0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf12:	429a      	cmp	r2, r3
 800cf14:	db01      	blt.n	800cf1a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x4a>
 800cf16:	f00c f9ef 	bl	80192f8 <abort>

  int64_t concat_size = 0;
 800cf1a:	f04f 0200 	mov.w	r2, #0
 800cf1e:	f04f 0300 	mov.w	r3, #0
 800cf22:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  for (int i = 0; i < inputs_count; i++) {
 800cf26:	2300      	movs	r3, #0
 800cf28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cf2c:	e04d      	b.n	800cfca <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xfa>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800cf2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cf32:	009a      	lsls	r2, r3, #2
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	4413      	add	r3, r2
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fb fe9e 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cf40:	4602      	mov	r2, r0
 800cf42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d001      	beq.n	800cf4c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x7c>
 800cf48:	f00c f9d6 	bl	80192f8 <abort>
    for (int j = 0; j < concat_dimensions; j++) {
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf52:	e016      	b.n	800cf82 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xb2>
      if (j != axis) {
 800cf54:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cf58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d00c      	beq.n	800cf78 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xa8>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800cf5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cf62:	009a      	lsls	r2, r3, #2
 800cf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf66:	4413      	add	r3, r2
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf70:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800cf74:	f7ff ff8e 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800cf78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf82:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cf86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	dbe3      	blt.n	800cf54 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x84>
      }
    }
    concat_size += input_shapes[i]->Dims(axis);
 800cf8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cf90:	009a      	lsls	r2, r3, #2
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	4413      	add	r3, r2
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fae4 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	17da      	asrs	r2, r3, #31
 800cfa4:	61bb      	str	r3, [r7, #24]
 800cfa6:	61fa      	str	r2, [r7, #28]
 800cfa8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800cfac:	69b9      	ldr	r1, [r7, #24]
 800cfae:	1851      	adds	r1, r2, r1
 800cfb0:	6039      	str	r1, [r7, #0]
 800cfb2:	69f9      	ldr	r1, [r7, #28]
 800cfb4:	414b      	adcs	r3, r1
 800cfb6:	607b      	str	r3, [r7, #4]
 800cfb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfbc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  for (int i = 0; i < inputs_count; i++) {
 800cfc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cfca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cfce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	dbac      	blt.n	800cf2e <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x5e>
  }
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800cfd4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cfd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd8:	f7ff fac6 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	17da      	asrs	r2, r3, #31
 800cfe0:	613b      	str	r3, [r7, #16]
 800cfe2:	617a      	str	r2, [r7, #20]
 800cfe4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800cfe8:	6939      	ldr	r1, [r7, #16]
 800cfea:	6978      	ldr	r0, [r7, #20]
 800cfec:	4283      	cmp	r3, r0
 800cfee:	bf08      	it	eq
 800cff0:	428a      	cmpeq	r2, r1
 800cff2:	d001      	beq.n	800cff8 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x128>
 800cff4:	f00c f980 	bl	80192f8 <abort>
  int64_t outer_size = 1;
 800cff8:	f04f 0201 	mov.w	r2, #1
 800cffc:	f04f 0300 	mov.w	r3, #0
 800d000:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  for (int i = 0; i < axis; ++i) {
 800d004:	2300      	movs	r3, #0
 800d006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d00a:	e026      	b.n	800d05a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x18a>
    outer_size *= output_shape.Dims(i);
 800d00c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d012:	f7ff faa9 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d016:	4603      	mov	r3, r0
 800d018:	17da      	asrs	r2, r3, #31
 800d01a:	623b      	str	r3, [r7, #32]
 800d01c:	627a      	str	r2, [r7, #36]	; 0x24
 800d01e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d022:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d026:	4602      	mov	r2, r0
 800d028:	fb02 f203 	mul.w	r2, r2, r3
 800d02c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d030:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800d034:	fb01 f303 	mul.w	r3, r1, r3
 800d038:	4413      	add	r3, r2
 800d03a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d03e:	6a39      	ldr	r1, [r7, #32]
 800d040:	fba2 8901 	umull	r8, r9, r2, r1
 800d044:	444b      	add	r3, r9
 800d046:	4699      	mov	r9, r3
 800d048:	e9c7 8926 	strd	r8, r9, [r7, #152]	; 0x98
 800d04c:	e9c7 8926 	strd	r8, r9, [r7, #152]	; 0x98
  for (int i = 0; i < axis; ++i) {
 800d050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d054:	3301      	adds	r3, #1
 800d056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d05a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d05e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d060:	429a      	cmp	r2, r3
 800d062:	dbd3      	blt.n	800d00c <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x13c>
  }
  // For all input arrays,
  // FlatSize() = outer_size * Dims(axis) * base_inner_size;
  int64_t base_inner_size = 1;
 800d064:	f04f 0201 	mov.w	r2, #1
 800d068:	f04f 0300 	mov.w	r3, #0
 800d06c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800d070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d072:	3301      	adds	r3, #1
 800d074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d078:	e020      	b.n	800d0bc <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1ec>
    base_inner_size *= output_shape.Dims(i);
 800d07a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d07e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d080:	f7ff fa72 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d084:	4603      	mov	r3, r0
 800d086:	17da      	asrs	r2, r3, #31
 800d088:	469a      	mov	sl, r3
 800d08a:	4693      	mov	fp, r2
 800d08c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d090:	fb0a f203 	mul.w	r2, sl, r3
 800d094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d098:	fb0b f303 	mul.w	r3, fp, r3
 800d09c:	4413      	add	r3, r2
 800d09e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d0a2:	fba2 450a 	umull	r4, r5, r2, sl
 800d0a6:	442b      	add	r3, r5
 800d0a8:	461d      	mov	r5, r3
 800d0aa:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 800d0ae:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800d0b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d0bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d0c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	dbd9      	blt.n	800d07a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1aa>
  }

  const float inverse_output_scale = 1.f / output_scale;
 800d0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d0ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0d2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  uint8* output_ptr = output_data;
 800d0d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d0da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (int k = 0; k < outer_size; k++) {
 800d0de:	2300      	movs	r3, #0
 800d0e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0e2:	e0a9      	b.n	800d238 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x368>
    for (int i = 0; i < inputs_count; ++i) {
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0e8:	e09e      	b.n	800d228 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x358>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800d0ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f0:	4413      	add	r3, r2
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff fa36 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d104:	fb02 f303 	mul.w	r3, r2, r3
 800d108:	653b      	str	r3, [r7, #80]	; 0x50
      const uint8* input_ptr = input_data[i] + k * copy_size;
 800d10a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d110:	4413      	add	r3, r2
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d118:	fb01 f202 	mul.w	r2, r1, r2
 800d11c:	4413      	add	r3, r2
 800d11e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_zeropoint[i] == output_zeropoint &&
 800d120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d126:	4413      	add	r3, r2
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d114      	bne.n	800d15a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x28a>
          input_scale[i] == output_scale) {
 800d130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d136:	4413      	add	r3, r2
 800d138:	edd3 7a00 	vldr	s15, [r3]
      if (input_zeropoint[i] == output_zeropoint &&
 800d13c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d140:	eeb4 7a67 	vcmp.f32	s14, s15
 800d144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d148:	d107      	bne.n	800d15a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x28a>
        memcpy(output_ptr, input_ptr, copy_size);
 800d14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d14c:	461a      	mov	r2, r3
 800d14e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d150:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d154:	f00c fc55 	bl	8019a02 <memcpy>
 800d158:	e05d      	b.n	800d216 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x346>
      } else {
        const float scale = input_scale[i] * inverse_output_scale;
 800d15a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d160:	4413      	add	r3, r2
 800d162:	edd3 7a00 	vldr	s15, [r3]
 800d166:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d16e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        const float bias = -input_zeropoint[i] * scale;
 800d172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d178:	4413      	add	r3, r2
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	425b      	negs	r3, r3
 800d17e:	ee07 3a90 	vmov	s15, r3
 800d182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d186:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d18e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        for (int j = 0; j < copy_size; ++j) {
 800d192:	2300      	movs	r3, #0
 800d194:	677b      	str	r3, [r7, #116]	; 0x74
 800d196:	e03a      	b.n	800d20e <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x33e>
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
                                    input_ptr[j] * scale + bias)) +
 800d198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d19a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d19c:	4413      	add	r3, r2
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	ee07 3a90 	vmov	s15, r3
 800d1a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d1ac:	ee27 7a27 	vmul.f32	s14, s14, s15
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
 800d1b0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d1b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1b8:	eeb0 0a67 	vmov.f32	s0, s15
 800d1bc:	f7fb fa41 	bl	8008642 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800d1c0:	eef0 7a40 	vmov.f32	s15, s0
 800d1c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1c8:	ee17 2a90 	vmov	r2, s15
                                    input_ptr[j] * scale + bias)) +
 800d1cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1ce:	4413      	add	r3, r2
                                output_zeropoint;
 800d1d0:	63bb      	str	r3, [r7, #56]	; 0x38
          output_ptr[j] = static_cast<uint8_t>(
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
 800d1d2:	23ff      	movs	r3, #255	; 0xff
 800d1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d1da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d1de:	4611      	mov	r1, r2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fb fce2 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	643b      	str	r3, [r7, #64]	; 0x40
 800d1ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	f7fb fcc5 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	6819      	ldr	r1, [r3, #0]
          output_ptr[j] = static_cast<uint8_t>(
 800d1fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d202:	4413      	add	r3, r2
 800d204:	b2ca      	uxtb	r2, r1
 800d206:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < copy_size; ++j) {
 800d208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d20a:	3301      	adds	r3, #1
 800d20c:	677b      	str	r3, [r7, #116]	; 0x74
 800d20e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d212:	429a      	cmp	r2, r3
 800d214:	dbc0      	blt.n	800d198 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x2c8>
        }
      }
      output_ptr += copy_size;
 800d216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d218:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d21c:	4413      	add	r3, r2
 800d21e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    for (int i = 0; i < inputs_count; ++i) {
 800d222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d224:	3301      	adds	r3, #1
 800d226:	67bb      	str	r3, [r7, #120]	; 0x78
 800d228:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d22a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d22c:	429a      	cmp	r2, r3
 800d22e:	f6ff af5c 	blt.w	800d0ea <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x21a>
  for (int k = 0; k < outer_size; k++) {
 800d232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d234:	3301      	adds	r3, #1
 800d236:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d23a:	17da      	asrs	r2, r3, #31
 800d23c:	60bb      	str	r3, [r7, #8]
 800d23e:	60fa      	str	r2, [r7, #12]
 800d240:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d244:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d248:	4621      	mov	r1, r4
 800d24a:	4291      	cmp	r1, r2
 800d24c:	4629      	mov	r1, r5
 800d24e:	eb71 0303 	sbcs.w	r3, r1, r3
 800d252:	f6ff af47 	blt.w	800d0e4 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x214>
    }
  }
}
 800d256:	bf00      	nop
 800d258:	bf00      	nop
 800d25a:	37b0      	adds	r7, #176	; 0xb0
 800d25c:	46bd      	mov	sp, r7
 800d25e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d264 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace concatenation {

constexpr int kMaxInputNum = 10;  // Maximum number of input tensors
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800d264:	b590      	push	{r4, r7, lr}
 800d266:	b08d      	sub	sp, #52	; 0x34
 800d268:	af04      	add	r7, sp, #16
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  // This function only checks the types. Additional shape validations are
  // performed in the reference implementation called during Eval().
  const TfLiteConcatenationParams* params =
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	61bb      	str	r3, [r7, #24]
      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);

  TfLiteType input_type = GetInput(context, node, 0)->type;
 800d274:	2200      	movs	r2, #0
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff f916 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d27e:	4603      	mov	r3, r0
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	75fb      	strb	r3, [r7, #23]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
 800d284:	2200      	movs	r2, #0
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7ff f924 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d28e:	4603      	mov	r3, r0
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	75bb      	strb	r3, [r7, #22]

  // Check activation and input type
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	791b      	ldrb	r3, [r3, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d012      	beq.n	800d2c2 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	695c      	ldr	r4, [r3, #20]
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	791b      	ldrb	r3, [r3, #4]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	9303      	str	r3, [sp, #12]
 800d2aa:	9202      	str	r2, [sp, #8]
 800d2ac:	4b37      	ldr	r3, [pc, #220]	; (800d38c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	4b37      	ldr	r3, [pc, #220]	; (800d390 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
 800d2b2:	9300      	str	r3, [sp, #0]
 800d2b4:	232c      	movs	r3, #44	; 0x2c
 800d2b6:	4a37      	ldr	r2, [pc, #220]	; (800d394 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 800d2b8:	4937      	ldr	r1, [pc, #220]	; (800d398 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	47a0      	blx	r4
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e060      	b.n	800d384 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
  TF_LITE_ENSURE(context,
 800d2c2:	7dfb      	ldrb	r3, [r7, #23]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d016      	beq.n	800d2f6 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
 800d2c8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d013      	beq.n	800d2f6 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b09      	cmp	r3, #9
 800d2d2:	d010      	beq.n	800d2f6 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d00d      	beq.n	800d2f6 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	d00a      	beq.n	800d2f6 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	695c      	ldr	r4, [r3, #20]
 800d2e4:	4b2d      	ldr	r3, [pc, #180]	; (800d39c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	232d      	movs	r3, #45	; 0x2d
 800d2ea:	4a2a      	ldr	r2, [pc, #168]	; (800d394 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 800d2ec:	492c      	ldr	r1, [pc, #176]	; (800d3a0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	47a0      	blx	r4
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e046      	b.n	800d384 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||
                     input_type == kTfLiteInt8 || input_type == kTfLiteInt32 ||
                     input_type == kTfLiteInt64);

  // Output type must match input type
  TF_LITE_ENSURE_EQ(context, output_type, input_type);
 800d2f6:	7dba      	ldrb	r2, [r7, #22]
 800d2f8:	7dfb      	ldrb	r3, [r7, #23]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d010      	beq.n	800d320 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	695c      	ldr	r4, [r3, #20]
 800d302:	7dbb      	ldrb	r3, [r7, #22]
 800d304:	7dfa      	ldrb	r2, [r7, #23]
 800d306:	9203      	str	r2, [sp, #12]
 800d308:	9302      	str	r3, [sp, #8]
 800d30a:	4b26      	ldr	r3, [pc, #152]	; (800d3a4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	4b26      	ldr	r3, [pc, #152]	; (800d3a8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	2333      	movs	r3, #51	; 0x33
 800d314:	4a1f      	ldr	r2, [pc, #124]	; (800d394 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 800d316:	4920      	ldr	r1, [pc, #128]	; (800d398 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	47a0      	blx	r4
 800d31c:	2301      	movs	r3, #1
 800d31e:	e031      	b.n	800d384 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x120>

  // This implementation does not support large number of input tensors
  const int num_inputs = NumInputs(node);
 800d320:	6838      	ldr	r0, [r7, #0]
 800d322:	f7ff fa16 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d326:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	2b0a      	cmp	r3, #10
 800d32c:	dd0a      	ble.n	800d344 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	695c      	ldr	r4, [r3, #20]
 800d332:	4b1e      	ldr	r3, [pc, #120]	; (800d3ac <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	2337      	movs	r3, #55	; 0x37
 800d338:	4a16      	ldr	r2, [pc, #88]	; (800d394 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 800d33a:	4919      	ldr	r1, [pc, #100]	; (800d3a0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	47a0      	blx	r4
 800d340:	2301      	movs	r3, #1
 800d342:	e01f      	b.n	800d384 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x120>

  // Shapes with dimensions >4 are not yet supported with static allocation.
  for (int i = 0; i < num_inputs; ++i) {
 800d344:	2300      	movs	r3, #0
 800d346:	61fb      	str	r3, [r7, #28]
 800d348:	e017      	b.n	800d37a <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x116>
    const TfLiteTensor* input = GetInput(context, node, i);
 800d34a:	69fa      	ldr	r2, [r7, #28]
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7ff f8ab 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d354:	60f8      	str	r0, [r7, #12]
    int num_dimensions = NumDimensions(input);
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f7fb f9b7 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800d35c:	60b8      	str	r0, [r7, #8]

    if (num_dimensions > 4) {
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2b04      	cmp	r3, #4
 800d362:	dd07      	ble.n	800d374 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x110>
      TF_LITE_KERNEL_LOG(
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	695b      	ldr	r3, [r3, #20]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	4911      	ldr	r1, [pc, #68]	; (800d3b0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	4798      	blx	r3
          context,
          "Op Concatenation does not currently support num dimensions >4 "
          "Tensor has %d dimensions.",
          num_dimensions);
      return kTfLiteError;
 800d370:	2301      	movs	r3, #1
 800d372:	e007      	b.n	800d384 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
  for (int i = 0; i < num_inputs; ++i) {
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	3301      	adds	r3, #1
 800d378:	61fb      	str	r3, [r7, #28]
 800d37a:	69fa      	ldr	r2, [r7, #28]
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	429a      	cmp	r2, r3
 800d380:	dbe3      	blt.n	800d34a <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    }
  }

  return kTfLiteOk;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3724      	adds	r7, #36	; 0x24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd90      	pop	{r4, r7, pc}
 800d38c:	0804afd0 	.word	0x0804afd0
 800d390:	0804afe0 	.word	0x0804afe0
 800d394:	0804af08 	.word	0x0804af08
 800d398:	0804afb4 	.word	0x0804afb4
 800d39c:	0804b00c 	.word	0x0804b00c
 800d3a0:	0804aff4 	.word	0x0804aff4
 800d3a4:	0804b0a0 	.word	0x0804b0a0
 800d3a8:	0804b0ac 	.word	0x0804b0ac
 800d3ac:	0804b0b8 	.word	0x0804b0b8
 800d3b0:	0804b0d4 	.word	0x0804b0d4

0800d3b4 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor>:

// Handles negative axis index, coerces to positive index value.
inline int CalculatePositiveAxis(int axis, const TfLiteTensor* output_tensor) {
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  if (axis >= 0) {
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	db01      	blt.n	800d3c8 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor+0x14>
    return axis;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	e005      	b.n	800d3d4 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor+0x20>
  } else {
    return NumDimensions(output_tensor) + axis;
 800d3c8:	6838      	ldr	r0, [r7, #0]
 800d3ca:	f7fb f97e 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4413      	add	r3, r2
  }
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE>:
// class VectorOfTensors and class VectorOfQuantizedTensors in TFLite.

// Gets shapes from a list of tensors.
inline void GetAllTensorShapes(const TfLiteContext& context,
                               const TfLiteIntArray& tensor_list,
                               RuntimeShape all_shapes[kMaxInputNum]) {
 800d3dc:	b5b0      	push	{r4, r5, r7, lr}
 800d3de:	b08c      	sub	sp, #48	; 0x30
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < tensor_list.size; ++i) {
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3ec:	e030      	b.n	800d450 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE+0x74>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	689a      	ldr	r2, [r3, #8]
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	440b      	add	r3, r1
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	019b      	lsls	r3, r3, #6
 800d3fe:	4413      	add	r3, r2
 800d400:	62bb      	str	r3, [r7, #40]	; 0x28
    RuntimeShape shape = GetTensorShape(t);
 800d402:	f107 0310 	add.w	r3, r7, #16
 800d406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fb fc9b 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    all_shapes[i].ReplaceWith(shape.DimensionsCount(), shape.DimsData());
 800d40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d410:	4613      	mov	r3, r2
 800d412:	005b      	lsls	r3, r3, #1
 800d414:	4413      	add	r3, r2
 800d416:	00db      	lsls	r3, r3, #3
 800d418:	461a      	mov	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	189c      	adds	r4, r3, r2
 800d41e:	f107 0310 	add.w	r3, r7, #16
 800d422:	4618      	mov	r0, r3
 800d424:	f7fb fc2a 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d428:	4605      	mov	r5, r0
 800d42a:	f107 0310 	add.w	r3, r7, #16
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fb fc30 	bl	8008c94 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800d434:	4603      	mov	r3, r0
 800d436:	461a      	mov	r2, r3
 800d438:	4629      	mov	r1, r5
 800d43a:	4620      	mov	r0, r4
 800d43c:	f7fb fc69 	bl	8008d12 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800d440:	f107 0310 	add.w	r3, r7, #16
 800d444:	4618      	mov	r0, r3
 800d446:	f7fb fc03 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  for (int i = 0; i < tensor_list.size; ++i) {
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	3301      	adds	r3, #1
 800d44e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d456:	429a      	cmp	r2, r3
 800d458:	dbc9      	blt.n	800d3ee <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE+0x12>
}
 800d45a:	bf00      	nop
 800d45c:	bf00      	nop
 800d45e:	3730      	adds	r7, #48	; 0x30
 800d460:	46bd      	mov	sp, r7
 800d462:	bdb0      	pop	{r4, r5, r7, pc}

0800d464 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>:

// Get shape pointers from a list of shapes.
inline void GetShapesPointers(const RuntimeShape* shapes, size_t num,
                              const RuntimeShape* pointers[]) {
 800d464:	b480      	push	{r7}
 800d466:	b087      	sub	sp, #28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < num; ++i) {
 800d470:	2300      	movs	r3, #0
 800d472:	617b      	str	r3, [r7, #20]
 800d474:	e00f      	b.n	800d496 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x32>
    pointers[i] = &shapes[i];
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	4613      	mov	r3, r2
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	4413      	add	r3, r2
 800d47e:	00db      	lsls	r3, r3, #3
 800d480:	4619      	mov	r1, r3
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	4413      	add	r3, r2
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	440a      	add	r2, r1
 800d48e:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < num; ++i) {
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	3301      	adds	r3, #1
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d3eb      	bcc.n	800d476 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x12>
  }
}
 800d49e:	bf00      	nop
 800d4a0:	bf00      	nop
 800d4a2:	371c      	adds	r7, #28
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <_ZN6tflite3ops5micro13concatenation23GetAllQuantizationParamERK13TfLiteContextRK14TfLiteIntArrayPfPl>:

// Gets scale and zero point from a list of tensors
inline void GetAllQuantizationParam(const TfLiteContext& context,
                                    const TfLiteIntArray& tensor_list,
                                    float scales[kMaxInputNum],
                                    int32 zero_points[kMaxInputNum]) {
 800d4ac:	b480      	push	{r7}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < tensor_list.size; ++i) {
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	617b      	str	r3, [r7, #20]
 800d4be:	e01a      	b.n	800d4f6 <_ZN6tflite3ops5micro13concatenation23GetAllQuantizationParamERK13TfLiteContextRK14TfLiteIntArrayPfPl+0x4a>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	689a      	ldr	r2, [r3, #8]
 800d4c4:	68b9      	ldr	r1, [r7, #8]
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	440b      	add	r3, r1
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	019b      	lsls	r3, r3, #6
 800d4d0:	4413      	add	r3, r2
 800d4d2:	613b      	str	r3, [r7, #16]
    scales[i] = t->params.scale;
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	4413      	add	r3, r2
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	68d2      	ldr	r2, [r2, #12]
 800d4e0:	601a      	str	r2, [r3, #0]
    zero_points[i] = t->params.zero_point;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	693a      	ldr	r2, [r7, #16]
 800d4ec:	6912      	ldr	r2, [r2, #16]
 800d4ee:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < tensor_list.size; ++i) {
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	617b      	str	r3, [r7, #20]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	dbdf      	blt.n	800d4c0 <_ZN6tflite3ops5micro13concatenation23GetAllQuantizationParamERK13TfLiteContextRK14TfLiteIntArrayPfPl+0x14>
  }
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	371c      	adds	r7, #28
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>:
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
                               GetTensorShape(output),
                               GetTensorData<data_type>(output));
}

void EvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node) {
 800d50e:	b5b0      	push	{r4, r5, r7, lr}
 800d510:	b0f6      	sub	sp, #472	; 0x1d8
 800d512:	af02      	add	r7, sp, #8
 800d514:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d518:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d51c:	6018      	str	r0, [r3, #0]
 800d51e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d522:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d526:	6019      	str	r1, [r3, #0]
  // Collect the shapes and data pointer of input tensors
  RuntimeShape inputs_shape[kMaxInputNum];
 800d528:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d52c:	2409      	movs	r4, #9
 800d52e:	461d      	mov	r5, r3
 800d530:	e004      	b.n	800d53c <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x2e>
 800d532:	4628      	mov	r0, r5
 800d534:	f7fb fb6b 	bl	8008c0e <_ZN6tflite12RuntimeShapeC1Ev>
 800d538:	3518      	adds	r5, #24
 800d53a:	3c01      	subs	r4, #1
 800d53c:	2c00      	cmp	r4, #0
 800d53e:	daf8      	bge.n	800d532 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x24>
  const RuntimeShape* inputs_shape_ptr[kMaxInputNum];
  const uint8_t* inputs_data[kMaxInputNum];
  float inputs_scale[kMaxInputNum];
  int32 inputs_zero_point[kMaxInputNum];
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
 800d540:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d544:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6819      	ldr	r1, [r3, #0]
 800d54c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800d550:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d554:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d558:	6818      	ldr	r0, [r3, #0]
 800d55a:	f7ff ff3f 	bl	800d3dc <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800d55e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d562:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4619      	mov	r1, r3
 800d56e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d572:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff ff74 	bl	800d464 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
 800d57c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d580:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6819      	ldr	r1, [r3, #0]
 800d588:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d58c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d590:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d594:	6818      	ldr	r0, [r3, #0]
 800d596:	f000 f8fb 	bl	800d790 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKhEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>
  GetAllQuantizationParam(*context, *node->inputs, inputs_scale,
 800d59a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d59e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6819      	ldr	r1, [r3, #0]
 800d5a6:	f107 0320 	add.w	r3, r7, #32
 800d5aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d5ae:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 800d5b2:	f5a0 70e6 	sub.w	r0, r0, #460	; 0x1cc
 800d5b6:	6800      	ldr	r0, [r0, #0]
 800d5b8:	f7ff ff78 	bl	800d4ac <_ZN6tflite3ops5micro13concatenation23GetAllQuantizationParamERK13TfLiteContextRK14TfLiteIntArrayPfPl>
                          inputs_zero_point);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800d5bc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d5c0:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 800d5c4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d5c8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	6809      	ldr	r1, [r1, #0]
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	f7fe ff80 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d5d6:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc

  const TfLiteConcatenationParams* params =
 800d5da:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d5de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);

  ConcatenationParams op_params;
  op_params.axis = CalculatePositiveAxis(params->axis, output);
 800d5ea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff fedd 	bl	800d3b4 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	b25a      	sxtb	r2, r3
 800d5fe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d602:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d606:	701a      	strb	r2, [r3, #0]
  op_params.inputs_count = NumInputs(node);
 800d608:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d60c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d610:	6818      	ldr	r0, [r3, #0]
 800d612:	f7ff f89e 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d616:	4603      	mov	r3, r0
 800d618:	b29a      	uxth	r2, r3
 800d61a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d61e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d622:	819a      	strh	r2, [r3, #12]
  op_params.input_zeropoint = inputs_zero_point;
 800d624:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d628:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d62c:	f107 0220 	add.w	r2, r7, #32
 800d630:	605a      	str	r2, [r3, #4]
  op_params.input_scale = inputs_scale;
 800d632:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d636:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d63a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d63e:	609a      	str	r2, [r3, #8]
  op_params.output_zeropoint = output->params.zero_point;
 800d640:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d644:	691a      	ldr	r2, [r3, #16]
 800d646:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d64a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d64e:	611a      	str	r2, [r3, #16]
  op_params.output_scale = output->params.scale;
 800d650:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d654:	68da      	ldr	r2, [r3, #12]
 800d656:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800d65a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d65e:	615a      	str	r2, [r3, #20]

  reference_ops::ConcatenationWithScaling(op_params, inputs_shape_ptr,
                                          inputs_data, GetTensorShape(output),
 800d660:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d664:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fb fb6b 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::ConcatenationWithScaling(op_params, inputs_shape_ptr,
 800d66e:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 800d672:	f7fe ff57 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800d676:	4604      	mov	r4, r0
 800d678:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d67c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d680:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800d684:	f107 0008 	add.w	r0, r7, #8
 800d688:	9400      	str	r4, [sp, #0]
 800d68a:	f7ff fc21 	bl	800ced0 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>
                                          inputs_data, GetTensorShape(output),
 800d68e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d692:	4618      	mov	r0, r3
 800d694:	f7fb fadc 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape inputs_shape[kMaxInputNum];
 800d698:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800d69c:	34f0      	adds	r4, #240	; 0xf0
                                          GetTensorData<uint8>(output));
}
 800d69e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d6a2:	429c      	cmp	r4, r3
 800d6a4:	d004      	beq.n	800d6b0 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x1a2>
  RuntimeShape inputs_shape[kMaxInputNum];
 800d6a6:	3c18      	subs	r4, #24
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f7fb fad1 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800d6ae:	e7f6      	b.n	800d69e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x190>
  RuntimeShape inputs_shape[kMaxInputNum];
 800d6b0:	bf00      	nop
}
 800d6b2:	bf00      	nop
 800d6b4:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bdb0      	pop	{r4, r5, r7, pc}

0800d6bc <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800d6bc:	b590      	push	{r4, r7, lr}
 800d6be:	b085      	sub	sp, #20
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7fe ff03 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	73fb      	strb	r3, [r7, #15]

  switch (output_type) {  // Already know in/outtypes are same.
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	2b08      	cmp	r3, #8
 800d6dc:	d82d      	bhi.n	800d73a <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
 800d6de:	a201      	add	r2, pc, #4	; (adr r2, 800d6e4 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>)
 800d6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e4:	0800d709 	.word	0x0800d709
 800d6e8:	0800d713 	.word	0x0800d713
 800d6ec:	0800d71d 	.word	0x0800d71d
 800d6f0:	0800d731 	.word	0x0800d731
 800d6f4:	0800d73b 	.word	0x0800d73b
 800d6f8:	0800d73b 	.word	0x0800d73b
 800d6fc:	0800d73b 	.word	0x0800d73b
 800d700:	0800d73b 	.word	0x0800d73b
 800d704:	0800d727 	.word	0x0800d727
    case kTfLiteFloat32:
      EvalUnquantized<float>(context, node);
 800d708:	6839      	ldr	r1, [r7, #0]
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f869 	bl	800d7e2 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>
      break;
 800d710:	e020      	b.n	800d754 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x98>
    case kTfLiteInt32:
      EvalUnquantized<int32_t>(context, node);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f90c 	bl	800d932 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode>
      break;
 800d71a:	e01b      	b.n	800d754 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x98>
    case kTfLiteUInt8:
      EvalQuantizedUInt8(context, node);
 800d71c:	6839      	ldr	r1, [r7, #0]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7ff fef5 	bl	800d50e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>
      break;
 800d724:	e016      	b.n	800d754 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x98>
    case kTfLiteInt8:
      EvalUnquantized<int8_t>(context, node);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f9aa 	bl	800da82 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>
      break;
 800d72e:	e011      	b.n	800d754 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x98>
    case kTfLiteInt64:
      EvalUnquantized<int64_t>(context, node);
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 fa4d 	bl	800dbd2 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>
      break;
 800d738:	e00c      	b.n	800d754 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x98>

    default:
      TF_LITE_KERNEL_LOG(
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	695c      	ldr	r4, [r3, #20]
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
 800d740:	4618      	mov	r0, r3
 800d742:	f7f7 fb43 	bl	8004dcc <TfLiteTypeGetName>
 800d746:	4603      	mov	r3, r0
 800d748:	461a      	mov	r2, r3
 800d74a:	4905      	ldr	r1, [pc, #20]	; (800d760 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0xa4>)
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	47a0      	blx	r4
          context, "Op Concatenation does not currently support Type '%s'.",
          TfLiteTypeGetName(output_type));
      return kTfLiteError;
 800d750:	2301      	movs	r3, #1
 800d752:	e000      	b.n	800d756 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x9a>
  }

  return kTfLiteOk;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd90      	pop	{r4, r7, pc}
 800d75e:	bf00      	nop
 800d760:	0804b12c 	.word	0x0804b12c

0800d764 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>:

}  // namespace concatenation

TfLiteRegistration Register_CONCATENATION() {
 800d764:	b4b0      	push	{r4, r5, r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
          /*prepare=*/concatenation::Prepare,
          /*invoke=*/concatenation::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a07      	ldr	r2, [pc, #28]	; (800d78c <_ZN6tflite3ops5micro22Register_CONCATENATIONEv+0x28>)
 800d770:	461c      	mov	r4, r3
 800d772:	4615      	mov	r5, r2
 800d774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d778:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d77c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	bcb0      	pop	{r4, r5, r7}
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	0804b164 	.word	0x0804b164

0800d790 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKhEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>:
inline void GetAllTensorData(const TfLiteContext& context,
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b087      	sub	sp, #28
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < tensor_list.size; ++i) {
 800d79c:	2300      	movs	r3, #0
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	e015      	b.n	800d7ce <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKhEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x3e>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	689a      	ldr	r2, [r3, #8]
 800d7a6:	68b9      	ldr	r1, [r7, #8]
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	440b      	add	r3, r1
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	019b      	lsls	r3, r3, #6
 800d7b2:	4413      	add	r3, r2
 800d7b4:	613b      	str	r3, [r7, #16]
    all_data[i] = GetTensorData<T>(t);
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	18d4      	adds	r4, r2, r3
 800d7be:	6938      	ldr	r0, [r7, #16]
 800d7c0:	f000 faaf 	bl	800dd22 <_ZN6tflite13GetTensorDataIKhEEPKT_PK12TfLiteTensor>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < tensor_list.size; ++i) {
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	617b      	str	r3, [r7, #20]
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	dbe4      	blt.n	800d7a2 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKhEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x12>
}
 800d7d8:	bf00      	nop
 800d7da:	bf00      	nop
 800d7dc:	371c      	adds	r7, #28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd90      	pop	{r4, r7, pc}

0800d7e2 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800d7e2:	b5b0      	push	{r4, r5, r7, lr}
 800d7e4:	b0e2      	sub	sp, #392	; 0x188
 800d7e6:	af02      	add	r7, sp, #8
 800d7e8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d7ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d7f0:	6018      	str	r0, [r3, #0]
 800d7f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d7f6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d7fa:	6019      	str	r1, [r3, #0]
  RuntimeShape inputs_shape[kMaxInputNum];
 800d7fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d800:	2409      	movs	r4, #9
 800d802:	461d      	mov	r5, r3
 800d804:	e004      	b.n	800d810 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x2e>
 800d806:	4628      	mov	r0, r5
 800d808:	f7fb fa01 	bl	8008c0e <_ZN6tflite12RuntimeShapeC1Ev>
 800d80c:	3518      	adds	r5, #24
 800d80e:	3c01      	subs	r4, #1
 800d810:	2c00      	cmp	r4, #0
 800d812:	daf8      	bge.n	800d806 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x24>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
 800d814:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d818:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6819      	ldr	r1, [r3, #0]
 800d820:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d824:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d828:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d82c:	6818      	ldr	r0, [r3, #0]
 800d82e:	f7ff fdd5 	bl	800d3dc <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800d832:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d836:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4619      	mov	r1, r3
 800d842:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff fe0a 	bl	800d464 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
 800d850:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d854:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	6819      	ldr	r1, [r3, #0]
 800d85c:	f107 0220 	add.w	r2, r7, #32
 800d860:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d864:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	f000 fa6b 	bl	800dd44 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKfEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800d86e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d872:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800d876:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d87a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d87e:	2200      	movs	r2, #0
 800d880:	6809      	ldr	r1, [r1, #0]
 800d882:	6818      	ldr	r0, [r3, #0]
 800d884:	f7fe fe27 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d888:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
  const TfLiteConcatenationParams* params =
 800d88c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d890:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  op_params.axis = CalculatePositiveAxis(params->axis, output);
 800d89c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff fd84 	bl	800d3b4 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	b25a      	sxtb	r2, r3
 800d8b0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d8b4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800d8b8:	701a      	strb	r2, [r3, #0]
  op_params.inputs_count = NumInputs(node);
 800d8ba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d8be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d8c2:	6818      	ldr	r0, [r3, #0]
 800d8c4:	f7fe ff45 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d8d0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800d8d4:	819a      	strh	r2, [r3, #12]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
 800d8d6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800d8da:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fb fa30 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800d8e4:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800d8e8:	f7fe fedf 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800d8f2:	f107 0220 	add.w	r2, r7, #32
 800d8f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800d8fa:	f107 0008 	add.w	r0, r7, #8
 800d8fe:	9400      	str	r4, [sp, #0]
 800d900:	f000 fa49 	bl	800dd96 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
 800d904:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fb f9a1 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape inputs_shape[kMaxInputNum];
 800d90e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800d912:	34f0      	adds	r4, #240	; 0xf0
}
 800d914:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d918:	429c      	cmp	r4, r3
 800d91a:	d004      	beq.n	800d926 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x144>
  RuntimeShape inputs_shape[kMaxInputNum];
 800d91c:	3c18      	subs	r4, #24
 800d91e:	4620      	mov	r0, r4
 800d920:	f7fb f996 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800d924:	e7f6      	b.n	800d914 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x132>
  RuntimeShape inputs_shape[kMaxInputNum];
 800d926:	bf00      	nop
}
 800d928:	bf00      	nop
 800d92a:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 800d92e:	46bd      	mov	sp, r7
 800d930:	bdb0      	pop	{r4, r5, r7, pc}

0800d932 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800d932:	b5b0      	push	{r4, r5, r7, lr}
 800d934:	b0e2      	sub	sp, #392	; 0x188
 800d936:	af02      	add	r7, sp, #8
 800d938:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d93c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d940:	6018      	str	r0, [r3, #0]
 800d942:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d946:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d94a:	6019      	str	r1, [r3, #0]
  RuntimeShape inputs_shape[kMaxInputNum];
 800d94c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d950:	2409      	movs	r4, #9
 800d952:	461d      	mov	r5, r3
 800d954:	e004      	b.n	800d960 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x2e>
 800d956:	4628      	mov	r0, r5
 800d958:	f7fb f959 	bl	8008c0e <_ZN6tflite12RuntimeShapeC1Ev>
 800d95c:	3518      	adds	r5, #24
 800d95e:	3c01      	subs	r4, #1
 800d960:	2c00      	cmp	r4, #0
 800d962:	daf8      	bge.n	800d956 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x24>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
 800d964:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d968:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6819      	ldr	r1, [r3, #0]
 800d970:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d974:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d978:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d97c:	6818      	ldr	r0, [r3, #0]
 800d97e:	f7ff fd2d 	bl	800d3dc <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800d982:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d986:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4619      	mov	r1, r3
 800d992:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d996:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff fd62 	bl	800d464 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
 800d9a0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d9a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	6819      	ldr	r1, [r3, #0]
 800d9ac:	f107 0220 	add.w	r2, r7, #32
 800d9b0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d9b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	f000 fb0b 	bl	800dfd4 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKlEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800d9be:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d9c2:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800d9c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d9ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	6809      	ldr	r1, [r1, #0]
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	f7fe fd7f 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d9d8:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
  const TfLiteConcatenationParams* params =
 800d9dc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d9e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  op_params.axis = CalculatePositiveAxis(params->axis, output);
 800d9ec:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff fcdc 	bl	800d3b4 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	b25a      	sxtb	r2, r3
 800da00:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800da04:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800da08:	701a      	strb	r2, [r3, #0]
  op_params.inputs_count = NumInputs(node);
 800da0a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800da0e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800da12:	6818      	ldr	r0, [r3, #0]
 800da14:	f7fe fe9d 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800da18:	4603      	mov	r3, r0
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800da20:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800da24:	819a      	strh	r2, [r3, #12]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
 800da26:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800da2a:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fb f988 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800da34:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800da38:	f7fe fd85 	bl	800c546 <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor>
 800da3c:	4604      	mov	r4, r0
 800da3e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800da42:	f107 0220 	add.w	r2, r7, #32
 800da46:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800da4a:	f107 0008 	add.w	r0, r7, #8
 800da4e:	9400      	str	r4, [sp, #0]
 800da50:	f000 fae9 	bl	800e026 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
 800da54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fb f8f9 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape inputs_shape[kMaxInputNum];
 800da5e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800da62:	34f0      	adds	r4, #240	; 0xf0
}
 800da64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da68:	429c      	cmp	r4, r3
 800da6a:	d004      	beq.n	800da76 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x144>
  RuntimeShape inputs_shape[kMaxInputNum];
 800da6c:	3c18      	subs	r4, #24
 800da6e:	4620      	mov	r0, r4
 800da70:	f7fb f8ee 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800da74:	e7f6      	b.n	800da64 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode+0x132>
  RuntimeShape inputs_shape[kMaxInputNum];
 800da76:	bf00      	nop
}
 800da78:	bf00      	nop
 800da7a:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 800da7e:	46bd      	mov	sp, r7
 800da80:	bdb0      	pop	{r4, r5, r7, pc}

0800da82 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800da82:	b5b0      	push	{r4, r5, r7, lr}
 800da84:	b0e2      	sub	sp, #392	; 0x188
 800da86:	af02      	add	r7, sp, #8
 800da88:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800da8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800da90:	6018      	str	r0, [r3, #0]
 800da92:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800da96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800da9a:	6019      	str	r1, [r3, #0]
  RuntimeShape inputs_shape[kMaxInputNum];
 800da9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800daa0:	2409      	movs	r4, #9
 800daa2:	461d      	mov	r5, r3
 800daa4:	e004      	b.n	800dab0 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x2e>
 800daa6:	4628      	mov	r0, r5
 800daa8:	f7fb f8b1 	bl	8008c0e <_ZN6tflite12RuntimeShapeC1Ev>
 800daac:	3518      	adds	r5, #24
 800daae:	3c01      	subs	r4, #1
 800dab0:	2c00      	cmp	r4, #0
 800dab2:	daf8      	bge.n	800daa6 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x24>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
 800dab4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dab8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	6819      	ldr	r1, [r3, #0]
 800dac0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800dac4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dac8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff fc85 	bl	800d3dc <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800dad2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dad6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4619      	mov	r1, r3
 800dae2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dae6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800daea:	4618      	mov	r0, r3
 800daec:	f7ff fcba 	bl	800d464 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
 800daf0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800daf4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	6819      	ldr	r1, [r3, #0]
 800dafc:	f107 0220 	add.w	r2, r7, #32
 800db00:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800db04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800db08:	6818      	ldr	r0, [r3, #0]
 800db0a:	f000 fbab 	bl	800e264 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKaEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800db0e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800db12:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800db16:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800db1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800db1e:	2200      	movs	r2, #0
 800db20:	6809      	ldr	r1, [r1, #0]
 800db22:	6818      	ldr	r0, [r3, #0]
 800db24:	f7fe fcd7 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800db28:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
  const TfLiteConcatenationParams* params =
 800db2c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800db30:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  op_params.axis = CalculatePositiveAxis(params->axis, output);
 800db3c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800db46:	4618      	mov	r0, r3
 800db48:	f7ff fc34 	bl	800d3b4 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor>
 800db4c:	4603      	mov	r3, r0
 800db4e:	b25a      	sxtb	r2, r3
 800db50:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800db54:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800db58:	701a      	strb	r2, [r3, #0]
  op_params.inputs_count = NumInputs(node);
 800db5a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800db5e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800db62:	6818      	ldr	r0, [r3, #0]
 800db64:	f7fe fdf5 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800db68:	4603      	mov	r3, r0
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800db70:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800db74:	819a      	strh	r2, [r3, #12]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
 800db76:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800db7a:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fb f8e0 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800db84:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800db88:	f7fe fdb1 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800db8c:	4604      	mov	r4, r0
 800db8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800db92:	f107 0220 	add.w	r2, r7, #32
 800db96:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800db9a:	f107 0008 	add.w	r0, r7, #8
 800db9e:	9400      	str	r4, [sp, #0]
 800dba0:	f000 fb89 	bl	800e2b6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
 800dba4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fb f851 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape inputs_shape[kMaxInputNum];
 800dbae:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800dbb2:	34f0      	adds	r4, #240	; 0xf0
}
 800dbb4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dbb8:	429c      	cmp	r4, r3
 800dbba:	d004      	beq.n	800dbc6 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x144>
  RuntimeShape inputs_shape[kMaxInputNum];
 800dbbc:	3c18      	subs	r4, #24
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f7fb f846 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800dbc4:	e7f6      	b.n	800dbb4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x132>
  RuntimeShape inputs_shape[kMaxInputNum];
 800dbc6:	bf00      	nop
}
 800dbc8:	bf00      	nop
 800dbca:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bdb0      	pop	{r4, r5, r7, pc}

0800dbd2 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
 800dbd2:	b5b0      	push	{r4, r5, r7, lr}
 800dbd4:	b0e2      	sub	sp, #392	; 0x188
 800dbd6:	af02      	add	r7, sp, #8
 800dbd8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dbdc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800dbe0:	6018      	str	r0, [r3, #0]
 800dbe2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dbe6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dbea:	6019      	str	r1, [r3, #0]
  RuntimeShape inputs_shape[kMaxInputNum];
 800dbec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dbf0:	2409      	movs	r4, #9
 800dbf2:	461d      	mov	r5, r3
 800dbf4:	e004      	b.n	800dc00 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x2e>
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f7fb f809 	bl	8008c0e <_ZN6tflite12RuntimeShapeC1Ev>
 800dbfc:	3518      	adds	r5, #24
 800dbfe:	3c01      	subs	r4, #1
 800dc00:	2c00      	cmp	r4, #0
 800dc02:	daf8      	bge.n	800dbf6 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x24>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
 800dc04:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc08:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6819      	ldr	r1, [r3, #0]
 800dc10:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800dc14:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800dc1c:	6818      	ldr	r0, [r3, #0]
 800dc1e:	f7ff fbdd 	bl	800d3dc <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
 800dc22:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc26:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4619      	mov	r1, r3
 800dc32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dc36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7ff fc12 	bl	800d464 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
 800dc40:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6819      	ldr	r1, [r3, #0]
 800dc4c:	f107 0220 	add.w	r2, r7, #32
 800dc50:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc54:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	f000 fc48 	bl	800e4ee <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKxEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800dc5e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc62:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800dc66:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc6a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800dc6e:	2200      	movs	r2, #0
 800dc70:	6809      	ldr	r1, [r1, #0]
 800dc72:	6818      	ldr	r0, [r3, #0]
 800dc74:	f7fe fc2f 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800dc78:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
  const TfLiteConcatenationParams* params =
 800dc7c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dc80:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	695b      	ldr	r3, [r3, #20]
 800dc88:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  op_params.axis = CalculatePositiveAxis(params->axis, output);
 800dc8c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff fb8c 	bl	800d3b4 <_ZN6tflite3ops5micro13concatenation21CalculatePositiveAxisEiPK12TfLiteTensor>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	b25a      	sxtb	r2, r3
 800dca0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dca4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800dca8:	701a      	strb	r2, [r3, #0]
  op_params.inputs_count = NumInputs(node);
 800dcaa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dcae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800dcb2:	6818      	ldr	r0, [r3, #0]
 800dcb4:	f7fe fd4d 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dcc0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800dcc4:	819a      	strh	r2, [r3, #12]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
 800dcc6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dcca:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fb f838 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800dcd4:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800dcd8:	f000 fc32 	bl	800e540 <_ZN6tflite13GetTensorDataIxEEPT_P12TfLiteTensor>
 800dcdc:	4604      	mov	r4, r0
 800dcde:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dce2:	f107 0220 	add.w	r2, r7, #32
 800dce6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dcea:	f107 0008 	add.w	r0, r7, #8
 800dcee:	9400      	str	r4, [sp, #0]
 800dcf0:	f000 fc37 	bl	800e562 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
 800dcf4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fa ffa9 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape inputs_shape[kMaxInputNum];
 800dcfe:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800dd02:	34f0      	adds	r4, #240	; 0xf0
}
 800dd04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dd08:	429c      	cmp	r4, r3
 800dd0a:	d004      	beq.n	800dd16 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x144>
  RuntimeShape inputs_shape[kMaxInputNum];
 800dd0c:	3c18      	subs	r4, #24
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f7fa ff9e 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800dd14:	e7f6      	b.n	800dd04 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x132>
  RuntimeShape inputs_shape[kMaxInputNum];
 800dd16:	bf00      	nop
}
 800dd18:	bf00      	nop
 800dd1a:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bdb0      	pop	{r4, r5, r7, pc}

0800dd22 <_ZN6tflite13GetTensorDataIKhEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800dd22:	b480      	push	{r7}
 800dd24:	b083      	sub	sp, #12
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d002      	beq.n	800dd36 <_ZN6tflite13GetTensorDataIKhEEPKT_PK12TfLiteTensor+0x14>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800dd34:	e000      	b.n	800dd38 <_ZN6tflite13GetTensorDataIKhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKfEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>:
inline void GetAllTensorData(const TfLiteContext& context,
 800dd44:	b590      	push	{r4, r7, lr}
 800dd46:	b087      	sub	sp, #28
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < tensor_list.size; ++i) {
 800dd50:	2300      	movs	r3, #0
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	e015      	b.n	800dd82 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKfEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x3e>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	689a      	ldr	r2, [r3, #8]
 800dd5a:	68b9      	ldr	r1, [r7, #8]
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	440b      	add	r3, r1
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	019b      	lsls	r3, r3, #6
 800dd66:	4413      	add	r3, r2
 800dd68:	613b      	str	r3, [r7, #16]
    all_data[i] = GetTensorData<T>(t);
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	18d4      	adds	r4, r2, r3
 800dd72:	6938      	ldr	r0, [r7, #16]
 800dd74:	f000 fd14 	bl	800e7a0 <_ZN6tflite13GetTensorDataIKfEEPKT_PK12TfLiteTensor>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < tensor_list.size; ++i) {
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	617b      	str	r3, [r7, #20]
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	dbe4      	blt.n	800dd56 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKfEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x12>
}
 800dd8c:	bf00      	nop
 800dd8e:	bf00      	nop
 800dd90:	371c      	adds	r7, #28
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd90      	pop	{r4, r7, pc}

0800dd96 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800dd96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd9a:	b0a2      	sub	sp, #136	; 0x88
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6378      	str	r0, [r7, #52]	; 0x34
 800dda0:	6339      	str	r1, [r7, #48]	; 0x30
 800dda2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dda4:	62bb      	str	r3, [r7, #40]	; 0x28
  int axis = params.axis;
 800dda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dda8:	f993 3000 	ldrsb.w	r3, [r3]
 800ddac:	64fb      	str	r3, [r7, #76]	; 0x4c
  int inputs_count = params.inputs_count;
 800ddae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb0:	899b      	ldrh	r3, [r3, #12]
 800ddb2:	64bb      	str	r3, [r7, #72]	; 0x48
  const int concat_dimensions = output_shape.DimensionsCount();
 800ddb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb6:	f7fa ff61 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ddba:	6478      	str	r0, [r7, #68]	; 0x44
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800ddbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	db01      	blt.n	800ddc8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x32>
 800ddc4:	f00b fa98 	bl	80192f8 <abort>
  int64_t concat_size = 0;
 800ddc8:	f04f 0200 	mov.w	r2, #0
 800ddcc:	f04f 0300 	mov.w	r3, #0
 800ddd0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ddd8:	e041      	b.n	800de5e <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc8>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800ddda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dddc:	009a      	lsls	r2, r3, #2
 800ddde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde0:	4413      	add	r3, r2
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fa ff49 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ddea:	4602      	mov	r2, r0
 800ddec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d001      	beq.n	800ddf6 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x60>
 800ddf2:	f00b fa81 	bl	80192f8 <abort>
    for (int j = 0; j < concat_dimensions; j++) {
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	67bb      	str	r3, [r7, #120]	; 0x78
 800ddfa:	e010      	b.n	800de1e <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x88>
      if (j != axis) {
 800ddfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de00:	429a      	cmp	r2, r3
 800de02:	d009      	beq.n	800de18 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x82>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800de04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de06:	009a      	lsls	r2, r3, #2
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	4413      	add	r3, r2
 800de0c:	6818      	ldr	r0, [r3, #0]
 800de0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de12:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800de14:	f7ff f83e 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800de18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de1a:	3301      	adds	r3, #1
 800de1c:	67bb      	str	r3, [r7, #120]	; 0x78
 800de1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800de20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de22:	429a      	cmp	r2, r3
 800de24:	dbea      	blt.n	800ddfc <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x66>
    concat_size += input_shapes[i]->Dims(axis);
 800de26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de28:	009a      	lsls	r2, r3, #2
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	4413      	add	r3, r2
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe fb98 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800de38:	4603      	mov	r3, r0
 800de3a:	17da      	asrs	r2, r3, #31
 800de3c:	61bb      	str	r3, [r7, #24]
 800de3e:	61fa      	str	r2, [r7, #28]
 800de40:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800de44:	69b9      	ldr	r1, [r7, #24]
 800de46:	1851      	adds	r1, r2, r1
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	69f9      	ldr	r1, [r7, #28]
 800de4c:	414b      	adcs	r3, r1
 800de4e:	607b      	str	r3, [r7, #4]
 800de50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de54:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800de58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de5a:	3301      	adds	r3, #1
 800de5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800de60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de62:	429a      	cmp	r2, r3
 800de64:	dbb9      	blt.n	800ddda <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x44>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800de66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800de68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de6a:	f7fe fb7d 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800de6e:	4603      	mov	r3, r0
 800de70:	17da      	asrs	r2, r3, #31
 800de72:	613b      	str	r3, [r7, #16]
 800de74:	617a      	str	r2, [r7, #20]
 800de76:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800de7a:	6939      	ldr	r1, [r7, #16]
 800de7c:	6978      	ldr	r0, [r7, #20]
 800de7e:	4283      	cmp	r3, r0
 800de80:	bf08      	it	eq
 800de82:	428a      	cmpeq	r2, r1
 800de84:	d001      	beq.n	800de8a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf4>
 800de86:	f00b fa37 	bl	80192f8 <abort>
  int64_t outer_size = 1;
 800de8a:	f04f 0201 	mov.w	r2, #1
 800de8e:	f04f 0300 	mov.w	r3, #0
 800de92:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800de96:	2300      	movs	r3, #0
 800de98:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de9a:	e020      	b.n	800dede <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x148>
    outer_size *= output_shape.Dims(i);
 800de9c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800de9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dea0:	f7fe fb62 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dea4:	4603      	mov	r3, r0
 800dea6:	17da      	asrs	r2, r3, #31
 800dea8:	623b      	str	r3, [r7, #32]
 800deaa:	627a      	str	r2, [r7, #36]	; 0x24
 800deac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800deae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800deb2:	4602      	mov	r2, r0
 800deb4:	fb02 f203 	mul.w	r2, r2, r3
 800deb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800deba:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800debe:	fb01 f303 	mul.w	r3, r1, r3
 800dec2:	4413      	add	r3, r2
 800dec4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dec6:	6a39      	ldr	r1, [r7, #32]
 800dec8:	fba2 8901 	umull	r8, r9, r2, r1
 800decc:	444b      	add	r3, r9
 800dece:	4699      	mov	r9, r3
 800ded0:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800ded4:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800ded8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deda:	3301      	adds	r3, #1
 800dedc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dede:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee2:	429a      	cmp	r2, r3
 800dee4:	dbda      	blt.n	800de9c <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x106>
  int64_t base_inner_size = 1;
 800dee6:	f04f 0201 	mov.w	r2, #1
 800deea:	f04f 0300 	mov.w	r3, #0
 800deee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800def2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def4:	3301      	adds	r3, #1
 800def6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800def8:	e01a      	b.n	800df30 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x19a>
    base_inner_size *= output_shape.Dims(i);
 800defa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800defc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800defe:	f7fe fb33 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800df02:	4603      	mov	r3, r0
 800df04:	17da      	asrs	r2, r3, #31
 800df06:	469a      	mov	sl, r3
 800df08:	4693      	mov	fp, r2
 800df0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df0c:	fb0a f203 	mul.w	r2, sl, r3
 800df10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df12:	fb0b f303 	mul.w	r3, fp, r3
 800df16:	4413      	add	r3, r2
 800df18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df1a:	fba2 450a 	umull	r4, r5, r2, sl
 800df1e:	442b      	add	r3, r5
 800df20:	461d      	mov	r5, r3
 800df22:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
 800df26:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800df2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df2c:	3301      	adds	r3, #1
 800df2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df34:	429a      	cmp	r2, r3
 800df36:	dbe0      	blt.n	800defa <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x164>
  Scalar* output_ptr = output_data;
 800df38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800df3c:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int k = 0; k < outer_size; k++) {
 800df3e:	2300      	movs	r3, #0
 800df40:	657b      	str	r3, [r7, #84]	; 0x54
 800df42:	e033      	b.n	800dfac <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x216>
    for (int i = 0; i < inputs_count; ++i) {
 800df44:	2300      	movs	r3, #0
 800df46:	653b      	str	r3, [r7, #80]	; 0x50
 800df48:	e029      	b.n	800df9e <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x208>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800df4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df50:	4413      	add	r3, r2
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe fb06 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800df5c:	4603      	mov	r3, r0
 800df5e:	461a      	mov	r2, r3
 800df60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df62:	fb02 f303 	mul.w	r3, r2, r3
 800df66:	643b      	str	r3, [r7, #64]	; 0x40
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800df68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df6e:	4413      	add	r3, r2
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df76:	fb01 f303 	mul.w	r3, r1, r3
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800df80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	461a      	mov	r2, r3
 800df86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800df8a:	f00b fd3a 	bl	8019a02 <memcpy>
      output_ptr += copy_size;
 800df8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df94:	4413      	add	r3, r2
 800df96:	65bb      	str	r3, [r7, #88]	; 0x58
    for (int i = 0; i < inputs_count; ++i) {
 800df98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df9a:	3301      	adds	r3, #1
 800df9c:	653b      	str	r3, [r7, #80]	; 0x50
 800df9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	dbd1      	blt.n	800df4a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1b4>
  for (int k = 0; k < outer_size; k++) {
 800dfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	657b      	str	r3, [r7, #84]	; 0x54
 800dfac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfae:	17da      	asrs	r2, r3, #31
 800dfb0:	60bb      	str	r3, [r7, #8]
 800dfb2:	60fa      	str	r2, [r7, #12]
 800dfb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800dfb8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	4291      	cmp	r1, r2
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	eb71 0303 	sbcs.w	r3, r1, r3
 800dfc6:	dbbd      	blt.n	800df44 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1ae>
}
 800dfc8:	bf00      	nop
 800dfca:	bf00      	nop
 800dfcc:	3788      	adds	r7, #136	; 0x88
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dfd4 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKlEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>:
inline void GetAllTensorData(const TfLiteContext& context,
 800dfd4:	b590      	push	{r4, r7, lr}
 800dfd6:	b087      	sub	sp, #28
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < tensor_list.size; ++i) {
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	617b      	str	r3, [r7, #20]
 800dfe4:	e015      	b.n	800e012 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKlEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x3e>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	689a      	ldr	r2, [r3, #8]
 800dfea:	68b9      	ldr	r1, [r7, #8]
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	440b      	add	r3, r1
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	019b      	lsls	r3, r3, #6
 800dff6:	4413      	add	r3, r2
 800dff8:	613b      	str	r3, [r7, #16]
    all_data[i] = GetTensorData<T>(t);
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	18d4      	adds	r4, r2, r3
 800e002:	6938      	ldr	r0, [r7, #16]
 800e004:	f000 fbdd 	bl	800e7c2 <_ZN6tflite13GetTensorDataIKlEEPKT_PK12TfLiteTensor>
 800e008:	4603      	mov	r3, r0
 800e00a:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < tensor_list.size; ++i) {
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	3301      	adds	r3, #1
 800e010:	617b      	str	r3, [r7, #20]
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	429a      	cmp	r2, r3
 800e01a:	dbe4      	blt.n	800dfe6 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKlEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x12>
}
 800e01c:	bf00      	nop
 800e01e:	bf00      	nop
 800e020:	371c      	adds	r7, #28
 800e022:	46bd      	mov	sp, r7
 800e024:	bd90      	pop	{r4, r7, pc}

0800e026 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800e026:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e02a:	b0a2      	sub	sp, #136	; 0x88
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6378      	str	r0, [r7, #52]	; 0x34
 800e030:	6339      	str	r1, [r7, #48]	; 0x30
 800e032:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e034:	62bb      	str	r3, [r7, #40]	; 0x28
  int axis = params.axis;
 800e036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e038:	f993 3000 	ldrsb.w	r3, [r3]
 800e03c:	64fb      	str	r3, [r7, #76]	; 0x4c
  int inputs_count = params.inputs_count;
 800e03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e040:	899b      	ldrh	r3, [r3, #12]
 800e042:	64bb      	str	r3, [r7, #72]	; 0x48
  const int concat_dimensions = output_shape.DimensionsCount();
 800e044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e046:	f7fa fe19 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e04a:	6478      	str	r0, [r7, #68]	; 0x44
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800e04c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e04e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e050:	429a      	cmp	r2, r3
 800e052:	db01      	blt.n	800e058 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x32>
 800e054:	f00b f950 	bl	80192f8 <abort>
  int64_t concat_size = 0;
 800e058:	f04f 0200 	mov.w	r2, #0
 800e05c:	f04f 0300 	mov.w	r3, #0
 800e060:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800e064:	2300      	movs	r3, #0
 800e066:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e068:	e041      	b.n	800e0ee <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc8>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800e06a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e06c:	009a      	lsls	r2, r3, #2
 800e06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e070:	4413      	add	r3, r2
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4618      	mov	r0, r3
 800e076:	f7fa fe01 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e07a:	4602      	mov	r2, r0
 800e07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e07e:	4293      	cmp	r3, r2
 800e080:	d001      	beq.n	800e086 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x60>
 800e082:	f00b f939 	bl	80192f8 <abort>
    for (int j = 0; j < concat_dimensions; j++) {
 800e086:	2300      	movs	r3, #0
 800e088:	67bb      	str	r3, [r7, #120]	; 0x78
 800e08a:	e010      	b.n	800e0ae <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x88>
      if (j != axis) {
 800e08c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e090:	429a      	cmp	r2, r3
 800e092:	d009      	beq.n	800e0a8 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x82>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800e094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e096:	009a      	lsls	r2, r3, #2
 800e098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09a:	4413      	add	r3, r2
 800e09c:	6818      	ldr	r0, [r3, #0]
 800e09e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e0a4:	f7fe fef6 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800e0a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800e0ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	dbea      	blt.n	800e08c <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x66>
    concat_size += input_shapes[i]->Dims(axis);
 800e0b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0b8:	009a      	lsls	r2, r3, #2
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0bc:	4413      	add	r3, r2
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fe fa50 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	17da      	asrs	r2, r3, #31
 800e0cc:	61bb      	str	r3, [r7, #24]
 800e0ce:	61fa      	str	r2, [r7, #28]
 800e0d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e0d4:	69b9      	ldr	r1, [r7, #24]
 800e0d6:	1851      	adds	r1, r2, r1
 800e0d8:	6039      	str	r1, [r7, #0]
 800e0da:	69f9      	ldr	r1, [r7, #28]
 800e0dc:	414b      	adcs	r3, r1
 800e0de:	607b      	str	r3, [r7, #4]
 800e0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0e4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800e0e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e0ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	dbb9      	blt.n	800e06a <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x44>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800e0f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e0f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0fa:	f7fe fa35 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e0fe:	4603      	mov	r3, r0
 800e100:	17da      	asrs	r2, r3, #31
 800e102:	613b      	str	r3, [r7, #16]
 800e104:	617a      	str	r2, [r7, #20]
 800e106:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e10a:	6939      	ldr	r1, [r7, #16]
 800e10c:	6978      	ldr	r0, [r7, #20]
 800e10e:	4283      	cmp	r3, r0
 800e110:	bf08      	it	eq
 800e112:	428a      	cmpeq	r2, r1
 800e114:	d001      	beq.n	800e11a <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf4>
 800e116:	f00b f8ef 	bl	80192f8 <abort>
  int64_t outer_size = 1;
 800e11a:	f04f 0201 	mov.w	r2, #1
 800e11e:	f04f 0300 	mov.w	r3, #0
 800e122:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800e126:	2300      	movs	r3, #0
 800e128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e12a:	e020      	b.n	800e16e <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x148>
    outer_size *= output_shape.Dims(i);
 800e12c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e130:	f7fe fa1a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e134:	4603      	mov	r3, r0
 800e136:	17da      	asrs	r2, r3, #31
 800e138:	623b      	str	r3, [r7, #32]
 800e13a:	627a      	str	r2, [r7, #36]	; 0x24
 800e13c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e13e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e142:	4602      	mov	r2, r0
 800e144:	fb02 f203 	mul.w	r2, r2, r3
 800e148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e14a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800e14e:	fb01 f303 	mul.w	r3, r1, r3
 800e152:	4413      	add	r3, r2
 800e154:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e156:	6a39      	ldr	r1, [r7, #32]
 800e158:	fba2 8901 	umull	r8, r9, r2, r1
 800e15c:	444b      	add	r3, r9
 800e15e:	4699      	mov	r9, r3
 800e160:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800e164:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800e168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e16a:	3301      	adds	r3, #1
 800e16c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e16e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e172:	429a      	cmp	r2, r3
 800e174:	dbda      	blt.n	800e12c <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x106>
  int64_t base_inner_size = 1;
 800e176:	f04f 0201 	mov.w	r2, #1
 800e17a:	f04f 0300 	mov.w	r3, #0
 800e17e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800e182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e184:	3301      	adds	r3, #1
 800e186:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e188:	e01a      	b.n	800e1c0 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x19a>
    base_inner_size *= output_shape.Dims(i);
 800e18a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e18e:	f7fe f9eb 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e192:	4603      	mov	r3, r0
 800e194:	17da      	asrs	r2, r3, #31
 800e196:	469a      	mov	sl, r3
 800e198:	4693      	mov	fp, r2
 800e19a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e19c:	fb0a f203 	mul.w	r2, sl, r3
 800e1a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1a2:	fb0b f303 	mul.w	r3, fp, r3
 800e1a6:	4413      	add	r3, r2
 800e1a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1aa:	fba2 450a 	umull	r4, r5, r2, sl
 800e1ae:	442b      	add	r3, r5
 800e1b0:	461d      	mov	r5, r3
 800e1b2:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
 800e1b6:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800e1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1bc:	3301      	adds	r3, #1
 800e1be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	dbe0      	blt.n	800e18a <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x164>
  Scalar* output_ptr = output_data;
 800e1c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e1cc:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int k = 0; k < outer_size; k++) {
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	657b      	str	r3, [r7, #84]	; 0x54
 800e1d2:	e033      	b.n	800e23c <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x216>
    for (int i = 0; i < inputs_count; ++i) {
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	653b      	str	r3, [r7, #80]	; 0x50
 800e1d8:	e029      	b.n	800e22e <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x208>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800e1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e0:	4413      	add	r3, r2
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe f9be 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1f2:	fb02 f303 	mul.w	r3, r2, r3
 800e1f6:	643b      	str	r3, [r7, #64]	; 0x40
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800e1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1fe:	4413      	add	r3, r2
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e206:	fb01 f303 	mul.w	r3, r1, r3
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	63fb      	str	r3, [r7, #60]	; 0x3c
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800e210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	461a      	mov	r2, r3
 800e216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e218:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e21a:	f00b fbf2 	bl	8019a02 <memcpy>
      output_ptr += copy_size;
 800e21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e224:	4413      	add	r3, r2
 800e226:	65bb      	str	r3, [r7, #88]	; 0x58
    for (int i = 0; i < inputs_count; ++i) {
 800e228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e22a:	3301      	adds	r3, #1
 800e22c:	653b      	str	r3, [r7, #80]	; 0x50
 800e22e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e232:	429a      	cmp	r2, r3
 800e234:	dbd1      	blt.n	800e1da <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1b4>
  for (int k = 0; k < outer_size; k++) {
 800e236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e238:	3301      	adds	r3, #1
 800e23a:	657b      	str	r3, [r7, #84]	; 0x54
 800e23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e23e:	17da      	asrs	r2, r3, #31
 800e240:	60bb      	str	r3, [r7, #8]
 800e242:	60fa      	str	r2, [r7, #12]
 800e244:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e248:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e24c:	4621      	mov	r1, r4
 800e24e:	4291      	cmp	r1, r2
 800e250:	4629      	mov	r1, r5
 800e252:	eb71 0303 	sbcs.w	r3, r1, r3
 800e256:	dbbd      	blt.n	800e1d4 <_ZN6tflite13reference_ops13ConcatenationIlEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1ae>
}
 800e258:	bf00      	nop
 800e25a:	bf00      	nop
 800e25c:	3788      	adds	r7, #136	; 0x88
 800e25e:	46bd      	mov	sp, r7
 800e260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e264 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKaEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>:
inline void GetAllTensorData(const TfLiteContext& context,
 800e264:	b590      	push	{r4, r7, lr}
 800e266:	b087      	sub	sp, #28
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < tensor_list.size; ++i) {
 800e270:	2300      	movs	r3, #0
 800e272:	617b      	str	r3, [r7, #20]
 800e274:	e015      	b.n	800e2a2 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKaEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x3e>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	689a      	ldr	r2, [r3, #8]
 800e27a:	68b9      	ldr	r1, [r7, #8]
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	440b      	add	r3, r1
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	019b      	lsls	r3, r3, #6
 800e286:	4413      	add	r3, r2
 800e288:	613b      	str	r3, [r7, #16]
    all_data[i] = GetTensorData<T>(t);
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	18d4      	adds	r4, r2, r3
 800e292:	6938      	ldr	r0, [r7, #16]
 800e294:	f000 faa6 	bl	800e7e4 <_ZN6tflite13GetTensorDataIKaEEPKT_PK12TfLiteTensor>
 800e298:	4603      	mov	r3, r0
 800e29a:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < tensor_list.size; ++i) {
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	617b      	str	r3, [r7, #20]
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	697a      	ldr	r2, [r7, #20]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	dbe4      	blt.n	800e276 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKaEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x12>
}
 800e2ac:	bf00      	nop
 800e2ae:	bf00      	nop
 800e2b0:	371c      	adds	r7, #28
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd90      	pop	{r4, r7, pc}

0800e2b6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800e2b6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2ba:	b0a2      	sub	sp, #136	; 0x88
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6378      	str	r0, [r7, #52]	; 0x34
 800e2c0:	6339      	str	r1, [r7, #48]	; 0x30
 800e2c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e2c4:	62bb      	str	r3, [r7, #40]	; 0x28
  int axis = params.axis;
 800e2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c8:	f993 3000 	ldrsb.w	r3, [r3]
 800e2cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  int inputs_count = params.inputs_count;
 800e2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d0:	899b      	ldrh	r3, [r3, #12]
 800e2d2:	64bb      	str	r3, [r7, #72]	; 0x48
  const int concat_dimensions = output_shape.DimensionsCount();
 800e2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2d6:	f7fa fcd1 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e2da:	6478      	str	r0, [r7, #68]	; 0x44
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800e2dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	db01      	blt.n	800e2e8 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x32>
 800e2e4:	f00b f808 	bl	80192f8 <abort>
  int64_t concat_size = 0;
 800e2e8:	f04f 0200 	mov.w	r2, #0
 800e2ec:	f04f 0300 	mov.w	r3, #0
 800e2f0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e2f8:	e041      	b.n	800e37e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc8>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800e2fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e2fc:	009a      	lsls	r2, r3, #2
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	4413      	add	r3, r2
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4618      	mov	r0, r3
 800e306:	f7fa fcb9 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e30a:	4602      	mov	r2, r0
 800e30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e30e:	4293      	cmp	r3, r2
 800e310:	d001      	beq.n	800e316 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x60>
 800e312:	f00a fff1 	bl	80192f8 <abort>
    for (int j = 0; j < concat_dimensions; j++) {
 800e316:	2300      	movs	r3, #0
 800e318:	67bb      	str	r3, [r7, #120]	; 0x78
 800e31a:	e010      	b.n	800e33e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x88>
      if (j != axis) {
 800e31c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e320:	429a      	cmp	r2, r3
 800e322:	d009      	beq.n	800e338 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x82>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800e324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e326:	009a      	lsls	r2, r3, #2
 800e328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32a:	4413      	add	r3, r2
 800e32c:	6818      	ldr	r0, [r3, #0]
 800e32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e332:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e334:	f7fe fdae 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800e338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e33a:	3301      	adds	r3, #1
 800e33c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e33e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e342:	429a      	cmp	r2, r3
 800e344:	dbea      	blt.n	800e31c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x66>
    concat_size += input_shapes[i]->Dims(axis);
 800e346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e348:	009a      	lsls	r2, r3, #2
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	4413      	add	r3, r2
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e352:	4618      	mov	r0, r3
 800e354:	f7fe f908 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e358:	4603      	mov	r3, r0
 800e35a:	17da      	asrs	r2, r3, #31
 800e35c:	61bb      	str	r3, [r7, #24]
 800e35e:	61fa      	str	r2, [r7, #28]
 800e360:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e364:	69b9      	ldr	r1, [r7, #24]
 800e366:	1851      	adds	r1, r2, r1
 800e368:	6039      	str	r1, [r7, #0]
 800e36a:	69f9      	ldr	r1, [r7, #28]
 800e36c:	414b      	adcs	r3, r1
 800e36e:	607b      	str	r3, [r7, #4]
 800e370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e374:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800e378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e37a:	3301      	adds	r3, #1
 800e37c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e37e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e382:	429a      	cmp	r2, r3
 800e384:	dbb9      	blt.n	800e2fa <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x44>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800e386:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e38a:	f7fe f8ed 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e38e:	4603      	mov	r3, r0
 800e390:	17da      	asrs	r2, r3, #31
 800e392:	613b      	str	r3, [r7, #16]
 800e394:	617a      	str	r2, [r7, #20]
 800e396:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e39a:	6939      	ldr	r1, [r7, #16]
 800e39c:	6978      	ldr	r0, [r7, #20]
 800e39e:	4283      	cmp	r3, r0
 800e3a0:	bf08      	it	eq
 800e3a2:	428a      	cmpeq	r2, r1
 800e3a4:	d001      	beq.n	800e3aa <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf4>
 800e3a6:	f00a ffa7 	bl	80192f8 <abort>
  int64_t outer_size = 1;
 800e3aa:	f04f 0201 	mov.w	r2, #1
 800e3ae:	f04f 0300 	mov.w	r3, #0
 800e3b2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e3ba:	e020      	b.n	800e3fe <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x148>
    outer_size *= output_shape.Dims(i);
 800e3bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c0:	f7fe f8d2 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	17da      	asrs	r2, r3, #31
 800e3c8:	623b      	str	r3, [r7, #32]
 800e3ca:	627a      	str	r2, [r7, #36]	; 0x24
 800e3cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	fb02 f203 	mul.w	r2, r2, r3
 800e3d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3da:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800e3de:	fb01 f303 	mul.w	r3, r1, r3
 800e3e2:	4413      	add	r3, r2
 800e3e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e3e6:	6a39      	ldr	r1, [r7, #32]
 800e3e8:	fba2 8901 	umull	r8, r9, r2, r1
 800e3ec:	444b      	add	r3, r9
 800e3ee:	4699      	mov	r9, r3
 800e3f0:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800e3f4:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800e3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e3fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e402:	429a      	cmp	r2, r3
 800e404:	dbda      	blt.n	800e3bc <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x106>
  int64_t base_inner_size = 1;
 800e406:	f04f 0201 	mov.w	r2, #1
 800e40a:	f04f 0300 	mov.w	r3, #0
 800e40e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800e412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e414:	3301      	adds	r3, #1
 800e416:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e418:	e01a      	b.n	800e450 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x19a>
    base_inner_size *= output_shape.Dims(i);
 800e41a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e41e:	f7fe f8a3 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e422:	4603      	mov	r3, r0
 800e424:	17da      	asrs	r2, r3, #31
 800e426:	469a      	mov	sl, r3
 800e428:	4693      	mov	fp, r2
 800e42a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e42c:	fb0a f203 	mul.w	r2, sl, r3
 800e430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e432:	fb0b f303 	mul.w	r3, fp, r3
 800e436:	4413      	add	r3, r2
 800e438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e43a:	fba2 450a 	umull	r4, r5, r2, sl
 800e43e:	442b      	add	r3, r5
 800e440:	461d      	mov	r5, r3
 800e442:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
 800e446:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800e44a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e44c:	3301      	adds	r3, #1
 800e44e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e450:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e454:	429a      	cmp	r2, r3
 800e456:	dbe0      	blt.n	800e41a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x164>
  Scalar* output_ptr = output_data;
 800e458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e45c:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int k = 0; k < outer_size; k++) {
 800e45e:	2300      	movs	r3, #0
 800e460:	657b      	str	r3, [r7, #84]	; 0x54
 800e462:	e030      	b.n	800e4c6 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x210>
    for (int i = 0; i < inputs_count; ++i) {
 800e464:	2300      	movs	r3, #0
 800e466:	653b      	str	r3, [r7, #80]	; 0x50
 800e468:	e026      	b.n	800e4b8 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x202>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800e46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e470:	4413      	add	r3, r2
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe f876 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e482:	fb02 f303 	mul.w	r3, r2, r3
 800e486:	643b      	str	r3, [r7, #64]	; 0x40
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800e488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e48e:	4413      	add	r3, r2
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e496:	fb01 f202 	mul.w	r2, r1, r2
 800e49a:	4413      	add	r3, r2
 800e49c:	63fb      	str	r3, [r7, #60]	; 0x3c
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800e49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e4a6:	f00b faac 	bl	8019a02 <memcpy>
      output_ptr += copy_size;
 800e4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4ae:	4413      	add	r3, r2
 800e4b0:	65bb      	str	r3, [r7, #88]	; 0x58
    for (int i = 0; i < inputs_count; ++i) {
 800e4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	653b      	str	r3, [r7, #80]	; 0x50
 800e4b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	dbd4      	blt.n	800e46a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1b4>
  for (int k = 0; k < outer_size; k++) {
 800e4c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	657b      	str	r3, [r7, #84]	; 0x54
 800e4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4c8:	17da      	asrs	r2, r3, #31
 800e4ca:	60bb      	str	r3, [r7, #8]
 800e4cc:	60fa      	str	r2, [r7, #12]
 800e4ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e4d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	4291      	cmp	r1, r2
 800e4da:	4629      	mov	r1, r5
 800e4dc:	eb71 0303 	sbcs.w	r3, r1, r3
 800e4e0:	dbc0      	blt.n	800e464 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1ae>
}
 800e4e2:	bf00      	nop
 800e4e4:	bf00      	nop
 800e4e6:	3788      	adds	r7, #136	; 0x88
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e4ee <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKxEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_>:
inline void GetAllTensorData(const TfLiteContext& context,
 800e4ee:	b590      	push	{r4, r7, lr}
 800e4f0:	b087      	sub	sp, #28
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	60f8      	str	r0, [r7, #12]
 800e4f6:	60b9      	str	r1, [r7, #8]
 800e4f8:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < tensor_list.size; ++i) {
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	617b      	str	r3, [r7, #20]
 800e4fe:	e015      	b.n	800e52c <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKxEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x3e>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	689a      	ldr	r2, [r3, #8]
 800e504:	68b9      	ldr	r1, [r7, #8]
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	440b      	add	r3, r1
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	019b      	lsls	r3, r3, #6
 800e510:	4413      	add	r3, r2
 800e512:	613b      	str	r3, [r7, #16]
    all_data[i] = GetTensorData<T>(t);
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	18d4      	adds	r4, r2, r3
 800e51c:	6938      	ldr	r0, [r7, #16]
 800e51e:	f000 f972 	bl	800e806 <_ZN6tflite13GetTensorDataIKxEEPKT_PK12TfLiteTensor>
 800e522:	4603      	mov	r3, r0
 800e524:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < tensor_list.size; ++i) {
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	3301      	adds	r3, #1
 800e52a:	617b      	str	r3, [r7, #20]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	697a      	ldr	r2, [r7, #20]
 800e532:	429a      	cmp	r2, r3
 800e534:	dbe4      	blt.n	800e500 <_ZN6tflite3ops5micro13concatenation16GetAllTensorDataIKxEEvRK13TfLiteContextRK14TfLiteIntArrayPPT_+0x12>
}
 800e536:	bf00      	nop
 800e538:	bf00      	nop
 800e53a:	371c      	adds	r7, #28
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd90      	pop	{r4, r7, pc}

0800e540 <_ZN6tflite13GetTensorDataIxEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <_ZN6tflite13GetTensorDataIxEEPT_P12TfLiteTensor+0x14>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	e000      	b.n	800e556 <_ZN6tflite13GetTensorDataIxEEPT_P12TfLiteTensor+0x16>
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
 800e562:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e566:	b0a2      	sub	sp, #136	; 0x88
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6378      	str	r0, [r7, #52]	; 0x34
 800e56c:	6339      	str	r1, [r7, #48]	; 0x30
 800e56e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e570:	62bb      	str	r3, [r7, #40]	; 0x28
  int axis = params.axis;
 800e572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e574:	f993 3000 	ldrsb.w	r3, [r3]
 800e578:	64fb      	str	r3, [r7, #76]	; 0x4c
  int inputs_count = params.inputs_count;
 800e57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57c:	899b      	ldrh	r3, [r3, #12]
 800e57e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int concat_dimensions = output_shape.DimensionsCount();
 800e580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e582:	f7fa fb7b 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e586:	6478      	str	r0, [r7, #68]	; 0x44
  TFLITE_DCHECK_LT(axis, concat_dimensions);
 800e588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e58c:	429a      	cmp	r2, r3
 800e58e:	db01      	blt.n	800e594 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x32>
 800e590:	f00a feb2 	bl	80192f8 <abort>
  int64_t concat_size = 0;
 800e594:	f04f 0200 	mov.w	r2, #0
 800e598:	f04f 0300 	mov.w	r3, #0
 800e59c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e5a4:	e041      	b.n	800e62a <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc8>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
 800e5a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5a8:	009a      	lsls	r2, r3, #2
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ac:	4413      	add	r3, r2
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fa fb63 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d001      	beq.n	800e5c2 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x60>
 800e5be:	f00a fe9b 	bl	80192f8 <abort>
    for (int j = 0; j < concat_dimensions; j++) {
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5c6:	e010      	b.n	800e5ea <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x88>
      if (j != axis) {
 800e5c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d009      	beq.n	800e5e4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x82>
        MatchingDim(*input_shapes[i], j, output_shape, j);
 800e5d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5d2:	009a      	lsls	r2, r3, #2
 800e5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d6:	4413      	add	r3, r2
 800e5d8:	6818      	ldr	r0, [r3, #0]
 800e5da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5de:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e5e0:	f7fe fc58 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
 800e5e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	dbea      	blt.n	800e5c8 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x66>
    concat_size += input_shapes[i]->Dims(axis);
 800e5f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5f4:	009a      	lsls	r2, r3, #2
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	4413      	add	r3, r2
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fd ffb2 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e604:	4603      	mov	r3, r0
 800e606:	17da      	asrs	r2, r3, #31
 800e608:	61bb      	str	r3, [r7, #24]
 800e60a:	61fa      	str	r2, [r7, #28]
 800e60c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e610:	69b9      	ldr	r1, [r7, #24]
 800e612:	1851      	adds	r1, r2, r1
 800e614:	6039      	str	r1, [r7, #0]
 800e616:	69f9      	ldr	r1, [r7, #28]
 800e618:	414b      	adcs	r3, r1
 800e61a:	607b      	str	r3, [r7, #4]
 800e61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e620:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (int i = 0; i < inputs_count; i++) {
 800e624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e626:	3301      	adds	r3, #1
 800e628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e62a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e62e:	429a      	cmp	r2, r3
 800e630:	dbb9      	blt.n	800e5a6 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x44>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
 800e632:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e636:	f7fd ff97 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e63a:	4603      	mov	r3, r0
 800e63c:	17da      	asrs	r2, r3, #31
 800e63e:	613b      	str	r3, [r7, #16]
 800e640:	617a      	str	r2, [r7, #20]
 800e642:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e646:	6939      	ldr	r1, [r7, #16]
 800e648:	6978      	ldr	r0, [r7, #20]
 800e64a:	4283      	cmp	r3, r0
 800e64c:	bf08      	it	eq
 800e64e:	428a      	cmpeq	r2, r1
 800e650:	d001      	beq.n	800e656 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xf4>
 800e652:	f00a fe51 	bl	80192f8 <abort>
  int64_t outer_size = 1;
 800e656:	f04f 0201 	mov.w	r2, #1
 800e65a:	f04f 0300 	mov.w	r3, #0
 800e65e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800e662:	2300      	movs	r3, #0
 800e664:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e666:	e020      	b.n	800e6aa <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x148>
    outer_size *= output_shape.Dims(i);
 800e668:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e66c:	f7fd ff7c 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e670:	4603      	mov	r3, r0
 800e672:	17da      	asrs	r2, r3, #31
 800e674:	623b      	str	r3, [r7, #32]
 800e676:	627a      	str	r2, [r7, #36]	; 0x24
 800e678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e67a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e67e:	4602      	mov	r2, r0
 800e680:	fb02 f203 	mul.w	r2, r2, r3
 800e684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e686:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800e68a:	fb01 f303 	mul.w	r3, r1, r3
 800e68e:	4413      	add	r3, r2
 800e690:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e692:	6a39      	ldr	r1, [r7, #32]
 800e694:	fba2 8901 	umull	r8, r9, r2, r1
 800e698:	444b      	add	r3, r9
 800e69a:	4699      	mov	r9, r3
 800e69c:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800e6a0:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
  for (int i = 0; i < axis; ++i) {
 800e6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	dbda      	blt.n	800e668 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x106>
  int64_t base_inner_size = 1;
 800e6b2:	f04f 0201 	mov.w	r2, #1
 800e6b6:	f04f 0300 	mov.w	r3, #0
 800e6ba:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800e6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6c4:	e01a      	b.n	800e6fc <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x19a>
    base_inner_size *= output_shape.Dims(i);
 800e6c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ca:	f7fd ff4d 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	17da      	asrs	r2, r3, #31
 800e6d2:	469a      	mov	sl, r3
 800e6d4:	4693      	mov	fp, r2
 800e6d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6d8:	fb0a f203 	mul.w	r2, sl, r3
 800e6dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6de:	fb0b f303 	mul.w	r3, fp, r3
 800e6e2:	4413      	add	r3, r2
 800e6e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e6e6:	fba2 450a 	umull	r4, r5, r2, sl
 800e6ea:	442b      	add	r3, r5
 800e6ec:	461d      	mov	r5, r3
 800e6ee:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
 800e6f2:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  for (int i = axis + 1; i < concat_dimensions; ++i) {
 800e6f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e700:	429a      	cmp	r2, r3
 800e702:	dbe0      	blt.n	800e6c6 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x164>
  Scalar* output_ptr = output_data;
 800e704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e708:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int k = 0; k < outer_size; k++) {
 800e70a:	2300      	movs	r3, #0
 800e70c:	657b      	str	r3, [r7, #84]	; 0x54
 800e70e:	e033      	b.n	800e778 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x216>
    for (int i = 0; i < inputs_count; ++i) {
 800e710:	2300      	movs	r3, #0
 800e712:	653b      	str	r3, [r7, #80]	; 0x50
 800e714:	e029      	b.n	800e76a <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x208>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
 800e716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e71c:	4413      	add	r3, r2
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e722:	4618      	mov	r0, r3
 800e724:	f7fd ff20 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e728:	4603      	mov	r3, r0
 800e72a:	461a      	mov	r2, r3
 800e72c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e72e:	fb02 f303 	mul.w	r3, r2, r3
 800e732:	643b      	str	r3, [r7, #64]	; 0x40
      const Scalar* input_ptr = input_data[i] + k * copy_size;
 800e734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e73a:	4413      	add	r3, r2
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e742:	fb01 f303 	mul.w	r3, r1, r3
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	4413      	add	r3, r2
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
 800e74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e74e:	00db      	lsls	r3, r3, #3
 800e750:	461a      	mov	r2, r3
 800e752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e754:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e756:	f00b f954 	bl	8019a02 <memcpy>
      output_ptr += copy_size;
 800e75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e75c:	00db      	lsls	r3, r3, #3
 800e75e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e760:	4413      	add	r3, r2
 800e762:	65bb      	str	r3, [r7, #88]	; 0x58
    for (int i = 0; i < inputs_count; ++i) {
 800e764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e766:	3301      	adds	r3, #1
 800e768:	653b      	str	r3, [r7, #80]	; 0x50
 800e76a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e76c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e76e:	429a      	cmp	r2, r3
 800e770:	dbd1      	blt.n	800e716 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1b4>
  for (int k = 0; k < outer_size; k++) {
 800e772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e774:	3301      	adds	r3, #1
 800e776:	657b      	str	r3, [r7, #84]	; 0x54
 800e778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e77a:	17da      	asrs	r2, r3, #31
 800e77c:	60bb      	str	r3, [r7, #8]
 800e77e:	60fa      	str	r2, [r7, #12]
 800e780:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e784:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e788:	4621      	mov	r1, r4
 800e78a:	4291      	cmp	r1, r2
 800e78c:	4629      	mov	r1, r5
 800e78e:	eb71 0303 	sbcs.w	r3, r1, r3
 800e792:	dbbd      	blt.n	800e710 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1ae>
}
 800e794:	bf00      	nop
 800e796:	bf00      	nop
 800e798:	3788      	adds	r7, #136	; 0x88
 800e79a:	46bd      	mov	sp, r7
 800e79c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e7a0 <_ZN6tflite13GetTensorDataIKfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d002      	beq.n	800e7b4 <_ZN6tflite13GetTensorDataIKfEEPKT_PK12TfLiteTensor+0x14>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e7b2:	e000      	b.n	800e7b6 <_ZN6tflite13GetTensorDataIKfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <_ZN6tflite13GetTensorDataIKlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e7c2:	b480      	push	{r7}
 800e7c4:	b083      	sub	sp, #12
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <_ZN6tflite13GetTensorDataIKlEEPKT_PK12TfLiteTensor+0x14>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e7d4:	e000      	b.n	800e7d8 <_ZN6tflite13GetTensorDataIKlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <_ZN6tflite13GetTensorDataIKaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <_ZN6tflite13GetTensorDataIKaEEPKT_PK12TfLiteTensor+0x14>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e7f6:	e000      	b.n	800e7fa <_ZN6tflite13GetTensorDataIKaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	370c      	adds	r7, #12
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <_ZN6tflite13GetTensorDataIKxEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e806:	b480      	push	{r7}
 800e808:	b083      	sub	sp, #12
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <_ZN6tflite13GetTensorDataIKxEEPKT_PK12TfLiteTensor+0x14>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e818:	e000      	b.n	800e81c <_ZN6tflite13GetTensorDataIKxEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           int shift) {
 800e828:	b580      	push	{r7, lr}
 800e82a:	b086      	sub	sp, #24
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	607a      	str	r2, [r7, #4]
  int left_shift = shift > 0 ? shift : 0;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e83a:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	dc02      	bgt.n	800e848 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	425b      	negs	r3, r3
 800e846:	e000      	b.n	800e84a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800e848:	2300      	movs	r3, #0
 800e84a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	fa02 f303 	lsl.w	r3, r2, r3
 800e854:	68b9      	ldr	r1, [r7, #8]
 800e856:	4618      	mov	r0, r3
 800e858:	f7fd ff9e 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e85c:	4603      	mov	r3, r0
 800e85e:	6939      	ldr	r1, [r7, #16]
 800e860:	4618      	mov	r0, r3
 800e862:	f7fe f989 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e866:	4603      	mov	r3, r0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <_ZN3ruy8profiler10ScopeLabelD1Ev>:
  template <typename... Args>
  explicit ScopeLabel(Args...) {}

  // This destructor is needed to consistently silence clang's -Wunused-variable
  // which seems to trigger semi-randomly.
  ~ScopeLabel() {}
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr

0800e886 <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>:
  explicit ScopeLabel(Args...) {}
 800e886:	b480      	push	{r7}
 800e888:	b083      	sub	sp, #12
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
 800e88e:	6039      	str	r1, [r7, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	4618      	mov	r0, r3
 800e894:	370c      	adds	r7, #12
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr

0800e89e <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	ed87 0a01 	vstr	s0, [r7, #4]
 800e8a8:	ed97 0a01 	vldr	s0, [r7, #4]
 800e8ac:	f00a fad6 	bl	8018e5c <sqrtf>
 800e8b0:	eef0 7a40 	vmov.f32	s15, s0
 800e8b4:	eeb0 0a67 	vmov.f32	s0, s15
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b086      	sub	sp, #24
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7fa f9d7 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e8ce:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	db03      	blt.n	800e8de <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800e8d6:	683a      	ldr	r2, [r7, #0]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	db01      	blt.n	800e8e2 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800e8de:	f00a fd0b 	bl	80192f8 <abort>
  const auto* dims_data = shape.DimsData();
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7fd fe65 	bl	800c5b2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800e8e8:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	613b      	str	r3, [r7, #16]
 800e8f2:	e011      	b.n	800e918 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800e8f4:	693a      	ldr	r2, [r7, #16]
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d005      	beq.n	800e908 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	4413      	add	r3, r2
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	e000      	b.n	800e90a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 800e908:	2301      	movs	r3, #1
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	fb02 f303 	mul.w	r3, r2, r3
 800e910:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	3301      	adds	r3, #1
 800e916:	613b      	str	r3, [r7, #16]
 800e918:	693a      	ldr	r2, [r7, #16]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	dbe9      	blt.n	800e8f4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 800e920:	697b      	ldr	r3, [r7, #20]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800e92a:	b590      	push	{r4, r7, lr}
 800e92c:	b087      	sub	sp, #28
 800e92e:	af00      	add	r7, sp, #0
 800e930:	60f8      	str	r0, [r7, #12]
 800e932:	60b9      	str	r1, [r7, #8]
 800e934:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f7fa f9a0 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e93c:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800e93e:	2300      	movs	r3, #0
 800e940:	617b      	str	r3, [r7, #20]
 800e942:	e014      	b.n	800e96e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 800e944:	697a      	ldr	r2, [r7, #20]
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d00d      	beq.n	800e968 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800e94c:	6979      	ldr	r1, [r7, #20]
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f7fd fe0a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e954:	4604      	mov	r4, r0
 800e956:	6979      	ldr	r1, [r7, #20]
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7fd fe05 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e95e:	4603      	mov	r3, r0
 800e960:	429c      	cmp	r4, r3
 800e962:	d001      	beq.n	800e968 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 800e964:	f00a fcc8 	bl	80192f8 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	3301      	adds	r3, #1
 800e96c:	617b      	str	r3, [r7, #20]
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	429a      	cmp	r2, r3
 800e974:	dbe6      	blt.n	800e944 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800e976:	68b9      	ldr	r1, [r7, #8]
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f7ff ffa0 	bl	800e8be <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800e97e:	4603      	mov	r3, r0
}
 800e980:	4618      	mov	r0, r3
 800e982:	371c      	adds	r7, #28
 800e984:	46bd      	mov	sp, r7
 800e986:	bd90      	pop	{r4, r7, pc}

0800e988 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi>:
                                             int* output_shift) {
 800e988:	b590      	push	{r4, r7, lr}
 800e98a:	b08f      	sub	sp, #60	; 0x3c
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_GE(input, 0);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	da01      	bge.n	800e9a0 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x18>
 800e99c:	f00a fcac 	bl	80192f8 <abort>
  if (input <= 1) {
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	dc08      	bgt.n	800e9b8 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x30>
    *output_inv_sqrt = std::numeric_limits<std::int32_t>::max();
 800e9a6:	f7f9 fc4e 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	601a      	str	r2, [r3, #0]
    *output_shift = 0;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]
 800e9b6:	e0b2      	b.n	800eb1e <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x196>
  TFLITE_DCHECK_GT(input, 1);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	dc01      	bgt.n	800e9c2 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x3a>
 800e9be:	f00a fc9b 	bl	80192f8 <abort>
  *output_shift = 11;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	220b      	movs	r2, #11
 800e9c6:	601a      	str	r2, [r3, #0]
  while (input >= (1 << 29)) {
 800e9c8:	e00a      	b.n	800e9e0 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x58>
    input /= 4;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	da00      	bge.n	800e9d2 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x4a>
 800e9d0:	3303      	adds	r3, #3
 800e9d2:	109b      	asrs	r3, r3, #2
 800e9d4:	60fb      	str	r3, [r7, #12]
    ++*output_shift;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	1c5a      	adds	r2, r3, #1
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	601a      	str	r2, [r3, #0]
  while (input >= (1 << 29)) {
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9e6:	daf0      	bge.n	800e9ca <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x42>
      CountLeadingZeros(static_cast<uint32>(input)) - 1;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f000 fb5d 	bl	800f0aa <_ZN6tflite17CountLeadingZerosImEEiT_>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	633b      	str	r3, [r7, #48]	; 0x30
  const unsigned max_left_shift_bit_pairs = max_left_shift_bits / 2;
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	085b      	lsrs	r3, r3, #1
 800e9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  const unsigned left_shift_bit_pairs = max_left_shift_bit_pairs - 1;
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	3b01      	subs	r3, #1
 800ea00:	62bb      	str	r3, [r7, #40]	; 0x28
  *output_shift -= left_shift_bit_pairs;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	601a      	str	r2, [r3, #0]
  input <<= 2 * left_shift_bit_pairs;
 800ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	fa02 f303 	lsl.w	r3, r2, r3
 800ea1c:	60fb      	str	r3, [r7, #12]
  TFLITE_DCHECK_GE(input, (1 << 27));
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea24:	da01      	bge.n	800ea2a <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0xa2>
 800ea26:	f00a fc67 	bl	80192f8 <abort>
  TFLITE_DCHECK_LT(input, (1 << 29));
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea30:	db01      	blt.n	800ea36 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0xae>
 800ea32:	f00a fc61 	bl	80192f8 <abort>
  const F3 fixedpoint_input = F3::FromRaw(input >> 1);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	105b      	asrs	r3, r3, #1
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 fb52 	bl	800f0e4 <_ZN8gemmlowp10FixedPointIlLi3EE7FromRawEl>
 800ea40:	4603      	mov	r3, r0
 800ea42:	627b      	str	r3, [r7, #36]	; 0x24
      SaturatingRoundingMultiplyByPOT<-1>(fixedpoint_input);
 800ea44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea46:	f000 fb5e 	bl	800f106 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi3EEENS_10FixedPointIT0_XT1_EEES3_>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	623b      	str	r3, [r7, #32]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F3, (1 << 28) + (1 << 27), 1.5);
 800ea4e:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 800ea52:	f000 fb82 	bl	800f15a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi3EEEEENT_13ScalarRawTypeEl>
 800ea56:	4603      	mov	r3, r0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 fb6a 	bl	800f132 <_ZN8gemmlowp10FixedPointIlLi3EE13FromScalarRawEl>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	61fb      	str	r3, [r7, #28]
  F3 x = F3::One();
 800ea62:	f000 fb87 	bl	800f174 <_ZN8gemmlowp10FixedPointIlLi3EE3OneEv>
 800ea66:	4603      	mov	r3, r0
 800ea68:	61bb      	str	r3, [r7, #24]
  for (int i = 0; i < 5; i++) {
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ea6e:	e025      	b.n	800eabc <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x134>
    const F3 x3 = Rescale<3>(x * x * x);
 800ea70:	69b9      	ldr	r1, [r7, #24]
 800ea72:	69b8      	ldr	r0, [r7, #24]
 800ea74:	f000 fb87 	bl	800f186 <_ZN8gemmlowpmlIlLi3ELi3EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	69b9      	ldr	r1, [r7, #24]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f000 fba4 	bl	800f1ca <_ZN8gemmlowpmlIlLi6ELi3EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea82:	4603      	mov	r3, r0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f000 fbc2 	bl	800f20e <_ZN8gemmlowp7RescaleILi3ElLi9EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	613b      	str	r3, [r7, #16]
    x = Rescale<3>(fixedpoint_half_three * x - fixedpoint_half_input * x3);
 800ea8e:	69b9      	ldr	r1, [r7, #24]
 800ea90:	69f8      	ldr	r0, [r7, #28]
 800ea92:	f000 fb78 	bl	800f186 <_ZN8gemmlowpmlIlLi3ELi3EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ea96:	4604      	mov	r4, r0
 800ea98:	6939      	ldr	r1, [r7, #16]
 800ea9a:	6a38      	ldr	r0, [r7, #32]
 800ea9c:	f000 fb73 	bl	800f186 <_ZN8gemmlowpmlIlLi3ELi3EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f000 fbcc 	bl	800f242 <_ZN8gemmlowpmiIlLi6EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	4618      	mov	r0, r3
 800eaae:	f000 fbe6 	bl	800f27e <_ZN8gemmlowp7RescaleILi3ElLi6EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800eab2:	4603      	mov	r3, r0
 800eab4:	61bb      	str	r3, [r7, #24]
  for (int i = 0; i < 5; i++) {
 800eab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab8:	3301      	adds	r3, #1
 800eaba:	637b      	str	r3, [r7, #52]	; 0x34
 800eabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	ddd6      	ble.n	800ea70 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0xe8>
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F0, 1518500250, std::sqrt(2.) / 2.);
 800eac2:	4818      	ldr	r0, [pc, #96]	; (800eb24 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x19c>)
 800eac4:	f000 fc09 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800eac8:	4603      	mov	r3, r0
 800eaca:	4618      	mov	r0, r3
 800eacc:	f000 fbf1 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800ead0:	4603      	mov	r3, r0
 800ead2:	617b      	str	r3, [r7, #20]
  x = x * fixedpoint_half_sqrt_2;
 800ead4:	6979      	ldr	r1, [r7, #20]
 800ead6:	69b8      	ldr	r0, [r7, #24]
 800ead8:	f000 fc0c 	bl	800f2f4 <_ZN8gemmlowpmlIlLi3ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eadc:	4603      	mov	r3, r0
 800eade:	61bb      	str	r3, [r7, #24]
  *output_inv_sqrt = x.raw();
 800eae0:	f107 0318 	add.w	r3, r7, #24
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 fc27 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800eaea:	4603      	mov	r3, r0
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	601a      	str	r2, [r3, #0]
  if (*output_shift < 0) {
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	da0a      	bge.n	800eb10 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi+0x188>
    *output_inv_sqrt <<= -*output_shift;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	425b      	negs	r3, r3
 800eb04:	409a      	lsls	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	601a      	str	r2, [r3, #0]
    *output_shift = 0;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	601a      	str	r2, [r3, #0]
  *output_shift *= reverse_shift;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	fb03 f202 	mul.w	r2, r3, r2
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	601a      	str	r2, [r3, #0]
}
 800eb1e:	373c      	adds	r7, #60	; 0x3c
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd90      	pop	{r4, r7, pc}
 800eb24:	5a82799a 	.word	0x5a82799a

0800eb28 <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa>:
namespace tflite {
namespace reference_integer_ops {

inline void L2Normalization(int32_t input_zero_point, int32_t outer_size,
                            int32_t depth, const int8* input_data,
                            int8* output_data) {
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b090      	sub	sp, #64	; 0x40
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	603b      	str	r3, [r7, #0]
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  // The output scale must be in sync with Prepare().
  // Output is in 1/128 scale so the actual output range is nudged from [-1, 1]
  // to [-1, 127/128].
  static constexpr int32_t kOutputScale = 7;
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
 800eb36:	2300      	movs	r3, #0
 800eb38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb3a:	e071      	b.n	800ec20 <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa+0xf8>
    // int32 = (int8 - int8) ^ 2.
    // ([-128, 127] - [-128, 127]) ^ 2 = [0, (2^8 - 1)^2] so the accumulator is
    // safe from overflowing in at least 2^16 steps.
    int32_t acc = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
 800eb40:	2300      	movs	r3, #0
 800eb42:	637b      	str	r3, [r7, #52]	; 0x34
 800eb44:	e017      	b.n	800eb76 <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa+0x4e>
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb4a:	fb03 f202 	mul.w	r2, r3, r2
 800eb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb50:	4413      	add	r3, r2
 800eb52:	461a      	mov	r2, r3
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	4413      	add	r3, r2
 800eb58:	f993 3000 	ldrsb.w	r3, [r3]
 800eb5c:	461a      	mov	r2, r3
      int32_t input =
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	62bb      	str	r3, [r7, #40]	; 0x28
      acc += input * input;
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	fb03 f303 	mul.w	r3, r3, r3
 800eb6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb6c:	4413      	add	r3, r2
 800eb6e:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
 800eb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb72:	3301      	adds	r3, #1
 800eb74:	637b      	str	r3, [r7, #52]	; 0x34
 800eb76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	dbe3      	blt.n	800eb46 <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa+0x1e>
    }
    int32_t inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(acc, kReverseShift, &inv_l2norm_multiplier,
 800eb7e:	f107 0318 	add.w	r3, r7, #24
 800eb82:	f107 021c 	add.w	r2, r7, #28
 800eb86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800eb8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb8c:	f7ff fefc 	bl	800e988 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi>
                                     &inv_l2norm_shift);

    for (int inner_index = 0; inner_index < depth; ++inner_index) {
 800eb90:	2300      	movs	r3, #0
 800eb92:	633b      	str	r3, [r7, #48]	; 0x30
 800eb94:	e03d      	b.n	800ec12 <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa+0xea>
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb9a:	fb03 f202 	mul.w	r2, r3, r2
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	4413      	add	r3, r2
 800eba2:	461a      	mov	r2, r3
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	4413      	add	r3, r2
 800eba8:	f993 3000 	ldrsb.w	r3, [r3]
 800ebac:	461a      	mov	r2, r3
      int32_t input =
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	62fb      	str	r3, [r7, #44]	; 0x2c

      // Rescale and downcast. Rescale is folded into the division.
      int32_t output_in_q24 = MultiplyByQuantizedMultiplier(
 800ebb4:	69f9      	ldr	r1, [r7, #28]
          input, inv_l2norm_multiplier, inv_l2norm_shift + kOutputScale);
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	3307      	adds	r3, #7
      int32_t output_in_q24 = MultiplyByQuantizedMultiplier(
 800ebba:	461a      	mov	r2, r3
 800ebbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebbe:	f7ff fe33 	bl	800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800ebc2:	4603      	mov	r3, r0
          input, inv_l2norm_multiplier, inv_l2norm_shift + kOutputScale);
 800ebc4:	617b      	str	r3, [r7, #20]
      output_in_q24 =
          std::min(static_cast<int32_t>(kMaxInt8),
 800ebc6:	237f      	movs	r3, #127	; 0x7f
 800ebc8:	623b      	str	r3, [r7, #32]
                   std::max(static_cast<int32_t>(kMinInt8), output_in_q24));
 800ebca:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800ebce:	627b      	str	r3, [r7, #36]	; 0x24
          std::min(static_cast<int32_t>(kMaxInt8),
 800ebd0:	f107 0214 	add.w	r2, r7, #20
 800ebd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebd8:	4611      	mov	r1, r2
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f9 ffd1 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	f107 0320 	add.w	r3, r7, #32
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7f9 ffde 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	681b      	ldr	r3, [r3, #0]
      output_in_q24 =
 800ebf2:	617b      	str	r3, [r7, #20]
      output_data[depth * outer_index + inner_index] =
 800ebf4:	6979      	ldr	r1, [r7, #20]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebfa:	fb03 f202 	mul.w	r2, r3, r2
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	4413      	add	r3, r2
 800ec02:	461a      	mov	r2, r3
 800ec04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec06:	4413      	add	r3, r2
 800ec08:	b24a      	sxtb	r2, r1
 800ec0a:	701a      	strb	r2, [r3, #0]
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0e:	3301      	adds	r3, #1
 800ec10:	633b      	str	r3, [r7, #48]	; 0x30
 800ec12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	dbbd      	blt.n	800eb96 <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa+0x6e>
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
 800ec1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	db89      	blt.n	800eb3c <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa+0x14>
          static_cast<int8>(output_in_q24);
    }
  }
}
 800ec28:	bf00      	nop
 800ec2a:	bf00      	nop
 800ec2c:	3740      	adds	r7, #64	; 0x40
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff>:

inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const float* input_data,
                            const RuntimeShape& output_shape,
                            float* output_data, float epsilon = 1e-6) {
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b090      	sub	sp, #64	; 0x40
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6178      	str	r0, [r7, #20]
 800ec3a:	6139      	str	r1, [r7, #16]
 800ec3c:	60fa      	str	r2, [r7, #12]
 800ec3e:	60bb      	str	r3, [r7, #8]
 800ec40:	ed87 0a01 	vstr	s0, [r7, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ec44:	6938      	ldr	r0, [r7, #16]
 800ec46:	f7fa f819 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec54:	6938      	ldr	r0, [r7, #16]
 800ec56:	f7ff fe68 	bl	800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ec5a:	62b8      	str	r0, [r7, #40]	; 0x28
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800ec5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec62:	6938      	ldr	r0, [r7, #16]
 800ec64:	f7fe f916 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ec68:	6278      	str	r0, [r7, #36]	; 0x24
  for (int i = 0; i < outer_size; ++i) {
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec6e:	e05a      	b.n	800ed26 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff+0xf4>
    float squared_l2_norm = 0;
 800ec70:	f04f 0300 	mov.w	r3, #0
 800ec74:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int c = 0; c < depth; ++c) {
 800ec76:	2300      	movs	r3, #0
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
 800ec7a:	e017      	b.n	800ecac <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff+0x7a>
      const float val = input_data[depth * i + c];
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec80:	fb03 f202 	mul.w	r2, r3, r2
 800ec84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec86:	4413      	add	r3, r2
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	623b      	str	r3, [r7, #32]
      squared_l2_norm += val * val;
 800ec92:	edd7 7a08 	vldr	s15, [r7, #32]
 800ec96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec9a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ec9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eca2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    for (int c = 0; c < depth; ++c) {
 800eca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca8:	3301      	adds	r3, #1
 800ecaa:	637b      	str	r3, [r7, #52]	; 0x34
 800ecac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	dbe3      	blt.n	800ec7c <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff+0x4a>
    }
    float l2_norm = std::sqrt(squared_l2_norm);
 800ecb4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800ecb8:	f7ff fdf1 	bl	800e89e <_ZSt4sqrtf>
 800ecbc:	eef0 7a40 	vmov.f32	s15, s0
 800ecc0:	edc7 7a07 	vstr	s15, [r7, #28]
    l2_norm = std::max(l2_norm, epsilon);
 800ecc4:	1d3a      	adds	r2, r7, #4
 800ecc6:	f107 031c 	add.w	r3, r7, #28
 800ecca:	4611      	mov	r1, r2
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7f9 fc8b 	bl	80085e8 <_ZSt3maxIfERKT_S2_S2_>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	61fb      	str	r3, [r7, #28]
    for (int c = 0; c < depth; ++c) {
 800ecd8:	2300      	movs	r3, #0
 800ecda:	633b      	str	r3, [r7, #48]	; 0x30
 800ecdc:	e01c      	b.n	800ed18 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff+0xe6>
      output_data[depth * i + c] = input_data[depth * i + c] / l2_norm;
 800ecde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ece2:	fb03 f202 	mul.w	r2, r3, r2
 800ece6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece8:	4413      	add	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	4413      	add	r3, r2
 800ecf0:	edd3 6a00 	vldr	s13, [r3]
 800ecf4:	ed97 7a07 	vldr	s14, [r7, #28]
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecfc:	fb03 f202 	mul.w	r2, r3, r2
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	4413      	add	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed08:	4413      	add	r3, r2
 800ed0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed0e:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800ed12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed14:	3301      	adds	r3, #1
 800ed16:	633b      	str	r3, [r7, #48]	; 0x30
 800ed18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	dbde      	blt.n	800ecde <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff+0xac>
  for (int i = 0; i < outer_size; ++i) {
 800ed20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed22:	3301      	adds	r3, #1
 800ed24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	dba0      	blt.n	800ec70 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff+0x3e>
    }
  }
}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	3740      	adds	r7, #64	; 0x40
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const uint8* input_data,
                            const RuntimeShape& output_shape,
                            uint8* output_data) {
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b096      	sub	sp, #88	; 0x58
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
 800ed44:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ed46:	68b8      	ldr	r0, [r7, #8]
 800ed48:	f7f9 ff98 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	647b      	str	r3, [r7, #68]	; 0x44
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800ed52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed58:	68b8      	ldr	r0, [r7, #8]
 800ed5a:	f7fe f89b 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ed5e:	6438      	str	r0, [r7, #64]	; 0x40
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ed60:	683a      	ldr	r2, [r7, #0]
 800ed62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed64:	68b8      	ldr	r0, [r7, #8]
 800ed66:	f7ff fde0 	bl	800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ed6a:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int32 input_zero_point = op_params.input_zero_point;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	63bb      	str	r3, [r7, #56]	; 0x38

  for (int i = 0; i < outer_size; ++i) {
 800ed72:	2300      	movs	r3, #0
 800ed74:	657b      	str	r3, [r7, #84]	; 0x54
 800ed76:	e070      	b.n	800ee5a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x122>
    int32 square_l2_norm = 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	653b      	str	r3, [r7, #80]	; 0x50
    for (int c = 0; c < depth; c++) {
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed80:	e016      	b.n	800edb0 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x78>
      int32 diff = input_data[depth * i + c] - input_zero_point;
 800ed82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed86:	fb03 f202 	mul.w	r2, r3, r2
 800ed8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed8c:	4413      	add	r3, r2
 800ed8e:	461a      	mov	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4413      	add	r3, r2
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	461a      	mov	r2, r3
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	62bb      	str	r3, [r7, #40]	; 0x28
      square_l2_norm += diff * diff;
 800ed9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda0:	fb03 f303 	mul.w	r3, r3, r3
 800eda4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eda6:	4413      	add	r3, r2
 800eda8:	653b      	str	r3, [r7, #80]	; 0x50
    for (int c = 0; c < depth; c++) {
 800edaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edac:	3301      	adds	r3, #1
 800edae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800edb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb4:	429a      	cmp	r2, r3
 800edb6:	dbe4      	blt.n	800ed82 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x4a>
    }
    int32 inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(square_l2_norm, kReverseShift,
 800edb8:	f107 0318 	add.w	r3, r7, #24
 800edbc:	f107 021c 	add.w	r2, r7, #28
 800edc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800edc4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800edc6:	f7ff fddf 	bl	800e988 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEliPlPi>
                                     &inv_l2norm_multiplier, &inv_l2norm_shift);
    for (int c = 0; c < depth; c++) {
 800edca:	2300      	movs	r3, #0
 800edcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800edce:	e03d      	b.n	800ee4c <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x114>
      int32 diff = input_data[depth * i + c] - input_zero_point;
 800edd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edd4:	fb03 f202 	mul.w	r2, r3, r2
 800edd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edda:	4413      	add	r3, r2
 800eddc:	461a      	mov	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4413      	add	r3, r2
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	461a      	mov	r2, r3
 800ede6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	637b      	str	r3, [r7, #52]	; 0x34
      int32 rescaled_diff = MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800edec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edee:	01db      	lsls	r3, r3, #7
 800edf0:	69f9      	ldr	r1, [r7, #28]
 800edf2:	69ba      	ldr	r2, [r7, #24]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fd fe5f 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800edfa:	6338      	str	r0, [r7, #48]	; 0x30
          128 * diff, inv_l2norm_multiplier, inv_l2norm_shift);
      int32 unclamped_output_val = 128 + rescaled_diff;
 800edfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfe:	3380      	adds	r3, #128	; 0x80
 800ee00:	617b      	str	r3, [r7, #20]
      int32 output_val =
          std::min(static_cast<int32>(255),
 800ee02:	23ff      	movs	r3, #255	; 0xff
 800ee04:	623b      	str	r3, [r7, #32]
                   std::max(static_cast<int32>(0), unclamped_output_val));
 800ee06:	2300      	movs	r3, #0
 800ee08:	627b      	str	r3, [r7, #36]	; 0x24
          std::min(static_cast<int32>(255),
 800ee0a:	f107 0214 	add.w	r2, r7, #20
 800ee0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee12:	4611      	mov	r1, r2
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7f9 feb4 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	f107 0320 	add.w	r3, r7, #32
 800ee20:	4611      	mov	r1, r2
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7f9 fec1 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 800ee28:	4603      	mov	r3, r0
                   std::max(static_cast<int32>(0), unclamped_output_val));
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      output_data[depth * i + c] = static_cast<uint8>(output_val);
 800ee2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee32:	fb03 f202 	mul.w	r2, r3, r2
 800ee36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee38:	4413      	add	r3, r2
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee3e:	4413      	add	r3, r2
 800ee40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee42:	b2d2      	uxtb	r2, r2
 800ee44:	701a      	strb	r2, [r3, #0]
    for (int c = 0; c < depth; c++) {
 800ee46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee48:	3301      	adds	r3, #1
 800ee4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee50:	429a      	cmp	r2, r3
 800ee52:	dbbd      	blt.n	800edd0 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x98>
  for (int i = 0; i < outer_size; ++i) {
 800ee54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee56:	3301      	adds	r3, #1
 800ee58:	657b      	str	r3, [r7, #84]	; 0x54
 800ee5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	db8a      	blt.n	800ed78 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x40>
    }
  }
}
 800ee62:	bf00      	nop
 800ee64:	bf00      	nop
 800ee66:	3758      	adds	r7, #88	; 0x58
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <_ZN6tflite3ops5micro6l2norm7PrepareEP13TfLiteContextP10TfLiteNode>:
};

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  // TODO(ahentz): For some reason our implementations don't support
  // activations.
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
#endif

  return kTfLiteOk;
 800ee76:	2300      	movs	r3, #0
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800ee84:	b5b0      	push	{r4, r5, r7, lr}
 800ee86:	b0b0      	sub	sp, #192	; 0xc0
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800ee8e:	2200      	movs	r2, #0
 800ee90:	6839      	ldr	r1, [r7, #0]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7fd fb09 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800ee98:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7fd fb18 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800eea6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  // zero error, and scale is > 1, so the integer value of epsilon for quant
  // is just dominated by the zero point.
  // Also, GetInvSqrtQuantizedMultiplierExp handles the scenario where the sum
  // of input value squared is zero case well.
  // So we don't even need to do handle the epsilon for quantized kernel case.
  const float epsilon = 1e-6f;
 800eeaa:	4b6b      	ldr	r3, [pc, #428]	; (800f058 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800eeac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (output->type == kTfLiteFloat32) {
 800eeb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d130      	bne.n	800ef1c <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x98>
  op_params.input_zero_point = 0;                                            \
  type::L2Normalization(op_params, GetTensorShape(input),                    \
                        GetTensorData<float>(input), GetTensorShape(output), \
                        GetTensorData<float>(output), epsilon)

    TF_LITE_L2NORM(reference_ops);
 800eeba:	2300      	movs	r3, #0
 800eebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eec2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7f9 ff3c 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800eecc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800eed0:	f7fd fbda 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800eed4:	4604      	mov	r4, r0
 800eed6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eeda:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f9 ff30 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800eee4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800eee8:	f7fd fbdf 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800eeec:	4602      	mov	r2, r0
 800eeee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eef2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800eef6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800eefa:	9200      	str	r2, [sp, #0]
 800eefc:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800f05c <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
 800ef00:	4622      	mov	r2, r4
 800ef02:	f7ff fe96 	bl	800ec32 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKfS6_Pff>
 800ef06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7f9 fea0 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800ef10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7f9 fe9b 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800ef1a:	e098      	b.n	800f04e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
#undef TF_LITE_L2NORM
  } else if (output->type == kTfLiteUInt8) {
 800ef1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	2b03      	cmp	r3, #3
 800ef24:	d130      	bne.n	800ef88 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x104>
  op_params.input_zero_point = input->params.zero_point;                     \
  type::L2Normalization(op_params, GetTensorShape(input),                    \
                        GetTensorData<uint8>(input), GetTensorShape(output), \
                        GetTensorData<uint8>(output))

    TF_LITE_L2NORM(reference_ops);
 800ef26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ef32:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7f9 ff04 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800ef3c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800ef40:	f7fd fadf 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800ef44:	4604      	mov	r4, r0
 800ef46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ef4a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7f9 fef8 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800ef54:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800ef58:	f7fd fae4 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ef62:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800ef66:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ef6a:	9200      	str	r2, [sp, #0]
 800ef6c:	4622      	mov	r2, r4
 800ef6e:	f7ff fee3 	bl	800ed38 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>
 800ef72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7f9 fe6a 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800ef7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f9 fe65 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800ef86:	e062      	b.n	800f04e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
#undef TF_LITE_L2NORM
  } else if (output->type == kTfLiteInt8) {
 800ef88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	2b09      	cmp	r3, #9
 800ef90:	d14e      	bne.n	800f030 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
    const auto input_shape = GetTensorShape(input);
 800ef92:	f107 0320 	add.w	r3, r7, #32
 800ef96:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7f9 fed2 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const auto output_shape = GetTensorShape(output);
 800efa0:	f107 0308 	add.w	r3, r7, #8
 800efa4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7f9 fecb 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const int trailing_dim = input_shape.DimensionsCount() - 1;
 800efae:	f107 0320 	add.w	r3, r7, #32
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7f9 fe62 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800efb8:	4603      	mov	r3, r0
 800efba:	3b01      	subs	r3, #1
 800efbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    const int depth =
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800efc0:	f107 0208 	add.w	r2, r7, #8
 800efc4:	f107 0020 	add.w	r0, r7, #32
 800efc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800efcc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800efd0:	f7fd ff60 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800efd4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    const int outer_size =
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800efd8:	f107 0208 	add.w	r2, r7, #8
 800efdc:	f107 0320 	add.w	r3, r7, #32
 800efe0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff fca0 	bl	800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800efea:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
 800efee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eff2:	691c      	ldr	r4, [r3, #16]
 800eff4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800eff8:	f7fd fb68 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800effc:	4605      	mov	r5, r0
 800effe:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800f002:	f7fd fb74 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800f006:	4603      	mov	r3, r0
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	462b      	mov	r3, r5
 800f00c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f010:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f014:	4620      	mov	r0, r4
 800f016:	f7ff fd87 	bl	800eb28 <_ZN6tflite21reference_integer_ops15L2NormalizationElllPKaPa>
                                           depth, GetTensorData<int8>(input),
                                           GetTensorData<int8>(output));
  } else {
 800f01a:	f107 0308 	add.w	r3, r7, #8
 800f01e:	4618      	mov	r0, r3
 800f020:	f7f9 fe16 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800f024:	f107 0320 	add.w	r3, r7, #32
 800f028:	4618      	mov	r0, r3
 800f02a:	f7f9 fe11 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 800f02e:	e00e      	b.n	800f04e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TF_LITE_KERNEL_LOG(context, "Output type is %s, requires float.",
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	695c      	ldr	r4, [r3, #20]
 800f034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7f5 fec6 	bl	8004dcc <TfLiteTypeGetName>
 800f040:	4603      	mov	r3, r0
 800f042:	461a      	mov	r2, r3
 800f044:	4906      	ldr	r1, [pc, #24]	; (800f060 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	47a0      	blx	r4
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
 800f04a:	2301      	movs	r3, #1
 800f04c:	e000      	b.n	800f050 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
  }

  return kTfLiteOk;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	37b8      	adds	r7, #184	; 0xb8
 800f054:	46bd      	mov	sp, r7
 800f056:	bdb0      	pop	{r4, r5, r7, pc}
 800f058:	358637bd 	.word	0x358637bd
 800f05c:	358637bd 	.word	0x358637bd
 800f060:	0804b39c 	.word	0x0804b39c

0800f064 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv>:

}  // namespace l2norm

TfLiteRegistration Register_L2NORM_REF() {
 800f064:	b4b0      	push	{r4, r5, r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
          /*prepare=*/l2norm::Prepare,
          /*invoke=*/l2norm::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a07      	ldr	r2, [pc, #28]	; (800f08c <_ZN6tflite3ops5micro19Register_L2NORM_REFEv+0x28>)
 800f070:	461c      	mov	r4, r3
 800f072:	4615      	mov	r5, r2
 800f074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f078:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f07c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	bcb0      	pop	{r4, r5, r7}
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	0804b3c0 	.word	0x0804b3c0

0800f090 <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>:

TfLiteRegistration Register_L2_NORMALIZATION() { return Register_L2NORM_REF(); }
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7ff ffe2 	bl	800f064 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv>
 800f0a0:	bf00      	nop
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	3708      	adds	r7, #8
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 800f0aa:	b480      	push	{r7}
 800f0ac:	b083      	sub	sp, #12
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d003      	beq.n	800f0c0 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800f0be:	e000      	b.n	800f0c2 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800f0c0:	2320      	movs	r3, #32
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	370c      	adds	r7, #12
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr

0800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800f0ce:	b480      	push	{r7}
 800f0d0:	b083      	sub	sp, #12
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <_ZN8gemmlowp10FixedPointIlLi3EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f0ec:	f107 030c 	add.w	r3, r7, #12
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 f921 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6013      	str	r3, [r2, #0]
    return retval;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
  }
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi3EEENS_10FixedPointIT0_XT1_EEES3_>:
}

// If we want to leave IntegerBits fixed, then multiplication
// by a power of two has to be saturating/rounding, not exact anymore.
template <int tExponent, typename tRawType, int tIntegerBits>
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, tIntegerBits> a) {
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800f10e:	1d3b      	adds	r3, r7, #4
 800f110:	4618      	mov	r0, r3
 800f112:	f000 f911 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f116:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 f917 	bl	800f34e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800f120:	4603      	mov	r3, r0
 800f122:	4618      	mov	r0, r3
 800f124:	f7ff ffde 	bl	800f0e4 <_ZN8gemmlowp10FixedPointIlLi3EE7FromRawEl>
 800f128:	4603      	mov	r3, r0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <_ZN8gemmlowp10FixedPointIlLi3EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f132:	b590      	push	{r4, r7, lr}
 800f134:	b085      	sub	sp, #20
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f13a:	f107 030c 	add.w	r3, r7, #12
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 f8fa 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f144:	4604      	mov	r4, r0
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7fd fdfc 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f14c:	4603      	mov	r3, r0
 800f14e:	6023      	str	r3, [r4, #0]
    return retval;
 800f150:	68fb      	ldr	r3, [r7, #12]
  }
 800f152:	4618      	mov	r0, r3
 800f154:	3714      	adds	r7, #20
 800f156:	46bd      	mov	sp, r7
 800f158:	bd90      	pop	{r4, r7, pc}

0800f15a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi3EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b082      	sub	sp, #8
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800f162:	2100      	movs	r1, #0
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7fd fd07 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f16a:	4603      	mov	r3, r0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <_ZN8gemmlowp10FixedPointIlLi3EE3OneEv>:
  static FixedPoint One() {
 800f174:	b580      	push	{r7, lr}
 800f176:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f178:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f17c:	f7ff ffd9 	bl	800f132 <_ZN8gemmlowp10FixedPointIlLi3EE13FromScalarRawEl>
 800f180:	4603      	mov	r3, r0
  }
 800f182:	4618      	mov	r0, r3
 800f184:	bd80      	pop	{r7, pc}

0800f186 <_ZN8gemmlowpmlIlLi3ELi3EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f186:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f188:	b085      	sub	sp, #20
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f190:	1d3b      	adds	r3, r7, #4
 800f192:	4618      	mov	r0, r3
 800f194:	f000 f8d0 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f198:	4603      	mov	r3, r0
 800f19a:	681d      	ldr	r5, [r3, #0]
 800f19c:	463b      	mov	r3, r7
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f000 f8ca 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	681e      	ldr	r6, [r3, #0]
 800f1a8:	f107 030c 	add.w	r3, r7, #12
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f000 f8da 	bl	800f366 <_ZN8gemmlowp10FixedPointIlLi6EE3rawEv>
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f7fd faee 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	6023      	str	r3, [r4, #0]
  return c;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3714      	adds	r7, #20
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1ca <_ZN8gemmlowpmlIlLi6ELi3EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f1ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1cc:	b085      	sub	sp, #20
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f1d4:	1d3b      	adds	r3, r7, #4
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f000 f8c5 	bl	800f366 <_ZN8gemmlowp10FixedPointIlLi6EE3rawEv>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	681d      	ldr	r5, [r3, #0]
 800f1e0:	463b      	mov	r3, r7
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 f8a8 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	681e      	ldr	r6, [r3, #0]
 800f1ec:	f107 030c 	add.w	r3, r7, #12
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 f8c3 	bl	800f37c <_ZN8gemmlowp10FixedPointIlLi9EE3rawEv>
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4631      	mov	r1, r6
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f7fd facc 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f200:	4603      	mov	r3, r0
 800f202:	6023      	str	r3, [r4, #0]
  return c;
 800f204:	68fb      	ldr	r3, [r7, #12]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3714      	adds	r7, #20
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f20e <_ZN8gemmlowp7RescaleILi3ElLi9EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f20e:	b5b0      	push	{r4, r5, r7, lr}
 800f210:	b084      	sub	sp, #16
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f216:	1d3b      	adds	r3, r7, #4
 800f218:	4618      	mov	r0, r3
 800f21a:	f000 f8af 	bl	800f37c <_ZN8gemmlowp10FixedPointIlLi9EE3rawEv>
 800f21e:	4603      	mov	r3, r0
 800f220:	681d      	ldr	r5, [r3, #0]
 800f222:	f107 030c 	add.w	r3, r7, #12
 800f226:	4618      	mov	r0, r3
 800f228:	f000 f886 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f22c:	4604      	mov	r4, r0
 800f22e:	4628      	mov	r0, r5
 800f230:	f000 f8af 	bl	800f392 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi6ElEET0_S1_>
 800f234:	4603      	mov	r3, r0
 800f236:	6023      	str	r3, [r4, #0]
  return result;
 800f238:	68fb      	ldr	r3, [r7, #12]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bdb0      	pop	{r4, r5, r7, pc}

0800f242 <_ZN8gemmlowpmiIlLi6EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800f242:	b590      	push	{r4, r7, lr}
 800f244:	b083      	sub	sp, #12
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
 800f24a:	6039      	str	r1, [r7, #0]
 800f24c:	1d3b      	adds	r3, r7, #4
 800f24e:	4618      	mov	r0, r3
 800f250:	f000 f889 	bl	800f366 <_ZN8gemmlowp10FixedPointIlLi6EE3rawEv>
 800f254:	4603      	mov	r3, r0
 800f256:	681c      	ldr	r4, [r3, #0]
 800f258:	463b      	mov	r3, r7
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 f883 	bl	800f366 <_ZN8gemmlowp10FixedPointIlLi6EE3rawEv>
 800f260:	4603      	mov	r3, r0
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4619      	mov	r1, r3
 800f266:	4620      	mov	r0, r4
 800f268:	f000 f8b0 	bl	800f3cc <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800f26c:	4603      	mov	r3, r0
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 f89b 	bl	800f3aa <_ZN8gemmlowp10FixedPointIlLi6EE7FromRawEl>
 800f274:	4603      	mov	r3, r0
 800f276:	4618      	mov	r0, r3
 800f278:	370c      	adds	r7, #12
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd90      	pop	{r4, r7, pc}

0800f27e <_ZN8gemmlowp7RescaleILi3ElLi6EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f27e:	b5b0      	push	{r4, r5, r7, lr}
 800f280:	b084      	sub	sp, #16
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f286:	1d3b      	adds	r3, r7, #4
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 f86c 	bl	800f366 <_ZN8gemmlowp10FixedPointIlLi6EE3rawEv>
 800f28e:	4603      	mov	r3, r0
 800f290:	681d      	ldr	r5, [r3, #0]
 800f292:	f107 030c 	add.w	r3, r7, #12
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f84e 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f29c:	4604      	mov	r4, r0
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f000 f8a2 	bl	800f3e8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi3ElEET0_S1_>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	6023      	str	r3, [r4, #0]
  return result;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bdb0      	pop	{r4, r5, r7, pc}

0800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f2b2:	b590      	push	{r4, r7, lr}
 800f2b4:	b085      	sub	sp, #20
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f2ba:	f107 030c 	add.w	r3, r7, #12
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7ff ff05 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7fd fd3c 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	6023      	str	r3, [r4, #0]
    return retval;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
  }
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3714      	adds	r7, #20
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd90      	pop	{r4, r7, pc}

0800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b082      	sub	sp, #8
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7fd fc47 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f2ea:	4603      	mov	r3, r0
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <_ZN8gemmlowpmlIlLi3ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f2fe:	1d3b      	adds	r3, r7, #4
 800f300:	4618      	mov	r0, r3
 800f302:	f000 f819 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f306:	4603      	mov	r3, r0
 800f308:	681d      	ldr	r5, [r3, #0]
 800f30a:	463b      	mov	r3, r7
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7ff fede 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f312:	4603      	mov	r3, r0
 800f314:	681e      	ldr	r6, [r3, #0]
 800f316:	f107 030c 	add.w	r3, r7, #12
 800f31a:	4618      	mov	r0, r3
 800f31c:	f000 f80c 	bl	800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>
 800f320:	4604      	mov	r4, r0
 800f322:	4631      	mov	r1, r6
 800f324:	4628      	mov	r0, r5
 800f326:	f7fd fa37 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f32a:	4603      	mov	r3, r0
 800f32c:	6023      	str	r3, [r4, #0]
  return c;
 800f32e:	68fb      	ldr	r3, [r7, #12]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3714      	adds	r7, #20
 800f334:	46bd      	mov	sp, r7
 800f336:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f338 <_ZN8gemmlowp10FixedPointIlLi3EE3rawEv>:
  RawType& raw() { return i_; }
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4618      	mov	r0, r3
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f34e:	b580      	push	{r7, lr}
 800f350:	b082      	sub	sp, #8
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f852 	bl	800f400 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800f35c:	4603      	mov	r3, r0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <_ZN8gemmlowp10FixedPointIlLi6EE3rawEv>:
  RawType& raw() { return i_; }
 800f366:	b480      	push	{r7}
 800f368:	b083      	sub	sp, #12
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4618      	mov	r0, r3
 800f372:	370c      	adds	r7, #12
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <_ZN8gemmlowp10FixedPointIlLi9EE3rawEv>:
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4618      	mov	r0, r3
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi6ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f392:	b580      	push	{r7, lr}
 800f394:	b082      	sub	sp, #8
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f83e 	bl	800f41c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi6ElLi1EE4evalEl>
 800f3a0:	4603      	mov	r3, r0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <_ZN8gemmlowp10FixedPointIlLi6EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b084      	sub	sp, #16
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f3b2:	f107 030c 	add.w	r3, r7, #12
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7ff ffd5 	bl	800f366 <_ZN8gemmlowp10FixedPointIlLi6EE3rawEv>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6013      	str	r3, [r2, #0]
    return retval;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
  }
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  return a - b;
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	1ad3      	subs	r3, r2, r3
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi3ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 f855 	bl	800f4a0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi3ElLi1EE4evalEl>
 800f3f6:	4603      	mov	r3, r0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800f408:	2101      	movs	r1, #1
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7fd fbb4 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f410:	4603      	mov	r3, r0
  }
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
	...

0800f41c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi6ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b08a      	sub	sp, #40	; 0x28
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800f424:	f7fd f9af 	bl	800c786 <_ZNSt14numeric_limitsIlE3minEv>
 800f428:	4603      	mov	r3, r0
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fd fc8a 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f430:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800f432:	f7f8 ff08 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 800f436:	4603      	mov	r3, r0
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fd fc83 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f43e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800f440:	2320      	movs	r3, #32
 800f442:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800f444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f448:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800f44a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800f44e:	f7fd fc79 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f452:	4603      	mov	r3, r0
 800f454:	4619      	mov	r1, r3
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fd fcbe 	bl	800cdd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800f45c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800f45e:	480f      	ldr	r0, [pc, #60]	; (800f49c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi6ElLi1EE4evalEl+0x80>)
 800f460:	f7fd fc70 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f464:	4603      	mov	r3, r0
 800f466:	4619      	mov	r1, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7fd fc93 	bl	800cd94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800f46e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800f470:	2106      	movs	r1, #6
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f856 	bl	800f524 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800f478:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	6a39      	ldr	r1, [r7, #32]
 800f47e:	6978      	ldr	r0, [r7, #20]
 800f480:	f000 f894 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f484:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f48a:	6938      	ldr	r0, [r7, #16]
 800f48c:	f000 f88e 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f490:	60f8      	str	r0, [r7, #12]
    return result;
 800f492:	68fb      	ldr	r3, [r7, #12]
  }
 800f494:	4618      	mov	r0, r3
 800f496:	3728      	adds	r7, #40	; 0x28
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	fe000001 	.word	0xfe000001

0800f4a0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi3ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b08a      	sub	sp, #40	; 0x28
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800f4a8:	f7fd f96d 	bl	800c786 <_ZNSt14numeric_limitsIlE3minEv>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fd fc48 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f4b4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800f4b6:	f7f8 fec6 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fd fc41 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f4c2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800f4c4:	2320      	movs	r3, #32
 800f4c6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800f4c8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f4cc:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800f4ce:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 800f4d2:	f7fd fc37 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	4619      	mov	r1, r3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7fd fc7c 	bl	800cdd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800f4e0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800f4e2:	480f      	ldr	r0, [pc, #60]	; (800f520 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi3ElLi1EE4evalEl+0x80>)
 800f4e4:	f7fd fc2e 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7fd fc51 	bl	800cd94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800f4f2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800f4f4:	2103      	movs	r1, #3
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 f814 	bl	800f524 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800f4fc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	6a39      	ldr	r1, [r7, #32]
 800f502:	6978      	ldr	r0, [r7, #20]
 800f504:	f000 f852 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f508:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f50e:	6938      	ldr	r0, [r7, #16]
 800f510:	f000 f84c 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f514:	60f8      	str	r0, [r7, #12]
    return result;
 800f516:	68fb      	ldr	r3, [r7, #12]
  }
 800f518:	4618      	mov	r0, r3
 800f51a:	3728      	adds	r7, #40	; 0x28
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	f0000001 	.word	0xf0000001

0800f524 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800f524:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800f528:	b089      	sub	sp, #36	; 0x24
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	17c8      	asrs	r0, r1, #31
 800f534:	4688      	mov	r8, r1
 800f536:	4681      	mov	r9, r0
 800f538:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800f53c:	2001      	movs	r0, #1
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	fa00 f101 	lsl.w	r1, r0, r1
 800f544:	17c8      	asrs	r0, r1, #31
 800f546:	460c      	mov	r4, r1
 800f548:	4605      	mov	r5, r0
 800f54a:	69f9      	ldr	r1, [r7, #28]
 800f54c:	fb04 f001 	mul.w	r0, r4, r1
 800f550:	69b9      	ldr	r1, [r7, #24]
 800f552:	fb05 f101 	mul.w	r1, r5, r1
 800f556:	4401      	add	r1, r0
 800f558:	69b8      	ldr	r0, [r7, #24]
 800f55a:	fba0 2304 	umull	r2, r3, r0, r4
 800f55e:	4419      	add	r1, r3
 800f560:	460b      	mov	r3, r1
 800f562:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f566:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800f56a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f56e:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800f570:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f574:	60bb      	str	r3, [r7, #8]
             ? min
 800f576:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f57a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800f57e:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 800f582:	db0b      	blt.n	800f59c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 800f584:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800f58c:	f173 0300 	sbcs.w	r3, r3, #0
 800f590:	da01      	bge.n	800f596 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 800f592:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800f594:	e004      	b.n	800f5a0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800f596:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800f59a:	e001      	b.n	800f5a0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 800f59c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3724      	adds	r7, #36	; 0x24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800f5aa:	4770      	bx	lr

0800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800f5ac:	b590      	push	{r4, r7, lr}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800f5b8:	68b9      	ldr	r1, [r7, #8]
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7fd fbcd 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f7fd fc5a 	bl	800ce7c <_ZN8gemmlowp6BitNotIlEET_S1_>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fd fbc4 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f000 f805 	bl	800f5e6 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800f5dc:	4603      	mov	r3, r0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3714      	adds	r7, #20
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd90      	pop	{r4, r7, pc}

0800f5e6 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800f5e6:	b480      	push	{r7}
 800f5e8:	b083      	sub	sp, #12
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
 800f5ee:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	4053      	eors	r3, r2
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800f602:	b580      	push	{r7, lr}
 800f604:	b082      	sub	sp, #8
 800f606:	af00      	add	r7, sp, #0
 800f608:	ed87 0a01 	vstr	s0, [r7, #4]
 800f60c:	ed97 0a01 	vldr	s0, [r7, #4]
 800f610:	f009 fbee 	bl	8018df0 <expf>
 800f614:	eef0 7a40 	vmov.f32	s15, s0
 800f618:	eeb0 0a67 	vmov.f32	s0, s15
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800f622:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f626:	b090      	sub	sp, #64	; 0x40
 800f628:	af00      	add	r7, sp, #0
 800f62a:	61f8      	str	r0, [r7, #28]
 800f62c:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	17da      	asrs	r2, r3, #31
 800f632:	613b      	str	r3, [r7, #16]
 800f634:	617a      	str	r2, [r7, #20]
 800f636:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f63a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	17da      	asrs	r2, r3, #31
 800f642:	60bb      	str	r3, [r7, #8]
 800f644:	60fa      	str	r2, [r7, #12]
 800f646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f64a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 800f64e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f652:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f656:	1886      	adds	r6, r0, r2
 800f658:	603e      	str	r6, [r7, #0]
 800f65a:	eb41 0303 	adc.w	r3, r1, r3
 800f65e:	607b      	str	r3, [r7, #4]
 800f660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f664:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800f668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	db04      	blt.n	800f67a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 800f670:	f04f 0201 	mov.w	r2, #1
 800f674:	f04f 0300 	mov.w	r3, #0
 800f678:	e003      	b.n	800f682 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 800f67a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f67e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f682:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800f686:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f68a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f68e:	eb10 0802 	adds.w	r8, r0, r2
 800f692:	eb41 0903 	adc.w	r9, r1, r3
 800f696:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800f69a:	2200      	movs	r2, #0
 800f69c:	469a      	mov	sl, r3
 800f69e:	4693      	mov	fp, r2
 800f6a0:	eb1a 0408 	adds.w	r4, sl, r8
 800f6a4:	eb4b 0509 	adc.w	r5, fp, r9
 800f6a8:	f04f 0200 	mov.w	r2, #0
 800f6ac:	f04f 0300 	mov.w	r3, #0
 800f6b0:	0862      	lsrs	r2, r4, #1
 800f6b2:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800f6b6:	106b      	asrs	r3, r5, #1
 800f6b8:	4613      	mov	r3, r2
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3740      	adds	r7, #64	; 0x40
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f6c4:	4770      	bx	lr

0800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b084      	sub	sp, #16
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f6ce:	f107 030c 	add.w	r3, r7, #12
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff fcfb 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6013      	str	r3, [r2, #0]
    return retval;
 800f6de:	68fb      	ldr	r3, [r7, #12]
  }
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b08a      	sub	sp, #40	; 0x28
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800f6f0:	f000 f85a 	bl	800f7a8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 f860 	bl	800f7be <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f6fe:	4603      	mov	r3, r0
 800f700:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800f702:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800f706:	f000 f88c 	bl	800f822 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800f70a:	4603      	mov	r3, r0
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 f874 	bl	800f7fa <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f712:	4603      	mov	r3, r0
 800f714:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800f716:	4823      	ldr	r0, [pc, #140]	; (800f7a4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800f718:	f000 f883 	bl	800f822 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800f71c:	4603      	mov	r3, r0
 800f71e:	4618      	mov	r0, r3
 800f720:	f000 f86b 	bl	800f7fa <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f724:	4603      	mov	r3, r0
 800f726:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800f728:	69b9      	ldr	r1, [r7, #24]
 800f72a:	6a38      	ldr	r0, [r7, #32]
 800f72c:	f000 f886 	bl	800f83c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f730:	4603      	mov	r3, r0
 800f732:	4619      	mov	r1, r3
 800f734:	69f8      	ldr	r0, [r7, #28]
 800f736:	f000 f8a3 	bl	800f880 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f73a:	4603      	mov	r3, r0
 800f73c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800f73e:	2300      	movs	r3, #0
 800f740:	627b      	str	r3, [r7, #36]	; 0x24
 800f742:	e020      	b.n	800f786 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x9e>
    F2 half_denominator_times_x = half_denominator * x;
 800f744:	6979      	ldr	r1, [r7, #20]
 800f746:	6a38      	ldr	r0, [r7, #32]
 800f748:	f000 f878 	bl	800f83c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f74c:	4603      	mov	r3, r0
 800f74e:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800f750:	f000 f8b4 	bl	800f8bc <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800f754:	4603      	mov	r3, r0
 800f756:	6939      	ldr	r1, [r7, #16]
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 f8b8 	bl	800f8ce <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f75e:	4603      	mov	r3, r0
 800f760:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800f762:	68f9      	ldr	r1, [r7, #12]
 800f764:	6978      	ldr	r0, [r7, #20]
 800f766:	f000 f8d0 	bl	800f90a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f76a:	4603      	mov	r3, r0
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 f8ee 	bl	800f94e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f772:	4603      	mov	r3, r0
 800f774:	4619      	mov	r1, r3
 800f776:	6978      	ldr	r0, [r7, #20]
 800f778:	f000 f882 	bl	800f880 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f77c:	4603      	mov	r3, r0
 800f77e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f782:	3301      	adds	r3, #1
 800f784:	627b      	str	r3, [r7, #36]	; 0x24
 800f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f788:	2b02      	cmp	r3, #2
 800f78a:	dddb      	ble.n	800f744 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5c>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800f78c:	6978      	ldr	r0, [r7, #20]
 800f78e:	f000 f8f8 	bl	800f982 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800f792:	4603      	mov	r3, r0
 800f794:	4618      	mov	r0, r3
 800f796:	f000 f90a 	bl	800f9ae <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f79a:	4603      	mov	r3, r0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3728      	adds	r7, #40	; 0x28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	c3c3c3c4 	.word	0xc3c3c3c4

0800f7a8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f7ac:	f000 f945 	bl	800fa3a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7ff fd7d 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f7b8:	4603      	mov	r3, r0
  }
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800f7be:	b590      	push	{r4, r7, lr}
 800f7c0:	b083      	sub	sp, #12
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	6039      	str	r1, [r7, #0]
 800f7c8:	1d3b      	adds	r3, r7, #4
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7ff fc7f 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	681c      	ldr	r4, [r3, #0]
 800f7d4:	463b      	mov	r3, r7
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7ff fc79 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f7ff ff1d 	bl	800f622 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7ff ff6b 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	370c      	adds	r7, #12
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd90      	pop	{r4, r7, pc}

0800f7fa <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f7fa:	b590      	push	{r4, r7, lr}
 800f7fc:	b085      	sub	sp, #20
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f802:	f107 030c 	add.w	r3, r7, #12
 800f806:	4618      	mov	r0, r3
 800f808:	f000 f91e 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f80c:	4604      	mov	r4, r0
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f7fd fa98 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f814:	4603      	mov	r3, r0
 800f816:	6023      	str	r3, [r4, #0]
    return retval;
 800f818:	68fb      	ldr	r3, [r7, #12]
  }
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd90      	pop	{r4, r7, pc}

0800f822 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800f822:	b580      	push	{r7, lr}
 800f824:	b082      	sub	sp, #8
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800f82a:	2100      	movs	r1, #0
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7fd f9a3 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f832:	4603      	mov	r3, r0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f846:	1d3b      	adds	r3, r7, #4
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff fc40 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f84e:	4603      	mov	r3, r0
 800f850:	681d      	ldr	r5, [r3, #0]
 800f852:	463b      	mov	r3, r7
 800f854:	4618      	mov	r0, r3
 800f856:	f000 f8f7 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f85a:	4603      	mov	r3, r0
 800f85c:	681e      	ldr	r6, [r3, #0]
 800f85e:	f107 030c 	add.w	r3, r7, #12
 800f862:	4618      	mov	r0, r3
 800f864:	f000 f8f0 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f868:	4604      	mov	r4, r0
 800f86a:	4631      	mov	r1, r6
 800f86c:	4628      	mov	r0, r5
 800f86e:	f7fc ff93 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f872:	4603      	mov	r3, r0
 800f874:	6023      	str	r3, [r4, #0]
  return c;
 800f876:	68fb      	ldr	r3, [r7, #12]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3714      	adds	r7, #20
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f880 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800f880:	b590      	push	{r4, r7, lr}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
 800f88a:	1d3b      	adds	r3, r7, #4
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 f8db 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f892:	4603      	mov	r3, r0
 800f894:	681c      	ldr	r4, [r3, #0]
 800f896:	463b      	mov	r3, r7
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 f8d5 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f7fd fa89 	bl	800cdbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f000 f8d6 	bl	800fa5e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd90      	pop	{r4, r7, pc}

0800f8bc <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f8c0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800f8c4:	f7ff ff99 	bl	800f7fa <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f8c8:	4603      	mov	r3, r0
  }
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800f8ce:	b590      	push	{r4, r7, lr}
 800f8d0:	b083      	sub	sp, #12
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	6039      	str	r1, [r7, #0]
 800f8d8:	1d3b      	adds	r3, r7, #4
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 f8b4 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	681c      	ldr	r4, [r3, #0]
 800f8e4:	463b      	mov	r3, r7
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 f8ae 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f7ff fd6a 	bl	800f3cc <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f000 f8af 	bl	800fa5e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f900:	4603      	mov	r3, r0
 800f902:	4618      	mov	r0, r3
 800f904:	370c      	adds	r7, #12
 800f906:	46bd      	mov	sp, r7
 800f908:	bd90      	pop	{r4, r7, pc}

0800f90a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f90a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f90c:	b085      	sub	sp, #20
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f914:	1d3b      	adds	r3, r7, #4
 800f916:	4618      	mov	r0, r3
 800f918:	f000 f896 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f91c:	4603      	mov	r3, r0
 800f91e:	681d      	ldr	r5, [r3, #0]
 800f920:	463b      	mov	r3, r7
 800f922:	4618      	mov	r0, r3
 800f924:	f000 f890 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f928:	4603      	mov	r3, r0
 800f92a:	681e      	ldr	r6, [r3, #0]
 800f92c:	f107 030c 	add.w	r3, r7, #12
 800f930:	4618      	mov	r0, r3
 800f932:	f000 f856 	bl	800f9e2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f936:	4604      	mov	r4, r0
 800f938:	4631      	mov	r1, r6
 800f93a:	4628      	mov	r0, r5
 800f93c:	f7fc ff2c 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f940:	4603      	mov	r3, r0
 800f942:	6023      	str	r3, [r4, #0]
  return c;
 800f944:	68fb      	ldr	r3, [r7, #12]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3714      	adds	r7, #20
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f94e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f94e:	b5b0      	push	{r4, r5, r7, lr}
 800f950:	b084      	sub	sp, #16
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f956:	1d3b      	adds	r3, r7, #4
 800f958:	4618      	mov	r0, r3
 800f95a:	f000 f842 	bl	800f9e2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f95e:	4603      	mov	r3, r0
 800f960:	681d      	ldr	r5, [r3, #0]
 800f962:	f107 030c 	add.w	r3, r7, #12
 800f966:	4618      	mov	r0, r3
 800f968:	f000 f86e 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f96c:	4604      	mov	r4, r0
 800f96e:	4628      	mov	r0, r5
 800f970:	f000 f886 	bl	800fa80 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800f974:	4603      	mov	r3, r0
 800f976:	6023      	str	r3, [r4, #0]
  return result;
 800f978:	68fb      	ldr	r3, [r7, #12]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bdb0      	pop	{r4, r5, r7, pc}

0800f982 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800f982:	b590      	push	{r4, r7, lr}
 800f984:	b085      	sub	sp, #20
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800f98a:	1d3b      	adds	r3, r7, #4
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 f85b 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f992:	4604      	mov	r4, r0
 800f994:	f107 030c 	add.w	r3, r7, #12
 800f998:	4618      	mov	r0, r3
 800f99a:	f000 f87d 	bl	800fa98 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	6013      	str	r3, [r2, #0]
  return c;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3714      	adds	r7, #20
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd90      	pop	{r4, r7, pc}

0800f9ae <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f9ae:	b5b0      	push	{r4, r5, r7, lr}
 800f9b0:	b084      	sub	sp, #16
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f9b6:	1d3b      	adds	r3, r7, #4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 f86d 	bl	800fa98 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	681d      	ldr	r5, [r3, #0]
 800f9c2:	f107 030c 	add.w	r3, r7, #12
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7ff fb81 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	f000 f86d 	bl	800faae <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	6023      	str	r3, [r4, #0]
  return result;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bdb0      	pop	{r4, r5, r7, pc}

0800f9e2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800f9e2:	b480      	push	{r7}
 800f9e4:	b083      	sub	sp, #12
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800f9f8:	b590      	push	{r4, r7, lr}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800fa04:	f107 0308 	add.w	r3, r7, #8
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7ff fb60 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fa0e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fa10:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800fa12:	1d3b      	adds	r3, r7, #4
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff fb5a 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fa1a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4621      	mov	r1, r4
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff fdc2 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff fe4b 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fa30:	4603      	mov	r3, r0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd90      	pop	{r4, r7, pc}

0800fa3a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800fa3e:	f7f8 fc02 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 800fa42:	4603      	mov	r3, r0
  }
 800fa44:	4618      	mov	r0, r3
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4618      	mov	r0, r3
 800fa54:	370c      	adds	r7, #12
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr

0800fa5e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b084      	sub	sp, #16
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800fa66:	f107 030c 	add.w	r3, r7, #12
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7ff ffec 	bl	800fa48 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800fa70:	4602      	mov	r2, r0
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6013      	str	r3, [r2, #0]
    return retval;
 800fa76:	68fb      	ldr	r3, [r7, #12]
  }
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 f82f 	bl	800faec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800fa8e:	4603      	mov	r3, r0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	370c      	adds	r7, #12
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800faae:	b580      	push	{r7, lr}
 800fab0:	b082      	sub	sp, #8
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f85a 	bl	800fb70 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800fabc:	4603      	mov	r3, r0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b082      	sub	sp, #8
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	bf0c      	ite	eq
 800fad4:	2301      	moveq	r3, #1
 800fad6:	2300      	movne	r3, #0
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fd f9bd 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800fae0:	4603      	mov	r3, r0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
	...

0800faec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800faec:	b580      	push	{r7, lr}
 800faee:	b08a      	sub	sp, #40	; 0x28
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800faf4:	f7fc fe47 	bl	800c786 <_ZNSt14numeric_limitsIlE3minEv>
 800faf8:	4603      	mov	r3, r0
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fd f922 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb00:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800fb02:	f7f8 fba0 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 800fb06:	4603      	mov	r3, r0
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fd f91b 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb0e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fb10:	2320      	movs	r3, #32
 800fb12:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fb14:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fb18:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fb1a:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800fb1e:	f7fd f911 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb22:	4603      	mov	r3, r0
 800fb24:	4619      	mov	r1, r3
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7fd f956 	bl	800cdd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fb2c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fb2e:	480f      	ldr	r0, [pc, #60]	; (800fb6c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800fb30:	f7fd f908 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb34:	4603      	mov	r3, r0
 800fb36:	4619      	mov	r1, r3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7fd f92b 	bl	800cd94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fb3e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fb40:	2102      	movs	r1, #2
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff fcee 	bl	800f524 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800fb48:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	6a39      	ldr	r1, [r7, #32]
 800fb4e:	6978      	ldr	r0, [r7, #20]
 800fb50:	f7ff fd2c 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fb54:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb5a:	6938      	ldr	r0, [r7, #16]
 800fb5c:	f7ff fd26 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fb60:	60f8      	str	r0, [r7, #12]
    return result;
 800fb62:	68fb      	ldr	r3, [r7, #12]
  }
 800fb64:	4618      	mov	r0, r3
 800fb66:	3728      	adds	r7, #40	; 0x28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	e0000001 	.word	0xe0000001

0800fb70 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b08a      	sub	sp, #40	; 0x28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800fb78:	f7fc fe05 	bl	800c786 <_ZNSt14numeric_limitsIlE3minEv>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fd f8e0 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb84:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800fb86:	f7f8 fb5e 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fd f8d9 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fb92:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fb94:	2320      	movs	r3, #32
 800fb96:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fb98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fb9c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fb9e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800fba2:	f7fd f8cf 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fba6:	4603      	mov	r3, r0
 800fba8:	4619      	mov	r1, r3
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f7fd f914 	bl	800cdd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fbb0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fbb2:	480f      	ldr	r0, [pc, #60]	; (800fbf0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800fbb4:	f7fd f8c6 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	4619      	mov	r1, r3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7fd f8e9 	bl	800cd94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fbc2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7ff fcac 	bl	800f524 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800fbcc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	6a39      	ldr	r1, [r7, #32]
 800fbd2:	6978      	ldr	r0, [r7, #20]
 800fbd4:	f7ff fcea 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fbd8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbde:	6938      	ldr	r0, [r7, #16]
 800fbe0:	f7ff fce4 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fbe4:	60f8      	str	r0, [r7, #12]
    return result;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
  }
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3728      	adds	r7, #40	; 0x28
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	c0000001 	.word	0xc0000001

0800fbf4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b08a      	sub	sp, #40	; 0x28
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800fbfc:	482c      	ldr	r0, [pc, #176]	; (800fcb0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800fbfe:	f7ff fb6c 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fc02:	4603      	mov	r3, r0
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff fb54 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800fc0e:	4829      	ldr	r0, [pc, #164]	; (800fcb4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800fc10:	f7ff fb63 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fc14:	4603      	mov	r3, r0
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fb4b 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800fc20:	f000 f86c 	bl	800fcfc <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800fc24:	4603      	mov	r3, r0
 800fc26:	4619      	mov	r1, r3
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 f870 	bl	800fd0e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800fc32:	69f9      	ldr	r1, [r7, #28]
 800fc34:	69f8      	ldr	r0, [r7, #28]
 800fc36:	f000 f83f 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800fc3e:	69f9      	ldr	r1, [r7, #28]
 800fc40:	69b8      	ldr	r0, [r7, #24]
 800fc42:	f000 f839 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fc46:	4603      	mov	r3, r0
 800fc48:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800fc4a:	69b9      	ldr	r1, [r7, #24]
 800fc4c:	69b8      	ldr	r0, [r7, #24]
 800fc4e:	f000 f833 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fc52:	4603      	mov	r3, r0
 800fc54:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800fc56:	6938      	ldr	r0, [r7, #16]
 800fc58:	f000 f877 	bl	800fd4a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800fc60:	6979      	ldr	r1, [r7, #20]
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f000 f853 	bl	800fd0e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	6a39      	ldr	r1, [r7, #32]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f000 f823 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fc72:	4603      	mov	r3, r0
 800fc74:	69b9      	ldr	r1, [r7, #24]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f000 f849 	bl	800fd0e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 f879 	bl	800fd76 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800fc84:	4603      	mov	r3, r0
 800fc86:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800fc88:	68b9      	ldr	r1, [r7, #8]
 800fc8a:	69f8      	ldr	r0, [r7, #28]
 800fc8c:	f000 f83f 	bl	800fd0e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fc90:	4603      	mov	r3, r0
 800fc92:	4619      	mov	r1, r3
 800fc94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc96:	f000 f80f 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fca0:	f000 f87f 	bl	800fda2 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fca4:	4603      	mov	r3, r0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3728      	adds	r7, #40	; 0x28
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	70f5a894 	.word	0x70f5a894
 800fcb4:	2aaaaaab 	.word	0x2aaaaaab

0800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800fcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800fcc2:	1d3b      	adds	r3, r7, #4
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7ff fa02 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fcca:	4603      	mov	r3, r0
 800fccc:	681d      	ldr	r5, [r3, #0]
 800fcce:	463b      	mov	r3, r7
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7ff f9fc 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	681e      	ldr	r6, [r3, #0]
 800fcda:	f107 030c 	add.w	r3, r7, #12
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7ff f9f5 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fce4:	4604      	mov	r4, r0
 800fce6:	4631      	mov	r1, r6
 800fce8:	4628      	mov	r0, r5
 800fcea:	f7fc fd55 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	6023      	str	r3, [r4, #0]
  return c;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3714      	adds	r7, #20
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcfc <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800fd00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800fd04:	f7ff fad5 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fd08:	4603      	mov	r3, r0
  }
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800fd0e:	b590      	push	{r4, r7, lr}
 800fd10:	b083      	sub	sp, #12
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	6039      	str	r1, [r7, #0]
 800fd18:	1d3b      	adds	r3, r7, #4
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7ff f9d7 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd20:	4603      	mov	r3, r0
 800fd22:	681c      	ldr	r4, [r3, #0]
 800fd24:	463b      	mov	r3, r7
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7ff f9d1 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4619      	mov	r1, r3
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7fd f842 	bl	800cdbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff fcc3 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fd40:	4603      	mov	r3, r0
 800fd42:	4618      	mov	r0, r3
 800fd44:	370c      	adds	r7, #12
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd90      	pop	{r4, r7, pc}

0800fd4a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b082      	sub	sp, #8
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fd52:	1d3b      	adds	r3, r7, #4
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7ff f9ba 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd5a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f000 f83d 	bl	800fdde <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800fd64:	4603      	mov	r3, r0
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7ff fcad 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fd6c:	4603      	mov	r3, r0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b082      	sub	sp, #8
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800fd7e:	1d3b      	adds	r3, r7, #4
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff f9a4 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fd86:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff fadf 	bl	800f34e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800fd90:	4603      	mov	r3, r0
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff fc97 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fd98:	4603      	mov	r3, r0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3708      	adds	r7, #8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800fda2:	b590      	push	{r4, r7, lr}
 800fda4:	b083      	sub	sp, #12
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	6078      	str	r0, [r7, #4]
 800fdaa:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800fdac:	1d3b      	adds	r3, r7, #4
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff f98d 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fdb4:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fdb6:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800fdb8:	463b      	mov	r3, r7
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7ff f987 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fdc0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f000 f815 	bl	800fdf6 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff fc79 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fdd4:	4603      	mov	r3, r0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd90      	pop	{r4, r7, pc}

0800fdde <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b082      	sub	sp, #8
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f813 	bl	800fe12 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800fdec:	4603      	mov	r3, r0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3708      	adds	r7, #8
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b082      	sub	sp, #8
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800fe00:	6839      	ldr	r1, [r7, #0]
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f812 	bl	800fe2c <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800fe08:	4603      	mov	r3, r0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b082      	sub	sp, #8
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800fe1a:	2102      	movs	r1, #2
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7fc feab 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800fe22:	4603      	mov	r3, r0
  }
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
 800fe36:	6839      	ldr	r1, [r7, #0]
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7fc ffbf 	bl	800cdbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	4618      	mov	r0, r3
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
 800fe48:	b590      	push	{r4, r7, lr}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
    return this->size_ == comp.size_ &&
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d113      	bne.n	800fe86 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7fc fba7 	bl	800c5b2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800fe64:	4604      	mov	r4, r0
 800fe66:	6838      	ldr	r0, [r7, #0]
 800fe68:	f7fc fba3 	bl	800c5b2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800fe6c:	4601      	mov	r1, r0
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	461a      	mov	r2, r3
 800fe76:	4620      	mov	r0, r4
 800fe78:	f009 fcd2 	bl	8019820 <memcmp>
 800fe7c:	4603      	mov	r3, r0
    return this->size_ == comp.size_ &&
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d101      	bne.n	800fe86 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
 800fe82:	2301      	movs	r3, #1
 800fe84:	e000      	b.n	800fe88 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x40>
 800fe86:	2300      	movs	r3, #0
  }
 800fe88:	4618      	mov	r0, r3
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd90      	pop	{r4, r7, pc}

0800fe90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
                                const RuntimeShape& check_shape_1) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b088      	sub	sp, #32
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
  const int size_1 = shape.FlatSize();
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f7fc fb9b 	bl	800c5d8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800fea2:	61f8      	str	r0, [r7, #28]
  const int size_2 = check_shape_0.FlatSize();
 800fea4:	68b8      	ldr	r0, [r7, #8]
 800fea6:	f7fc fb97 	bl	800c5d8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800feaa:	61b8      	str	r0, [r7, #24]
  const int size_3 = check_shape_1.FlatSize();
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7fc fb93 	bl	800c5d8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800feb2:	6178      	str	r0, [r7, #20]
  TFLITE_CHECK_EQ(size_1, size_2);
 800feb4:	69fa      	ldr	r2, [r7, #28]
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d001      	beq.n	800fec0 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x30>
 800febc:	f009 fa1c 	bl	80192f8 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
 800fec0:	69ba      	ldr	r2, [r7, #24]
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d001      	beq.n	800fecc <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x3c>
 800fec8:	f009 fa16 	bl	80192f8 <abort>
  return size_1;
 800fecc:	69fb      	ldr	r3, [r7, #28]
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3720      	adds	r7, #32
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}

0800fed6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>:
inline int SubscriptToIndex(const NdArrayDesc<5>& desc, int indexes[5]) {
 800fed6:	b480      	push	{r7}
 800fed8:	b083      	sub	sp, #12
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
 800fede:	6039      	str	r1, [r7, #0]
  return indexes[0] * desc.strides[0] + indexes[1] * desc.strides[1] +
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	6952      	ldr	r2, [r2, #20]
 800fee8:	fb03 f202 	mul.w	r2, r3, r2
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	3304      	adds	r3, #4
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6879      	ldr	r1, [r7, #4]
 800fef4:	6989      	ldr	r1, [r1, #24]
 800fef6:	fb01 f303 	mul.w	r3, r1, r3
 800fefa:	441a      	add	r2, r3
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	3308      	adds	r3, #8
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	6879      	ldr	r1, [r7, #4]
 800ff04:	69c9      	ldr	r1, [r1, #28]
 800ff06:	fb01 f303 	mul.w	r3, r1, r3
  return indexes[0] * desc.strides[0] + indexes[1] * desc.strides[1] +
 800ff0a:	441a      	add	r2, r3
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	330c      	adds	r3, #12
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	6879      	ldr	r1, [r7, #4]
 800ff14:	6a09      	ldr	r1, [r1, #32]
 800ff16:	fb01 f303 	mul.w	r3, r1, r3
 800ff1a:	441a      	add	r2, r3
         indexes[4] * desc.strides[4];
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	3310      	adds	r3, #16
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ff26:	fb01 f303 	mul.w	r3, r1, r3
 800ff2a:	4413      	add	r3, r2
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  int desc_stride = 1;
 800ff42:	2301      	movs	r3, #1
 800ff44:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 800ff46:	2304      	movs	r3, #4
 800ff48:	60bb      	str	r3, [r7, #8]
 800ff4a:	e01b      	b.n	800ff84 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x4c>
    desc_out->extents[i] = input_shape.Dims(i);
 800ff4c:	68b9      	ldr	r1, [r7, #8]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7fc fb0a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ff54:	4601      	mov	r1, r0
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	68ba      	ldr	r2, [r7, #8]
 800ff5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_out->strides[i] = desc_stride;
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	3304      	adds	r3, #4
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	605a      	str	r2, [r3, #4]
    desc_stride *= input_shape.Dims(i);
 800ff6c:	68b9      	ldr	r1, [r7, #8]
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7fc fafa 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ff74:	4602      	mov	r2, r0
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	fb02 f303 	mul.w	r3, r2, r3
 800ff7c:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	3b01      	subs	r3, #1
 800ff82:	60bb      	str	r3, [r7, #8]
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	dae0      	bge.n	800ff4c <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x14>
}
 800ff8a:	bf00      	nop
 800ff8c:	bf00      	nop
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:

inline const TfLiteTensor* GetOptionalInputTensor(TfLiteContext* context,
                                                  const TfLiteNode* node,
                                                  int index) {
 800ff94:	b480      	push	{r7}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	da0a      	bge.n	800ffc2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 800ffb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffbc:	d001      	beq.n	800ffc2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e000      	b.n	800ffc4 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00a      	beq.n	800ffe2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	689a      	ldr	r2, [r3, #8]
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	6819      	ldr	r1, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	440b      	add	r3, r1
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	019b      	lsls	r3, r3, #6
 800ffde:	4413      	add	r3, r2
 800ffe0:	e000      	b.n	800ffe4 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  }
  return nullptr;
 800ffe2:	2300      	movs	r3, #0
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	371c      	adds	r7, #28
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800fff0:	b5b0      	push	{r4, r5, r7, lr}
 800fff2:	b08e      	sub	sp, #56	; 0x38
 800fff4:	af04      	add	r7, sp, #16
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800fffa:	2200      	movs	r2, #0
 800fffc:	6839      	ldr	r1, [r7, #0]
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f7fc fa53 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010004:	61b8      	str	r0, [r7, #24]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8010006:	2200      	movs	r2, #0
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7fc fa63 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010010:	6178      	str	r0, [r7, #20]
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8010012:	69b8      	ldr	r0, [r7, #24]
 8010014:	f7f8 fb9b 	bl	800874e <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8010018:	4602      	mov	r2, r0
 801001a:	460b      	mov	r3, r1
 801001c:	4613      	mov	r3, r2
 801001e:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8010026:	6838      	ldr	r0, [r7, #0]
 8010028:	f7fc fb93 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801002c:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801002e:	2b01      	cmp	r3, #1
 8010030:	d109      	bne.n	8010046 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8010036:	2b01      	cmp	r3, #1
 8010038:	d105      	bne.n	8010046 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d101      	bne.n	8010046 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8010042:	2301      	movs	r3, #1
 8010044:	e000      	b.n	8010048 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x58>
 8010046:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8010048:	2b00      	cmp	r3, #0
 801004a:	d002      	beq.n	8010052 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2200      	movs	r2, #0
 8010050:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8010052:	2301      	movs	r3, #1
 8010054:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 8010056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801005a:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 801005c:	2300      	movs	r3, #0
 801005e:	61fb      	str	r3, [r7, #28]
 8010060:	e02a      	b.n	80100b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
    int value = output_shape->data[i];
 8010062:	68fa      	ldr	r2, [r7, #12]
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	4413      	add	r3, r2
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010074:	d118      	bne.n	80100a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801007c:	d011      	beq.n	80100a2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb2>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	695c      	ldr	r4, [r3, #20]
 8010082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010086:	9303      	str	r3, [sp, #12]
 8010088:	6a3b      	ldr	r3, [r7, #32]
 801008a:	9302      	str	r3, [sp, #8]
 801008c:	4b35      	ldr	r3, [pc, #212]	; (8010164 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 801008e:	9301      	str	r3, [sp, #4]
 8010090:	4b35      	ldr	r3, [pc, #212]	; (8010168 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	2335      	movs	r3, #53	; 0x35
 8010096:	4a35      	ldr	r2, [pc, #212]	; (801016c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8010098:	4935      	ldr	r1, [pc, #212]	; (8010170 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	47a0      	blx	r4
 801009e:	2301      	movs	r3, #1
 80100a0:	e05c      	b.n	801015c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
      stretch_dim = i;
 80100a2:	69fb      	ldr	r3, [r7, #28]
 80100a4:	623b      	str	r3, [r7, #32]
 80100a6:	e004      	b.n	80100b2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc2>
    } else {
      num_output_elements *= value;
 80100a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	fb02 f303 	mul.w	r3, r2, r3
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	3301      	adds	r3, #1
 80100b6:	61fb      	str	r3, [r7, #28]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	69fa      	ldr	r2, [r7, #28]
 80100be:	429a      	cmp	r2, r3
 80100c0:	dbcf      	blt.n	8010062 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x72>
    }
  }
  if (stretch_dim != -1) {
 80100c2:	6a3b      	ldr	r3, [r7, #32]
 80100c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100c8:	d011      	beq.n	80100ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 80100ca:	693a      	ldr	r2, [r7, #16]
 80100cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80100d2:	68f9      	ldr	r1, [r7, #12]
 80100d4:	6a3b      	ldr	r3, [r7, #32]
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	440b      	add	r3, r1
 80100da:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	6a3b      	ldr	r3, [r7, #32]
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	4413      	add	r3, r2
 80100e4:	685a      	ldr	r2, [r3, #4]
 80100e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e8:	fb02 f303 	mul.w	r3, r2, r3
 80100ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	781a      	ldrb	r2, [r3, #0]
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d01a      	beq.n	8010130 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	695c      	ldr	r4, [r3, #20]
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	4618      	mov	r0, r3
 8010104:	f7f4 fe62 	bl	8004dcc <TfLiteTypeGetName>
 8010108:	4605      	mov	r5, r0
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	4618      	mov	r0, r3
 8010110:	f7f4 fe5c 	bl	8004dcc <TfLiteTypeGetName>
 8010114:	4603      	mov	r3, r0
 8010116:	9303      	str	r3, [sp, #12]
 8010118:	9502      	str	r5, [sp, #8]
 801011a:	4b16      	ldr	r3, [pc, #88]	; (8010174 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x184>)
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	4b16      	ldr	r3, [pc, #88]	; (8010178 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x188>)
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	2340      	movs	r3, #64	; 0x40
 8010124:	4a11      	ldr	r2, [pc, #68]	; (801016c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8010126:	4915      	ldr	r1, [pc, #84]	; (801017c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x18c>)
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	47a0      	blx	r4
 801012c:	2301      	movs	r3, #1
 801012e:	e015      	b.n	801015c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8010130:	693a      	ldr	r2, [r7, #16]
 8010132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010134:	429a      	cmp	r2, r3
 8010136:	d010      	beq.n	801015a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16a>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	695c      	ldr	r4, [r3, #20]
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	9303      	str	r3, [sp, #12]
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	9302      	str	r3, [sp, #8]
 8010144:	4b0e      	ldr	r3, [pc, #56]	; (8010180 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x190>)
 8010146:	9301      	str	r3, [sp, #4]
 8010148:	4b0e      	ldr	r3, [pc, #56]	; (8010184 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x194>)
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	2341      	movs	r3, #65	; 0x41
 801014e:	4a07      	ldr	r2, [pc, #28]	; (801016c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8010150:	4907      	ldr	r1, [pc, #28]	; (8010170 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	47a0      	blx	r4
 8010156:	2301      	movs	r3, #1
 8010158:	e000      	b.n	801015c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  return kTfLiteOk;
 801015a:	2300      	movs	r3, #0
}
 801015c:	4618      	mov	r0, r3
 801015e:	3728      	adds	r7, #40	; 0x28
 8010160:	46bd      	mov	sp, r7
 8010162:	bdb0      	pop	{r4, r5, r7, pc}
 8010164:	0804b5cc 	.word	0x0804b5cc
 8010168:	0804b5d0 	.word	0x0804b5d0
 801016c:	0804b508 	.word	0x0804b508
 8010170:	0804b5b0 	.word	0x0804b5b0
 8010174:	0804b5f8 	.word	0x0804b5f8
 8010178:	0804b608 	.word	0x0804b608
 801017c:	0804b5dc 	.word	0x0804b5dc
 8010180:	0804b614 	.word	0x0804b614
 8010184:	0804b628 	.word	0x0804b628

08010188 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8010188:	b590      	push	{r4, r7, lr}
 801018a:	b087      	sub	sp, #28
 801018c:	af04      	add	r7, sp, #16
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8010192:	6838      	ldr	r0, [r7, #0]
 8010194:	f7fc fadd 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8010198:	4603      	mov	r3, r0
 801019a:	2b01      	cmp	r3, #1
 801019c:	d007      	beq.n	80101ae <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 801019e:	6838      	ldr	r0, [r7, #0]
 80101a0:	f7fc fad7 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	d001      	beq.n	80101ae <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 80101aa:	2301      	movs	r3, #1
 80101ac:	e000      	b.n	80101b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 80101ae:	2300      	movs	r3, #0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00a      	beq.n	80101ca <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	695c      	ldr	r4, [r3, #20]
 80101b8:	4b27      	ldr	r3, [pc, #156]	; (8010258 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	2346      	movs	r3, #70	; 0x46
 80101be:	4a27      	ldr	r2, [pc, #156]	; (801025c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80101c0:	4927      	ldr	r1, [pc, #156]	; (8010260 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	47a0      	blx	r4
 80101c6:	2301      	movs	r3, #1
 80101c8:	e041      	b.n	801024e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80101ca:	6838      	ldr	r0, [r7, #0]
 80101cc:	f7fc face 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	bf14      	ite	ne
 80101d6:	2301      	movne	r3, #1
 80101d8:	2300      	moveq	r3, #0
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d013      	beq.n	8010208 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	695c      	ldr	r4, [r3, #20]
 80101e4:	6838      	ldr	r0, [r7, #0]
 80101e6:	f7fc fac1 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2201      	movs	r2, #1
 80101ee:	9203      	str	r2, [sp, #12]
 80101f0:	9302      	str	r3, [sp, #8]
 80101f2:	4b1c      	ldr	r3, [pc, #112]	; (8010264 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 80101f4:	9301      	str	r3, [sp, #4]
 80101f6:	4b1c      	ldr	r3, [pc, #112]	; (8010268 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	2347      	movs	r3, #71	; 0x47
 80101fc:	4a17      	ldr	r2, [pc, #92]	; (801025c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80101fe:	491b      	ldr	r1, [pc, #108]	; (801026c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	47a0      	blx	r4
 8010204:	2301      	movs	r3, #1
 8010206:	e022      	b.n	801024e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8010208:	6839      	ldr	r1, [r7, #0]
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7ff fef0 	bl	800fff0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	bf14      	ite	ne
 8010216:	2301      	movne	r3, #1
 8010218:	2300      	moveq	r3, #0
 801021a:	b2db      	uxtb	r3, r3
 801021c:	2b00      	cmp	r3, #0
 801021e:	d015      	beq.n	801024c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	695c      	ldr	r4, [r3, #20]
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7ff fee2 	bl	800fff0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 801022c:	4603      	mov	r3, r0
 801022e:	461a      	mov	r2, r3
 8010230:	2300      	movs	r3, #0
 8010232:	9303      	str	r3, [sp, #12]
 8010234:	9202      	str	r2, [sp, #8]
 8010236:	4b0e      	ldr	r3, [pc, #56]	; (8010270 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8010238:	9301      	str	r3, [sp, #4]
 801023a:	4b0e      	ldr	r3, [pc, #56]	; (8010274 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	2348      	movs	r3, #72	; 0x48
 8010240:	4a06      	ldr	r2, [pc, #24]	; (801025c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8010242:	490a      	ldr	r1, [pc, #40]	; (801026c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	47a0      	blx	r4
 8010248:	2301      	movs	r3, #1
 801024a:	e000      	b.n	801024e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	bd90      	pop	{r4, r7, pc}
 8010256:	bf00      	nop
 8010258:	0804b654 	.word	0x0804b654
 801025c:	0804b508 	.word	0x0804b508
 8010260:	0804b63c 	.word	0x0804b63c
 8010264:	0804b684 	.word	0x0804b684
 8010268:	0804b688 	.word	0x0804b688
 801026c:	0804b5b0 	.word	0x0804b5b0
 8010270:	0804b69c 	.word	0x0804b69c
 8010274:	0804b6a8 	.word	0x0804b6a8

08010278 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8010282:	2200      	movs	r2, #0
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7fc f90f 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801028c:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801028e:	2200      	movs	r2, #0
 8010290:	6839      	ldr	r1, [r7, #0]
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f7fc f91f 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010298:	60f8      	str	r0, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	685a      	ldr	r2, [r3, #4]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d014      	beq.n	80102d0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input->bytes; ++i) {
 80102a6:	2300      	movs	r3, #0
 80102a8:	617b      	str	r3, [r7, #20]
 80102aa:	e00c      	b.n	80102c6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x4e>
      output->data.raw[i] = input->data.raw[i];
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	685a      	ldr	r2, [r3, #4]
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	441a      	add	r2, r3
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	6859      	ldr	r1, [r3, #4]
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	440b      	add	r3, r1
 80102bc:	7812      	ldrb	r2, [r2, #0]
 80102be:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input->bytes; ++i) {
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	3301      	adds	r3, #1
 80102c4:	617b      	str	r3, [r7, #20]
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	699b      	ldr	r3, [r3, #24]
 80102ca:	697a      	ldr	r2, [r7, #20]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d3ed      	bcc.n	80102ac <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x34>
    }
  }
  return kTfLiteOk;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3718      	adds	r7, #24
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
	...

080102dc <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 80102dc:	b4b0      	push	{r4, r5, r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	4a07      	ldr	r2, [pc, #28]	; (8010304 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 80102e8:	461c      	mov	r4, r3
 80102ea:	4615      	mov	r5, r2
 80102ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80102f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bcb0      	pop	{r4, r5, r7}
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	0804b6c8 	.word	0x0804b6c8

08010308 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d002      	beq.n	801031c <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	e000      	b.n	801031e <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	370c      	adds	r7, #12
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr

0801032a <_ZNSt14numeric_limitsIiE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__INT_MAX__ - 1; }
 801032a:	b480      	push	{r7}
 801032c:	af00      	add	r7, sp, #0
 801032e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010332:	4618      	mov	r0, r3
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <_ZNSt14numeric_limitsIiE6lowestEv>:
      lowest() noexcept { return min(); }
 801033c:	b580      	push	{r7, lr}
 801033e:	af00      	add	r7, sp, #0
 8010340:	f7ff fff3 	bl	801032a <_ZNSt14numeric_limitsIiE3minEv>
 8010344:	4603      	mov	r3, r0
 8010346:	4618      	mov	r0, r3
 8010348:	bd80      	pop	{r7, pc}

0801034a <_ZN6tflite13strided_slice5ClampEiii>:

namespace tflite {
namespace strided_slice {

// Use until std::clamp() is available from C++17.
inline int Clamp(const int v, const int lo, const int hi) {
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	60f8      	str	r0, [r7, #12]
 8010352:	60b9      	str	r1, [r7, #8]
 8010354:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(!(hi < lo));
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	429a      	cmp	r2, r3
 801035c:	da01      	bge.n	8010362 <_ZN6tflite13strided_slice5ClampEiii+0x18>
 801035e:	f008 ffcb 	bl	80192f8 <abort>
  if (hi < v) return hi;
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	429a      	cmp	r2, r3
 8010368:	da01      	bge.n	801036e <_ZN6tflite13strided_slice5ClampEiii+0x24>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	e006      	b.n	801037c <_ZN6tflite13strided_slice5ClampEiii+0x32>
  if (v < lo) return lo;
 801036e:	68fa      	ldr	r2, [r7, #12]
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	429a      	cmp	r2, r3
 8010374:	da01      	bge.n	801037a <_ZN6tflite13strided_slice5ClampEiii+0x30>
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	e000      	b.n	801037c <_ZN6tflite13strided_slice5ClampEiii+0x32>
  return v;
 801037a:	68fb      	ldr	r3, [r7, #12]
}
 801037c:	4618      	mov	r0, r3
 801037e:	3710      	adds	r7, #16
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
 8010384:	b580      	push	{r7, lr}
 8010386:	b086      	sub	sp, #24
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 5);
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	2b05      	cmp	r3, #5
 8010392:	dd01      	ble.n	8010398 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x14>
 8010394:	f008 ffb0 	bl	80192f8 <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f993 3000 	ldrsb.w	r3, [r3]
 801039e:	461a      	mov	r2, r3
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	4293      	cmp	r3, r2
 80103a4:	da01      	bge.n	80103aa <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x26>
 80103a6:	f008 ffa7 	bl	80192f8 <abort>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f993 2000 	ldrsb.w	r2, [r3]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d001      	beq.n	80103be <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x3a>
 80103ba:	f008 ff9d 	bl	80192f8 <abort>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f993 2018 	ldrsb.w	r2, [r3, #24]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d001      	beq.n	80103d2 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4e>
 80103ce:	f008 ff93 	bl	80192f8 <abort>

  const int pad_count = dim_count - p->start_indices_count;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f993 3000 	ldrsb.w	r3, [r3]
 80103d8:	461a      	mov	r2, r3
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	1a9b      	subs	r3, r3, r2
 80103de:	60fb      	str	r3, [r7, #12]

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f993 3000 	ldrsb.w	r3, [r3]
 80103e6:	3b01      	subs	r3, #1
 80103e8:	617b      	str	r3, [r7, #20]
 80103ea:	e02b      	b.n	8010444 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xc0>
    p->strides[i + pad_count] = p->strides[i];
 80103ec:	697a      	ldr	r2, [r7, #20]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	18d0      	adds	r0, r2, r3
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	330c      	adds	r3, #12
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	4413      	add	r3, r2
 80103fc:	685a      	ldr	r2, [r3, #4]
 80103fe:	6879      	ldr	r1, [r7, #4]
 8010400:	f100 030c 	add.w	r3, r0, #12
 8010404:	009b      	lsls	r3, r3, #2
 8010406:	440b      	add	r3, r1
 8010408:	605a      	str	r2, [r3, #4]
    p->start_indices[i + pad_count] = p->start_indices[i];
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	18d0      	adds	r0, r2, r3
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	009b      	lsls	r3, r3, #2
 8010416:	4413      	add	r3, r2
 8010418:	685a      	ldr	r2, [r3, #4]
 801041a:	6879      	ldr	r1, [r7, #4]
 801041c:	0083      	lsls	r3, r0, #2
 801041e:	440b      	add	r3, r1
 8010420:	605a      	str	r2, [r3, #4]
    p->stop_indices[i + pad_count] = p->stop_indices[i];
 8010422:	697a      	ldr	r2, [r7, #20]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	18d0      	adds	r0, r2, r3
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	3306      	adds	r3, #6
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	4413      	add	r3, r2
 8010432:	685a      	ldr	r2, [r3, #4]
 8010434:	6879      	ldr	r1, [r7, #4]
 8010436:	1d83      	adds	r3, r0, #6
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	440b      	add	r3, r1
 801043c:	605a      	str	r2, [r3, #4]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	3b01      	subs	r3, #1
 8010442:	617b      	str	r3, [r7, #20]
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	2b00      	cmp	r3, #0
 8010448:	dad0      	bge.n	80103ec <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x68>
  }
  for (int i = 0; i < pad_count; ++i) {
 801044a:	2300      	movs	r3, #0
 801044c:	613b      	str	r3, [r7, #16]
 801044e:	e016      	b.n	801047e <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xfa>
    p->start_indices[i] = 0;
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	4413      	add	r3, r2
 8010458:	2200      	movs	r2, #0
 801045a:	605a      	str	r2, [r3, #4]
    p->stop_indices[i] = 1;
 801045c:	687a      	ldr	r2, [r7, #4]
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	3306      	adds	r3, #6
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	4413      	add	r3, r2
 8010466:	2201      	movs	r2, #1
 8010468:	605a      	str	r2, [r3, #4]
    p->strides[i] = 1;
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	330c      	adds	r3, #12
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4413      	add	r3, r2
 8010474:	2201      	movs	r2, #1
 8010476:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < pad_count; ++i) {
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	3301      	adds	r3, #1
 801047c:	613b      	str	r3, [r7, #16]
 801047e:	693a      	ldr	r2, [r7, #16]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	429a      	cmp	r2, r3
 8010484:	dbe4      	blt.n	8010450 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xcc>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 801048c:	461a      	mov	r2, r3
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	fa02 f303 	lsl.w	r3, r2, r3
 8010494:	b21a      	sxth	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80104a2:	461a      	mov	r2, r3
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	fa02 f303 	lsl.w	r3, r2, r3
 80104aa:	b21a      	sxth	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  p->new_axis_mask <<= pad_count;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80104b8:	461a      	mov	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	fa02 f303 	lsl.w	r3, r2, r3
 80104c0:	b21a      	sxth	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  p->begin_mask <<= pad_count;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80104ce:	461a      	mov	r2, r3
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	fa02 f303 	lsl.w	r3, r2, r3
 80104d6:	b21a      	sxth	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  p->end_mask <<= pad_count;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80104e4:	461a      	mov	r2, r3
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	fa02 f303 	lsl.w	r3, r2, r3
 80104ec:	b21a      	sxth	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  p->begin_mask |= (1 << pad_count) - 1;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80104fa:	2101      	movs	r1, #1
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	fa01 f303 	lsl.w	r3, r1, r3
 8010502:	b29b      	uxth	r3, r3
 8010504:	3b01      	subs	r3, #1
 8010506:	b29b      	uxth	r3, r3
 8010508:	b21b      	sxth	r3, r3
 801050a:	4313      	orrs	r3, r2
 801050c:	b21a      	sxth	r2, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  p->end_mask |= (1 << pad_count) - 1;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 801051a:	2101      	movs	r1, #1
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	fa01 f303 	lsl.w	r3, r1, r3
 8010522:	b29b      	uxth	r3, r3
 8010524:	3b01      	subs	r3, #1
 8010526:	b29b      	uxth	r3, r3
 8010528:	b21b      	sxth	r3, r3
 801052a:	4313      	orrs	r3, r2
 801052c:	b21a      	sxth	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  p->start_indices_count = dim_count;
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	b25a      	sxtb	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	701a      	strb	r2, [r3, #0]
  p->stop_indices_count = dim_count;
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	b25a      	sxtb	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	761a      	strb	r2, [r3, #24]
  p->strides_count = dim_count;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	b25a      	sxtb	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 801054e:	bf00      	nop
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size - 1] that can be used to index
// directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
 8010556:	b580      	push	{r7, lr}
 8010558:	b08a      	sub	sp, #40	; 0x28
 801055a:	af00      	add	r7, sp, #0
 801055c:	60f8      	str	r0, [r7, #12]
 801055e:	60b9      	str	r1, [r7, #8]
 8010560:	607a      	str	r2, [r7, #4]
  const auto begin_mask = params.begin_mask;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010568:	847b      	strh	r3, [r7, #34]	; 0x22
  const auto* start_indices = params.start_indices;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	3304      	adds	r3, #4
 801056e:	61fb      	str	r3, [r7, #28]
  const auto* strides = params.strides;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	3334      	adds	r3, #52	; 0x34
 8010574:	61bb      	str	r3, [r7, #24]
  const int axis_size = input_shape.Dims(axis);
 8010576:	6879      	ldr	r1, [r7, #4]
 8010578:	68b8      	ldr	r0, [r7, #8]
 801057a:	f7fb fff5 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801057e:	6178      	str	r0, [r7, #20]
  if (axis_size == 0) {
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x34>
    return 0;
 8010586:	2300      	movs	r3, #0
 8010588:	e02c      	b.n	80105e4 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x8e>
  }
  // Begin with the specified index.
  int start = start_indices[axis];
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	69fa      	ldr	r2, [r7, #28]
 8010590:	4413      	add	r3, r2
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	627b      	str	r3, [r7, #36]	; 0x24

  // begin_mask override
  if (begin_mask & 1 << axis) {
 8010596:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	fa42 f303 	asr.w	r3, r2, r3
 80105a0:	f003 0301 	and.w	r3, r3, #1
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00d      	beq.n	80105c4 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x6e>
    if (strides[axis] > 0) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	69ba      	ldr	r2, [r7, #24]
 80105ae:	4413      	add	r3, r2
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	dd03      	ble.n	80105be <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x68>
      // Forward iteration - use the first element. These values will get
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
 80105b6:	f7ff fec1 	bl	801033c <_ZNSt14numeric_limitsIiE6lowestEv>
 80105ba:	6278      	str	r0, [r7, #36]	; 0x24
 80105bc:	e002      	b.n	80105c4 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x6e>
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
 80105be:	f7f7 fe39 	bl	8008234 <_ZNSt14numeric_limitsIiE3maxEv>
 80105c2:	6278      	str	r0, [r7, #36]	; 0x24
    }
  }

  // Handle negative indices
  if (start < 0) {
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	da03      	bge.n	80105d2 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x7c>
    start += axis_size;
 80105ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	4413      	add	r3, r2
 80105d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  // Clamping
  start = Clamp(start, 0, axis_size - 1);
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	3b01      	subs	r3, #1
 80105d6:	461a      	mov	r2, r3
 80105d8:	2100      	movs	r1, #0
 80105da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105dc:	f7ff feb5 	bl	801034a <_ZN6tflite13strided_slice5ClampEiii>
 80105e0:	6278      	str	r0, [r7, #36]	; 0x24

  return start;
 80105e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3728      	adds	r7, #40	; 0x28
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:
// element. ie. So if you were iterating through all elements of a 1D array of
// size 4, this function would return 4 as the stop, because it is one past the
// "real" indices of 0, 1, 2 & 3.
inline int StopForAxis(const tflite::StridedSliceParams& params,
                       const RuntimeShape& input_shape, int axis,
                       int start_for_axis) {
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08a      	sub	sp, #40	; 0x28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	603b      	str	r3, [r7, #0]
  const auto end_mask = params.end_mask;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8010600:	847b      	strh	r3, [r7, #34]	; 0x22
  const auto shrink_axis_mask = params.shrink_axis_mask;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010608:	843b      	strh	r3, [r7, #32]
  const auto* stop_indices = params.stop_indices;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	331c      	adds	r3, #28
 801060e:	61fb      	str	r3, [r7, #28]
  const auto* strides = params.strides;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	3334      	adds	r3, #52	; 0x34
 8010614:	61bb      	str	r3, [r7, #24]
  const int axis_size = input_shape.Dims(axis);
 8010616:	6879      	ldr	r1, [r7, #4]
 8010618:	68b8      	ldr	r0, [r7, #8]
 801061a:	f7fb ffa5 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801061e:	6178      	str	r0, [r7, #20]
  if (axis_size == 0) {
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d101      	bne.n	801062a <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3e>
    return 0;
 8010626:	2300      	movs	r3, #0
 8010628:	e04d      	b.n	80106c6 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0xda>
  }

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
 801062a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	fa42 f303 	asr.w	r3, r2, r3
 8010634:	f003 0301 	and.w	r3, r3, #1
 8010638:	2b00      	cmp	r3, #0
 801063a:	bf14      	ite	ne
 801063c:	2301      	movne	r3, #1
 801063e:	2300      	moveq	r3, #0
 8010640:	74fb      	strb	r3, [r7, #19]
  int stop = stop_indices[axis];
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	69fa      	ldr	r2, [r7, #28]
 8010648:	4413      	add	r3, r2
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	627b      	str	r3, [r7, #36]	; 0x24

  // When shrinking an axis, the end position does not matter (and can be
  // incorrect when negative indexing is used, see Issue #19260). Always use
  // start_for_axis + 1 to generate a length 1 slice, since start_for_axis has
  // already been adjusted for negative indices.
  if (shrink_axis) {
 801064e:	7cfb      	ldrb	r3, [r7, #19]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x6e>
    stop = start_for_axis + 1;
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	3301      	adds	r3, #1
 8010658:	627b      	str	r3, [r7, #36]	; 0x24
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
 801065a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	fa42 f303 	asr.w	r3, r2, r3
 8010664:	f003 0301 	and.w	r3, r3, #1
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00d      	beq.n	8010688 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x9c>
    if (strides[axis] > 0) {
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	69ba      	ldr	r2, [r7, #24]
 8010672:	4413      	add	r3, r2
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	dd03      	ble.n	8010682 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x96>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
 801067a:	f7f7 fddb 	bl	8008234 <_ZNSt14numeric_limitsIiE3maxEv>
 801067e:	6278      	str	r0, [r7, #36]	; 0x24
 8010680:	e002      	b.n	8010688 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x9c>
    } else {
      // Backward iteration - use the first element.
      stop = std::numeric_limits<int>::lowest();
 8010682:	f7ff fe5b 	bl	801033c <_ZNSt14numeric_limitsIiE6lowestEv>
 8010686:	6278      	str	r0, [r7, #36]	; 0x24
    }
  }

  // Handle negative indices
  if (stop < 0) {
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	2b00      	cmp	r3, #0
 801068c:	da03      	bge.n	8010696 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0xaa>
    stop += axis_size;
 801068e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	4413      	add	r3, r2
 8010694:	627b      	str	r3, [r7, #36]	; 0x24
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	69ba      	ldr	r2, [r7, #24]
 801069c:	4413      	add	r3, r2
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	dd06      	ble.n	80106b2 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0xc6>
    // Forward iteration
    stop = Clamp(stop, 0, axis_size);
 80106a4:	697a      	ldr	r2, [r7, #20]
 80106a6:	2100      	movs	r1, #0
 80106a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106aa:	f7ff fe4e 	bl	801034a <_ZN6tflite13strided_slice5ClampEiii>
 80106ae:	6278      	str	r0, [r7, #36]	; 0x24
 80106b0:	e008      	b.n	80106c4 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0xd8>
  } else {
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	461a      	mov	r2, r3
 80106b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80106bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106be:	f7ff fe44 	bl	801034a <_ZN6tflite13strided_slice5ClampEiii>
 80106c2:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return stop;
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3728      	adds	r7, #40	; 0x28
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <_ZN6tflite13strided_slice13LoopConditionEiii>:

inline bool LoopCondition(int index, int stop, int stride) {
 80106ce:	b480      	push	{r7}
 80106d0:	b085      	sub	sp, #20
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	60f8      	str	r0, [r7, #12]
 80106d6:	60b9      	str	r1, [r7, #8]
 80106d8:	607a      	str	r2, [r7, #4]
  // True when we have reached the end of an axis and should loop.
  return stride > 0 ? index >= stop : index <= stop;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	dd07      	ble.n	80106f0 <_ZN6tflite13strided_slice13LoopConditionEiii+0x22>
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	bfac      	ite	ge
 80106e8:	2301      	movge	r3, #1
 80106ea:	2300      	movlt	r3, #0
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	e006      	b.n	80106fe <_ZN6tflite13strided_slice13LoopConditionEiii+0x30>
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	bfd4      	ite	le
 80106f8:	2301      	movle	r3, #1
 80106fa:	2300      	movgt	r3, #0
 80106fc:	b2db      	uxtb	r3, r3
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3714      	adds	r7, #20
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr

0801070a <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>:
constexpr int kEndTensor = 2;
constexpr int kStridesTensor = 3;
constexpr int kOutputTensor = 0;

struct StridedSliceContext {
  StridedSliceContext(TfLiteContext* context, TfLiteNode* node) {
 801070a:	b580      	push	{r7, lr}
 801070c:	b084      	sub	sp, #16
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	695a      	ldr	r2, [r3, #20]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	601a      	str	r2, [r3, #0]
    input = GetInput(context, node, kInputTensor);
 801071e:	2200      	movs	r2, #0
 8010720:	6879      	ldr	r1, [r7, #4]
 8010722:	68b8      	ldr	r0, [r7, #8]
 8010724:	f7fb fec1 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010728:	4602      	mov	r2, r0
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	605a      	str	r2, [r3, #4]
    begin = GetInput(context, node, kBeginTensor);
 801072e:	2201      	movs	r2, #1
 8010730:	6879      	ldr	r1, [r7, #4]
 8010732:	68b8      	ldr	r0, [r7, #8]
 8010734:	f7fb feb9 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010738:	4602      	mov	r2, r0
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	609a      	str	r2, [r3, #8]
    end = GetInput(context, node, kEndTensor);
 801073e:	2202      	movs	r2, #2
 8010740:	6879      	ldr	r1, [r7, #4]
 8010742:	68b8      	ldr	r0, [r7, #8]
 8010744:	f7fb feb1 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010748:	4602      	mov	r2, r0
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	60da      	str	r2, [r3, #12]
    strides = GetInput(context, node, kStridesTensor);
 801074e:	2203      	movs	r2, #3
 8010750:	6879      	ldr	r1, [r7, #4]
 8010752:	68b8      	ldr	r0, [r7, #8]
 8010754:	f7fb fea9 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010758:	4602      	mov	r2, r0
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	611a      	str	r2, [r3, #16]
    output = GetOutput(context, node, kOutputTensor);
 801075e:	2200      	movs	r2, #0
 8010760:	6879      	ldr	r1, [r7, #4]
 8010762:	68b8      	ldr	r0, [r7, #8]
 8010764:	f7fb feb7 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010768:	4602      	mov	r2, r0
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	615a      	str	r2, [r3, #20]
    dims = NumDimensions(input);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	4618      	mov	r0, r3
 8010774:	f7f7 ffa9 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8010778:	4602      	mov	r2, r0
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	619a      	str	r2, [r3, #24]
  }
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>:
// This Op only supports 1-4D cases and since we use the reference 4D
// implementation, the 1-3D tensors are mapped to 4D.
const int kMaxDim = 4;

tflite::StridedSliceParams BuildStridedSliceParams(
    StridedSliceContext* op_context) {
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  tflite::StridedSliceParams op_params;
  op_params.start_indices_count = op_context->dims;
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	699b      	ldr	r3, [r3, #24]
 8010796:	b25a      	sxtb	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	701a      	strb	r2, [r3, #0]
  op_params.stop_indices_count = op_context->dims;
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	699b      	ldr	r3, [r3, #24]
 80107a0:	b25a      	sxtb	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	761a      	strb	r2, [r3, #24]
  op_params.strides_count = op_context->dims;
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	699b      	ldr	r3, [r3, #24]
 80107aa:	b25a      	sxtb	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  for (int i = 0; i < op_context->dims; ++i) {
 80107b2:	2300      	movs	r3, #0
 80107b4:	60fb      	str	r3, [r7, #12]
 80107b6:	e031      	b.n	801081c <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x94>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fb ffa7 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80107c2:	4602      	mov	r2, r0
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	4413      	add	r3, r2
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	6879      	ldr	r1, [r7, #4]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	440b      	add	r3, r1
 80107d4:	605a      	str	r2, [r3, #4]
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fb ff98 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80107e0:	4602      	mov	r2, r0
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4413      	add	r3, r2
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	6879      	ldr	r1, [r7, #4]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	3306      	adds	r3, #6
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	440b      	add	r3, r1
 80107f4:	605a      	str	r2, [r3, #4]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	691b      	ldr	r3, [r3, #16]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fb ff88 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8010800:	4602      	mov	r2, r0
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	4413      	add	r3, r2
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	6879      	ldr	r1, [r7, #4]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	330c      	adds	r3, #12
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	440b      	add	r3, r1
 8010814:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < op_context->dims; ++i) {
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	3301      	adds	r3, #1
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	699b      	ldr	r3, [r3, #24]
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	429a      	cmp	r2, r3
 8010824:	dbc8      	blt.n	80107b8 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x30>
  }

  op_params.begin_mask = op_context->params->begin_mask;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	b21a      	sxth	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  op_params.ellipsis_mask = 0;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  op_params.end_mask = op_context->params->end_mask;
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	b21a      	sxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  op_params.new_axis_mask = 0;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	691b      	ldr	r3, [r3, #16]
 8010858:	b21a      	sxth	r2, r3
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  return op_params;
 8010860:	bf00      	nop
}
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
	...

0801086c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>:

// Processes the indexing tensors (begin, end and strides) to resize the
// output tensor. This function is callable from both Prepare() and Eval() as
// long as the caller ensures the indexing tensors are present.
TfLiteStatus CheckOutputSize(TfLiteContext* context,
                             StridedSliceContext* op_context) {
 801086c:	b590      	push	{r4, r7, lr}
 801086e:	b0ab      	sub	sp, #172	; 0xac
 8010870:	af04      	add	r7, sp, #16
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  using ::tflite::strided_slice::StartForAxis;
  using ::tflite::strided_slice::StopForAxis;
  TfLiteIntArray* output_shape = op_context->output->dims;
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	695b      	ldr	r3, [r3, #20]
 801087a:	689b      	ldr	r3, [r3, #8]
 801087c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int shape_size = 0;
 8010880:	2300      	movs	r3, #0
 8010882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  auto op_params = BuildStridedSliceParams(op_context);
 8010886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801088a:	6839      	ldr	r1, [r7, #0]
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff ff7b 	bl	8010788 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	f107 030c 	add.w	r3, r7, #12
 801089a:	4611      	mov	r1, r2
 801089c:	4618      	mov	r0, r3
 801089e:	f7f8 fa51 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
 80108a2:	2300      	movs	r3, #0
 80108a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80108a8:	e098      	b.n	80109dc <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x170>
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	691b      	ldr	r3, [r3, #16]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fb ff2e 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80108b4:	4602      	mov	r2, r0
 80108b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108ba:	009b      	lsls	r3, r3, #2
 80108bc:	4413      	add	r3, r2
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
 80108c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d106      	bne.n	80108da <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x6e>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	695b      	ldr	r3, [r3, #20]
 80108d0:	4959      	ldr	r1, [pc, #356]	; (8010a38 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1cc>)
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	4798      	blx	r3
 80108d6:	2401      	movs	r4, #1
 80108d8:	e0a3      	b.n	8010a22 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1b6>
    int32_t begin = StartForAxis(op_params, input_shape, idx);
 80108da:	f107 010c 	add.w	r1, r7, #12
 80108de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7ff fe35 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 80108ec:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
 80108f0:	f107 010c 	add.w	r1, r7, #12
 80108f4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80108f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010900:	f7ff fe74 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8010904:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    // When shrinking an axis, the end position does not matter (and can be
    // incorrect when negative indexing is used, see Issue #19260). Always use
    // begin + 1 to generate a length 1 slice, since begin has
    // already been adjusted for negative indices by StartForAxis.
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	691a      	ldr	r2, [r3, #16]
 801090e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010912:	fa42 f303 	asr.w	r3, r2, r3
 8010916:	f003 0301 	and.w	r3, r3, #1
 801091a:	2b00      	cmp	r3, #0
 801091c:	bf14      	ite	ne
 801091e:	2301      	movne	r3, #1
 8010920:	2300      	moveq	r3, #0
 8010922:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (shrink_axis) {
 8010926:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801092a:	2b00      	cmp	r3, #0
 801092c:	d004      	beq.n	8010938 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xcc>
      end = begin + 1;
 801092e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010932:	3301      	adds	r3, #1
 8010934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }

    // This is valid for both positive and negative strides
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
 8010938:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801093c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	ee07 3a90 	vmov	s15, r3
 8010946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801094a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801094e:	ee07 3a90 	vmov	s15, r3
 8010952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010956:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801095a:	eeb0 0a66 	vmov.f32	s0, s13
 801095e:	f7fb fee8 	bl	800c732 <_ZSt4ceilf>
 8010962:	eef0 7a40 	vmov.f32	s15, s0
 8010966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801096a:	ee17 3a90 	vmov	r3, s15
 801096e:	67bb      	str	r3, [r7, #120]	; 0x78
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
 8010970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010972:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010976:	67bb      	str	r3, [r7, #120]	; 0x78
    if (!shrink_axis) {
 8010978:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801097c:	f083 0301 	eor.w	r3, r3, #1
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d025      	beq.n	80109d2 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x166>
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
 8010986:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801098a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4413      	add	r3, r2
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010996:	429a      	cmp	r2, r3
 8010998:	d016      	beq.n	80109c8 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x15c>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	695c      	ldr	r4, [r3, #20]
 801099e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80109a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80109ae:	9203      	str	r2, [sp, #12]
 80109b0:	9302      	str	r3, [sp, #8]
 80109b2:	4b22      	ldr	r3, [pc, #136]	; (8010a3c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1d0>)
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	4b22      	ldr	r3, [pc, #136]	; (8010a40 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1d4>)
 80109b8:	9300      	str	r3, [sp, #0]
 80109ba:	2373      	movs	r3, #115	; 0x73
 80109bc:	4a21      	ldr	r2, [pc, #132]	; (8010a44 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1d8>)
 80109be:	4922      	ldr	r1, [pc, #136]	; (8010a48 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1dc>)
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	47a0      	blx	r4
 80109c4:	2401      	movs	r4, #1
 80109c6:	e02c      	b.n	8010a22 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1b6>
      shape_size++;
 80109c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109cc:	3301      	adds	r3, #1
 80109ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  for (int idx = 0; idx < op_context->dims; ++idx) {
 80109d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109d6:	3301      	adds	r3, #1
 80109d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80109e4:	429a      	cmp	r2, r3
 80109e6:	f6ff af60 	blt.w	80108aa <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x3e>
    }
  }
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
 80109ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d013      	beq.n	8010a20 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1b4>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	695c      	ldr	r4, [r3, #20]
 80109fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a06:	9203      	str	r2, [sp, #12]
 8010a08:	9302      	str	r3, [sp, #8]
 8010a0a:	4b10      	ldr	r3, [pc, #64]	; (8010a4c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1e0>)
 8010a0c:	9301      	str	r3, [sp, #4]
 8010a0e:	4b10      	ldr	r3, [pc, #64]	; (8010a50 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1e4>)
 8010a10:	9300      	str	r3, [sp, #0]
 8010a12:	2377      	movs	r3, #119	; 0x77
 8010a14:	4a0b      	ldr	r2, [pc, #44]	; (8010a44 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1d8>)
 8010a16:	490c      	ldr	r1, [pc, #48]	; (8010a48 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1dc>)
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	47a0      	blx	r4
 8010a1c:	2401      	movs	r4, #1
 8010a1e:	e000      	b.n	8010a22 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x1b6>
  return kTfLiteOk;
 8010a20:	2400      	movs	r4, #0
}
 8010a22:	f107 030c 	add.w	r3, r7, #12
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7f8 f912 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8010a2c:	4623      	mov	r3, r4
 8010a2e:	4618      	mov	r0, r3
 8010a30:	379c      	adds	r7, #156	; 0x9c
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd90      	pop	{r4, r7, pc}
 8010a36:	bf00      	nop
 8010a38:	0804b910 	.word	0x0804b910
 8010a3c:	0804baa4 	.word	0x0804baa4
 8010a40:	0804bab0 	.word	0x0804bab0
 8010a44:	0804b9dc 	.word	0x0804b9dc
 8010a48:	0804ba88 	.word	0x0804ba88
 8010a4c:	0804bad0 	.word	0x0804bad0
 8010a50:	0804badc 	.word	0x0804badc

08010a54 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8010a54:	b590      	push	{r4, r7, lr}
 8010a56:	b08f      	sub	sp, #60	; 0x3c
 8010a58:	af04      	add	r7, sp, #16
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
 8010a5e:	6838      	ldr	r0, [r7, #0]
 8010a60:	f7fb fe77 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b04      	cmp	r3, #4
 8010a68:	bf14      	ite	ne
 8010a6a:	2301      	movne	r3, #1
 8010a6c:	2300      	moveq	r3, #0
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d013      	beq.n	8010a9c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	695c      	ldr	r4, [r3, #20]
 8010a78:	6838      	ldr	r0, [r7, #0]
 8010a7a:	f7fb fe6a 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2204      	movs	r2, #4
 8010a82:	9203      	str	r2, [sp, #12]
 8010a84:	9302      	str	r3, [sp, #8]
 8010a86:	4b23      	ldr	r3, [pc, #140]	; (8010b14 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
 8010a88:	9301      	str	r3, [sp, #4]
 8010a8a:	4b23      	ldr	r3, [pc, #140]	; (8010b18 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>)
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	237c      	movs	r3, #124	; 0x7c
 8010a90:	4a22      	ldr	r2, [pc, #136]	; (8010b1c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8010a92:	4923      	ldr	r1, [pc, #140]	; (8010b20 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	47a0      	blx	r4
 8010a98:	2301      	movs	r3, #1
 8010a9a:	e037      	b.n	8010b0c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8010a9c:	6838      	ldr	r0, [r7, #0]
 8010a9e:	f7fb fe65 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	bf14      	ite	ne
 8010aa8:	2301      	movne	r3, #1
 8010aaa:	2300      	moveq	r3, #0
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d013      	beq.n	8010ada <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	695c      	ldr	r4, [r3, #20]
 8010ab6:	6838      	ldr	r0, [r7, #0]
 8010ab8:	f7fb fe58 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2201      	movs	r2, #1
 8010ac0:	9203      	str	r2, [sp, #12]
 8010ac2:	9302      	str	r3, [sp, #8]
 8010ac4:	4b17      	ldr	r3, [pc, #92]	; (8010b24 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8010ac6:	9301      	str	r3, [sp, #4]
 8010ac8:	4b17      	ldr	r3, [pc, #92]	; (8010b28 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	237d      	movs	r3, #125	; 0x7d
 8010ace:	4a13      	ldr	r2, [pc, #76]	; (8010b1c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8010ad0:	4913      	ldr	r1, [pc, #76]	; (8010b20 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	47a0      	blx	r4
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e018      	b.n	8010b0c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  StridedSliceContext op_context(context, node);
 8010ada:	f107 030c 	add.w	r3, r7, #12
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	6879      	ldr	r1, [r7, #4]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ff fe11 	bl	801070a <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	2b04      	cmp	r3, #4
 8010aec:	dd06      	ble.n	8010afc <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	695b      	ldr	r3, [r3, #20]
 8010af2:	490e      	ldr	r1, [pc, #56]	; (8010b2c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	4798      	blx	r3
 8010af8:	2301      	movs	r3, #1
 8010afa:	e007      	b.n	8010b0c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
                     "input dim should not exceed 4");
  return CheckOutputSize(context, &op_context);
 8010afc:	f107 030c 	add.w	r3, r7, #12
 8010b00:	4619      	mov	r1, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7ff feb2 	bl	801086c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	bf00      	nop
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	372c      	adds	r7, #44	; 0x2c
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd90      	pop	{r4, r7, pc}
 8010b14:	0804baf0 	.word	0x0804baf0
 8010b18:	0804baf4 	.word	0x0804baf4
 8010b1c:	0804b9dc 	.word	0x0804b9dc
 8010b20:	0804ba88 	.word	0x0804ba88
 8010b24:	0804bb04 	.word	0x0804bb04
 8010b28:	0804bb08 	.word	0x0804bb08
 8010b2c:	0804bb1c 	.word	0x0804bb1c

08010b30 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>:
#undef TF_LITE_STRIDED_SLICE
  return kTfLiteOk;
}
}  // namespace strided_slice

TfLiteRegistration Register_STRIDED_SLICE() {
 8010b30:	b4b0      	push	{r4, r5, r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
          /*prepare=*/strided_slice::Prepare,
          /*invoke=*/strided_slice::Eval<strided_slice::kReference>,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4a07      	ldr	r2, [pc, #28]	; (8010b58 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv+0x28>)
 8010b3c:	461c      	mov	r4, r3
 8010b3e:	4615      	mov	r5, r2
 8010b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bcb0      	pop	{r4, r5, r7}
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	0804bbe8 	.word	0x0804bbe8

08010b5c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010b5c:	b590      	push	{r4, r7, lr}
 8010b5e:	b0c5      	sub	sp, #276	; 0x114
 8010b60:	af02      	add	r7, sp, #8
 8010b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b6a:	6018      	str	r0, [r3, #0]
 8010b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b74:	6019      	str	r1, [r3, #0]
  StridedSliceContext op_context(context, node);
 8010b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b7a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8010b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b86:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8010b8a:	6812      	ldr	r2, [r2, #0]
 8010b8c:	6819      	ldr	r1, [r3, #0]
 8010b8e:	f7ff fdbc 	bl	801070a <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  auto op_params = BuildStridedSliceParams(&op_context);
 8010b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010b9a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7ff fdf1 	bl	8010788 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  switch (op_context.input->type) {
 8010ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	2b09      	cmp	r3, #9
 8010bac:	d061      	beq.n	8010c72 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x116>
 8010bae:	2b09      	cmp	r3, #9
 8010bb0:	f300 808c 	bgt.w	8010ccc <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x170>
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d002      	beq.n	8010bbe <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x62>
 8010bb8:	2b03      	cmp	r3, #3
 8010bba:	d02d      	beq.n	8010c18 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>
 8010bbc:	e086      	b.n	8010ccc <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x170>
        TF_LITE_STRIDED_SLICE(reference_ops, float);
 8010bbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010bc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010bc4:	4611      	mov	r1, r2
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7f8 f8bc 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fb fd5a 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010bd8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010bdc:	4611      	mov	r1, r2
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7f8 f8b0 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fb fd5f 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8010bec:	4602      	mov	r2, r0
 8010bee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010bf2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8010bf6:	f107 0008 	add.w	r0, r7, #8
 8010bfa:	9200      	str	r2, [sp, #0]
 8010bfc:	4622      	mov	r2, r4
 8010bfe:	f000 f887 	bl	8010d10 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
 8010c02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7f8 f822 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c0c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f8 f81d 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8010c16:	e072      	b.n	8010cfe <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a2>
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
 8010c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010c1e:	4611      	mov	r1, r2
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7f8 f88f 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fb fc6a 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010c2e:	4604      	mov	r4, r0
 8010c30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010c36:	4611      	mov	r1, r2
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7f8 f883 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fb fc6f 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010c46:	4602      	mov	r2, r0
 8010c48:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010c4c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8010c50:	f107 0008 	add.w	r0, r7, #8
 8010c54:	9200      	str	r2, [sp, #0]
 8010c56:	4622      	mov	r2, r4
 8010c58:	f000 fa3f 	bl	80110da <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
 8010c5c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7f7 fff5 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7f7 fff0 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8010c70:	e045      	b.n	8010cfe <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a2>
        TF_LITE_STRIDED_SLICE(reference_ops, int8_t);
 8010c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c74:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8010c78:	4611      	mov	r1, r2
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7f8 f862 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fb fd22 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010c88:	4604      	mov	r4, r0
 8010c8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010c8c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8010c90:	4611      	mov	r1, r2
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7f8 f856 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fb fd27 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8010ca6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8010caa:	f107 0008 	add.w	r0, r7, #8
 8010cae:	9200      	str	r2, [sp, #0]
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	f000 fbf6 	bl	80114a2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
 8010cb6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7f7 ffc8 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8010cc0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7f7 ffc3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8010cca:	e018      	b.n	8010cfe <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a2>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8010ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	695c      	ldr	r4, [r3, #20]
 8010cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f4 f875 	bl	8004dcc <TfLiteTypeGetName>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cee:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	4905      	ldr	r1, [pc, #20]	; (8010d0c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1b0>)
 8010cf6:	6800      	ldr	r0, [r0, #0]
 8010cf8:	47a0      	blx	r4
      return kTfLiteError;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e000      	b.n	8010d00 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd90      	pop	{r4, r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	0804bc08 	.word	0x0804bc08

08010d10 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:

namespace tflite {

namespace reference_ops {
template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 8010d10:	b590      	push	{r4, r7, lr}
 8010d12:	b0bf      	sub	sp, #252	; 0xfc
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	60b9      	str	r1, [r7, #8]
 8010d1a:	607a      	str	r2, [r7, #4]
 8010d1c:	603b      	str	r3, [r7, #0]
                         T* output_data) {
  using strided_slice::LoopCondition;
  using strided_slice::StartForAxis;
  using strided_slice::StopForAxis;
  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010d24:	4611      	mov	r1, r2
 8010d26:	2254      	movs	r2, #84	; 0x54
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f008 fe6a 	bl	8019a02 <memcpy>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 8010d2e:	68b8      	ldr	r0, [r7, #8]
 8010d30:	f7f7 ffa4 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b05      	cmp	r3, #5
 8010d38:	dd01      	ble.n	8010d3e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
 8010d3a:	f008 fadd 	bl	80192f8 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 8010d3e:	6838      	ldr	r0, [r7, #0]
 8010d40:	f7f7 ff9c 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b05      	cmp	r3, #5
 8010d48:	dd01      	ble.n	8010d4e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x3e>
 8010d4a:	f008 fad5 	bl	80192f8 <abort>
  const RuntimeShape input_shape =
 8010d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	2105      	movs	r1, #5
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fb fdc8 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
      RuntimeShape::ExtendedShape(5, unextended_input_shape);
  const RuntimeShape output_shape =
 8010d5c:	f107 0310 	add.w	r3, r7, #16
 8010d60:	683a      	ldr	r2, [r7, #0]
 8010d62:	2105      	movs	r1, #5
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fb fdc1 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
      RuntimeShape::ExtendedShape(5, unextended_output_shape);

  // Reverse and pad to 5 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 5D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 8010d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010d6e:	2105      	movs	r1, #5
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff fb07 	bl	8010384 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_0 = StartForAxis(params_copy, input_shape, 0);
 8010d76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010d7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010d7e:	2200      	movs	r2, #0
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7ff fbe8 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8010d86:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
 8010d8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010d8e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8010d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d96:	2200      	movs	r2, #0
 8010d98:	f7ff fc28 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8010d9c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
 8010da0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010da4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010da8:	2201      	movs	r2, #1
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff fbd3 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8010db0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
 8010db4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010db8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8010dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	f7ff fc13 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8010dc6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
 8010dca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010dd2:	2202      	movs	r2, #2
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7ff fbbe 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8010dda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
 8010dde:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010de2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8010de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010dea:	2202      	movs	r2, #2
 8010dec:	f7ff fbfe 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8010df0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
 8010df4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010df8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010dfc:	2203      	movs	r2, #3
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff fba9 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8010e04:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
 8010e08:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010e0c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8010e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010e14:	2203      	movs	r2, #3
 8010e16:	f7ff fbe9 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8010e1a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
 8010e1e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010e22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010e26:	2204      	movs	r2, #4
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7ff fb94 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8010e2e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
 8010e32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010e36:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8010e3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e3e:	2204      	movs	r2, #4
 8010e40:	f7ff fbd4 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8010e44:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

  T* out_ptr = output_data;
 8010e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010e4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (int offset_0 = start_0 * input_shape.Dims(1),
 8010e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e54:	2101      	movs	r1, #1
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fb fb86 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e62:	fb02 f303 	mul.w	r3, r2, r3
 8010e66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
           end_0 = stop_0 * input_shape.Dims(1),
 8010e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e6e:	2101      	movs	r1, #1
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fb fb79 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010e76:	4602      	mov	r2, r0
 8010e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010e7c:	fb02 f303 	mul.w	r3, r2, r3
 8010e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
 8010e84:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8010e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e8a:	2101      	movs	r1, #1
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7fb fb6b 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010e92:	4603      	mov	r3, r0
 8010e94:	fb04 f303 	mul.w	r3, r4, r3
 8010e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
 8010e9c:	e101      	b.n	80110a2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x392>
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
       offset_0 += step_0) {
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
 8010e9e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8010ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ea6:	18d4      	adds	r4, r2, r3
 8010ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010eac:	2102      	movs	r1, #2
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fb fb5a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	fb04 f303 	mul.w	r3, r4, r3
 8010eba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
 8010ebe:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8010ec2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010ec6:	18d4      	adds	r4, r2, r3
 8010ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ecc:	2102      	movs	r1, #2
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fb fb4a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	fb04 f303 	mul.w	r3, r4, r3
 8010eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
 8010ede:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8010ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ee4:	2102      	movs	r1, #2
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fb fb3e 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010eec:	4603      	mov	r3, r0
 8010eee:	fb04 f303 	mul.w	r3, r4, r3
 8010ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
 8010ef6:	e0be      	b.n	8011076 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x366>
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
         offset_1 += step_1) {
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
 8010ef8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010f00:	18d4      	adds	r4, r2, r3
 8010f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f06:	2103      	movs	r1, #3
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fb fb2d 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	fb04 f303 	mul.w	r3, r4, r3
 8010f14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
 8010f18:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f20:	18d4      	adds	r4, r2, r3
 8010f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f26:	2103      	movs	r1, #3
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fb fb1d 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	fb04 f303 	mul.w	r3, r4, r3
 8010f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
 8010f38:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8010f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f3e:	2103      	movs	r1, #3
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fb fb11 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f46:	4603      	mov	r3, r0
 8010f48:	fb04 f303 	mul.w	r3, r4, r3
 8010f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
 8010f50:	e07b      	b.n	801104a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x33a>
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
           offset_2 += step_2) {
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
 8010f52:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f5a:	18d4      	adds	r4, r2, r3
 8010f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f60:	2104      	movs	r1, #4
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fb fb00 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	fb04 f303 	mul.w	r3, r4, r3
 8010f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
 8010f72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010f76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010f7a:	18d4      	adds	r4, r2, r3
 8010f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f80:	2104      	movs	r1, #4
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fb faf0 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	fb04 f303 	mul.w	r3, r4, r3
 8010f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
 8010f92:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8010f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f9a:	2104      	movs	r1, #4
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fb fae3 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	fb04 f303 	mul.w	r3, r4, r3
 8010fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
 8010fac:	e037      	b.n	801101e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x30e>
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
             offset_3 += step_3) {
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
 8010fae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010fb6:	4413      	add	r3, r2
 8010fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010fbc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010fc4:	4413      	add	r3, r2
 8010fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010fca:	e012      	b.n	8010ff2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e2>
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
               offset_4 += params_copy.strides[4]) {
            *out_ptr++ = input_data[offset_4];
 8010fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	441a      	add	r2, r3
 8010fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010fda:	1d19      	adds	r1, r3, #4
 8010fdc:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8010fe0:	6812      	ldr	r2, [r2, #0]
 8010fe2:	601a      	str	r2, [r3, #0]
               offset_4 += params_copy.strides[4]) {
 8010fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fe8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010fec:	4413      	add	r3, r2
 8010fee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
 8010ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010ffc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8011000:	f7ff fb65 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 8011004:	4603      	mov	r3, r0
 8011006:	f083 0301 	eor.w	r3, r3, #1
 801100a:	b2db      	uxtb	r3, r3
 801100c:	2b00      	cmp	r3, #0
 801100e:	d1dd      	bne.n	8010fcc <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2bc>
             offset_3 += step_3) {
 8011010:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011018:	4413      	add	r3, r2
 801101a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
 801101e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011022:	461a      	mov	r2, r3
 8011024:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011028:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801102c:	f7ff fb4f 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 8011030:	4603      	mov	r3, r0
 8011032:	f083 0301 	eor.w	r3, r3, #1
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b00      	cmp	r3, #0
 801103a:	d1b8      	bne.n	8010fae <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x29e>
           offset_2 += step_2) {
 801103c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011044:	4413      	add	r3, r2
 8011046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
 801104a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801104c:	461a      	mov	r2, r3
 801104e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011052:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8011056:	f7ff fb3a 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 801105a:	4603      	mov	r3, r0
 801105c:	f083 0301 	eor.w	r3, r3, #1
 8011060:	b2db      	uxtb	r3, r3
 8011062:	2b00      	cmp	r3, #0
 8011064:	f47f af75 	bne.w	8010f52 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x242>
         offset_1 += step_1) {
 8011068:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801106c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011070:	4413      	add	r3, r2
 8011072:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
 8011076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011078:	461a      	mov	r2, r3
 801107a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801107e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8011082:	f7ff fb24 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 8011086:	4603      	mov	r3, r0
 8011088:	f083 0301 	eor.w	r3, r3, #1
 801108c:	b2db      	uxtb	r3, r3
 801108e:	2b00      	cmp	r3, #0
 8011090:	f47f af32 	bne.w	8010ef8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
       offset_0 += step_0) {
 8011094:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801109c:	4413      	add	r3, r2
 801109e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
 80110a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80110a4:	461a      	mov	r2, r3
 80110a6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80110aa:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80110ae:	f7ff fb0e 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 80110b2:	4603      	mov	r3, r0
 80110b4:	f083 0301 	eor.w	r3, r3, #1
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f47f aeef 	bne.w	8010e9e <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18e>
          }
        }
      }
    }
  }
}
 80110c0:	f107 0310 	add.w	r3, r7, #16
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7f7 fdc3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80110ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7f7 fdbe 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80110d4:	37fc      	adds	r7, #252	; 0xfc
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd90      	pop	{r4, r7, pc}

080110da <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 80110da:	b590      	push	{r4, r7, lr}
 80110dc:	b0bf      	sub	sp, #252	; 0xfc
 80110de:	af00      	add	r7, sp, #0
 80110e0:	60f8      	str	r0, [r7, #12]
 80110e2:	60b9      	str	r1, [r7, #8]
 80110e4:	607a      	str	r2, [r7, #4]
 80110e6:	603b      	str	r3, [r7, #0]
  tflite::StridedSliceParams params_copy = op_params;
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80110ee:	4611      	mov	r1, r2
 80110f0:	2254      	movs	r2, #84	; 0x54
 80110f2:	4618      	mov	r0, r3
 80110f4:	f008 fc85 	bl	8019a02 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 80110f8:	68b8      	ldr	r0, [r7, #8]
 80110fa:	f7f7 fdbf 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b05      	cmp	r3, #5
 8011102:	dd01      	ble.n	8011108 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
 8011104:	f008 f8f8 	bl	80192f8 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 8011108:	6838      	ldr	r0, [r7, #0]
 801110a:	f7f7 fdb7 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801110e:	4603      	mov	r3, r0
 8011110:	2b05      	cmp	r3, #5
 8011112:	dd01      	ble.n	8011118 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x3e>
 8011114:	f008 f8f0 	bl	80192f8 <abort>
  const RuntimeShape input_shape =
 8011118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801111c:	68ba      	ldr	r2, [r7, #8]
 801111e:	2105      	movs	r1, #5
 8011120:	4618      	mov	r0, r3
 8011122:	f7fb fbe3 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape output_shape =
 8011126:	f107 0310 	add.w	r3, r7, #16
 801112a:	683a      	ldr	r2, [r7, #0]
 801112c:	2105      	movs	r1, #5
 801112e:	4618      	mov	r0, r3
 8011130:	f7fb fbdc 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 8011134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011138:	2105      	movs	r1, #5
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff f922 	bl	8010384 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
 8011140:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011144:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011148:	2200      	movs	r2, #0
 801114a:	4618      	mov	r0, r3
 801114c:	f7ff fa03 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8011150:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
 8011154:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011158:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801115c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011160:	2200      	movs	r2, #0
 8011162:	f7ff fa43 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8011166:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
 801116a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801116e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011172:	2201      	movs	r2, #1
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff f9ee 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 801117a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
 801117e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011182:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8011186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801118a:	2201      	movs	r2, #1
 801118c:	f7ff fa2e 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8011190:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
 8011194:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011198:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801119c:	2202      	movs	r2, #2
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ff f9d9 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 80111a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
 80111a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80111ac:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80111b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80111b4:	2202      	movs	r2, #2
 80111b6:	f7ff fa19 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 80111ba:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
 80111be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80111c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111c6:	2203      	movs	r2, #3
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7ff f9c4 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 80111ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
 80111d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80111d6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80111da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80111de:	2203      	movs	r2, #3
 80111e0:	f7ff fa04 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 80111e4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
 80111e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80111ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111f0:	2204      	movs	r2, #4
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7ff f9af 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 80111f8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
 80111fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011200:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8011204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011208:	2204      	movs	r2, #4
 801120a:	f7ff f9ef 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 801120e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  T* out_ptr = output_data;
 8011212:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011216:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (int offset_0 = start_0 * input_shape.Dims(1),
 801121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801121e:	2101      	movs	r1, #1
 8011220:	4618      	mov	r0, r3
 8011222:	f7fb f9a1 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011226:	4602      	mov	r2, r0
 8011228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801122c:	fb02 f303 	mul.w	r3, r2, r3
 8011230:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
           end_0 = stop_0 * input_shape.Dims(1),
 8011234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011238:	2101      	movs	r1, #1
 801123a:	4618      	mov	r0, r3
 801123c:	f7fb f994 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011240:	4602      	mov	r2, r0
 8011242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011246:	fb02 f303 	mul.w	r3, r2, r3
 801124a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
 801124e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8011250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011254:	2101      	movs	r1, #1
 8011256:	4618      	mov	r0, r3
 8011258:	f7fb f986 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801125c:	4603      	mov	r3, r0
 801125e:	fb04 f303 	mul.w	r3, r4, r3
 8011262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
 8011266:	e100      	b.n	801146a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x390>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
 8011268:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801126c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011270:	18d4      	adds	r4, r2, r3
 8011272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011276:	2102      	movs	r1, #2
 8011278:	4618      	mov	r0, r3
 801127a:	f7fb f975 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801127e:	4603      	mov	r3, r0
 8011280:	fb04 f303 	mul.w	r3, r4, r3
 8011284:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
 8011288:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801128c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011290:	18d4      	adds	r4, r2, r3
 8011292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011296:	2102      	movs	r1, #2
 8011298:	4618      	mov	r0, r3
 801129a:	f7fb f965 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801129e:	4603      	mov	r3, r0
 80112a0:	fb04 f303 	mul.w	r3, r4, r3
 80112a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
 80112a8:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80112aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112ae:	2102      	movs	r1, #2
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7fb f959 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80112b6:	4603      	mov	r3, r0
 80112b8:	fb04 f303 	mul.w	r3, r4, r3
 80112bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
 80112c0:	e0bd      	b.n	801143e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x364>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
 80112c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80112c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80112ca:	18d4      	adds	r4, r2, r3
 80112cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112d0:	2103      	movs	r1, #3
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fb f948 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80112d8:	4603      	mov	r3, r0
 80112da:	fb04 f303 	mul.w	r3, r4, r3
 80112de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
 80112e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80112e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80112ea:	18d4      	adds	r4, r2, r3
 80112ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112f0:	2103      	movs	r1, #3
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fb f938 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80112f8:	4603      	mov	r3, r0
 80112fa:	fb04 f303 	mul.w	r3, r4, r3
 80112fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
 8011302:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8011304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011308:	2103      	movs	r1, #3
 801130a:	4618      	mov	r0, r3
 801130c:	f7fb f92c 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011310:	4603      	mov	r3, r0
 8011312:	fb04 f303 	mul.w	r3, r4, r3
 8011316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
 801131a:	e07a      	b.n	8011412 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x338>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
 801131c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011324:	18d4      	adds	r4, r2, r3
 8011326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801132a:	2104      	movs	r1, #4
 801132c:	4618      	mov	r0, r3
 801132e:	f7fb f91b 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011332:	4603      	mov	r3, r0
 8011334:	fb04 f303 	mul.w	r3, r4, r3
 8011338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
 801133c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011344:	18d4      	adds	r4, r2, r3
 8011346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801134a:	2104      	movs	r1, #4
 801134c:	4618      	mov	r0, r3
 801134e:	f7fb f90b 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011352:	4603      	mov	r3, r0
 8011354:	fb04 f303 	mul.w	r3, r4, r3
 8011358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
 801135c:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8011360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011364:	2104      	movs	r1, #4
 8011366:	4618      	mov	r0, r3
 8011368:	f7fb f8fe 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801136c:	4603      	mov	r3, r0
 801136e:	fb04 f303 	mul.w	r3, r4, r3
 8011372:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
 8011376:	e036      	b.n	80113e6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x30c>
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
 8011378:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801137c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011380:	4413      	add	r3, r2
 8011382:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801138a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801138e:	4413      	add	r3, r2
 8011390:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011394:	e011      	b.n	80113ba <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e0>
            *out_ptr++ = input_data[offset_4];
 8011396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	441a      	add	r2, r3
 801139e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80113a2:	1c59      	adds	r1, r3, #1
 80113a4:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80113a8:	7812      	ldrb	r2, [r2, #0]
 80113aa:	701a      	strb	r2, [r3, #0]
               offset_4 += params_copy.strides[4]) {
 80113ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80113b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80113b4:	4413      	add	r3, r2
 80113b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
 80113ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80113be:	461a      	mov	r2, r3
 80113c0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80113c4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80113c8:	f7ff f981 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 80113cc:	4603      	mov	r3, r0
 80113ce:	f083 0301 	eor.w	r3, r3, #1
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1de      	bne.n	8011396 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2bc>
             offset_3 += step_3) {
 80113d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80113dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80113e0:	4413      	add	r3, r2
 80113e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
 80113e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80113ea:	461a      	mov	r2, r3
 80113ec:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80113f0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80113f4:	f7ff f96b 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 80113f8:	4603      	mov	r3, r0
 80113fa:	f083 0301 	eor.w	r3, r3, #1
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	2b00      	cmp	r3, #0
 8011402:	d1b9      	bne.n	8011378 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x29e>
           offset_2 += step_2) {
 8011404:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801140c:	4413      	add	r3, r2
 801140e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
 8011412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011414:	461a      	mov	r2, r3
 8011416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801141a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801141e:	f7ff f956 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 8011422:	4603      	mov	r3, r0
 8011424:	f083 0301 	eor.w	r3, r3, #1
 8011428:	b2db      	uxtb	r3, r3
 801142a:	2b00      	cmp	r3, #0
 801142c:	f47f af76 	bne.w	801131c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x242>
         offset_1 += step_1) {
 8011430:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011438:	4413      	add	r3, r2
 801143a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
 801143e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011440:	461a      	mov	r2, r3
 8011442:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8011446:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 801144a:	f7ff f940 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 801144e:	4603      	mov	r3, r0
 8011450:	f083 0301 	eor.w	r3, r3, #1
 8011454:	b2db      	uxtb	r3, r3
 8011456:	2b00      	cmp	r3, #0
 8011458:	f47f af33 	bne.w	80112c2 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
       offset_0 += step_0) {
 801145c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011460:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011464:	4413      	add	r3, r2
 8011466:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
 801146a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801146c:	461a      	mov	r2, r3
 801146e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8011472:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8011476:	f7ff f92a 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 801147a:	4603      	mov	r3, r0
 801147c:	f083 0301 	eor.w	r3, r3, #1
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b00      	cmp	r3, #0
 8011484:	f47f aef0 	bne.w	8011268 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18e>
}
 8011488:	f107 0310 	add.w	r3, r7, #16
 801148c:	4618      	mov	r0, r3
 801148e:	f7f7 fbdf 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8011492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011496:	4618      	mov	r0, r3
 8011498:	f7f7 fbda 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 801149c:	37fc      	adds	r7, #252	; 0xfc
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd90      	pop	{r4, r7, pc}

080114a2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
 80114a2:	b590      	push	{r4, r7, lr}
 80114a4:	b0bf      	sub	sp, #252	; 0xfc
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	60f8      	str	r0, [r7, #12]
 80114aa:	60b9      	str	r1, [r7, #8]
 80114ac:	607a      	str	r2, [r7, #4]
 80114ae:	603b      	str	r3, [r7, #0]
  tflite::StridedSliceParams params_copy = op_params;
 80114b0:	68fa      	ldr	r2, [r7, #12]
 80114b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114b6:	4611      	mov	r1, r2
 80114b8:	2254      	movs	r2, #84	; 0x54
 80114ba:	4618      	mov	r0, r3
 80114bc:	f008 faa1 	bl	8019a02 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
 80114c0:	68b8      	ldr	r0, [r7, #8]
 80114c2:	f7f7 fbdb 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b05      	cmp	r3, #5
 80114ca:	dd01      	ble.n	80114d0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
 80114cc:	f007 ff14 	bl	80192f8 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
 80114d0:	6838      	ldr	r0, [r7, #0]
 80114d2:	f7f7 fbd3 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b05      	cmp	r3, #5
 80114da:	dd01      	ble.n	80114e0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x3e>
 80114dc:	f007 ff0c 	bl	80192f8 <abort>
  const RuntimeShape input_shape =
 80114e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	2105      	movs	r1, #5
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fb f9ff 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape output_shape =
 80114ee:	f107 0310 	add.w	r3, r7, #16
 80114f2:	683a      	ldr	r2, [r7, #0]
 80114f4:	2105      	movs	r1, #5
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fb f9f8 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
 80114fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011500:	2105      	movs	r1, #5
 8011502:	4618      	mov	r0, r3
 8011504:	f7fe ff3e 	bl	8010384 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
 8011508:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801150c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011510:	2200      	movs	r2, #0
 8011512:	4618      	mov	r0, r3
 8011514:	f7ff f81f 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8011518:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
 801151c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011520:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8011524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011528:	2200      	movs	r2, #0
 801152a:	f7ff f85f 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 801152e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
 8011532:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011536:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801153a:	2201      	movs	r2, #1
 801153c:	4618      	mov	r0, r3
 801153e:	f7ff f80a 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8011542:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
 8011546:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801154a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801154e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011552:	2201      	movs	r2, #1
 8011554:	f7ff f84a 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8011558:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
 801155c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011560:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011564:	2202      	movs	r2, #2
 8011566:	4618      	mov	r0, r3
 8011568:	f7fe fff5 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 801156c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
 8011570:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011574:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8011578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801157c:	2202      	movs	r2, #2
 801157e:	f7ff f835 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 8011582:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
 8011586:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801158a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801158e:	2203      	movs	r2, #3
 8011590:	4618      	mov	r0, r3
 8011592:	f7fe ffe0 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 8011596:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
 801159a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801159e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80115a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80115a6:	2203      	movs	r2, #3
 80115a8:	f7ff f820 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 80115ac:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
 80115b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80115b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115b8:	2204      	movs	r2, #4
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fe ffcb 	bl	8010556 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
 80115c0:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
 80115c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80115c8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80115cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80115d0:	2204      	movs	r2, #4
 80115d2:	f7ff f80b 	bl	80105ec <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
 80115d6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  T* out_ptr = output_data;
 80115da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80115de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (int offset_0 = start_0 * input_shape.Dims(1),
 80115e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80115e6:	2101      	movs	r1, #1
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fa ffbd 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80115ee:	4602      	mov	r2, r0
 80115f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115f4:	fb02 f303 	mul.w	r3, r2, r3
 80115f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
           end_0 = stop_0 * input_shape.Dims(1),
 80115fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011600:	2101      	movs	r1, #1
 8011602:	4618      	mov	r0, r3
 8011604:	f7fa ffb0 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011608:	4602      	mov	r2, r0
 801160a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801160e:	fb02 f303 	mul.w	r3, r2, r3
 8011612:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
 8011616:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8011618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801161c:	2101      	movs	r1, #1
 801161e:	4618      	mov	r0, r3
 8011620:	f7fa ffa2 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011624:	4603      	mov	r3, r0
 8011626:	fb04 f303 	mul.w	r3, r4, r3
 801162a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
 801162e:	e101      	b.n	8011834 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x392>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
 8011630:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011638:	18d4      	adds	r4, r2, r3
 801163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801163e:	2102      	movs	r1, #2
 8011640:	4618      	mov	r0, r3
 8011642:	f7fa ff91 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011646:	4603      	mov	r3, r0
 8011648:	fb04 f303 	mul.w	r3, r4, r3
 801164c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
 8011650:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011654:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011658:	18d4      	adds	r4, r2, r3
 801165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801165e:	2102      	movs	r1, #2
 8011660:	4618      	mov	r0, r3
 8011662:	f7fa ff81 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011666:	4603      	mov	r3, r0
 8011668:	fb04 f303 	mul.w	r3, r4, r3
 801166c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
 8011670:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8011672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011676:	2102      	movs	r1, #2
 8011678:	4618      	mov	r0, r3
 801167a:	f7fa ff75 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801167e:	4603      	mov	r3, r0
 8011680:	fb04 f303 	mul.w	r3, r4, r3
 8011684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
 8011688:	e0be      	b.n	8011808 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x366>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
 801168a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801168e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011692:	18d4      	adds	r4, r2, r3
 8011694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011698:	2103      	movs	r1, #3
 801169a:	4618      	mov	r0, r3
 801169c:	f7fa ff64 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116a0:	4603      	mov	r3, r0
 80116a2:	fb04 f303 	mul.w	r3, r4, r3
 80116a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
 80116aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80116ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80116b2:	18d4      	adds	r4, r2, r3
 80116b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116b8:	2103      	movs	r1, #3
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fa ff54 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116c0:	4603      	mov	r3, r0
 80116c2:	fb04 f303 	mul.w	r3, r4, r3
 80116c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
 80116ca:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80116cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116d0:	2103      	movs	r1, #3
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fa ff48 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116d8:	4603      	mov	r3, r0
 80116da:	fb04 f303 	mul.w	r3, r4, r3
 80116de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
 80116e2:	e07b      	b.n	80117dc <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x33a>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
 80116e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80116e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80116ec:	18d4      	adds	r4, r2, r3
 80116ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116f2:	2104      	movs	r1, #4
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fa ff37 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116fa:	4603      	mov	r3, r0
 80116fc:	fb04 f303 	mul.w	r3, r4, r3
 8011700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
 8011704:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801170c:	18d4      	adds	r4, r2, r3
 801170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011712:	2104      	movs	r1, #4
 8011714:	4618      	mov	r0, r3
 8011716:	f7fa ff27 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801171a:	4603      	mov	r3, r0
 801171c:	fb04 f303 	mul.w	r3, r4, r3
 8011720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
 8011724:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8011728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801172c:	2104      	movs	r1, #4
 801172e:	4618      	mov	r0, r3
 8011730:	f7fa ff1a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011734:	4603      	mov	r3, r0
 8011736:	fb04 f303 	mul.w	r3, r4, r3
 801173a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
 801173e:	e037      	b.n	80117b0 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x30e>
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
 8011740:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011748:	4413      	add	r3, r2
 801174a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801174e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011756:	4413      	add	r3, r2
 8011758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801175c:	e012      	b.n	8011784 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e2>
            *out_ptr++ = input_data[offset_4];
 801175e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011762:	687a      	ldr	r2, [r7, #4]
 8011764:	441a      	add	r2, r3
 8011766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801176a:	1c59      	adds	r1, r3, #1
 801176c:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8011770:	f992 2000 	ldrsb.w	r2, [r2]
 8011774:	701a      	strb	r2, [r3, #0]
               offset_4 += params_copy.strides[4]) {
 8011776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801177a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801177e:	4413      	add	r3, r2
 8011780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
 8011784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011788:	461a      	mov	r2, r3
 801178a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801178e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8011792:	f7fe ff9c 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 8011796:	4603      	mov	r3, r0
 8011798:	f083 0301 	eor.w	r3, r3, #1
 801179c:	b2db      	uxtb	r3, r3
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d1dd      	bne.n	801175e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2bc>
             offset_3 += step_3) {
 80117a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80117a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117aa:	4413      	add	r3, r2
 80117ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
 80117b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80117b4:	461a      	mov	r2, r3
 80117b6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80117ba:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80117be:	f7fe ff86 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 80117c2:	4603      	mov	r3, r0
 80117c4:	f083 0301 	eor.w	r3, r3, #1
 80117c8:	b2db      	uxtb	r3, r3
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d1b8      	bne.n	8011740 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x29e>
           offset_2 += step_2) {
 80117ce:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80117d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80117d6:	4413      	add	r3, r2
 80117d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
 80117dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80117de:	461a      	mov	r2, r3
 80117e0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80117e4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80117e8:	f7fe ff71 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 80117ec:	4603      	mov	r3, r0
 80117ee:	f083 0301 	eor.w	r3, r3, #1
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f47f af75 	bne.w	80116e4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x242>
         offset_1 += step_1) {
 80117fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80117fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011802:	4413      	add	r3, r2
 8011804:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
 8011808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801180a:	461a      	mov	r2, r3
 801180c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8011810:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8011814:	f7fe ff5b 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 8011818:	4603      	mov	r3, r0
 801181a:	f083 0301 	eor.w	r3, r3, #1
 801181e:	b2db      	uxtb	r3, r3
 8011820:	2b00      	cmp	r3, #0
 8011822:	f47f af32 	bne.w	801168a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
       offset_0 += step_0) {
 8011826:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801182a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801182e:	4413      	add	r3, r2
 8011830:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
 8011834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011836:	461a      	mov	r2, r3
 8011838:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801183c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8011840:	f7fe ff45 	bl	80106ce <_ZN6tflite13strided_slice13LoopConditionEiii>
 8011844:	4603      	mov	r3, r0
 8011846:	f083 0301 	eor.w	r3, r3, #1
 801184a:	b2db      	uxtb	r3, r3
 801184c:	2b00      	cmp	r3, #0
 801184e:	f47f aeef 	bne.w	8011630 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18e>
}
 8011852:	f107 0310 	add.w	r3, r7, #16
 8011856:	4618      	mov	r0, r3
 8011858:	f7f7 f9fa 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 801185c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011860:	4618      	mov	r0, r3
 8011862:	f7f7 f9f5 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8011866:	37fc      	adds	r7, #252	; 0xfc
 8011868:	46bd      	mov	sp, r7
 801186a:	bd90      	pop	{r4, r7, pc}

0801186c <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 801186c:	b480      	push	{r7}
 801186e:	af00      	add	r7, sp, #0
 8011870:	4b04      	ldr	r3, [pc, #16]	; (8011884 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8011872:	ee07 3a90 	vmov	s15, r3
 8011876:	eeb0 0a67 	vmov.f32	s0, s15
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	7f7fffff 	.word	0x7f7fffff

08011888 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8011888:	b480      	push	{r7}
 801188a:	af00      	add	r7, sp, #0
 801188c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8011890:	ee07 3a90 	vmov	s15, r3
 8011894:	eeb0 0a67 	vmov.f32	s0, s15
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <_ZN6tflite12RuntimeShapeC1Eil>:
  RuntimeShape(int shape_size, int32 value) : size_(0) {
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b086      	sub	sp, #24
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	607a      	str	r2, [r7, #4]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2200      	movs	r2, #0
 80118b0:	601a      	str	r2, [r3, #0]
    Resize(shape_size);
 80118b2:	68b9      	ldr	r1, [r7, #8]
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f7f7 fa00 	bl	8008cba <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
 80118ba:	2300      	movs	r3, #0
 80118bc:	617b      	str	r3, [r7, #20]
 80118be:	e007      	b.n	80118d0 <_ZN6tflite12RuntimeShapeC1Eil+0x30>
      SetDim(i, value);
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	6979      	ldr	r1, [r7, #20]
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f7fa ffdd 	bl	800c884 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < shape_size; ++i) {
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	3301      	adds	r3, #1
 80118ce:	617b      	str	r3, [r7, #20]
 80118d0:	697a      	ldr	r2, [r7, #20]
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	dbf3      	blt.n	80118c0 <_ZN6tflite12RuntimeShapeC1Eil+0x20>
  }
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	4618      	mov	r0, r3
 80118dc:	3718      	adds	r7, #24
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}

080118e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
 80118e2:	b590      	push	{r4, r7, lr}
 80118e4:	b09f      	sub	sp, #124	; 0x7c
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	60f8      	str	r0, [r7, #12]
 80118ea:	60b9      	str	r1, [r7, #8]
 80118ec:	607a      	str	r2, [r7, #4]
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7f7 f9c4 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80118f4:	4603      	mov	r3, r0
 80118f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80118f8:	68b8      	ldr	r0, [r7, #8]
 80118fa:	f7f7 f9bf 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80118fe:	4603      	mov	r3, r0
 8011900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011902:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011906:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801190a:	4611      	mov	r1, r2
 801190c:	4618      	mov	r0, r3
 801190e:	f7f7 f938 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8011912:	4603      	mov	r3, r0
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	66fb      	str	r3, [r7, #108]	; 0x6c

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2204      	movs	r2, #4
 801191c:	701a      	strb	r2, [r3, #0]
  RuntimeShape scalar_shape(dims_count, 1);
 801191e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011922:	2201      	movs	r2, #1
 8011924:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011926:	4618      	mov	r0, r3
 8011928:	f7ff ffba 	bl	80118a0 <_ZN6tflite12RuntimeShapeC1Eil>

  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
 801192c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011934:	4618      	mov	r0, r3
 8011936:	f7fa ffd9 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
 801193a:	f107 0310 	add.w	r3, r7, #16
 801193e:	68ba      	ldr	r2, [r7, #8]
 8011940:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011942:	4618      	mov	r0, r3
 8011944:	f7fa ffd2 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
 8011948:	f107 0210 	add.w	r2, r7, #16
 801194c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011950:	4611      	mov	r1, r2
 8011952:	4618      	mov	r0, r3
 8011954:	f7fe fa78 	bl	800fe48 <_ZNK6tflite12RuntimeShapeeqERKS0_>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	d004      	beq.n	8011968 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x86>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2201      	movs	r2, #1
 8011962:	701a      	strb	r2, [r3, #0]
    return false;
 8011964:	2400      	movs	r4, #0
 8011966:	e12c      	b.n	8011bc2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
  }

  for (int i = dims_count - 1; i >= 0; --i) {
 8011968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801196a:	3b01      	subs	r3, #1
 801196c:	677b      	str	r3, [r7, #116]	; 0x74
 801196e:	e041      	b.n	80119f4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x112>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
 8011970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011974:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011976:	4618      	mov	r0, r3
 8011978:	f7fa fdf6 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801197c:	4604      	mov	r4, r0
 801197e:	f107 0310 	add.w	r3, r7, #16
 8011982:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011984:	4618      	mov	r0, r3
 8011986:	f7fa fdef 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801198a:	4603      	mov	r3, r0
 801198c:	429c      	cmp	r4, r3
 801198e:	bf0c      	ite	eq
 8011990:	2301      	moveq	r3, #1
 8011992:	2300      	movne	r3, #0
 8011994:	b2db      	uxtb	r3, r3
 8011996:	2b00      	cmp	r3, #0
 8011998:	d128      	bne.n	80119ec <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x10a>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
 801199a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801199e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fa fde1 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80119a6:	4603      	mov	r3, r0
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	bf0c      	ite	eq
 80119ac:	2301      	moveq	r3, #1
 80119ae:	2300      	movne	r3, #0
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d003      	beq.n	80119be <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xdc>
      params->broadcast_category =
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2202      	movs	r2, #2
 80119ba:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
 80119bc:	e01d      	b.n	80119fa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else if (extended_shape1.Dims(i) == 1) {
 80119be:	f107 0310 	add.w	r3, r7, #16
 80119c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7fa fdcf 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	bf0c      	ite	eq
 80119d0:	2301      	moveq	r3, #1
 80119d2:	2300      	movne	r3, #0
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d003      	beq.n	80119e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x100>
      params->broadcast_category =
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2203      	movs	r2, #3
 80119de:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kSecondInputBroadcastsFast;
      break;
 80119e0:	e00b      	b.n	80119fa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else {
      // This case is erroneous: there is a dimension that does not match and
      // is not a broadcast from one shape to the other.
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2204      	movs	r2, #4
 80119e6:	701a      	strb	r2, [r3, #0]
      return true;
 80119e8:	2401      	movs	r4, #1
 80119ea:	e0ea      	b.n	8011bc2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
      continue;
 80119ec:	bf00      	nop
  for (int i = dims_count - 1; i >= 0; --i) {
 80119ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80119f0:	3b01      	subs	r3, #1
 80119f2:	677b      	str	r3, [r7, #116]	; 0x74
 80119f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	daba      	bge.n	8011970 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x8e>
    }
  }

  if (params->broadcast_category !=
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b02      	cmp	r3, #2
 8011a00:	d005      	beq.n	8011a0e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
      params->broadcast_category !=
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	781b      	ldrb	r3, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
 8011a06:	2b03      	cmp	r3, #3
 8011a08:	d001      	beq.n	8011a0e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kSecondInputBroadcastsFast) {
    // This is unreachable because at least one else clause in the above loop
    // must be reached.
    TFLITE_DCHECK(false);
 8011a0a:	f007 fc75 	bl	80192f8 <abort>
    return false;
  }

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	bf0c      	ite	eq
 8011a16:	2301      	moveq	r3, #1
 8011a18:	2300      	movne	r3, #0
 8011a1a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
 8011a1e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d002      	beq.n	8011a2c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14a>
 8011a26:	f107 0310 	add.w	r3, r7, #16
 8011a2a:	e001      	b.n	8011a30 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14e>
 8011a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a30:	667b      	str	r3, [r7, #100]	; 0x64
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
 8011a32:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d002      	beq.n	8011a40 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
 8011a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a3e:	e001      	b.n	8011a44 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x162>
 8011a40:	f107 0310 	add.w	r3, r7, #16
 8011a44:	663b      	str	r3, [r7, #96]	; 0x60
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
 8011a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a48:	3b01      	subs	r3, #1
 8011a4a:	673b      	str	r3, [r7, #112]	; 0x70
  params->broadcast_shape[0] = 1;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	651a      	str	r2, [r3, #80]	; 0x50
  params->broadcast_shape[1] = 1;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2201      	movs	r2, #1
 8011a56:	655a      	str	r2, [r3, #84]	; 0x54
  params->broadcast_shape[2] = 1;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	659a      	str	r2, [r3, #88]	; 0x58
  params->broadcast_shape[3] = 1;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2201      	movs	r2, #1
 8011a62:	65da      	str	r2, [r3, #92]	; 0x5c
  params->broadcast_shape[4] = 1;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2201      	movs	r2, #1
 8011a68:	661a      	str	r2, [r3, #96]	; 0x60
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8011a6a:	e00d      	b.n	8011a88 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1a6>
    params->broadcast_shape[4] *= shape_b->Dims(i);
 8011a6c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011a6e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011a70:	f7fa fd7a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a74:	4602      	mov	r2, r0
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a7a:	fb03 f202 	mul.w	r2, r3, r2
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	661a      	str	r2, [r3, #96]	; 0x60
    --i;
 8011a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011a84:	3b01      	subs	r3, #1
 8011a86:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8011a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	db0d      	blt.n	8011aaa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1c8>
 8011a8e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011a90:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011a92:	f7fa fd69 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a96:	4604      	mov	r4, r0
 8011a98:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011a9a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011a9c:	f7fa fd64 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	429c      	cmp	r4, r3
 8011aa4:	d101      	bne.n	8011aaa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1c8>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e000      	b.n	8011aac <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ca>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d1dd      	bne.n	8011a6c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x18a>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
 8011ab0:	e00d      	b.n	8011ace <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ec>
    params->broadcast_shape[3] *= shape_b->Dims(i);
 8011ab2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011ab4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011ab6:	f7fa fd57 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011aba:	4602      	mov	r2, r0
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ac0:	fb03 f202 	mul.w	r2, r3, r2
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	65da      	str	r2, [r3, #92]	; 0x5c
    --i;
 8011ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011aca:	3b01      	subs	r3, #1
 8011acc:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == 1) {
 8011ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	db08      	blt.n	8011ae6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x204>
 8011ad4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011ad6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011ad8:	f7fa fd46 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d101      	bne.n	8011ae6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x204>
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	e000      	b.n	8011ae8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x206>
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d1e2      	bne.n	8011ab2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1d0>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8011aec:	e00d      	b.n	8011b0a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x228>
    params->broadcast_shape[2] *= shape_a->Dims(i);
 8011aee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011af0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011af2:	f7fa fd39 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011af6:	4602      	mov	r2, r0
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011afc:	fb03 f202 	mul.w	r2, r3, r2
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	659a      	str	r2, [r3, #88]	; 0x58
    --i;
 8011b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b06:	3b01      	subs	r3, #1
 8011b08:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8011b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	db0d      	blt.n	8011b2c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x24a>
 8011b10:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b12:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011b14:	f7fa fd28 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011b18:	4604      	mov	r4, r0
 8011b1a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b1c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011b1e:	f7fa fd23 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011b22:	4603      	mov	r3, r0
 8011b24:	429c      	cmp	r4, r3
 8011b26:	d101      	bne.n	8011b2c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x24a>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	e000      	b.n	8011b2e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x24c>
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1dd      	bne.n	8011aee <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20c>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
 8011b32:	e00d      	b.n	8011b50 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26e>
    params->broadcast_shape[1] *= shape_a->Dims(i);
 8011b34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b36:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011b38:	f7fa fd16 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b42:	fb03 f202 	mul.w	r2, r3, r2
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	655a      	str	r2, [r3, #84]	; 0x54
    --i;
 8011b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b4c:	3b01      	subs	r3, #1
 8011b4e:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_b->Dims(i) == 1) {
 8011b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	db08      	blt.n	8011b68 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x286>
 8011b56:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b58:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011b5a:	f7fa fd05 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d101      	bne.n	8011b68 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x286>
 8011b64:	2301      	movs	r3, #1
 8011b66:	e000      	b.n	8011b6a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x288>
 8011b68:	2300      	movs	r3, #0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1e2      	bne.n	8011b34 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x252>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8011b6e:	e00d      	b.n	8011b8c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2aa>
    params->broadcast_shape[0] *= shape_b->Dims(i);
 8011b70:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b72:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011b74:	f7fa fcf8 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b7e:	fb03 f202 	mul.w	r2, r3, r2
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	651a      	str	r2, [r3, #80]	; 0x50
    --i;
 8011b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8011b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	db0d      	blt.n	8011bae <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2cc>
 8011b92:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b94:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011b96:	f7fa fce7 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011b9a:	4604      	mov	r4, r0
 8011b9c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b9e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011ba0:	f7fa fce2 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	429c      	cmp	r4, r3
 8011ba8:	d101      	bne.n	8011bae <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2cc>
 8011baa:	2301      	movs	r3, #1
 8011bac:	e000      	b.n	8011bb0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2ce>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1dd      	bne.n	8011b70 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28e>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
 8011bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	db02      	blt.n	8011bc0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2de>
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2204      	movs	r2, #4
 8011bbe:	701a      	strb	r2, [r3, #0]
  }
  return true;
 8011bc0:	2401      	movs	r4, #1
}
 8011bc2:	f107 0310 	add.w	r3, r7, #16
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7f7 f842 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8011bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7f7 f83d 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8011bd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7f7 f838 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8011be0:	4623      	mov	r3, r4
 8011be2:	4618      	mov	r0, r3
 8011be4:	377c      	adds	r7, #124	; 0x7c
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd90      	pop	{r4, r7, pc}

08011bea <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b084      	sub	sp, #16
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	ed87 0a03 	vstr	s0, [r7, #12]
 8011bf4:	edc7 0a02 	vstr	s1, [r7, #8]
 8011bf8:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8011bfc:	f107 0208 	add.w	r2, r7, #8
 8011c00:	f107 030c 	add.w	r3, r7, #12
 8011c04:	4611      	mov	r1, r2
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7f6 fcee 	bl	80085e8 <_ZSt3maxIfERKT_S2_S2_>
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	1d3b      	adds	r3, r7, #4
 8011c10:	4619      	mov	r1, r3
 8011c12:	4610      	mov	r0, r2
 8011c14:	f7f6 fccf 	bl	80085b6 <_ZSt3minIfERKT_S2_S2_>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	ee07 3a90 	vmov	s15, r3
}
 8011c20:	eeb0 0a67 	vmov.f32	s0, s15
 8011c24:	3710      	adds	r7, #16
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
	...

08011c2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	4603      	mov	r3, r0
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
 8011c38:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d10b      	bne.n	8011c58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	f04f 0200 	mov.w	r2, #0
 8011c46:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8011c48:	f7ff fe10 	bl	801186c <_ZNSt14numeric_limitsIfE3maxEv>
 8011c4c:	eef0 7a40 	vmov.f32	s15, s0
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8011c56:	e023      	b.n	8011ca0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8011c58:	7bfb      	ldrb	r3, [r7, #15]
 8011c5a:	2b03      	cmp	r3, #3
 8011c5c:	d107      	bne.n	8011c6e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	f04f 0200 	mov.w	r2, #0
 8011c64:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	4a0f      	ldr	r2, [pc, #60]	; (8011ca8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8011c6a:	601a      	str	r2, [r3, #0]
}
 8011c6c:	e018      	b.n	8011ca0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8011c6e:	7bfb      	ldrb	r3, [r7, #15]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d107      	bne.n	8011c84 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	4a0d      	ldr	r2, [pc, #52]	; (8011cac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8011c78:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011c80:	601a      	str	r2, [r3, #0]
}
 8011c82:	e00d      	b.n	8011ca0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8011c84:	f7ff fe00 	bl	8011888 <_ZNSt14numeric_limitsIfE6lowestEv>
 8011c88:	eef0 7a40 	vmov.f32	s15, s0
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8011c92:	f7ff fdeb 	bl	801186c <_ZNSt14numeric_limitsIfE3maxEv>
 8011c96:	eef0 7a40 	vmov.f32	s15, s0
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	edc3 7a00 	vstr	s15, [r3]
}
 8011ca0:	bf00      	nop
 8011ca2:	3710      	adds	r7, #16
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	40c00000 	.word	0x40c00000
 8011cac:	bf800000 	.word	0xbf800000

08011cb0 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>:
  int32 output_multiplier_identity;
  int32 output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
 8011cb0:	b480      	push	{r7}
 8011cb2:	b085      	sub	sp, #20
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8011cba:	edc7 0a02 	vstr	s1, [r7, #8]
 8011cbe:	6078      	str	r0, [r7, #4]
  params->float_activation_min = min;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	635a      	str	r2, [r3, #52]	; 0x34
  params->float_activation_max = max;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011ccc:	bf00      	nop
 8011cce:	3714      	adds	r7, #20
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>:

template <typename P>
inline void SetActivationParams(int32 min, int32 max, P* params) {
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	60f8      	str	r0, [r7, #12]
 8011ce0:	60b9      	str	r1, [r7, #8]
 8011ce2:	607a      	str	r2, [r7, #4]
  params->quantized_activation_min = min;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	68fa      	ldr	r2, [r7, #12]
 8011ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  params->quantized_activation_max = max;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	68ba      	ldr	r2, [r7, #8]
 8011cee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011cf0:	bf00      	nop
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8011d08:	68fa      	ldr	r2, [r7, #12]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d10:	68b9      	ldr	r1, [r7, #8]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fa fd40 	bl	800c798 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8011d18:	4603      	mov	r3, r0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
	...

08011d24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8011d24:	b590      	push	{r4, r7, lr}
 8011d26:	b091      	sub	sp, #68	; 0x44
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8011d2c:	f000 f94d 	bl	8011fca <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8011d30:	4603      	mov	r3, r0
 8011d32:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8011d34:	2001      	movs	r0, #1
 8011d36:	f000 f951 	bl	8011fdc <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d40:	f000 f960 	bl	8012004 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011d44:	4603      	mov	r3, r0
 8011d46:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8011d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f000 f978 	bl	8012040 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011d50:	4603      	mov	r3, r0
 8011d52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011d54:	4618      	mov	r0, r3
 8011d56:	f000 f955 	bl	8012004 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8011d5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d60:	f000 f98c 	bl	801207c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8011d64:	4603      	mov	r3, r0
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fd ff44 	bl	800fbf4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8011d70:	6879      	ldr	r1, [r7, #4]
 8011d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d74:	f000 f946 	bl	8012004 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d80:	4618      	mov	r0, r3
 8011d82:	f000 f917 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8011d86:	4603      	mov	r3, r0
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8011d8c:	4883      	ldr	r0, [pc, #524]	; (8011f9c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8011d8e:	f7fd faa4 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011d92:	4603      	mov	r3, r0
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fd fa8c 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8011d9e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8011da2:	f7fa ffcf 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011da6:	4603      	mov	r3, r0
 8011da8:	4619      	mov	r1, r3
 8011daa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011dac:	f7fa ffd5 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011db0:	4603      	mov	r3, r0
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fb f851 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011db8:	4604      	mov	r4, r0
 8011dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011dbe:	f7fd ff7b 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f7fd fe15 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8011dd2:	4873      	ldr	r0, [pc, #460]	; (8011fa0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8011dd4:	f7fd fa81 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7fd fa69 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011de0:	4603      	mov	r3, r0
 8011de2:	623b      	str	r3, [r7, #32]
 8011de4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8011de8:	f7fa ffac 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011dec:	4603      	mov	r3, r0
 8011dee:	4619      	mov	r1, r3
 8011df0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011df2:	f7fa ffb2 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011df6:	4603      	mov	r3, r0
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fb f82e 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011dfe:	4604      	mov	r4, r0
 8011e00:	6a39      	ldr	r1, [r7, #32]
 8011e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e04:	f7fd ff58 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f7fd fdf2 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011e14:	4603      	mov	r3, r0
 8011e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8011e18:	4862      	ldr	r0, [pc, #392]	; (8011fa4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8011e1a:	f7fd fa5e 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fd fa46 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011e26:	4603      	mov	r3, r0
 8011e28:	61fb      	str	r3, [r7, #28]
 8011e2a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011e2e:	f7fa ff89 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011e32:	4603      	mov	r3, r0
 8011e34:	4619      	mov	r1, r3
 8011e36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e38:	f7fa ff8f 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fb f80b 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011e44:	4604      	mov	r4, r0
 8011e46:	69f9      	ldr	r1, [r7, #28]
 8011e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e4a:	f7fd ff35 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e52:	4619      	mov	r1, r3
 8011e54:	4620      	mov	r0, r4
 8011e56:	f7fd fdcf 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8011e5e:	4852      	ldr	r0, [pc, #328]	; (8011fa8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8011e60:	f7fd fa3b 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011e64:	4603      	mov	r3, r0
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fd fa23 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	61bb      	str	r3, [r7, #24]
 8011e70:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8011e74:	f7fa ff66 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e7e:	f7fa ff6c 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011e82:	4603      	mov	r3, r0
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fa ffe8 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	69b9      	ldr	r1, [r7, #24]
 8011e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e90:	f7fd ff12 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011e94:	4603      	mov	r3, r0
 8011e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e98:	4619      	mov	r1, r3
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f7fd fdac 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8011ea4:	4841      	ldr	r0, [pc, #260]	; (8011fac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8011ea6:	f7fd fa18 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fd fa00 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	617b      	str	r3, [r7, #20]
 8011eb6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011eba:	f7fa ff43 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ec4:	f7fa ff49 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fa ffc5 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	6979      	ldr	r1, [r7, #20]
 8011ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ed6:	f7fd feef 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011eda:	4603      	mov	r3, r0
 8011edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ede:	4619      	mov	r1, r3
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f7fd fd89 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8011eea:	4831      	ldr	r0, [pc, #196]	; (8011fb0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8011eec:	f7fd f9f5 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fd f9dd 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	613b      	str	r3, [r7, #16]
 8011efc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8011f00:	f7fa ff20 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011f04:	4603      	mov	r3, r0
 8011f06:	4619      	mov	r1, r3
 8011f08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f0a:	f7fa ff26 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fa ffa2 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011f16:	4604      	mov	r4, r0
 8011f18:	6939      	ldr	r1, [r7, #16]
 8011f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f1c:	f7fd fecc 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011f20:	4603      	mov	r3, r0
 8011f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f24:	4619      	mov	r1, r3
 8011f26:	4620      	mov	r0, r4
 8011f28:	f7fd fd66 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8011f30:	20f2      	movs	r0, #242	; 0xf2
 8011f32:	f7fd f9d2 	bl	800f2da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8011f36:	4603      	mov	r3, r0
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fd f9ba 	bl	800f2b2 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	60fb      	str	r3, [r7, #12]
 8011f42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011f46:	f7fa fefd 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f50:	f7fa ff03 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011f54:	4603      	mov	r3, r0
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fa ff7f 	bl	800ce5a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	68f9      	ldr	r1, [r7, #12]
 8011f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f62:	f7fd fea9 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8011f66:	4603      	mov	r3, r0
 8011f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f7fd fd43 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011f72:	4603      	mov	r3, r0
 8011f74:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 f89a 	bl	80120b0 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	f7fd fc13 	bl	800f7a8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8011f82:	4603      	mov	r3, r0
 8011f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f86:	4619      	mov	r1, r3
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f7fd fd35 	bl	800f9f8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8011f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3744      	adds	r7, #68	; 0x44
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd90      	pop	{r4, r7, pc}
 8011f9c:	63afbe7b 	.word	0x63afbe7b
 8011fa0:	4da2cbf2 	.word	0x4da2cbf2
 8011fa4:	2f16ac6c 	.word	0x2f16ac6c
 8011fa8:	1152aaa4 	.word	0x1152aaa4
 8011fac:	02582ab7 	.word	0x02582ab7
 8011fb0:	000afe11 	.word	0x000afe11

08011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	370c      	adds	r7, #12
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr

08011fca <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8011fce:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8011fd2:	f000 f803 	bl	8011fdc <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8011fd6:	4603      	mov	r3, r0
  }
 8011fd8:	4618      	mov	r0, r3
 8011fda:	bd80      	pop	{r7, pc}

08011fdc <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8011fdc:	b590      	push	{r4, r7, lr}
 8011fde:	b085      	sub	sp, #20
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8011fe4:	f107 030c 	add.w	r3, r7, #12
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7ff ffe3 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8011fee:	4604      	mov	r4, r0
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7fa fea7 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	6023      	str	r3, [r4, #0]
    return retval;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
  }
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3714      	adds	r7, #20
 8012000:	46bd      	mov	sp, r7
 8012002:	bd90      	pop	{r4, r7, pc}

08012004 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8012004:	b590      	push	{r4, r7, lr}
 8012006:	b083      	sub	sp, #12
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
 801200e:	1d3b      	adds	r3, r7, #4
 8012010:	4618      	mov	r0, r3
 8012012:	f7ff ffcf 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012016:	4603      	mov	r3, r0
 8012018:	681c      	ldr	r4, [r3, #0]
 801201a:	463b      	mov	r3, r7
 801201c:	4618      	mov	r0, r3
 801201e:	f7ff ffc9 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012022:	4603      	mov	r3, r0
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	4619      	mov	r1, r3
 8012028:	4620      	mov	r0, r4
 801202a:	f7fd f9cf 	bl	800f3cc <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801202e:	4603      	mov	r3, r0
 8012030:	4618      	mov	r0, r3
 8012032:	f000 f84f 	bl	80120d4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012036:	4603      	mov	r3, r0
 8012038:	4618      	mov	r0, r3
 801203a:	370c      	adds	r7, #12
 801203c:	46bd      	mov	sp, r7
 801203e:	bd90      	pop	{r4, r7, pc}

08012040 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8012040:	b590      	push	{r4, r7, lr}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
 801204a:	1d3b      	adds	r3, r7, #4
 801204c:	4618      	mov	r0, r3
 801204e:	f7ff ffb1 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012052:	4603      	mov	r3, r0
 8012054:	681c      	ldr	r4, [r3, #0]
 8012056:	463b      	mov	r3, r7
 8012058:	4618      	mov	r0, r3
 801205a:	f7ff ffab 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801205e:	4603      	mov	r3, r0
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4619      	mov	r1, r3
 8012064:	4620      	mov	r0, r4
 8012066:	f7fa fe78 	bl	800cd5a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801206a:	4603      	mov	r3, r0
 801206c:	4618      	mov	r0, r3
 801206e:	f000 f831 	bl	80120d4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012072:	4603      	mov	r3, r0
 8012074:	4618      	mov	r0, r3
 8012076:	370c      	adds	r7, #12
 8012078:	46bd      	mov	sp, r7
 801207a:	bd90      	pop	{r4, r7, pc}

0801207c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801207c:	b5b0      	push	{r4, r5, r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012084:	1d3b      	adds	r3, r7, #4
 8012086:	4618      	mov	r0, r3
 8012088:	f7ff ff94 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801208c:	4603      	mov	r3, r0
 801208e:	681d      	ldr	r5, [r3, #0]
 8012090:	f107 030c 	add.w	r3, r7, #12
 8012094:	4618      	mov	r0, r3
 8012096:	f7fd f81a 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801209a:	4604      	mov	r4, r0
 801209c:	4628      	mov	r0, r5
 801209e:	f000 f82a 	bl	80120f6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80120a2:	4603      	mov	r3, r0
 80120a4:	6023      	str	r3, [r4, #0]
  return result;
 80120a6:	68fb      	ldr	r3, [r7, #12]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3710      	adds	r7, #16
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bdb0      	pop	{r4, r5, r7, pc}

080120b0 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	1d3b      	adds	r3, r7, #4
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7ff ff7a 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80120c0:	4603      	mov	r3, r0
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fd fcfe 	bl	800fac6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 80120ca:	4603      	mov	r3, r0
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80120dc:	f107 030c 	add.w	r3, r7, #12
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7ff ff67 	bl	8011fb4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80120e6:	4602      	mov	r2, r0
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6013      	str	r3, [r2, #0]
    return retval;
 80120ec:	68fb      	ldr	r3, [r7, #12]
  }
 80120ee:	4618      	mov	r0, r3
 80120f0:	3710      	adds	r7, #16
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b082      	sub	sp, #8
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 f806 	bl	8012110 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8012104:	4603      	mov	r3, r0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
	...

08012110 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012110:	b580      	push	{r7, lr}
 8012112:	b08a      	sub	sp, #40	; 0x28
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8012118:	f7fa fb35 	bl	800c786 <_ZNSt14numeric_limitsIlE3minEv>
 801211c:	4603      	mov	r3, r0
 801211e:	4618      	mov	r0, r3
 8012120:	f7fa fe10 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012124:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8012126:	f7f6 f88e 	bl	8008246 <_ZNSt14numeric_limitsIlE3maxEv>
 801212a:	4603      	mov	r3, r0
 801212c:	4618      	mov	r0, r3
 801212e:	f7fa fe09 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012132:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8012134:	2320      	movs	r3, #32
 8012136:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012138:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801213c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801213e:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8012142:	f7fa fdff 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012146:	4603      	mov	r3, r0
 8012148:	4619      	mov	r1, r3
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f7fa fe44 	bl	800cdd8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012150:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8012152:	480f      	ldr	r0, [pc, #60]	; (8012190 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8012154:	f7fa fdf6 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012158:	4603      	mov	r3, r0
 801215a:	4619      	mov	r1, r3
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f7fa fe19 	bl	800cd94 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8012162:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8012164:	2105      	movs	r1, #5
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f7fd f9dc 	bl	800f524 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801216c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	6a39      	ldr	r1, [r7, #32]
 8012172:	6978      	ldr	r0, [r7, #20]
 8012174:	f7fd fa1a 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012178:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801217a:	68fa      	ldr	r2, [r7, #12]
 801217c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801217e:	6938      	ldr	r0, [r7, #16]
 8012180:	f7fd fa14 	bl	800f5ac <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012184:	60f8      	str	r0, [r7, #12]
    return result;
 8012186:	68fb      	ldr	r3, [r7, #12]
  }
 8012188:	4618      	mov	r0, r3
 801218a:	3728      	adds	r7, #40	; 0x28
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	fc000001 	.word	0xfc000001

08012194 <_ZN6tflite3ops5micro12_GLOBAL__N_116TransposeContextC1EP13TfLiteContextP10TfLiteNode>:
namespace ops {
namespace micro {
namespace {

struct TransposeContext {
  TransposeContext(TfLiteContext* context, TfLiteNode* node) {
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
    input = GetInput(context, node, 0);
 80121a0:	2200      	movs	r2, #0
 80121a2:	6879      	ldr	r1, [r7, #4]
 80121a4:	68b8      	ldr	r0, [r7, #8]
 80121a6:	f7fa f980 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80121aa:	4602      	mov	r2, r0
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	601a      	str	r2, [r3, #0]
    perm = GetInput(context, node, 1);
 80121b0:	2201      	movs	r2, #1
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	68b8      	ldr	r0, [r7, #8]
 80121b6:	f7fa f978 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80121ba:	4602      	mov	r2, r0
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	605a      	str	r2, [r3, #4]
    output = GetOutput(context, node, 0);
 80121c0:	2200      	movs	r2, #0
 80121c2:	6879      	ldr	r1, [r7, #4]
 80121c4:	68b8      	ldr	r0, [r7, #8]
 80121c6:	f7fa f986 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80121ca:	4602      	mov	r2, r0
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	609a      	str	r2, [r3, #8]
  }
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	4618      	mov	r0, r3
 80121d4:	3710      	adds	r7, #16
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
	...

080121dc <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  const TfLiteTensor* input;
  const TfLiteTensor* perm;
  TfLiteTensor* output;
};

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80121dc:	b5b0      	push	{r4, r5, r7, lr}
 80121de:	b08c      	sub	sp, #48	; 0x30
 80121e0:	af04      	add	r7, sp, #16
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
 80121e6:	6838      	ldr	r0, [r7, #0]
 80121e8:	f7fa fab3 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80121ec:	4603      	mov	r3, r0
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	bf14      	ite	ne
 80121f2:	2301      	movne	r3, #1
 80121f4:	2300      	moveq	r3, #0
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d013      	beq.n	8012224 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	695c      	ldr	r4, [r3, #20]
 8012200:	6838      	ldr	r0, [r7, #0]
 8012202:	f7fa faa6 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8012206:	4603      	mov	r3, r0
 8012208:	2202      	movs	r2, #2
 801220a:	9203      	str	r2, [sp, #12]
 801220c:	9302      	str	r3, [sp, #8]
 801220e:	4b67      	ldr	r3, [pc, #412]	; (80123ac <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d0>)
 8012210:	9301      	str	r3, [sp, #4]
 8012212:	4b67      	ldr	r3, [pc, #412]	; (80123b0 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>)
 8012214:	9300      	str	r3, [sp, #0]
 8012216:	2327      	movs	r3, #39	; 0x27
 8012218:	4a66      	ldr	r2, [pc, #408]	; (80123b4 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>)
 801221a:	4967      	ldr	r1, [pc, #412]	; (80123b8 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	47a0      	blx	r4
 8012220:	2301      	movs	r3, #1
 8012222:	e0be      	b.n	80123a2 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8012224:	6838      	ldr	r0, [r7, #0]
 8012226:	f7fa faa1 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801222a:	4603      	mov	r3, r0
 801222c:	2b01      	cmp	r3, #1
 801222e:	bf14      	ite	ne
 8012230:	2301      	movne	r3, #1
 8012232:	2300      	moveq	r3, #0
 8012234:	b2db      	uxtb	r3, r3
 8012236:	2b00      	cmp	r3, #0
 8012238:	d013      	beq.n	8012262 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	695c      	ldr	r4, [r3, #20]
 801223e:	6838      	ldr	r0, [r7, #0]
 8012240:	f7fa fa94 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8012244:	4603      	mov	r3, r0
 8012246:	2201      	movs	r2, #1
 8012248:	9203      	str	r2, [sp, #12]
 801224a:	9302      	str	r3, [sp, #8]
 801224c:	4b5b      	ldr	r3, [pc, #364]	; (80123bc <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801224e:	9301      	str	r3, [sp, #4]
 8012250:	4b5b      	ldr	r3, [pc, #364]	; (80123c0 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e4>)
 8012252:	9300      	str	r3, [sp, #0]
 8012254:	2328      	movs	r3, #40	; 0x28
 8012256:	4a57      	ldr	r2, [pc, #348]	; (80123b4 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>)
 8012258:	4957      	ldr	r1, [pc, #348]	; (80123b8 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	47a0      	blx	r4
 801225e:	2301      	movs	r3, #1
 8012260:	e09f      	b.n	80123a2 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>

  TransposeContext op_context(context, node);
 8012262:	f107 0308 	add.w	r3, r7, #8
 8012266:	683a      	ldr	r2, [r7, #0]
 8012268:	6879      	ldr	r1, [r7, #4]
 801226a:	4618      	mov	r0, r3
 801226c:	f7ff ff92 	bl	8012194 <_ZN6tflite3ops5micro12_GLOBAL__N_116TransposeContextC1EP13TfLiteContextP10TfLiteNode>

  // Ensure validity of input tensor.
  TF_LITE_ENSURE_MSG(context, NumDimensions(op_context.input) <= 5,
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	4618      	mov	r0, r3
 8012274:	f7f6 fa29 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8012278:	4603      	mov	r3, r0
 801227a:	2b05      	cmp	r3, #5
 801227c:	bfcc      	ite	gt
 801227e:	2301      	movgt	r3, #1
 8012280:	2300      	movle	r3, #0
 8012282:	b2db      	uxtb	r3, r3
 8012284:	2b00      	cmp	r3, #0
 8012286:	d006      	beq.n	8012296 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	695b      	ldr	r3, [r3, #20]
 801228c:	494d      	ldr	r1, [pc, #308]	; (80123c4 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e8>)
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	4798      	blx	r3
 8012292:	2301      	movs	r3, #1
 8012294:	e085      	b.n	80123a2 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
                     "Transpose op only supports 1D-5D input arrays.");
  TF_LITE_ENSURE_TYPES_EQ(context, op_context.input->type,
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	781a      	ldrb	r2, [r3, #0]
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d01a      	beq.n	80122d8 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	695c      	ldr	r4, [r3, #20]
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7f2 fd8e 	bl	8004dcc <TfLiteTypeGetName>
 80122b0:	4605      	mov	r5, r0
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7f2 fd88 	bl	8004dcc <TfLiteTypeGetName>
 80122bc:	4603      	mov	r3, r0
 80122be:	9303      	str	r3, [sp, #12]
 80122c0:	9502      	str	r5, [sp, #8]
 80122c2:	4b41      	ldr	r3, [pc, #260]	; (80123c8 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 80122c4:	9301      	str	r3, [sp, #4]
 80122c6:	4b41      	ldr	r3, [pc, #260]	; (80123cc <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 80122c8:	9300      	str	r3, [sp, #0]
 80122ca:	232f      	movs	r3, #47	; 0x2f
 80122cc:	4a39      	ldr	r2, [pc, #228]	; (80123b4 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>)
 80122ce:	4940      	ldr	r1, [pc, #256]	; (80123d0 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	47a0      	blx	r4
 80122d4:	2301      	movs	r3, #1
 80122d6:	e064      	b.n	80123a2 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
                          op_context.output->type);

  int dims = NumDimensions(op_context.input);
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	4618      	mov	r0, r3
 80122dc:	f7f6 f9f5 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80122e0:	61b8      	str	r0, [r7, #24]
  const int32_t* perm_data = GetTensorData<int32_t>(op_context.perm);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7fa fa13 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80122ea:	6178      	str	r0, [r7, #20]

  // Ensure validity of the permutations tensor as a 1D tensor.
  TF_LITE_ENSURE_EQ(context, NumDimensions(op_context.perm), 1);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7f6 f9eb 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	bf14      	ite	ne
 80122fa:	2301      	movne	r3, #1
 80122fc:	2300      	moveq	r3, #0
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d014      	beq.n	801232e <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x152>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	695c      	ldr	r4, [r3, #20]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	4618      	mov	r0, r3
 801230c:	f7f6 f9dd 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8012310:	4603      	mov	r3, r0
 8012312:	2201      	movs	r2, #1
 8012314:	9203      	str	r2, [sp, #12]
 8012316:	9302      	str	r3, [sp, #8]
 8012318:	4b28      	ldr	r3, [pc, #160]	; (80123bc <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801231a:	9301      	str	r3, [sp, #4]
 801231c:	4b2d      	ldr	r3, [pc, #180]	; (80123d4 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	2336      	movs	r3, #54	; 0x36
 8012322:	4a24      	ldr	r2, [pc, #144]	; (80123b4 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>)
 8012324:	4924      	ldr	r1, [pc, #144]	; (80123b8 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	47a0      	blx	r4
 801232a:	2301      	movs	r3, #1
 801232c:	e039      	b.n	80123a2 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
  TF_LITE_ENSURE_EQ(context, op_context.perm->dims->data[0], dims);
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	685b      	ldr	r3, [r3, #4]
 8012334:	69ba      	ldr	r2, [r7, #24]
 8012336:	429a      	cmp	r2, r3
 8012338:	d012      	beq.n	8012360 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	695c      	ldr	r4, [r3, #20]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	689b      	ldr	r3, [r3, #8]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	69ba      	ldr	r2, [r7, #24]
 8012346:	9203      	str	r2, [sp, #12]
 8012348:	9302      	str	r3, [sp, #8]
 801234a:	4b23      	ldr	r3, [pc, #140]	; (80123d8 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 801234c:	9301      	str	r3, [sp, #4]
 801234e:	4b23      	ldr	r3, [pc, #140]	; (80123dc <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 8012350:	9300      	str	r3, [sp, #0]
 8012352:	2337      	movs	r3, #55	; 0x37
 8012354:	4a17      	ldr	r2, [pc, #92]	; (80123b4 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>)
 8012356:	4918      	ldr	r1, [pc, #96]	; (80123b8 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	47a0      	blx	r4
 801235c:	2301      	movs	r3, #1
 801235e:	e020      	b.n	80123a2 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
  for (int idx = 0; idx < dims; ++idx) {
 8012360:	2300      	movs	r3, #0
 8012362:	61fb      	str	r3, [r7, #28]
 8012364:	e018      	b.n	8012398 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE_MSG(context, (perm_data[idx] >= 0 && perm_data[idx] < dims),
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	697a      	ldr	r2, [r7, #20]
 801236c:	4413      	add	r3, r2
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	db07      	blt.n	8012384 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	697a      	ldr	r2, [r7, #20]
 801237a:	4413      	add	r3, r2
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	69ba      	ldr	r2, [r7, #24]
 8012380:	429a      	cmp	r2, r3
 8012382:	dc06      	bgt.n	8012392 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b6>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	695b      	ldr	r3, [r3, #20]
 8012388:	4915      	ldr	r1, [pc, #84]	; (80123e0 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	4798      	blx	r3
 801238e:	2301      	movs	r3, #1
 8012390:	e007      	b.n	80123a2 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
  for (int idx = 0; idx < dims; ++idx) {
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	3301      	adds	r3, #1
 8012396:	61fb      	str	r3, [r7, #28]
 8012398:	69fa      	ldr	r2, [r7, #28]
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	429a      	cmp	r2, r3
 801239e:	dbe2      	blt.n	8012366 <_ZN6tflite3ops5micro12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18a>
                       "Transpose op permutations array is out of bounds.");
  }

  return kTfLiteOk;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3720      	adds	r7, #32
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bdb0      	pop	{r4, r5, r7, pc}
 80123aa:	bf00      	nop
 80123ac:	0804bef8 	.word	0x0804bef8
 80123b0:	0804befc 	.word	0x0804befc
 80123b4:	0804be34 	.word	0x0804be34
 80123b8:	0804bedc 	.word	0x0804bedc
 80123bc:	0804bf0c 	.word	0x0804bf0c
 80123c0:	0804bf10 	.word	0x0804bf10
 80123c4:	0804bf24 	.word	0x0804bf24
 80123c8:	0804c018 	.word	0x0804c018
 80123cc:	0804c030 	.word	0x0804c030
 80123d0:	0804bffc 	.word	0x0804bffc
 80123d4:	0804c048 	.word	0x0804c048
 80123d8:	0804c068 	.word	0x0804c068
 80123dc:	0804c070 	.word	0x0804c070
 80123e0:	0804c090 	.word	0x0804c090

080123e4 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80123e4:	b590      	push	{r4, r7, lr}
 80123e6:	b0a9      	sub	sp, #164	; 0xa4
 80123e8:	af02      	add	r7, sp, #8
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
  TransposeContext op_context(context, node);
 80123ee:	f107 0320 	add.w	r3, r7, #32
 80123f2:	683a      	ldr	r2, [r7, #0]
 80123f4:	6879      	ldr	r1, [r7, #4]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff fecc 	bl	8012194 <_ZN6tflite3ops5micro12_GLOBAL__N_116TransposeContextC1EP13TfLiteContextP10TfLiteNode>

  const int32_t* perm_data = GetTensorData<int32_t>(op_context.perm);
 80123fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fe:	4618      	mov	r0, r3
 8012400:	f7fa f986 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8012404:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  const int size = op_context.perm->dims->data[0];
 8012408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240a:	689b      	ldr	r3, [r3, #8]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  TransposeParams params;
  params.perm_count = size;
 8012412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012416:	b25b      	sxtb	r3, r3
 8012418:	723b      	strb	r3, [r7, #8]
  for (int i = 0; i < size; ++i) {
 801241a:	2300      	movs	r3, #0
 801241c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012420:	e012      	b.n	8012448 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
    params.perm[i] = perm_data[i];
 8012422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801242c:	4413      	add	r3, r2
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012434:	009b      	lsls	r3, r3, #2
 8012436:	3398      	adds	r3, #152	; 0x98
 8012438:	443b      	add	r3, r7
 801243a:	f843 2c8c 	str.w	r2, [r3, #-140]
  for (int i = 0; i < size; ++i) {
 801243e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012442:	3301      	adds	r3, #1
 8012444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012448:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801244c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012450:	429a      	cmp	r2, r3
 8012452:	dbe6      	blt.n	8012422 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e>
  }

  // Transpose kernel only does rearranging values not numeric evaluations
  // on each cell. It's safe to implement per size of scalar type and this
  // trick keeps the total code size in a reasonable range.
  switch (op_context.input->type) {
 8012454:	6a3b      	ldr	r3, [r7, #32]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	2b01      	cmp	r3, #1
 801245a:	d002      	beq.n	8012462 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7e>
 801245c:	2b09      	cmp	r3, #9
 801245e:	d02d      	beq.n	80124bc <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8>
 8012460:	e059      	b.n	8012516 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x132>
    case kTfLiteFloat32:
      reference_ops::Transpose(params, GetTensorShape(op_context.input),
 8012462:	6a3a      	ldr	r2, [r7, #32]
 8012464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012468:	4611      	mov	r1, r2
 801246a:	4618      	mov	r0, r3
 801246c:	f7f6 fc6a 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012470:	6a3b      	ldr	r3, [r7, #32]
 8012472:	4618      	mov	r0, r3
 8012474:	f7fa f908 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8012478:	4604      	mov	r4, r0
                               GetTensorData<float>(op_context.input),
                               GetTensorShape(op_context.output),
 801247a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801247c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012480:	4611      	mov	r1, r2
 8012482:	4618      	mov	r0, r3
 8012484:	f7f6 fc5e 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::Transpose(params, GetTensorShape(op_context.input),
 8012488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248a:	4618      	mov	r0, r3
 801248c:	f7fa f90d 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8012490:	4602      	mov	r2, r0
 8012492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012496:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801249a:	f107 0008 	add.w	r0, r7, #8
 801249e:	9200      	str	r2, [sp, #0]
 80124a0:	4622      	mov	r2, r4
 80124a2:	f000 f863 	bl	801256c <_ZN6tflite13reference_ops9TransposeIfLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                               GetTensorShape(op_context.output),
 80124a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7f6 fbd0 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Transpose(params, GetTensorShape(op_context.input),
 80124b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7f6 fbcb 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
                               GetTensorData<float>(op_context.output));
      break;
 80124ba:	e03a      	b.n	8012532 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    case kTfLiteInt8:
      reference_ops::Transpose(params, GetTensorShape(op_context.input),
 80124bc:	6a3a      	ldr	r2, [r7, #32]
 80124be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80124c2:	4611      	mov	r1, r2
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f6 fc3d 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80124ca:	6a3b      	ldr	r3, [r7, #32]
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fa f8fd 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80124d2:	4604      	mov	r4, r0
                               GetTensorData<int8_t>(op_context.input),
                               GetTensorShape(op_context.output),
 80124d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80124da:	4611      	mov	r1, r2
 80124dc:	4618      	mov	r0, r3
 80124de:	f7f6 fc31 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::Transpose(params, GetTensorShape(op_context.input),
 80124e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fa f902 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80124ea:	4602      	mov	r2, r0
 80124ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80124f0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80124f4:	f107 0008 	add.w	r0, r7, #8
 80124f8:	9200      	str	r2, [sp, #0]
 80124fa:	4622      	mov	r2, r4
 80124fc:	f000 f84a 	bl	8012594 <_ZN6tflite13reference_ops9TransposeIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                               GetTensorShape(op_context.output),
 8012500:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012504:	4618      	mov	r0, r3
 8012506:	f7f6 fba3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Transpose(params, GetTensorShape(op_context.input),
 801250a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801250e:	4618      	mov	r0, r3
 8012510:	f7f6 fb9e 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
                               GetTensorData<int8_t>(op_context.output));
      break;
 8012514:	e00d      	b.n	8012532 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    default:
      TF_LITE_KERNEL_LOG(context,
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	695c      	ldr	r4, [r3, #20]
 801251a:	6a3b      	ldr	r3, [r7, #32]
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	4618      	mov	r0, r3
 8012520:	f7f2 fc54 	bl	8004dcc <TfLiteTypeGetName>
 8012524:	4603      	mov	r3, r0
 8012526:	461a      	mov	r2, r3
 8012528:	4904      	ldr	r1, [pc, #16]	; (801253c <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x158>)
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	47a0      	blx	r4
                         "Type %s is currently not supported by Transpose. "
                         "Only float32 and int8 is supported",
                         TfLiteTypeGetName(op_context.input->type));
      return kTfLiteError;
 801252e:	2301      	movs	r3, #1
 8012530:	e000      	b.n	8012534 <_ZN6tflite3ops5micro12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x150>
  }

  return kTfLiteOk;
 8012532:	2300      	movs	r3, #0
}
 8012534:	4618      	mov	r0, r3
 8012536:	379c      	adds	r7, #156	; 0x9c
 8012538:	46bd      	mov	sp, r7
 801253a:	bd90      	pop	{r4, r7, pc}
 801253c:	0804c16c 	.word	0x0804c16c

08012540 <_ZN6tflite3ops5micro18Register_TRANSPOSEEv>:

}  // namespace

TfLiteRegistration Register_TRANSPOSE() {
 8012540:	b4b0      	push	{r4, r5, r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4a07      	ldr	r2, [pc, #28]	; (8012568 <_ZN6tflite3ops5micro18Register_TRANSPOSEEv+0x28>)
 801254c:	461c      	mov	r4, r3
 801254e:	4615      	mov	r5, r2
 8012550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	bcb0      	pop	{r4, r5, r7}
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop
 8012568:	0804c1c0 	.word	0x0804c1c0

0801256c <_ZN6tflite13reference_ops9TransposeIfLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
  };
  NDOpsHelper<N>(output_desc, tranpose_func);
}

template <typename T, int N = 5>
void Transpose(const TransposeParams& params,
 801256c:	b580      	push	{r7, lr}
 801256e:	b086      	sub	sp, #24
 8012570:	af02      	add	r7, sp, #8
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
 8012578:	603b      	str	r3, [r7, #0]
                                unextended_output_shape,
                                reinterpret_cast<int16_t*>(output_data));
      break;

    case 4:
      TransposeImpl<int32_t, N>(params, unextended_input_shape,
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	9300      	str	r3, [sp, #0]
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	68b9      	ldr	r1, [r7, #8]
 8012584:	68f8      	ldr	r0, [r7, #12]
 8012586:	f000 f945 	bl	8012814 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                                reinterpret_cast<const int32_t*>(input_data),
                                unextended_output_shape,
                                reinterpret_cast<int32_t*>(output_data));
      break;
 801258a:	bf00      	nop
                                reinterpret_cast<const int64_t*>(input_data),
                                unextended_output_shape,
                                reinterpret_cast<int64_t*>(output_data));
      break;
  }
}
 801258c:	bf00      	nop
 801258e:	3710      	adds	r7, #16
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <_ZN6tflite13reference_ops9TransposeIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
void Transpose(const TransposeParams& params,
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af02      	add	r7, sp, #8
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
 80125a0:	603b      	str	r3, [r7, #0]
      TransposeImpl<int8_t, N>(params, unextended_input_shape,
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	68b9      	ldr	r1, [r7, #8]
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f000 f827 	bl	8012600 <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
      break;
 80125b2:	bf00      	nop
}
 80125b4:	bf00      	nop
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <_ZZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ENKUlPiE_clESC_>:
  auto tranpose_func = [&](int indexes[N]) {
 80125bc:	b5b0      	push	{r4, r5, r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	689b      	ldr	r3, [r3, #8]
        input_data[SubscriptToIndex(perm_input_desc, indexes)];
 80125ca:	681c      	ldr	r4, [r3, #0]
  auto tranpose_func = [&](int indexes[N]) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	68db      	ldr	r3, [r3, #12]
        input_data[SubscriptToIndex(perm_input_desc, indexes)];
 80125d0:	6839      	ldr	r1, [r7, #0]
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7fd fc7f 	bl	800fed6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
 80125d8:	4603      	mov	r3, r0
 80125da:	441c      	add	r4, r3
  auto tranpose_func = [&](int indexes[N]) {
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
    output_data[SubscriptToIndex(output_desc, indexes)] =
 80125e0:	681d      	ldr	r5, [r3, #0]
  auto tranpose_func = [&](int indexes[N]) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	685b      	ldr	r3, [r3, #4]
    output_data[SubscriptToIndex(output_desc, indexes)] =
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fd fc74 	bl	800fed6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
 80125ee:	4603      	mov	r3, r0
 80125f0:	442b      	add	r3, r5
        input_data[SubscriptToIndex(perm_input_desc, indexes)];
 80125f2:	f994 2000 	ldrsb.w	r2, [r4]
    output_data[SubscriptToIndex(output_desc, indexes)] =
 80125f6:	701a      	strb	r2, [r3, #0]
  auto tranpose_func = [&](int indexes[N]) {
 80125f8:	bf00      	nop
 80125fa:	3708      	adds	r7, #8
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bdb0      	pop	{r4, r5, r7, pc}

08012600 <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
void TransposeImpl(const TransposeParams& params,
 8012600:	b580      	push	{r7, lr}
 8012602:	b0be      	sub	sp, #248	; 0xf8
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]
  const int unextended_input_size = unextended_input_shape.DimensionsCount();
 801260e:	68b8      	ldr	r0, [r7, #8]
 8012610:	f7f6 fb34 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012614:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  const int unextended_output_size = unextended_output_shape.DimensionsCount();
 8012618:	6838      	ldr	r0, [r7, #0]
 801261a:	f7f6 fb2f 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801261e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TFLITE_DCHECK_LE(unextended_input_size, N);
 8012622:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012626:	2b05      	cmp	r3, #5
 8012628:	dd01      	ble.n	801262e <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
 801262a:	f006 fe65 	bl	80192f8 <abort>
  TFLITE_DCHECK_LE(unextended_output_size, N);
 801262e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012632:	2b05      	cmp	r3, #5
 8012634:	dd01      	ble.n	801263a <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x3a>
 8012636:	f006 fe5f 	bl	80192f8 <abort>
  TFLITE_DCHECK_EQ(unextended_output_size, params.perm_count);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	f993 3000 	ldrsb.w	r3, [r3]
 8012640:	461a      	mov	r2, r3
 8012642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012646:	4293      	cmp	r3, r2
 8012648:	d001      	beq.n	801264e <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x4e>
 801264a:	f006 fe55 	bl	80192f8 <abort>
  const int input_ext_size = N - unextended_input_size;
 801264e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012652:	f1c3 0305 	rsb	r3, r3, #5
 8012656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  const int output_ext_size = N - unextended_output_size;
 801265a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801265e:	f1c3 0305 	rsb	r3, r3, #5
 8012662:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_input_shape),
 8012666:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	2105      	movs	r1, #5
 801266e:	4618      	mov	r0, r3
 8012670:	f7fa f93c 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
 8012674:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8012678:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801267c:	4611      	mov	r1, r2
 801267e:	4618      	mov	r0, r3
 8012680:	f7fd fc5a 	bl	800ff38 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
 8012684:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012688:	4618      	mov	r0, r3
 801268a:	f7f6 fae1 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
 801268e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012692:	683a      	ldr	r2, [r7, #0]
 8012694:	2105      	movs	r1, #5
 8012696:	4618      	mov	r0, r3
 8012698:	f7fa f928 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
 801269c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80126a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80126a4:	4611      	mov	r1, r2
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7fd fc46 	bl	800ff38 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
 80126ac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7f6 facd 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  for (int i = 0; i < N; ++i) {
 80126b6:	2300      	movs	r3, #0
 80126b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80126bc:	e020      	b.n	8012700 <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x100>
                           ? i
 80126be:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80126c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126c6:	429a      	cmp	r2, r3
 80126c8:	db0c      	blt.n	80126e4 <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe4>
                           : params.perm[i - output_ext_size] + input_ext_size;
 80126ca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80126ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126d2:	1ad3      	subs	r3, r2, r3
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	4413      	add	r3, r2
 80126da:	685a      	ldr	r2, [r3, #4]
                           ? i
 80126dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126e0:	441a      	add	r2, r3
 80126e2:	e001      	b.n	80126e8 <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
 80126e4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
    extended_perm[i] = i < output_ext_size
 80126e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	33f8      	adds	r3, #248	; 0xf8
 80126f0:	443b      	add	r3, r7
 80126f2:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < N; ++i) {
 80126f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80126fa:	3301      	adds	r3, #1
 80126fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012704:	2b04      	cmp	r3, #4
 8012706:	ddda      	ble.n	80126be <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xbe>
  for (int k = 0; k < N; ++k) {
 8012708:	2300      	movs	r3, #0
 801270a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801270e:	e043      	b.n	8012798 <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
    TFLITE_DCHECK_EQ(input_desc.extents[extended_perm[k]],
 8012710:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012714:	009b      	lsls	r3, r3, #2
 8012716:	33f8      	adds	r3, #248	; 0xf8
 8012718:	443b      	add	r3, r7
 801271a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	33f8      	adds	r3, #248	; 0xf8
 8012722:	443b      	add	r3, r7
 8012724:	f853 2c70 	ldr.w	r2, [r3, #-112]
 8012728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801272c:	009b      	lsls	r3, r3, #2
 801272e:	33f8      	adds	r3, #248	; 0xf8
 8012730:	443b      	add	r3, r7
 8012732:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8012736:	429a      	cmp	r2, r3
 8012738:	d001      	beq.n	801273e <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x13e>
 801273a:	f006 fddd 	bl	80192f8 <abort>
    perm_input_desc.extents[k] = input_desc.extents[extended_perm[k]];
 801273e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012742:	009b      	lsls	r3, r3, #2
 8012744:	33f8      	adds	r3, #248	; 0xf8
 8012746:	443b      	add	r3, r7
 8012748:	f853 3cac 	ldr.w	r3, [r3, #-172]
 801274c:	009b      	lsls	r3, r3, #2
 801274e:	33f8      	adds	r3, #248	; 0xf8
 8012750:	443b      	add	r3, r7
 8012752:	f853 2c70 	ldr.w	r2, [r3, #-112]
 8012756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801275a:	009b      	lsls	r3, r3, #2
 801275c:	33f8      	adds	r3, #248	; 0xf8
 801275e:	443b      	add	r3, r7
 8012760:	f843 2cd4 	str.w	r2, [r3, #-212]
    perm_input_desc.strides[k] = input_desc.strides[extended_perm[k]];
 8012764:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	33f8      	adds	r3, #248	; 0xf8
 801276c:	443b      	add	r3, r7
 801276e:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8012772:	3304      	adds	r3, #4
 8012774:	009b      	lsls	r3, r3, #2
 8012776:	33f8      	adds	r3, #248	; 0xf8
 8012778:	443b      	add	r3, r7
 801277a:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 801277e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012782:	3304      	adds	r3, #4
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	33f8      	adds	r3, #248	; 0xf8
 8012788:	443b      	add	r3, r7
 801278a:	f843 2cd0 	str.w	r2, [r3, #-208]
  for (int k = 0; k < N; ++k) {
 801278e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012792:	3301      	adds	r3, #1
 8012794:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012798:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801279c:	2b04      	cmp	r3, #4
 801279e:	ddb7      	ble.n	8012710 <_ZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
  auto tranpose_func = [&](int indexes[N]) {
 80127a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80127a4:	617b      	str	r3, [r7, #20]
 80127a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80127aa:	61bb      	str	r3, [r7, #24]
 80127ac:	1d3b      	adds	r3, r7, #4
 80127ae:	61fb      	str	r3, [r7, #28]
 80127b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127b4:	623b      	str	r3, [r7, #32]
  NDOpsHelper<N>(output_desc, tranpose_func);
 80127b6:	f107 0214 	add.w	r2, r7, #20
 80127ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80127be:	4611      	mov	r1, r2
 80127c0:	4618      	mov	r0, r3
 80127c2:	f000 f90e 	bl	80129e2 <_ZN6tflite11NDOpsHelperILi5EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EEvRKNS_11NdArrayDescIXT_EEERKT0_>
}
 80127c6:	bf00      	nop
 80127c8:	37f8      	adds	r7, #248	; 0xf8
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <_ZZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ENKUlPiE_clESC_>:
  auto tranpose_func = [&](int indexes[N]) {
 80127ce:	b5b0      	push	{r4, r5, r7, lr}
 80127d0:	b082      	sub	sp, #8
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
 80127d6:	6039      	str	r1, [r7, #0]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	689b      	ldr	r3, [r3, #8]
        input_data[SubscriptToIndex(perm_input_desc, indexes)];
 80127dc:	681c      	ldr	r4, [r3, #0]
  auto tranpose_func = [&](int indexes[N]) {
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	68db      	ldr	r3, [r3, #12]
        input_data[SubscriptToIndex(perm_input_desc, indexes)];
 80127e2:	6839      	ldr	r1, [r7, #0]
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7fd fb76 	bl	800fed6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
 80127ea:	4603      	mov	r3, r0
 80127ec:	009b      	lsls	r3, r3, #2
 80127ee:	441c      	add	r4, r3
  auto tranpose_func = [&](int indexes[N]) {
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
    output_data[SubscriptToIndex(output_desc, indexes)] =
 80127f4:	681d      	ldr	r5, [r3, #0]
  auto tranpose_func = [&](int indexes[N]) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	685b      	ldr	r3, [r3, #4]
    output_data[SubscriptToIndex(output_desc, indexes)] =
 80127fa:	6839      	ldr	r1, [r7, #0]
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7fd fb6a 	bl	800fed6 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
 8012802:	4603      	mov	r3, r0
 8012804:	009b      	lsls	r3, r3, #2
 8012806:	442b      	add	r3, r5
        input_data[SubscriptToIndex(perm_input_desc, indexes)];
 8012808:	6822      	ldr	r2, [r4, #0]
    output_data[SubscriptToIndex(output_desc, indexes)] =
 801280a:	601a      	str	r2, [r3, #0]
  auto tranpose_func = [&](int indexes[N]) {
 801280c:	bf00      	nop
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bdb0      	pop	{r4, r5, r7, pc}

08012814 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
void TransposeImpl(const TransposeParams& params,
 8012814:	b580      	push	{r7, lr}
 8012816:	b0be      	sub	sp, #248	; 0xf8
 8012818:	af00      	add	r7, sp, #0
 801281a:	60f8      	str	r0, [r7, #12]
 801281c:	60b9      	str	r1, [r7, #8]
 801281e:	607a      	str	r2, [r7, #4]
 8012820:	603b      	str	r3, [r7, #0]
  const int unextended_input_size = unextended_input_shape.DimensionsCount();
 8012822:	68b8      	ldr	r0, [r7, #8]
 8012824:	f7f6 fa2a 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012828:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  const int unextended_output_size = unextended_output_shape.DimensionsCount();
 801282c:	6838      	ldr	r0, [r7, #0]
 801282e:	f7f6 fa25 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012832:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TFLITE_DCHECK_LE(unextended_input_size, N);
 8012836:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801283a:	2b05      	cmp	r3, #5
 801283c:	dd01      	ble.n	8012842 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
 801283e:	f006 fd5b 	bl	80192f8 <abort>
  TFLITE_DCHECK_LE(unextended_output_size, N);
 8012842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012846:	2b05      	cmp	r3, #5
 8012848:	dd01      	ble.n	801284e <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x3a>
 801284a:	f006 fd55 	bl	80192f8 <abort>
  TFLITE_DCHECK_EQ(unextended_output_size, params.perm_count);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f993 3000 	ldrsb.w	r3, [r3]
 8012854:	461a      	mov	r2, r3
 8012856:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801285a:	4293      	cmp	r3, r2
 801285c:	d001      	beq.n	8012862 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x4e>
 801285e:	f006 fd4b 	bl	80192f8 <abort>
  const int input_ext_size = N - unextended_input_size;
 8012862:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012866:	f1c3 0305 	rsb	r3, r3, #5
 801286a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  const int output_ext_size = N - unextended_output_size;
 801286e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012872:	f1c3 0305 	rsb	r3, r3, #5
 8012876:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_input_shape),
 801287a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	2105      	movs	r1, #5
 8012882:	4618      	mov	r0, r3
 8012884:	f7fa f832 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
 8012888:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801288c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012890:	4611      	mov	r1, r2
 8012892:	4618      	mov	r0, r3
 8012894:	f7fd fb50 	bl	800ff38 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
 8012898:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801289c:	4618      	mov	r0, r3
 801289e:	f7f6 f9d7 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
 80128a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	2105      	movs	r1, #5
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7fa f81e 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
 80128b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80128b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80128b8:	4611      	mov	r1, r2
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fd fb3c 	bl	800ff38 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
 80128c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7f6 f9c3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  for (int i = 0; i < N; ++i) {
 80128ca:	2300      	movs	r3, #0
 80128cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80128d0:	e020      	b.n	8012914 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x100>
                           ? i
 80128d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80128d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80128da:	429a      	cmp	r2, r3
 80128dc:	db0c      	blt.n	80128f8 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe4>
                           : params.perm[i - output_ext_size] + input_ext_size;
 80128de:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80128e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80128e6:	1ad3      	subs	r3, r2, r3
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	009b      	lsls	r3, r3, #2
 80128ec:	4413      	add	r3, r2
 80128ee:	685a      	ldr	r2, [r3, #4]
                           ? i
 80128f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80128f4:	441a      	add	r2, r3
 80128f6:	e001      	b.n	80128fc <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
 80128f8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
    extended_perm[i] = i < output_ext_size
 80128fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	33f8      	adds	r3, #248	; 0xf8
 8012904:	443b      	add	r3, r7
 8012906:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < N; ++i) {
 801290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801290e:	3301      	adds	r3, #1
 8012910:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012918:	2b04      	cmp	r3, #4
 801291a:	ddda      	ble.n	80128d2 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xbe>
  for (int k = 0; k < N; ++k) {
 801291c:	2300      	movs	r3, #0
 801291e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012922:	e043      	b.n	80129ac <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
    TFLITE_DCHECK_EQ(input_desc.extents[extended_perm[k]],
 8012924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	33f8      	adds	r3, #248	; 0xf8
 801292c:	443b      	add	r3, r7
 801292e:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	33f8      	adds	r3, #248	; 0xf8
 8012936:	443b      	add	r3, r7
 8012938:	f853 2c70 	ldr.w	r2, [r3, #-112]
 801293c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012940:	009b      	lsls	r3, r3, #2
 8012942:	33f8      	adds	r3, #248	; 0xf8
 8012944:	443b      	add	r3, r7
 8012946:	f853 3c98 	ldr.w	r3, [r3, #-152]
 801294a:	429a      	cmp	r2, r3
 801294c:	d001      	beq.n	8012952 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x13e>
 801294e:	f006 fcd3 	bl	80192f8 <abort>
    perm_input_desc.extents[k] = input_desc.extents[extended_perm[k]];
 8012952:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	33f8      	adds	r3, #248	; 0xf8
 801295a:	443b      	add	r3, r7
 801295c:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	33f8      	adds	r3, #248	; 0xf8
 8012964:	443b      	add	r3, r7
 8012966:	f853 2c70 	ldr.w	r2, [r3, #-112]
 801296a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	33f8      	adds	r3, #248	; 0xf8
 8012972:	443b      	add	r3, r7
 8012974:	f843 2cd4 	str.w	r2, [r3, #-212]
    perm_input_desc.strides[k] = input_desc.strides[extended_perm[k]];
 8012978:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801297c:	009b      	lsls	r3, r3, #2
 801297e:	33f8      	adds	r3, #248	; 0xf8
 8012980:	443b      	add	r3, r7
 8012982:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8012986:	3304      	adds	r3, #4
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	33f8      	adds	r3, #248	; 0xf8
 801298c:	443b      	add	r3, r7
 801298e:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8012992:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012996:	3304      	adds	r3, #4
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	33f8      	adds	r3, #248	; 0xf8
 801299c:	443b      	add	r3, r7
 801299e:	f843 2cd0 	str.w	r2, [r3, #-208]
  for (int k = 0; k < N; ++k) {
 80129a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80129a6:	3301      	adds	r3, #1
 80129a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80129ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80129b0:	2b04      	cmp	r3, #4
 80129b2:	ddb7      	ble.n	8012924 <_ZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x110>
  auto tranpose_func = [&](int indexes[N]) {
 80129b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80129b8:	617b      	str	r3, [r7, #20]
 80129ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80129be:	61bb      	str	r3, [r7, #24]
 80129c0:	1d3b      	adds	r3, r7, #4
 80129c2:	61fb      	str	r3, [r7, #28]
 80129c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80129c8:	623b      	str	r3, [r7, #32]
  NDOpsHelper<N>(output_desc, tranpose_func);
 80129ca:	f107 0214 	add.w	r2, r7, #20
 80129ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80129d2:	4611      	mov	r1, r2
 80129d4:	4618      	mov	r0, r3
 80129d6:	f000 f81c 	bl	8012a12 <_ZN6tflite11NDOpsHelperILi5EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EEvRKNS_11NdArrayDescIXT_EEERKT0_>
}
 80129da:	bf00      	nop
 80129dc:	37f8      	adds	r7, #248	; 0xf8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <_ZN6tflite11NDOpsHelperILi5EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EEvRKNS_11NdArrayDescIXT_EEERKT0_>:
}

// Execute the calc function in the innermost iteration based on the shape of
// the output. The calc function should take a single argument of type int[N].
template <int N, typename Calc>
inline void NDOpsHelper(const NdArrayDesc<N>& output, const Calc& calc) {
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b088      	sub	sp, #32
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
 80129ea:	6039      	str	r1, [r7, #0]
  int indexes[N] = {0};
 80129ec:	f107 030c 	add.w	r3, r7, #12
 80129f0:	2200      	movs	r2, #0
 80129f2:	601a      	str	r2, [r3, #0]
 80129f4:	605a      	str	r2, [r3, #4]
 80129f6:	609a      	str	r2, [r3, #8]
 80129f8:	60da      	str	r2, [r3, #12]
 80129fa:	611a      	str	r2, [r3, #16]
  NDOpsHelperImpl<N, 0, Calc>(output, calc, indexes);
 80129fc:	f107 030c 	add.w	r3, r7, #12
 8012a00:	461a      	mov	r2, r3
 8012a02:	6839      	ldr	r1, [r7, #0]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 f81c 	bl	8012a42 <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
}
 8012a0a:	bf00      	nop
 8012a0c:	3720      	adds	r7, #32
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <_ZN6tflite11NDOpsHelperILi5EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EEvRKNS_11NdArrayDescIXT_EEERKT0_>:
inline void NDOpsHelper(const NdArrayDesc<N>& output, const Calc& calc) {
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b088      	sub	sp, #32
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	6039      	str	r1, [r7, #0]
  int indexes[N] = {0};
 8012a1c:	f107 030c 	add.w	r3, r7, #12
 8012a20:	2200      	movs	r2, #0
 8012a22:	601a      	str	r2, [r3, #0]
 8012a24:	605a      	str	r2, [r3, #4]
 8012a26:	609a      	str	r2, [r3, #8]
 8012a28:	60da      	str	r2, [r3, #12]
 8012a2a:	611a      	str	r2, [r3, #16]
  NDOpsHelperImpl<N, 0, Calc>(output, calc, indexes);
 8012a2c:	f107 030c 	add.w	r3, r7, #12
 8012a30:	461a      	mov	r2, r3
 8012a32:	6839      	ldr	r1, [r7, #0]
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f000 f823 	bl	8012a80 <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
}
 8012a3a:	bf00      	nop
 8012a3c:	3720      	adds	r7, #32
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}

08012a42 <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b084      	sub	sp, #16
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	60f8      	str	r0, [r7, #12]
 8012a4a:	60b9      	str	r1, [r7, #8]
 8012a4c:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2200      	movs	r2, #0
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	e009      	b.n	8012a6a <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x28>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	68b9      	ldr	r1, [r7, #8]
 8012a5a:	68f8      	ldr	r0, [r7, #12]
 8012a5c:	f000 f82f 	bl	8012abe <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	1c5a      	adds	r2, r3, #1
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	601a      	str	r2, [r3, #0]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	dbef      	blt.n	8012a56 <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x14>
}
 8012a76:	bf00      	nop
 8012a78:	bf00      	nop
 8012a7a:	3710      	adds	r7, #16
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	e009      	b.n	8012aa8 <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x28>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	68b9      	ldr	r1, [r7, #8]
 8012a98:	68f8      	ldr	r0, [r7, #12]
 8012a9a:	f000 f831 	bl	8012b00 <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	1c5a      	adds	r2, r3, #1
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	601a      	str	r2, [r3, #0]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	dbef      	blt.n	8012a94 <_ZN6tflite15NDOpsHelperImplILi5ELi0EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x14>
}
 8012ab4:	bf00      	nop
 8012ab6:	bf00      	nop
 8012ab8:	3710      	adds	r7, #16
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}

08012abe <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b084      	sub	sp, #16
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	60f8      	str	r0, [r7, #12]
 8012ac6:	60b9      	str	r1, [r7, #8]
 8012ac8:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	3304      	adds	r3, #4
 8012ace:	2200      	movs	r2, #0
 8012ad0:	601a      	str	r2, [r3, #0]
 8012ad2:	e009      	b.n	8012ae8 <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x2a>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	68b9      	ldr	r1, [r7, #8]
 8012ad8:	68f8      	ldr	r0, [r7, #12]
 8012ada:	f000 f832 	bl	8012b42 <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	3201      	adds	r2, #1
 8012ae6:	601a      	str	r2, [r3, #0]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	3304      	adds	r3, #4
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	dbee      	blt.n	8012ad4 <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012af6:	bf00      	nop
 8012af8:	bf00      	nop
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3304      	adds	r3, #4
 8012b10:	2200      	movs	r2, #0
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	e009      	b.n	8012b2a <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x2a>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012b16:	687a      	ldr	r2, [r7, #4]
 8012b18:	68b9      	ldr	r1, [r7, #8]
 8012b1a:	68f8      	ldr	r0, [r7, #12]
 8012b1c:	f000 f832 	bl	8012b84 <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	3304      	adds	r3, #4
 8012b24:	681a      	ldr	r2, [r3, #0]
 8012b26:	3201      	adds	r2, #1
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	3304      	adds	r3, #4
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	dbee      	blt.n	8012b16 <_ZN6tflite15NDOpsHelperImplILi5ELi1EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012b38:	bf00      	nop
 8012b3a:	bf00      	nop
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b084      	sub	sp, #16
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	60f8      	str	r0, [r7, #12]
 8012b4a:	60b9      	str	r1, [r7, #8]
 8012b4c:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	3308      	adds	r3, #8
 8012b52:	2200      	movs	r2, #0
 8012b54:	601a      	str	r2, [r3, #0]
 8012b56:	e009      	b.n	8012b6c <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x2a>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012b58:	687a      	ldr	r2, [r7, #4]
 8012b5a:	68b9      	ldr	r1, [r7, #8]
 8012b5c:	68f8      	ldr	r0, [r7, #12]
 8012b5e:	f000 f832 	bl	8012bc6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	3308      	adds	r3, #8
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	3201      	adds	r2, #1
 8012b6a:	601a      	str	r2, [r3, #0]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	3308      	adds	r3, #8
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	689b      	ldr	r3, [r3, #8]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	dbee      	blt.n	8012b58 <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012b7a:	bf00      	nop
 8012b7c:	bf00      	nop
 8012b7e:	3710      	adds	r7, #16
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	3308      	adds	r3, #8
 8012b94:	2200      	movs	r2, #0
 8012b96:	601a      	str	r2, [r3, #0]
 8012b98:	e009      	b.n	8012bae <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x2a>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	68b9      	ldr	r1, [r7, #8]
 8012b9e:	68f8      	ldr	r0, [r7, #12]
 8012ba0:	f000 f832 	bl	8012c08 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	3308      	adds	r3, #8
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	3201      	adds	r2, #1
 8012bac:	601a      	str	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3308      	adds	r3, #8
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	dbee      	blt.n	8012b9a <_ZN6tflite15NDOpsHelperImplILi5ELi2EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012bbc:	bf00      	nop
 8012bbe:	bf00      	nop
 8012bc0:	3710      	adds	r7, #16
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}

08012bc6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012bc6:	b580      	push	{r7, lr}
 8012bc8:	b084      	sub	sp, #16
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	60f8      	str	r0, [r7, #12]
 8012bce:	60b9      	str	r1, [r7, #8]
 8012bd0:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	330c      	adds	r3, #12
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	601a      	str	r2, [r3, #0]
 8012bda:	e009      	b.n	8012bf0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x2a>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	68b9      	ldr	r1, [r7, #8]
 8012be0:	68f8      	ldr	r0, [r7, #12]
 8012be2:	f000 f832 	bl	8012c4a <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	330c      	adds	r3, #12
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	3201      	adds	r2, #1
 8012bee:	601a      	str	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	330c      	adds	r3, #12
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	68db      	ldr	r3, [r3, #12]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	dbee      	blt.n	8012bdc <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012bfe:	bf00      	nop
 8012c00:	bf00      	nop
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b084      	sub	sp, #16
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	60b9      	str	r1, [r7, #8]
 8012c12:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	330c      	adds	r3, #12
 8012c18:	2200      	movs	r2, #0
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	e009      	b.n	8012c32 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x2a>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	68b9      	ldr	r1, [r7, #8]
 8012c22:	68f8      	ldr	r0, [r7, #12]
 8012c24:	f000 f831 	bl	8012c8a <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	330c      	adds	r3, #12
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	3201      	adds	r2, #1
 8012c30:	601a      	str	r2, [r3, #0]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	330c      	adds	r3, #12
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	dbee      	blt.n	8012c1e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012c40:	bf00      	nop
 8012c42:	bf00      	nop
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM == N - 1, void>::type NDOpsHelperImpl(
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b084      	sub	sp, #16
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	60f8      	str	r0, [r7, #12]
 8012c52:	60b9      	str	r1, [r7, #8]
 8012c54:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	3310      	adds	r3, #16
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	601a      	str	r2, [r3, #0]
 8012c5e:	e008      	b.n	8012c72 <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x28>
    calc(indexes);
 8012c60:	6879      	ldr	r1, [r7, #4]
 8012c62:	68b8      	ldr	r0, [r7, #8]
 8012c64:	f7ff fcaa 	bl	80125bc <_ZZN6tflite13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ENKUlPiE_clESC_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	3310      	adds	r3, #16
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	3201      	adds	r2, #1
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	3310      	adds	r3, #16
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	691b      	ldr	r3, [r3, #16]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	dbef      	blt.n	8012c60 <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIaLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012c80:	bf00      	nop
 8012c82:	bf00      	nop
 8012c84:	3710      	adds	r7, #16
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM == N - 1, void>::type NDOpsHelperImpl(
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b084      	sub	sp, #16
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	60f8      	str	r0, [r7, #12]
 8012c92:	60b9      	str	r1, [r7, #8]
 8012c94:	607a      	str	r2, [r7, #4]
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	3310      	adds	r3, #16
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	e008      	b.n	8012cb2 <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x28>
    calc(indexes);
 8012ca0:	6879      	ldr	r1, [r7, #4]
 8012ca2:	68b8      	ldr	r0, [r7, #8]
 8012ca4:	f7ff fd93 	bl	80127ce <_ZZN6tflite13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ENKUlPiE_clESC_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	3310      	adds	r3, #16
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	3201      	adds	r2, #1
 8012cb0:	601a      	str	r2, [r3, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	3310      	adds	r3, #16
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	691b      	ldr	r3, [r3, #16]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	dbef      	blt.n	8012ca0 <_ZN6tflite15NDOpsHelperImplILi5ELi4EZNS_13reference_ops13TransposeImplIlLi5EEEvRKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S8_PS9_EUlPiE_EENSt9enable_ifIXeqT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x16>
}
 8012cc0:	bf00      	nop
 8012cc2:	bf00      	nop
 8012cc4:	3710      	adds	r7, #16
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
 8012cca:	b590      	push	{r4, r7, lr}
 8012ccc:	b089      	sub	sp, #36	; 0x24
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	60f8      	str	r0, [r7, #12]
 8012cd2:	60b9      	str	r1, [r7, #8]
 8012cd4:	607a      	str	r2, [r7, #4]
 8012cd6:	603b      	str	r3, [r7, #0]
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 8012cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cda:	6839      	ldr	r1, [r7, #0]
 8012cdc:	68b8      	ldr	r0, [r7, #8]
 8012cde:	f7fd f8d7 	bl	800fe90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 8012ce2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; i++) {
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	61fb      	str	r3, [r7, #28]
 8012ce8:	e028      	b.n	8012d3c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x72>
    auto x = input1_data[i] + input2_data[i];
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	009b      	lsls	r3, r3, #2
 8012cee:	687a      	ldr	r2, [r7, #4]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	ed93 7a00 	vldr	s14, [r3]
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cfc:	4413      	add	r3, r2
 8012cfe:	edd3 7a00 	vldr	s15, [r3]
 8012d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d06:	edc7 7a05 	vstr	s15, [r7, #20]
    output_data[i] = ActivationFunctionWithMinMax(
        x, params.float_activation_min, params.float_activation_max);
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    output_data[i] = ActivationFunctionWithMinMax(
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d1c:	18d4      	adds	r4, r2, r3
 8012d1e:	eeb0 1a47 	vmov.f32	s2, s14
 8012d22:	eef0 0a67 	vmov.f32	s1, s15
 8012d26:	ed97 0a05 	vldr	s0, [r7, #20]
 8012d2a:	f7fe ff5e 	bl	8011bea <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8012d2e:	eef0 7a40 	vmov.f32	s15, s0
 8012d32:	edc4 7a00 	vstr	s15, [r4]
  for (int i = 0; i < flat_size; i++) {
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	61fb      	str	r3, [r7, #28]
 8012d3c:	69fa      	ldr	r2, [r7, #28]
 8012d3e:	69bb      	ldr	r3, [r7, #24]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	dbd2      	blt.n	8012cea <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x20>
  }
}
 8012d44:	bf00      	nop
 8012d46:	bf00      	nop
 8012d48:	3724      	adds	r7, #36	; 0x24
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd90      	pop	{r4, r7, pc}

08012d4e <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>:

// Element-wise add that can often be used for inner loop of broadcast add as
// well as the non-broadcast add.
inline void AddElementwise(int size, const ArithmeticParams& params,
                           const uint8* input1_data, const uint8* input2_data,
                           uint8* output_data) {
 8012d4e:	b590      	push	{r4, r7, lr}
 8012d50:	b08f      	sub	sp, #60	; 0x3c
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	60f8      	str	r0, [r7, #12]
 8012d56:	60b9      	str	r1, [r7, #8]
 8012d58:	607a      	str	r2, [r7, #4]
 8012d5a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_GT(params.input1_offset, -256);
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8012d64:	da01      	bge.n	8012d6a <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x1c>
 8012d66:	f006 fac7 	bl	80192f8 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	689b      	ldr	r3, [r3, #8]
 8012d6e:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8012d72:	da01      	bge.n	8012d78 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x2a>
 8012d74:	f006 fac0 	bl	80192f8 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	2bff      	cmp	r3, #255	; 0xff
 8012d7e:	dd01      	ble.n	8012d84 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x36>
 8012d80:	f006 faba 	bl	80192f8 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	2bff      	cmp	r3, #255	; 0xff
 8012d8a:	dd01      	ble.n	8012d90 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x42>
 8012d8c:	f006 fab4 	bl	80192f8 <abort>

  for (int i = 0; i < size; ++i) {
 8012d90:	2300      	movs	r3, #0
 8012d92:	637b      	str	r3, [r7, #52]	; 0x34
 8012d94:	e05a      	b.n	8012e4c <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0xfe>
    const int32 input1_val = params.input1_offset + input1_data[i];
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d9c:	6879      	ldr	r1, [r7, #4]
 8012d9e:	440a      	add	r2, r1
 8012da0:	7812      	ldrb	r2, [r2, #0]
 8012da2:	4413      	add	r3, r2
 8012da4:	633b      	str	r3, [r7, #48]	; 0x30
    const int32 input2_val = params.input2_offset + input2_data[i];
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	689b      	ldr	r3, [r3, #8]
 8012daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dac:	6839      	ldr	r1, [r7, #0]
 8012dae:	440a      	add	r2, r1
 8012db0:	7812      	ldrb	r2, [r2, #0]
 8012db2:	4413      	add	r3, r2
 8012db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	699b      	ldr	r3, [r3, #24]
 8012dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8012dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	699b      	ldr	r3, [r3, #24]
 8012dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8012dcc:	627b      	str	r3, [r7, #36]	; 0x24
    const int32 scaled_input1_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	69d9      	ldr	r1, [r3, #28]
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	6a1b      	ldr	r3, [r3, #32]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dda:	f7f9 fe6d 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8012dde:	6238      	str	r0, [r7, #32]
    const int32 scaled_input2_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
 8012de0:	68bb      	ldr	r3, [r7, #8]
 8012de2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8012de8:	461a      	mov	r2, r3
 8012dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dec:	f7f9 fe64 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8012df0:	61f8      	str	r0, [r7, #28]
    const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 8012df2:	6a3a      	ldr	r2, [r7, #32]
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	4413      	add	r3, r2
 8012df8:	61bb      	str	r3, [r7, #24]
    const int32 raw_output =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            raw_sum, params.output_multiplier, params.output_shift) +
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	6919      	ldr	r1, [r3, #16]
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	695b      	ldr	r3, [r3, #20]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8012e02:	461a      	mov	r2, r3
 8012e04:	69b8      	ldr	r0, [r7, #24]
 8012e06:	f7f9 fe57 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8012e0a:	4602      	mov	r2, r0
        params.output_offset;
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	68db      	ldr	r3, [r3, #12]
            raw_sum, params.output_multiplier, params.output_shift) +
 8012e10:	4413      	add	r3, r2
        params.output_offset;
 8012e12:	613b      	str	r3, [r7, #16]
    const int32 clamped_output =
        std::min(params.quantized_activation_max,
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	f103 0430 	add.w	r4, r3, #48	; 0x30
                 std::max(params.quantized_activation_min, raw_output));
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	332c      	adds	r3, #44	; 0x2c
        std::min(params.quantized_activation_max,
 8012e1e:	f107 0210 	add.w	r2, r7, #16
 8012e22:	4611      	mov	r1, r2
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7f5 feac 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f7f5 febb 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 8012e34:	4603      	mov	r3, r0
                 std::max(params.quantized_activation_min, raw_output));
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	617b      	str	r3, [r7, #20]
    output_data[i] = static_cast<uint8>(clamped_output);
 8012e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e3e:	4413      	add	r3, r2
 8012e40:	697a      	ldr	r2, [r7, #20]
 8012e42:	b2d2      	uxtb	r2, r2
 8012e44:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 8012e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e48:	3301      	adds	r3, #1
 8012e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8012e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	dba0      	blt.n	8012d96 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x48>
  }
}
 8012e54:	bf00      	nop
 8012e56:	bf00      	nop
 8012e58:	373c      	adds	r7, #60	; 0x3c
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd90      	pop	{r4, r7, pc}

08012e5e <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b088      	sub	sp, #32
 8012e62:	af02      	add	r7, sp, #8
 8012e64:	60f8      	str	r0, [r7, #12]
 8012e66:	60b9      	str	r1, [r7, #8]
 8012e68:	607a      	str	r2, [r7, #4]
 8012e6a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e74:	429a      	cmp	r2, r3
 8012e76:	dd01      	ble.n	8012e7c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1e>
 8012e78:	f006 fa3e 	bl	80192f8 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 8012e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e7e:	6839      	ldr	r1, [r7, #0]
 8012e80:	68b8      	ldr	r0, [r7, #8]
 8012e82:	f7fd f805 	bl	800fe90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 8012e86:	6178      	str	r0, [r7, #20]

  TFLITE_DCHECK_GT(params.input1_offset, -256);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8012e90:	da01      	bge.n	8012e96 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x38>
 8012e92:	f006 fa31 	bl	80192f8 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	689b      	ldr	r3, [r3, #8]
 8012e9a:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8012e9e:	da01      	bge.n	8012ea4 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x46>
 8012ea0:	f006 fa2a 	bl	80192f8 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	685b      	ldr	r3, [r3, #4]
 8012ea8:	2bff      	cmp	r3, #255	; 0xff
 8012eaa:	dd01      	ble.n	8012eb0 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x52>
 8012eac:	f006 fa24 	bl	80192f8 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	689b      	ldr	r3, [r3, #8]
 8012eb4:	2bff      	cmp	r3, #255	; 0xff
 8012eb6:	dd01      	ble.n	8012ebc <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5e>
 8012eb8:	f006 fa1e 	bl	80192f8 <abort>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
 8012ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebe:	9300      	str	r3, [sp, #0]
 8012ec0:	6a3b      	ldr	r3, [r7, #32]
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	68f9      	ldr	r1, [r7, #12]
 8012ec6:	6978      	ldr	r0, [r7, #20]
 8012ec8:	f7ff ff41 	bl	8012d4e <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>
}
 8012ecc:	bf00      	nop
 8012ece:	3718      	adds	r7, #24
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
 8012ed4:	b590      	push	{r4, r7, lr}
 8012ed6:	ed2d 8b04 	vpush	{d8-d9}
 8012eda:	b0a1      	sub	sp, #132	; 0x84
 8012edc:	af02      	add	r7, sp, #8
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
 8012ee4:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 8012ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012eea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012eee:	6839      	ldr	r1, [r7, #0]
 8012ef0:	68b8      	ldr	r0, [r7, #8]
 8012ef2:	f7f9 feb5 	bl	800cc60 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 8012ef6:	f107 0310 	add.w	r3, r7, #16
 8012efa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012efe:	2104      	movs	r1, #4
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7f9 fcf3 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8012f06:	2300      	movs	r3, #0
 8012f08:	677b      	str	r3, [r7, #116]	; 0x74
 8012f0a:	e082      	b.n	8013012 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x13e>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8012f10:	e06d      	b.n	8012fee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x11a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8012f12:	2300      	movs	r3, #0
 8012f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012f16:	e058      	b.n	8012fca <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xf6>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 8012f18:	2300      	movs	r3, #0
 8012f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f1c:	e043      	b.n	8012fa6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xd2>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
 8012f1e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8012f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f24:	9300      	str	r3, [sp, #0]
 8012f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012f2a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012f2c:	f7f9 fdda 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8012f30:	4603      	mov	r3, r0
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	4413      	add	r3, r2
 8012f38:	ed93 8a00 	vldr	s16, [r3]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
 8012f3c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8012f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012f48:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012f4a:	f7f9 fdcb 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	009b      	lsls	r3, r3, #2
 8012f52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012f56:	4413      	add	r3, r2
 8012f58:	edd3 7a00 	vldr	s15, [r3]
              ActivationFunctionWithMinMax(
 8012f5c:	ee38 8a27 	vadd.f32	s16, s16, s15
                  params.float_activation_min, params.float_activation_max);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	ed93 9a0e 	vldr	s18, [r3, #56]	; 0x38
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 8012f6c:	f107 0010 	add.w	r0, r7, #16
 8012f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012f78:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012f7a:	f7f9 fd0e 	bl	800c99a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012f86:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(
 8012f88:	eeb0 1a49 	vmov.f32	s2, s18
 8012f8c:	eef0 0a68 	vmov.f32	s1, s17
 8012f90:	eeb0 0a48 	vmov.f32	s0, s16
 8012f94:	f7fe fe29 	bl	8011bea <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8012f98:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 8012f9c:	edc4 7a00 	vstr	s15, [r4]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 8012fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8012fa6:	f107 0310 	add.w	r3, r7, #16
 8012faa:	2103      	movs	r1, #3
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7f9 fadb 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	bfb4      	ite	lt
 8012fba:	2301      	movlt	r3, #1
 8012fbc:	2300      	movge	r3, #0
 8012fbe:	b2db      	uxtb	r3, r3
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d1ac      	bne.n	8012f1e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x4a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8012fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012fca:	f107 0310 	add.w	r3, r7, #16
 8012fce:	2102      	movs	r1, #2
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f9 fac9 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	bfb4      	ite	lt
 8012fde:	2301      	movlt	r3, #1
 8012fe0:	2300      	movge	r3, #0
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d197      	bne.n	8012f18 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x44>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8012fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012fea:	3301      	adds	r3, #1
 8012fec:	673b      	str	r3, [r7, #112]	; 0x70
 8012fee:	f107 0310 	add.w	r3, r7, #16
 8012ff2:	2101      	movs	r1, #1
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7f9 fab7 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ffe:	4293      	cmp	r3, r2
 8013000:	bfb4      	ite	lt
 8013002:	2301      	movlt	r3, #1
 8013004:	2300      	movge	r3, #0
 8013006:	b2db      	uxtb	r3, r3
 8013008:	2b00      	cmp	r3, #0
 801300a:	d182      	bne.n	8012f12 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x3e>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 801300c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801300e:	3301      	adds	r3, #1
 8013010:	677b      	str	r3, [r7, #116]	; 0x74
 8013012:	f107 0310 	add.w	r3, r7, #16
 8013016:	2100      	movs	r1, #0
 8013018:	4618      	mov	r0, r3
 801301a:	f7f9 faa5 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801301e:	4602      	mov	r2, r0
 8013020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013022:	4293      	cmp	r3, r2
 8013024:	bfb4      	ite	lt
 8013026:	2301      	movlt	r3, #1
 8013028:	2300      	movge	r3, #0
 801302a:	b2db      	uxtb	r3, r3
 801302c:	2b00      	cmp	r3, #0
 801302e:	f47f af6d 	bne.w	8012f0c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x38>
        }
      }
    }
  }
}
 8013032:	f107 0310 	add.w	r3, r7, #16
 8013036:	4618      	mov	r0, r3
 8013038:	f7f5 fe0a 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 801303c:	377c      	adds	r7, #124	; 0x7c
 801303e:	46bd      	mov	sp, r7
 8013040:	ecbd 8b04 	vpop	{d8-d9}
 8013044:	bd90      	pop	{r4, r7, pc}

08013046 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
 8013046:	b590      	push	{r4, r7, lr}
 8013048:	b0ab      	sub	sp, #172	; 0xac
 801304a:	af02      	add	r7, sp, #8
 801304c:	60f8      	str	r0, [r7, #12]
 801304e:	60b9      	str	r1, [r7, #8]
 8013050:	607a      	str	r2, [r7, #4]
 8013052:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 8013054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013058:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801305c:	6839      	ldr	r1, [r7, #0]
 801305e:	68b8      	ldr	r0, [r7, #8]
 8013060:	f7f9 fdfe 	bl	800cc60 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 8013064:	f107 0318 	add.w	r3, r7, #24
 8013068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801306c:	2104      	movs	r1, #4
 801306e:	4618      	mov	r0, r3
 8013070:	f7f9 fc3c 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8013074:	2300      	movs	r3, #0
 8013076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801307a:	e0de      	b.n	801323a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1f4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 801307c:	2300      	movs	r3, #0
 801307e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013082:	e0c4      	b.n	801320e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8013084:	2300      	movs	r3, #0
 8013086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801308a:	e0aa      	b.n	80131e2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x19c>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 801308c:	2300      	movs	r3, #0
 801308e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013092:	e090      	b.n	80131b6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x170>
          const int32 input1_val =
              params.input1_offset +
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 8013098:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801309c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130a0:	9300      	str	r3, [sp, #0]
 80130a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80130a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80130aa:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80130ae:	f7f9 fd19 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 80130b2:	4603      	mov	r3, r0
 80130b4:	461a      	mov	r2, r3
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4413      	add	r3, r2
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	4423      	add	r3, r4
 80130be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          const int32 input2_val =
              params.input2_offset +
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 80130c6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80130ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130ce:	9300      	str	r3, [sp, #0]
 80130d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80130d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80130d8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80130dc:	f7f9 fd02 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 80130e0:	4603      	mov	r3, r0
 80130e2:	461a      	mov	r2, r3
 80130e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80130e8:	4413      	add	r3, r2
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	4423      	add	r3, r4
 80130ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	699b      	ldr	r3, [r3, #24]
          const int32 shifted_input1_val =
 80130f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80130fa:	fa02 f303 	lsl.w	r3, r2, r3
 80130fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          const int32 shifted_input2_val =
              input2_val * (1 << params.left_shift);
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	699b      	ldr	r3, [r3, #24]
          const int32 shifted_input2_val =
 8013106:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801310a:	fa02 f303 	lsl.w	r3, r2, r3
 801310e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	69d9      	ldr	r1, [r3, #28]
                  params.input1_shift);
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	6a1b      	ldr	r3, [r3, #32]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801311a:	461a      	mov	r2, r3
 801311c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8013120:	f7f9 fcca 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8013124:	67f8      	str	r0, [r7, #124]	; 0x7c
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	6a59      	ldr	r1, [r3, #36]	; 0x24
                  params.input2_shift);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801312e:	461a      	mov	r2, r3
 8013130:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8013134:	f7f9 fcc0 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8013138:	67b8      	str	r0, [r7, #120]	; 0x78
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 801313a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801313c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801313e:	4413      	add	r3, r2
 8013140:	677b      	str	r3, [r7, #116]	; 0x74
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	6919      	ldr	r1, [r3, #16]
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801314a:	461a      	mov	r2, r3
 801314c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801314e:	f7f9 fcb3 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8013152:	4602      	mov	r2, r0
              params.output_offset;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	68db      	ldr	r3, [r3, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
 8013158:	4413      	add	r3, r2
              params.output_offset;
 801315a:	617b      	str	r3, [r7, #20]
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	f103 0430 	add.w	r4, r3, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	332c      	adds	r3, #44	; 0x2c
              std::min(params.quantized_activation_max,
 8013166:	f107 0214 	add.w	r2, r7, #20
 801316a:	4611      	mov	r1, r2
 801316c:	4618      	mov	r0, r3
 801316e:	f7f5 fd08 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8013172:	4603      	mov	r3, r0
 8013174:	4619      	mov	r1, r3
 8013176:	4620      	mov	r0, r4
 8013178:	f7f5 fd17 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 801317c:	4603      	mov	r3, r0
                       std::max(params.quantized_activation_min, raw_output));
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	673b      	str	r3, [r7, #112]	; 0x70
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 8013182:	f107 0018 	add.w	r0, r7, #24
 8013186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013190:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013194:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8013198:	f7f9 fbff 	bl	800c99a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801319c:	4603      	mov	r3, r0
 801319e:	461a      	mov	r2, r3
 80131a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80131a4:	4413      	add	r3, r2
 80131a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80131a8:	b2d2      	uxtb	r2, r2
 80131aa:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80131ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131b0:	3301      	adds	r3, #1
 80131b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80131b6:	f107 0318 	add.w	r3, r7, #24
 80131ba:	2103      	movs	r1, #3
 80131bc:	4618      	mov	r0, r3
 80131be:	f7f9 f9d3 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80131c2:	4602      	mov	r2, r0
 80131c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131c8:	4293      	cmp	r3, r2
 80131ca:	bfb4      	ite	lt
 80131cc:	2301      	movlt	r3, #1
 80131ce:	2300      	movge	r3, #0
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f47f af5e 	bne.w	8013094 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 80131d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80131dc:	3301      	adds	r3, #1
 80131de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80131e2:	f107 0318 	add.w	r3, r7, #24
 80131e6:	2102      	movs	r1, #2
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7f9 f9bd 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80131ee:	4602      	mov	r2, r0
 80131f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80131f4:	4293      	cmp	r3, r2
 80131f6:	bfb4      	ite	lt
 80131f8:	2301      	movlt	r3, #1
 80131fa:	2300      	movge	r3, #0
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f47f af44 	bne.w	801308c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x46>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8013204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013208:	3301      	adds	r3, #1
 801320a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801320e:	f107 0318 	add.w	r3, r7, #24
 8013212:	2101      	movs	r1, #1
 8013214:	4618      	mov	r0, r3
 8013216:	f7f9 f9a7 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801321a:	4602      	mov	r2, r0
 801321c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013220:	4293      	cmp	r3, r2
 8013222:	bfb4      	ite	lt
 8013224:	2301      	movlt	r3, #1
 8013226:	2300      	movge	r3, #0
 8013228:	b2db      	uxtb	r3, r3
 801322a:	2b00      	cmp	r3, #0
 801322c:	f47f af2a 	bne.w	8013084 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3e>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8013230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013234:	3301      	adds	r3, #1
 8013236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801323a:	f107 0318 	add.w	r3, r7, #24
 801323e:	2100      	movs	r1, #0
 8013240:	4618      	mov	r0, r3
 8013242:	f7f9 f991 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013246:	4602      	mov	r2, r0
 8013248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801324c:	4293      	cmp	r3, r2
 801324e:	bfb4      	ite	lt
 8013250:	2301      	movlt	r3, #1
 8013252:	2300      	movge	r3, #0
 8013254:	b2db      	uxtb	r3, r3
 8013256:	2b00      	cmp	r3, #0
 8013258:	f47f af10 	bne.w	801307c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
 801325c:	f107 0318 	add.w	r3, r7, #24
 8013260:	4618      	mov	r0, r3
 8013262:	f7f5 fcf5 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013266:	37a4      	adds	r7, #164	; 0xa4
 8013268:	46bd      	mov	sp, r7
 801326a:	bd90      	pop	{r4, r7, pc}

0801326c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
 801326c:	b590      	push	{r4, r7, lr}
 801326e:	b0ab      	sub	sp, #172	; 0xac
 8013270:	af02      	add	r7, sp, #8
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
 8013278:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 801327a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801327e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8013282:	6839      	ldr	r1, [r7, #0]
 8013284:	68b8      	ldr	r0, [r7, #8]
 8013286:	f7f9 fceb 	bl	800cc60 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 801328a:	f107 0318 	add.w	r3, r7, #24
 801328e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013292:	2104      	movs	r1, #4
 8013294:	4618      	mov	r0, r3
 8013296:	f7f9 fb29 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 801329a:	2300      	movs	r3, #0
 801329c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80132a0:	e0e0      	b.n	8013464 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1f8>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 80132a2:	2300      	movs	r3, #0
 80132a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80132a8:	e0c6      	b.n	8013438 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1cc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 80132aa:	2300      	movs	r3, #0
 80132ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80132b0:	e0ac      	b.n	801340c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1a0>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80132b2:	2300      	movs	r3, #0
 80132b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80132b8:	e092      	b.n	80133e0 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x174>
          const int32_t input1_val =
              params.input1_offset +
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 80132be:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80132c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132c6:	9300      	str	r3, [sp, #0]
 80132c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80132cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80132d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80132d4:	f7f9 fc06 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 80132d8:	4603      	mov	r3, r0
 80132da:	461a      	mov	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	4413      	add	r3, r2
 80132e0:	f993 3000 	ldrsb.w	r3, [r3]
 80132e4:	4423      	add	r3, r4
 80132e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          const int32_t input2_val =
              params.input2_offset +
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 80132ee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80132f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132f6:	9300      	str	r3, [sp, #0]
 80132f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80132fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013300:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8013304:	f7f9 fbee 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8013308:	4603      	mov	r3, r0
 801330a:	461a      	mov	r2, r3
 801330c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013310:	4413      	add	r3, r2
 8013312:	f993 3000 	ldrsb.w	r3, [r3]
 8013316:	4423      	add	r3, r4
 8013318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input1_val =
 8013320:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013324:	fa02 f303 	lsl.w	r3, r2, r3
 8013328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          const int32_t shifted_input2_val =
              input2_val * (1 << params.left_shift);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input2_val =
 8013330:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013334:	fa02 f303 	lsl.w	r3, r2, r3
 8013338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	69d9      	ldr	r1, [r3, #28]
                  params.input1_shift);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6a1b      	ldr	r3, [r3, #32]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8013344:	461a      	mov	r2, r3
 8013346:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801334a:	f7f9 fbb5 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 801334e:	67f8      	str	r0, [r7, #124]	; 0x7c
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	6a59      	ldr	r1, [r3, #36]	; 0x24
                  params.input2_shift);
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8013358:	461a      	mov	r2, r3
 801335a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801335e:	f7f9 fbab 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8013362:	67b8      	str	r0, [r7, #120]	; 0x78
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
 8013364:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013368:	4413      	add	r3, r2
 801336a:	677b      	str	r3, [r7, #116]	; 0x74
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	6919      	ldr	r1, [r3, #16]
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8013374:	461a      	mov	r2, r3
 8013376:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013378:	f7f9 fb9e 	bl	800cab8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 801337c:	4602      	mov	r2, r0
              params.output_offset;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	68db      	ldr	r3, [r3, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
 8013382:	4413      	add	r3, r2
              params.output_offset;
 8013384:	617b      	str	r3, [r7, #20]
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	f103 0430 	add.w	r4, r3, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	332c      	adds	r3, #44	; 0x2c
              std::min(params.quantized_activation_max,
 8013390:	f107 0214 	add.w	r2, r7, #20
 8013394:	4611      	mov	r1, r2
 8013396:	4618      	mov	r0, r3
 8013398:	f7f5 fbf3 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 801339c:	4603      	mov	r3, r0
 801339e:	4619      	mov	r1, r3
 80133a0:	4620      	mov	r0, r4
 80133a2:	f7f5 fc02 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 80133a6:	4603      	mov	r3, r0
                       std::max(params.quantized_activation_min, raw_output));
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	673b      	str	r3, [r7, #112]	; 0x70
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 80133ac:	f107 0018 	add.w	r0, r7, #24
 80133b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80133b4:	9300      	str	r3, [sp, #0]
 80133b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80133ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80133be:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80133c2:	f7f9 faea 	bl	800c99a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80133c6:	4603      	mov	r3, r0
 80133c8:	461a      	mov	r2, r3
 80133ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80133ce:	4413      	add	r3, r2
 80133d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80133d2:	b252      	sxtb	r2, r2
 80133d4:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80133d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80133da:	3301      	adds	r3, #1
 80133dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80133e0:	f107 0318 	add.w	r3, r7, #24
 80133e4:	2103      	movs	r1, #3
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7f9 f8be 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80133ec:	4602      	mov	r2, r0
 80133ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80133f2:	4293      	cmp	r3, r2
 80133f4:	bfb4      	ite	lt
 80133f6:	2301      	movlt	r3, #1
 80133f8:	2300      	movge	r3, #0
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	f47f af5c 	bne.w	80132ba <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x4e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8013402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013406:	3301      	adds	r3, #1
 8013408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801340c:	f107 0318 	add.w	r3, r7, #24
 8013410:	2102      	movs	r1, #2
 8013412:	4618      	mov	r0, r3
 8013414:	f7f9 f8a8 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013418:	4602      	mov	r2, r0
 801341a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801341e:	4293      	cmp	r3, r2
 8013420:	bfb4      	ite	lt
 8013422:	2301      	movlt	r3, #1
 8013424:	2300      	movge	r3, #0
 8013426:	b2db      	uxtb	r3, r3
 8013428:	2b00      	cmp	r3, #0
 801342a:	f47f af42 	bne.w	80132b2 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x46>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 801342e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013432:	3301      	adds	r3, #1
 8013434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013438:	f107 0318 	add.w	r3, r7, #24
 801343c:	2101      	movs	r1, #1
 801343e:	4618      	mov	r0, r3
 8013440:	f7f9 f892 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013444:	4602      	mov	r2, r0
 8013446:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801344a:	4293      	cmp	r3, r2
 801344c:	bfb4      	ite	lt
 801344e:	2301      	movlt	r3, #1
 8013450:	2300      	movge	r3, #0
 8013452:	b2db      	uxtb	r3, r3
 8013454:	2b00      	cmp	r3, #0
 8013456:	f47f af28 	bne.w	80132aa <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3e>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 801345a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801345e:	3301      	adds	r3, #1
 8013460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013464:	f107 0318 	add.w	r3, r7, #24
 8013468:	2100      	movs	r1, #0
 801346a:	4618      	mov	r0, r3
 801346c:	f7f9 f87c 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013470:	4602      	mov	r2, r0
 8013472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013476:	4293      	cmp	r3, r2
 8013478:	bfb4      	ite	lt
 801347a:	2301      	movlt	r3, #1
 801347c:	2300      	movge	r3, #0
 801347e:	b2db      	uxtb	r3, r3
 8013480:	2b00      	cmp	r3, #0
 8013482:	f47f af0e 	bne.w	80132a2 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x36>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
 8013486:	f107 0318 	add.w	r3, r7, #24
 801348a:	4618      	mov	r0, r3
 801348c:	f7f5 fbe0 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013490:	37a4      	adds	r7, #164	; 0xa4
 8013492:	46bd      	mov	sp, r7
 8013494:	bd90      	pop	{r4, r7, pc}

08013496 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
 8013496:	b5b0      	push	{r4, r5, r7, lr}
 8013498:	b090      	sub	sp, #64	; 0x40
 801349a:	af02      	add	r7, sp, #8
 801349c:	60f8      	str	r0, [r7, #12]
 801349e:	60b9      	str	r1, [r7, #8]
 80134a0:	607a      	str	r2, [r7, #4]
 80134a2:	603b      	str	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
 80134a4:	6839      	ldr	r1, [r7, #0]
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f7f5 fb54 	bl	8008b54 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
 80134ac:	4603      	mov	r3, r0
 80134ae:	f083 0301 	eor.w	r3, r3, #1
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134b6:	701a      	strb	r2, [r3, #0]

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 80134b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	2b03      	cmp	r3, #3
 80134be:	d004      	beq.n	80134ca <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x34>
 80134c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	2b09      	cmp	r3, #9
 80134c6:	f040 8095 	bne.w	80135f4 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15e>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	691b      	ldr	r3, [r3, #16]
 80134ce:	425a      	negs	r2, r3
 80134d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134d2:	629a      	str	r2, [r3, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	691b      	ldr	r3, [r3, #16]
 80134d8:	425a      	negs	r2, r3
 80134da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134dc:	62da      	str	r2, [r3, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
 80134de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134e0:	691a      	ldr	r2, [r3, #16]
 80134e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e4:	631a      	str	r2, [r3, #48]	; 0x30
    data->left_shift = 20;
 80134e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e8:	2214      	movs	r2, #20
 80134ea:	625a      	str	r2, [r3, #36]	; 0x24
    const double twice_max_input_scale =
        2 * static_cast<double>(
                std::max(input1->params.scale, input2->params.scale));
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f103 020c 	add.w	r2, r3, #12
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	330c      	adds	r3, #12
 80134f6:	4619      	mov	r1, r3
 80134f8:	4610      	mov	r0, r2
 80134fa:	f7f5 f875 	bl	80085e8 <_ZSt3maxIfERKT_S2_S2_>
 80134fe:	4603      	mov	r3, r0
 8013500:	681b      	ldr	r3, [r3, #0]
        2 * static_cast<double>(
 8013502:	4618      	mov	r0, r3
 8013504:	f7ed f828 	bl	8000558 <__aeabi_f2d>
                std::max(input1->params.scale, input2->params.scale));
 8013508:	4602      	mov	r2, r0
 801350a:	460b      	mov	r3, r1
 801350c:	f7ec fec6 	bl	800029c <__adddf3>
 8013510:	4602      	mov	r2, r0
 8013512:	460b      	mov	r3, r1
 8013514:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	4618      	mov	r0, r3
 801351e:	f7ed f81b 	bl	8000558 <__aeabi_f2d>
    const double real_input1_multiplier =
 8013522:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013526:	f7ed f999 	bl	800085c <__aeabi_ddiv>
 801352a:	4602      	mov	r2, r0
 801352c:	460b      	mov	r3, r1
 801352e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	4618      	mov	r0, r3
 8013538:	f7ed f80e 	bl	8000558 <__aeabi_f2d>
    const double real_input2_multiplier =
 801353c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013540:	f7ed f98c 	bl	800085c <__aeabi_ddiv>
 8013544:	4602      	mov	r2, r0
 8013546:	460b      	mov	r3, r1
 8013548:	e9c7 2308 	strd	r2, r3, [r7, #32]
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
 801354c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013550:	2201      	movs	r2, #1
 8013552:	fa02 f303 	lsl.w	r3, r2, r3
 8013556:	4618      	mov	r0, r3
 8013558:	f7ec ffec 	bl	8000534 <__aeabi_i2d>
 801355c:	4604      	mov	r4, r0
 801355e:	460d      	mov	r5, r1
 8013560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	4618      	mov	r0, r3
 8013566:	f7ec fff7 	bl	8000558 <__aeabi_f2d>
 801356a:	4602      	mov	r2, r0
 801356c:	460b      	mov	r3, r1
 801356e:	4620      	mov	r0, r4
 8013570:	4629      	mov	r1, r5
 8013572:	f7ed f849 	bl	8000608 <__aeabi_dmul>
 8013576:	4602      	mov	r2, r0
 8013578:	460b      	mov	r3, r1
    const double real_output_multiplier =
 801357a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801357e:	f7ed f96d 	bl	800085c <__aeabi_ddiv>
 8013582:	4602      	mov	r2, r0
 8013584:	460b      	mov	r3, r1
 8013586:	e9c7 2306 	strd	r2, r3, [r7, #24]

    QuantizeMultiplierSmallerThanOneExp(
 801358a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801358c:	f103 0214 	add.w	r2, r3, #20
 8013590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013592:	3304      	adds	r3, #4
 8013594:	4619      	mov	r1, r3
 8013596:	4610      	mov	r0, r2
 8013598:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801359c:	f7f4 ff0e 	bl	80083bc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
 80135a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135a2:	f103 0218 	add.w	r2, r3, #24
 80135a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135a8:	3308      	adds	r3, #8
 80135aa:	4619      	mov	r1, r3
 80135ac:	4610      	mov	r0, r2
 80135ae:	ed97 0b08 	vldr	d0, [r7, #32]
 80135b2:	f7f4 ff03 	bl	80083bc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
 80135b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b8:	f103 021c 	add.w	r2, r3, #28
 80135bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135be:	3320      	adds	r3, #32
 80135c0:	4619      	mov	r1, r3
 80135c2:	4610      	mov	r0, r2
 80135c4:	ed97 0b06 	vldr	d0, [r7, #24]
 80135c8:	f7f4 fef8 	bl	80083bc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	7819      	ldrb	r1, [r3, #0]
 80135d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135d2:	f103 020c 	add.w	r2, r3, #12
 80135d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135d8:	3310      	adds	r3, #16
 80135da:	9300      	str	r3, [sp, #0]
 80135dc:	4613      	mov	r3, r2
 80135de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	f7f5 fa63 	bl	8008aac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80135e6:	4603      	mov	r3, r0
 80135e8:	75fb      	strb	r3, [r7, #23]
 80135ea:	7dfb      	ldrb	r3, [r7, #23]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15e>
 80135f0:	7dfb      	ldrb	r3, [r7, #23]
 80135f2:	e000      	b.n	80135f6 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x160>
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3738      	adds	r7, #56	; 0x38
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bdb0      	pop	{r4, r5, r7, pc}

080135fe <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:

void EvalAdd(TfLiteContext* context, TfLiteNode* node, TfLiteAddParams* params,
             const OpData* data, const TfLiteTensor* input1,
             const TfLiteTensor* input2, TfLiteTensor* output) {
 80135fe:	b5b0      	push	{r4, r5, r7, lr}
 8013600:	b0c8      	sub	sp, #288	; 0x120
 8013602:	af04      	add	r7, sp, #16
 8013604:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8013608:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 801360c:	6020      	str	r0, [r4, #0]
 801360e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8013612:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8013616:	6001      	str	r1, [r0, #0]
 8013618:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801361c:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8013620:	600a      	str	r2, [r1, #0]
 8013622:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8013626:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 801362a:	6013      	str	r3, [r2, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 801362c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801363c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013640:	4618      	mov	r0, r3
 8013642:	f7fe faf3 	bl	8011c2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::ArithmeticParams op_params;
  SetActivationParams(output_activation_min, output_activation_max, &op_params);
 8013646:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 801364a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801364e:	f107 0310 	add.w	r3, r7, #16
 8013652:	4618      	mov	r0, r3
 8013654:	eef0 0a47 	vmov.f32	s1, s14
 8013658:	eeb0 0a67 	vmov.f32	s0, s15
 801365c:	f7fe fb28 	bl	8011cb0 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>
#define TF_LITE_ADD(opname)                                                   \
  reference_ops::opname(op_params, GetTensorShape(input1),                    \
                        GetTensorData<float>(input1), GetTensorShape(input2), \
                        GetTensorData<float>(input2), GetTensorShape(output), \
                        GetTensorData<float>(output))
  if (data->requires_broadcast) {
 8013660:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013664:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d042      	beq.n	80136f6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xf8>
    TF_LITE_ADD(BroadcastAdd4DSlow);
 8013670:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013674:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013678:	4618      	mov	r0, r3
 801367a:	f7f5 fb63 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801367e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8013682:	f7f9 f801 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013686:	4605      	mov	r5, r0
 8013688:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801368c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013690:	4618      	mov	r0, r3
 8013692:	f7f5 fb57 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013696:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801369a:	f7f8 fff5 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801369e:	4604      	mov	r4, r0
 80136a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80136a4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7f5 fb4b 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80136ae:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80136b2:	f7f8 fffa 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80136b6:	4603      	mov	r3, r0
 80136b8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80136bc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80136c0:	f107 0010 	add.w	r0, r7, #16
 80136c4:	9302      	str	r3, [sp, #8]
 80136c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80136ca:	9301      	str	r3, [sp, #4]
 80136cc:	9400      	str	r4, [sp, #0]
 80136ce:	4613      	mov	r3, r2
 80136d0:	462a      	mov	r2, r5
 80136d2:	f7ff fbff 	bl	8012ed4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 80136d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80136da:	4618      	mov	r0, r3
 80136dc:	f7f5 fab8 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80136e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7f5 fab3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80136ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f5 faae 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    TF_LITE_ADD(Add);
  }
#undef TF_LITE_ADD
}
 80136f4:	e041      	b.n	801377a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x17c>
    TF_LITE_ADD(Add);
 80136f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80136fa:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80136fe:	4618      	mov	r0, r3
 8013700:	f7f5 fb20 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013704:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8013708:	f7f8 ffbe 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801370c:	4605      	mov	r5, r0
 801370e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8013712:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013716:	4618      	mov	r0, r3
 8013718:	f7f5 fb14 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801371c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013720:	f7f8 ffb2 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013724:	4604      	mov	r4, r0
 8013726:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801372a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801372e:	4618      	mov	r0, r3
 8013730:	f7f5 fb08 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013734:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013738:	f7f8 ffb7 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801373c:	4603      	mov	r3, r0
 801373e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8013742:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8013746:	f107 0010 	add.w	r0, r7, #16
 801374a:	9302      	str	r3, [sp, #8]
 801374c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013750:	9301      	str	r3, [sp, #4]
 8013752:	9400      	str	r4, [sp, #0]
 8013754:	4613      	mov	r3, r2
 8013756:	462a      	mov	r2, r5
 8013758:	f7ff fab7 	bl	8012cca <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 801375c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013760:	4618      	mov	r0, r3
 8013762:	f7f5 fa75 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013766:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801376a:	4618      	mov	r0, r3
 801376c:	f7f5 fa70 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013770:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8013774:	4618      	mov	r0, r3
 8013776:	f7f5 fa6b 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801377a:	bf00      	nop
 801377c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8013780:	46bd      	mov	sp, r7
 8013782:	bdb0      	pop	{r4, r5, r7, pc}

08013784 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:

TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
                              TfLiteAddParams* params, const OpData* data,
                              const TfLiteTensor* input1,
                              const TfLiteTensor* input2,
                              TfLiteTensor* output) {
 8013784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013788:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801378c:	af0c      	add	r7, sp, #48	; 0x30
 801378e:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 8013792:	f5a4 74e2 	sub.w	r4, r4, #452	; 0x1c4
 8013796:	6020      	str	r0, [r4, #0]
 8013798:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 801379c:	f5a0 70e4 	sub.w	r0, r0, #456	; 0x1c8
 80137a0:	6001      	str	r1, [r0, #0]
 80137a2:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80137a6:	f5a1 71e6 	sub.w	r1, r1, #460	; 0x1cc
 80137aa:	600a      	str	r2, [r1, #0]
 80137ac:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80137b0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80137b4:	6013      	str	r3, [r2, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 80137b6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2b03      	cmp	r3, #3
 80137be:	d005      	beq.n	80137cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x48>
 80137c0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	2b09      	cmp	r3, #9
 80137c8:	f040 821e 	bne.w	8013c08 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x484>
    tflite::ArithmeticParams op_params;
    op_params.left_shift = data->left_shift;
 80137cc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80137d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137d8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80137dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80137e0:	619a      	str	r2, [r3, #24]
    op_params.input1_offset = data->input1_offset;
 80137e2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80137e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137ee:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80137f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80137f6:	605a      	str	r2, [r3, #4]
    op_params.input1_multiplier = data->input1_multiplier;
 80137f8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80137fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	695a      	ldr	r2, [r3, #20]
 8013804:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013808:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801380c:	61da      	str	r2, [r3, #28]
    op_params.input1_shift = data->input1_shift;
 801380e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013812:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	685a      	ldr	r2, [r3, #4]
 801381a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801381e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013822:	621a      	str	r2, [r3, #32]
    op_params.input2_offset = data->input2_offset;
 8013824:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013828:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013830:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013834:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013838:	609a      	str	r2, [r3, #8]
    op_params.input2_multiplier = data->input2_multiplier;
 801383a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801383e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	699a      	ldr	r2, [r3, #24]
 8013846:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801384a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801384e:	625a      	str	r2, [r3, #36]	; 0x24
    op_params.input2_shift = data->input2_shift;
 8013850:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013854:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	689a      	ldr	r2, [r3, #8]
 801385c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013860:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013864:	629a      	str	r2, [r3, #40]	; 0x28
    op_params.output_offset = data->output_offset;
 8013866:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801386a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013872:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013876:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801387a:	60da      	str	r2, [r3, #12]
    op_params.output_multiplier = data->output_multiplier;
 801387c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013880:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	69da      	ldr	r2, [r3, #28]
 8013888:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801388c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013890:	611a      	str	r2, [r3, #16]
    op_params.output_shift = data->output_shift;
 8013892:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013896:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	6a1a      	ldr	r2, [r3, #32]
 801389e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80138a2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80138a6:	615a      	str	r2, [r3, #20]
    SetActivationParams(data->output_activation_min,
 80138a8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80138ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	68d8      	ldr	r0, [r3, #12]
                        data->output_activation_max, &op_params);
 80138b4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80138b8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	691b      	ldr	r3, [r3, #16]
    SetActivationParams(data->output_activation_min,
 80138c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80138c4:	4619      	mov	r1, r3
 80138c6:	f7fe fa07 	bl	8011cd8 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 80138ca:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80138ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80138d2:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7f5 fa34 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80138dc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80138e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80138e4:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7f5 fa2b 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
 80138ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80138f2:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80138f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fd fff1 	bl	80118e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
 8013900:	4603      	mov	r3, r0
 8013902:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 8013906:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801390a:	4618      	mov	r0, r3
 801390c:	f7f5 f9a0 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013910:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013914:	4618      	mov	r0, r3
 8013916:	f7f5 f99b 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
#define TF_LITE_ADD(type, opname, dtype)                             \
  type::opname(op_params, GetTensorShape(input1),                    \
               GetTensorData<dtype>(input1), GetTensorShape(input2), \
               GetTensorData<dtype>(input2), GetTensorShape(output), \
               GetTensorData<dtype>(output));
    if (output->type == kTfLiteInt8) {
 801391a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	2b09      	cmp	r3, #9
 8013922:	f040 80e8 	bne.w	8013af6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x372>
      if (need_broadcast) {
 8013926:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 801392a:	2b00      	cmp	r3, #0
 801392c:	d046      	beq.n	80139bc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x238>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
 801392e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013932:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013936:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 801393a:	4618      	mov	r0, r3
 801393c:	f7f5 fa02 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013940:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013944:	f7f8 fec2 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013948:	4605      	mov	r5, r0
 801394a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801394e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013952:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8013956:	4618      	mov	r0, r3
 8013958:	f7f5 f9f4 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801395c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013960:	f7f8 feb4 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013964:	4604      	mov	r4, r0
 8013966:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801396a:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 801396e:	4618      	mov	r0, r3
 8013970:	f7f5 f9e8 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013974:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8013978:	f7f8 feb9 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801397c:	4603      	mov	r3, r0
 801397e:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8013982:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8013986:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801398a:	9302      	str	r3, [sp, #8]
 801398c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8013990:	9301      	str	r3, [sp, #4]
 8013992:	9400      	str	r4, [sp, #0]
 8013994:	4613      	mov	r3, r2
 8013996:	462a      	mov	r2, r5
 8013998:	f7ff fc68 	bl	801326c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
 801399c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7f5 f955 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80139a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7f5 f950 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80139b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7f5 f94b 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80139ba:	e125      	b.n	8013c08 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x484>
      } else {
        arm_elementwise_add_s8(
 80139bc:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80139c0:	f7f8 fe84 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80139c4:	4680      	mov	r8, r0
 80139c6:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80139ca:	f7f8 fe7f 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80139ce:	4681      	mov	r9, r0
 80139d0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80139d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	627b      	str	r3, [r7, #36]	; 0x24
 80139dc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80139e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80139e4:	69d9      	ldr	r1, [r3, #28]
 80139e6:	6239      	str	r1, [r7, #32]
            GetTensorData<int8_t>(input1), GetTensorData<int8_t>(input2),
            op_params.input1_offset, op_params.input1_multiplier,
            op_params.input1_shift, op_params.input2_offset,
 80139e8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80139ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80139f0:	6a1e      	ldr	r6, [r3, #32]
        arm_elementwise_add_s8(
 80139f2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80139f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80139fa:	6898      	ldr	r0, [r3, #8]
 80139fc:	61f8      	str	r0, [r7, #28]
 80139fe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013a08:	61bc      	str	r4, [r7, #24]
            op_params.input2_multiplier, op_params.input2_shift,
 8013a0a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a12:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8013a14:	617d      	str	r5, [r7, #20]
            op_params.left_shift, GetTensorData<int8_t>(output),
 8013a16:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a1e:	699a      	ldr	r2, [r3, #24]
 8013a20:	613a      	str	r2, [r7, #16]
        arm_elementwise_add_s8(
 8013a22:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8013a26:	f7f8 fe62 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a34:	68d9      	ldr	r1, [r3, #12]
 8013a36:	60b9      	str	r1, [r7, #8]
 8013a38:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a40:	691b      	ldr	r3, [r3, #16]
 8013a42:	607b      	str	r3, [r7, #4]
            op_params.output_offset, op_params.output_multiplier,
            op_params.output_shift, op_params.quantized_activation_min,
 8013a44:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a4c:	695c      	ldr	r4, [r3, #20]
 8013a4e:	603c      	str	r4, [r7, #0]
        arm_elementwise_add_s8(
 8013a50:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a54:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a58:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8013a5a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013a5e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013a62:	6b1c      	ldr	r4, [r3, #48]	; 0x30
            op_params.quantized_activation_max,
            MatchingElementsSize(GetTensorShape(input1), GetTensorShape(input2),
 8013a64:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8013a68:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7f5 f969 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013a72:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8013a76:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7f5 f962 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                                 GetTensorShape(output)));
 8013a80:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8013a84:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7f5 f95b 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            MatchingElementsSize(GetTensorShape(input1), GetTensorShape(input2),
 8013a8e:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8013a92:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8013a96:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fc f9f8 	bl	800fe90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 8013aa0:	4603      	mov	r3, r0
        arm_elementwise_add_s8(
 8013aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aa4:	940a      	str	r4, [sp, #40]	; 0x28
 8013aa6:	9509      	str	r5, [sp, #36]	; 0x24
 8013aa8:	683c      	ldr	r4, [r7, #0]
 8013aaa:	9408      	str	r4, [sp, #32]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	9307      	str	r3, [sp, #28]
 8013ab0:	68b9      	ldr	r1, [r7, #8]
 8013ab2:	9106      	str	r1, [sp, #24]
 8013ab4:	68f9      	ldr	r1, [r7, #12]
 8013ab6:	9105      	str	r1, [sp, #20]
 8013ab8:	693a      	ldr	r2, [r7, #16]
 8013aba:	9204      	str	r2, [sp, #16]
 8013abc:	697d      	ldr	r5, [r7, #20]
 8013abe:	9503      	str	r5, [sp, #12]
 8013ac0:	69bc      	ldr	r4, [r7, #24]
 8013ac2:	9402      	str	r4, [sp, #8]
 8013ac4:	69f8      	ldr	r0, [r7, #28]
 8013ac6:	9001      	str	r0, [sp, #4]
 8013ac8:	9600      	str	r6, [sp, #0]
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ace:	4649      	mov	r1, r9
 8013ad0:	4640      	mov	r0, r8
 8013ad2:	f003 fcdd 	bl	8017490 <arm_elementwise_add_s8>
                                 GetTensorShape(output)));
 8013ad6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7f5 f8b8 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
            MatchingElementsSize(GetTensorShape(input1), GetTensorShape(input2),
 8013ae0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7f5 f8b3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013aea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7f5 f8ae 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013af4:	e088      	b.n	8013c08 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x484>
      }
    } else {
      if (need_broadcast) {
 8013af6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d042      	beq.n	8013b84 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x400>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
 8013afe:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8013b02:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7f5 f91c 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013b0c:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013b10:	f7f8 fcf7 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013b14:	4605      	mov	r5, r0
 8013b16:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013b1a:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7f5 f910 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013b24:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013b28:	f7f8 fceb 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8013b32:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7f5 f904 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013b3c:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8013b40:	f7f8 fcf0 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8013b44:	4603      	mov	r3, r0
 8013b46:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8013b4a:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8013b4e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8013b52:	9302      	str	r3, [sp, #8]
 8013b54:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8013b58:	9301      	str	r3, [sp, #4]
 8013b5a:	9400      	str	r4, [sp, #0]
 8013b5c:	4613      	mov	r3, r2
 8013b5e:	462a      	mov	r2, r5
 8013b60:	f7ff fa71 	bl	8013046 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8013b64:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7f5 f871 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013b6e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f5 f86c 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013b78:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7f5 f867 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013b82:	e041      	b.n	8013c08 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x484>
      } else {
        TF_LITE_ADD(reference_ops, Add, uint8_t);
 8013b84:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8013b88:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7f5 f8d9 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013b92:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013b96:	f7f8 fcb4 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8013ba0:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7f5 f8cd 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013baa:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013bae:	f7f8 fca8 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8013bb8:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7f5 f8c1 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013bc2:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8013bc6:	f7f8 fcad 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8013bd0:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8013bd4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8013bd8:	9302      	str	r3, [sp, #8]
 8013bda:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8013bde:	9301      	str	r3, [sp, #4]
 8013be0:	9400      	str	r4, [sp, #0]
 8013be2:	4613      	mov	r3, r2
 8013be4:	462a      	mov	r2, r5
 8013be6:	f7ff f93a 	bl	8012e5e <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8013bea:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7f5 f82e 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013bf4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f5 f829 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8013bfe:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7f5 f824 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      }
    }
#undef TF_LITE_ADD
  }

  return kTfLiteOk;
 8013c08:	2300      	movs	r3, #0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8013c10:	46bd      	mov	sp, r7
 8013c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013c16 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b086      	sub	sp, #24
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	60f8      	str	r0, [r7, #12]
 8013c1e:	60b9      	str	r1, [r7, #8]
 8013c20:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d101      	bne.n	8013c2e <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0x18>
 8013c2a:	f005 fb65 	bl	80192f8 <abort>
  void* data = nullptr;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c36:	f107 0214 	add.w	r2, r7, #20
 8013c3a:	2134      	movs	r1, #52	; 0x34
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	4798      	blx	r3
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	bf0c      	ite	eq
 8013c46:	2301      	moveq	r3, #1
 8013c48:	2300      	movne	r3, #0
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d001      	beq.n	8013c54 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8013c50:	2300      	movs	r3, #0
 8013c52:	e000      	b.n	8013c56 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 8013c54:	697b      	ldr	r3, [r7, #20]
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3718      	adds	r7, #24
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}

08013c5e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013c5e:	b580      	push	{r7, lr}
 8013c60:	b08a      	sub	sp, #40	; 0x28
 8013c62:	af02      	add	r7, sp, #8
 8013c64:	6078      	str	r0, [r7, #4]
 8013c66:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	691b      	ldr	r3, [r3, #16]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d101      	bne.n	8013c74 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8013c70:	f005 fb42 	bl	80192f8 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	695b      	ldr	r3, [r3, #20]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d101      	bne.n	8013c80 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8013c7c:	f005 fb3c 	bl	80192f8 <abort>

  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
 8013c80:	2200      	movs	r2, #0
 8013c82:	6839      	ldr	r1, [r7, #0]
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f7f8 fc10 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013c8a:	61f8      	str	r0, [r7, #28]
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	6839      	ldr	r1, [r7, #0]
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f7f8 fc0a 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013c96:	61b8      	str	r0, [r7, #24]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013c98:	2200      	movs	r2, #0
 8013c9a:	6839      	ldr	r1, [r7, #0]
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f7f8 fc1a 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013ca2:	6178      	str	r0, [r7, #20]

  OpData* data = static_cast<OpData*>(node->user_data);
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	691b      	ldr	r3, [r3, #16]
 8013ca8:	613b      	str	r3, [r7, #16]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	695b      	ldr	r3, [r3, #20]
 8013cae:	60fb      	str	r3, [r7, #12]

  TF_LITE_ENSURE_STATUS(
 8013cb0:	693b      	ldr	r3, [r7, #16]
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	69fa      	ldr	r2, [r7, #28]
 8013cbc:	68f9      	ldr	r1, [r7, #12]
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f7ff fbe9 	bl	8013496 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	72fb      	strb	r3, [r7, #11]
 8013cc8:	7afb      	ldrb	r3, [r7, #11]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d001      	beq.n	8013cd2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 8013cce:	7afb      	ldrb	r3, [r7, #11]
 8013cd0:	e000      	b.n	8013cd4 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
      CalculateOpData(context, params, input1, input2, output, data));

  return kTfLiteOk;
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3720      	adds	r7, #32
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013cdc:	b590      	push	{r4, r7, lr}
 8013cde:	b08d      	sub	sp, #52	; 0x34
 8013ce0:	af04      	add	r7, sp, #16
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	695b      	ldr	r3, [r3, #20]
 8013cea:	61fb      	str	r3, [r7, #28]

  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
 8013cec:	2200      	movs	r2, #0
 8013cee:	6839      	ldr	r1, [r7, #0]
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f7f8 fbda 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013cf6:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	6839      	ldr	r1, [r7, #0]
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7f8 fbd4 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013d02:	6178      	str	r0, [r7, #20]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013d04:	2200      	movs	r2, #0
 8013d06:	6839      	ldr	r1, [r7, #0]
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f7f8 fbe4 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013d0e:	6138      	str	r0, [r7, #16]

  TFLITE_DCHECK(node->user_data != nullptr);
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	691b      	ldr	r3, [r3, #16]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d101      	bne.n	8013d1c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 8013d18:	f005 faee 	bl	80192f8 <abort>
  const OpData* data = static_cast<const OpData*>(node->user_data);
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	60fb      	str	r3, [r7, #12]

  if (output->type == kTfLiteFloat32) {
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	781b      	ldrb	r3, [r3, #0]
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d10c      	bne.n	8013d44 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalAdd(context, node, params, data, input1, input2, output);
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	9302      	str	r3, [sp, #8]
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	69bb      	ldr	r3, [r7, #24]
 8013d34:	9300      	str	r3, [sp, #0]
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	69fa      	ldr	r2, [r7, #28]
 8013d3a:	6839      	ldr	r1, [r7, #0]
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f7ff fc5e 	bl	80135fe <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
 8013d42:	e02a      	b.n	8013d9a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	2b03      	cmp	r3, #3
 8013d4a:	d003      	beq.n	8013d54 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x78>
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	2b09      	cmp	r3, #9
 8013d52:	d112      	bne.n	8013d7a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	9302      	str	r3, [sp, #8]
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	9301      	str	r3, [sp, #4]
 8013d5c:	69bb      	ldr	r3, [r7, #24]
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	69fa      	ldr	r2, [r7, #28]
 8013d64:	6839      	ldr	r1, [r7, #0]
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f7ff fd0c 	bl	8013784 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	72fb      	strb	r3, [r7, #11]
 8013d70:	7afb      	ldrb	r3, [r7, #11]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d010      	beq.n	8013d98 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xbc>
 8013d76:	7afb      	ldrb	r3, [r7, #11]
 8013d78:	e010      	b.n	8013d9c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
                                                input1, input2, output));
  } else {
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	695c      	ldr	r4, [r3, #20]
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7f1 f822 	bl	8004dcc <TfLiteTypeGetName>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	4905      	ldr	r1, [pc, #20]	; (8013da4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	47a0      	blx	r4
                       TfLiteTypeGetName(output->type), output->type);
    return kTfLiteError;
 8013d94:	2301      	movs	r3, #1
 8013d96:	e001      	b.n	8013d9c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  } else {
 8013d98:	bf00      	nop
  }

  return kTfLiteOk;
 8013d9a:	2300      	movs	r3, #0
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3724      	adds	r7, #36	; 0x24
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd90      	pop	{r4, r7, pc}
 8013da4:	0804c414 	.word	0x0804c414

08013da8 <_ZN6tflite3ops5micro12Register_ADDEv>:

}  // namespace add

TfLiteRegistration Register_ADD() {
 8013da8:	b4b0      	push	{r4, r5, r7}
 8013daa:	b083      	sub	sp, #12
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
          /*prepare=*/add::Prepare,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	4a07      	ldr	r2, [pc, #28]	; (8013dd0 <_ZN6tflite3ops5micro12Register_ADDEv+0x28>)
 8013db4:	461c      	mov	r4, r3
 8013db6:	4615      	mov	r5, r2
 8013db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013dbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	370c      	adds	r7, #12
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bcb0      	pop	{r4, r5, r7}
 8013dcc:	4770      	bx	lr
 8013dce:	bf00      	nop
 8013dd0:	0804c430 	.word	0x0804c430

08013dd4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8013dd4:	b590      	push	{r4, r7, lr}
 8013dd6:	b091      	sub	sp, #68	; 0x44
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
 8013de0:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	69db      	ldr	r3, [r3, #28]
 8013de6:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6a1b      	ldr	r3, [r3, #32]
 8013dec:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8013dee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013df0:	f7f4 ff44 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013df4:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8013df6:	6838      	ldr	r0, [r7, #0]
 8013df8:	f7f4 ff40 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013dfc:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8013dfe:	6a3b      	ldr	r3, [r7, #32]
 8013e00:	3b01      	subs	r3, #1
 8013e02:	4619      	mov	r1, r3
 8013e04:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013e06:	f7fa fd5a 	bl	800e8be <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8013e0a:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	1e99      	subs	r1, r3, #2
 8013e10:	6a3b      	ldr	r3, [r7, #32]
 8013e12:	3b01      	subs	r3, #1
 8013e14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013e16:	6838      	ldr	r0, [r7, #0]
 8013e18:	f7f9 f83c 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013e1c:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8013e1e:	69fb      	ldr	r3, [r7, #28]
 8013e20:	3b01      	subs	r3, #1
 8013e22:	4619      	mov	r1, r3
 8013e24:	6838      	ldr	r0, [r7, #0]
 8013e26:	f7f8 fb9f 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e2a:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e30:	e05e      	b.n	8013ef0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013e32:	2300      	movs	r3, #0
 8013e34:	63bb      	str	r3, [r7, #56]	; 0x38
 8013e36:	e054      	b.n	8013ee2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 8013e38:	f04f 0300 	mov.w	r3, #0
 8013e3c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8013e3e:	2300      	movs	r3, #0
 8013e40:	633b      	str	r3, [r7, #48]	; 0x30
 8013e42:	e020      	b.n	8013e86 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8013e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e46:	693a      	ldr	r2, [r7, #16]
 8013e48:	fb03 f202 	mul.w	r2, r3, r2
 8013e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4e:	4413      	add	r3, r2
 8013e50:	009b      	lsls	r3, r3, #2
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	4413      	add	r3, r2
 8013e56:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8013e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e5c:	693a      	ldr	r2, [r7, #16]
 8013e5e:	fb03 f202 	mul.w	r2, r3, r2
 8013e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e64:	4413      	add	r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e6a:	4413      	add	r3, r2
 8013e6c:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8013e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8013e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e7c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8013e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e82:	3301      	adds	r3, #1
 8013e84:	633b      	str	r3, [r7, #48]	; 0x30
 8013e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	dbda      	blt.n	8013e44 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 8013e8e:	f04f 0300 	mov.w	r3, #0
 8013e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8013e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d005      	beq.n	8013ea6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 8013e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9c:	009b      	lsls	r3, r3, #2
 8013e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ea0:	4413      	add	r3, r2
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8013ea6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8013eaa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013eb6:	fb03 f202 	mul.w	r2, r3, r2
 8013eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ebc:	4413      	add	r3, r2
 8013ebe:	009b      	lsls	r3, r3, #2
 8013ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ec2:	18d4      	adds	r4, r2, r3
 8013ec4:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8013ec8:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8013ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8013ed0:	f7fd fe8b 	bl	8011bea <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8013ed4:	eef0 7a40 	vmov.f32	s15, s0
 8013ed8:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ede:	3301      	adds	r3, #1
 8013ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	dba6      	blt.n	8013e38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 8013eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eec:	3301      	adds	r3, #1
 8013eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ef2:	69bb      	ldr	r3, [r7, #24]
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	db9c      	blt.n	8013e32 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8013ef8:	bf00      	nop
 8013efa:	bf00      	nop
 8013efc:	3744      	adds	r7, #68	; 0x44
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd90      	pop	{r4, r7, pc}

08013f02 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b096      	sub	sp, #88	; 0x58
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	60f8      	str	r0, [r7, #12]
 8013f0a:	60b9      	str	r1, [r7, #8]
 8013f0c:	607a      	str	r2, [r7, #4]
 8013f0e:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	689b      	ldr	r3, [r3, #8]
 8013f20:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	691b      	ldr	r3, [r3, #16]
 8013f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	695b      	ldr	r3, [r3, #20]
 8013f32:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	699b      	ldr	r3, [r3, #24]
 8013f38:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8013f3a:	6838      	ldr	r0, [r7, #0]
 8013f3c:	f7f4 fe9e 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	dc01      	bgt.n	8013f4a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8013f46:	f005 f9d7 	bl	80192f8 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8013f4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013f4c:	f7f4 fe96 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f50:	4603      	mov	r3, r0
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	dc01      	bgt.n	8013f5a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8013f56:	f005 f9cf 	bl	80192f8 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8013f5a:	69ba      	ldr	r2, [r7, #24]
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	dd01      	ble.n	8013f66 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8013f62:	f005 f9c9 	bl	80192f8 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8013f66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013f68:	f7f4 fe88 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f6c:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8013f6e:	6838      	ldr	r0, [r7, #0]
 8013f70:	f7f4 fe84 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f74:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8013f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f78:	3b01      	subs	r3, #1
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013f7e:	f7fa fc9e 	bl	800e8be <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8013f82:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8013f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f86:	1e99      	subs	r1, r3, #2
 8013f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f8a:	3b01      	subs	r3, #1
 8013f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013f8e:	6838      	ldr	r0, [r7, #0]
 8013f90:	f7f8 ff80 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013f94:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8013f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f98:	3b01      	subs	r3, #1
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	6838      	ldr	r0, [r7, #0]
 8013f9e:	f7f8 fae3 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013fa2:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8013fa8:	e072      	b.n	8014090 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013faa:	2300      	movs	r3, #0
 8013fac:	653b      	str	r3, [r7, #80]	; 0x50
 8013fae:	e068      	b.n	8014082 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x180>
      int32 acc = 0;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013fb8:	e023      	b.n	8014002 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x100>
        int32 input_val = input_data[b * accum_depth + d];
 8013fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fbe:	fb03 f202 	mul.w	r2, r3, r2
 8013fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fc4:	4413      	add	r3, r2
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	4413      	add	r3, r2
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8013fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fd4:	fb03 f202 	mul.w	r2, r3, r2
 8013fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fda:	4413      	add	r3, r2
 8013fdc:	461a      	mov	r2, r3
 8013fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013fe0:	4413      	add	r3, r2
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8013fe6:	69fa      	ldr	r2, [r7, #28]
 8013fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fea:	4413      	add	r3, r2
 8013fec:	6a39      	ldr	r1, [r7, #32]
 8013fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ff0:	440a      	add	r2, r1
 8013ff2:	fb03 f202 	mul.w	r2, r3, r2
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8013ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ffe:	3301      	adds	r3, #1
 8014000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014006:	429a      	cmp	r2, r3
 8014008:	dbd7      	blt.n	8013fba <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb8>
      }
      if (bias_data) {
 801400a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801400c:	2b00      	cmp	r3, #0
 801400e:	d007      	beq.n	8014020 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x11e>
        acc += bias_data[out_c];
 8014010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014016:	4413      	add	r3, r2
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	4413      	add	r3, r2
 801401e:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014024:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014026:	4618      	mov	r0, r3
 8014028:	f7fa fbfe 	bl	800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801402c:	4603      	mov	r3, r0
 801402e:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8014030:	693a      	ldr	r2, [r7, #16]
 8014032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014034:	4413      	add	r3, r2
 8014036:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8014038:	f107 0218 	add.w	r2, r7, #24
 801403c:	f107 0310 	add.w	r3, r7, #16
 8014040:	4611      	mov	r1, r2
 8014042:	4618      	mov	r0, r3
 8014044:	f7f4 fd9d 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8014048:	4603      	mov	r3, r0
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 801404e:	f107 0214 	add.w	r2, r7, #20
 8014052:	f107 0310 	add.w	r3, r7, #16
 8014056:	4611      	mov	r1, r2
 8014058:	4618      	mov	r0, r3
 801405a:	f7f4 fda6 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 801405e:	4603      	mov	r3, r0
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 8014064:	6939      	ldr	r1, [r7, #16]
 8014066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801406a:	fb03 f202 	mul.w	r2, r3, r2
 801406e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014070:	4413      	add	r3, r2
 8014072:	461a      	mov	r2, r3
 8014074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014076:	4413      	add	r3, r2
 8014078:	b2ca      	uxtb	r2, r1
 801407a:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801407c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801407e:	3301      	adds	r3, #1
 8014080:	653b      	str	r3, [r7, #80]	; 0x50
 8014082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014086:	429a      	cmp	r2, r3
 8014088:	db92      	blt.n	8013fb0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xae>
  for (int b = 0; b < batches; ++b) {
 801408a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801408c:	3301      	adds	r3, #1
 801408e:	657b      	str	r3, [r7, #84]	; 0x54
 8014090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014094:	429a      	cmp	r2, r3
 8014096:	db88      	blt.n	8013faa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa8>
    }
  }
}
 8014098:	bf00      	nop
 801409a:	bf00      	nop
 801409c:	3758      	adds	r7, #88	; 0x58
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 80140a2:	b580      	push	{r7, lr}
 80140a4:	b098      	sub	sp, #96	; 0x60
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	60f8      	str	r0, [r7, #12]
 80140aa:	60b9      	str	r1, [r7, #8]
 80140ac:	607a      	str	r2, [r7, #4]
 80140ae:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	689b      	ldr	r3, [r3, #8]
 80140c0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	691b      	ldr	r3, [r3, #16]
 80140cc:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	695b      	ldr	r3, [r3, #20]
 80140d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	699b      	ldr	r3, [r3, #24]
 80140d8:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80140da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80140dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140de:	429a      	cmp	r2, r3
 80140e0:	dd01      	ble.n	80140e6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 80140e2:	f005 f909 	bl	80192f8 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 80140e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d001      	beq.n	80140f0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 80140ec:	f005 f904 	bl	80192f8 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 80140f0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80140f2:	f7f4 fdc3 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80140f6:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 80140f8:	6838      	ldr	r0, [r7, #0]
 80140fa:	f7f4 fdbf 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80140fe:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8014100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014102:	3b01      	subs	r3, #1
 8014104:	4619      	mov	r1, r3
 8014106:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8014108:	f7fa fbd9 	bl	800e8be <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801410c:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 801410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014110:	1e99      	subs	r1, r3, #2
 8014112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014114:	3b01      	subs	r3, #1
 8014116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014118:	6838      	ldr	r0, [r7, #0]
 801411a:	f7f8 febb 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801411e:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8014120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014122:	3b01      	subs	r3, #1
 8014124:	4619      	mov	r1, r3
 8014126:	6838      	ldr	r0, [r7, #0]
 8014128:	f7f8 fa1e 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801412c:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 801412e:	2300      	movs	r3, #0
 8014130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014132:	e07b      	b.n	801422c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8014134:	2300      	movs	r3, #0
 8014136:	65bb      	str	r3, [r7, #88]	; 0x58
 8014138:	e071      	b.n	801421e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x17c>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 801413a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014140:	4413      	add	r3, r2
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 8014146:	2300      	movs	r3, #0
 8014148:	657b      	str	r3, [r7, #84]	; 0x54
 801414a:	e02b      	b.n	80141a4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x102>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 801414c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014150:	fb03 f202 	mul.w	r2, r3, r2
 8014154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014156:	4413      	add	r3, r2
 8014158:	461a      	mov	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	4413      	add	r3, r2
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	b29a      	uxth	r2, r3
 8014162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014164:	b29b      	uxth	r3, r3
 8014166:	4413      	add	r3, r2
 8014168:	b29b      	uxth	r3, r3
 801416a:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 801416c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014170:	fb03 f202 	mul.w	r2, r3, r2
 8014174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014176:	4413      	add	r3, r2
 8014178:	461a      	mov	r2, r3
 801417a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801417c:	4413      	add	r3, r2
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	b29a      	uxth	r2, r3
 8014182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014184:	b29b      	uxth	r3, r3
 8014186:	4413      	add	r3, r2
 8014188:	b29b      	uxth	r3, r3
 801418a:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 801418c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014190:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8014194:	fb03 f202 	mul.w	r2, r3, r2
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	4413      	add	r3, r2
 801419c:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 801419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141a0:	3301      	adds	r3, #1
 80141a2:	657b      	str	r3, [r7, #84]	; 0x54
 80141a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80141a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a8:	429a      	cmp	r2, r3
 80141aa:	dbcf      	blt.n	801414c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xaa>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80141b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fa fb38 	bl	800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80141b8:	4603      	mov	r3, r0
      accum =
 80141ba:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 80141bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141c0:	1ad3      	subs	r3, r2, r3
 80141c2:	61bb      	str	r3, [r7, #24]
 80141c4:	f107 0218 	add.w	r2, r7, #24
 80141c8:	f107 0314 	add.w	r3, r7, #20
 80141cc:	4611      	mov	r1, r2
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7f4 fcd7 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 80141d4:	4603      	mov	r3, r0
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 80141da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141de:	1ad3      	subs	r3, r2, r3
 80141e0:	61fb      	str	r3, [r7, #28]
 80141e2:	f107 021c 	add.w	r2, r7, #28
 80141e6:	f107 0314 	add.w	r3, r7, #20
 80141ea:	4611      	mov	r1, r2
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7f4 fcdc 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 80141f2:	4603      	mov	r3, r0
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 80141f8:	697a      	ldr	r2, [r7, #20]
 80141fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141fc:	4413      	add	r3, r2
 80141fe:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 8014200:	6979      	ldr	r1, [r7, #20]
 8014202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014206:	fb03 f202 	mul.w	r2, r3, r2
 801420a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801420c:	4413      	add	r3, r2
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014212:	4413      	add	r3, r2
 8014214:	b20a      	sxth	r2, r1
 8014216:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8014218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801421a:	3301      	adds	r3, #1
 801421c:	65bb      	str	r3, [r7, #88]	; 0x58
 801421e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014222:	429a      	cmp	r2, r3
 8014224:	db89      	blt.n	801413a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x98>
  for (int b = 0; b < batches; ++b) {
 8014226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014228:	3301      	adds	r3, #1
 801422a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801422c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014230:	429a      	cmp	r2, r3
 8014232:	f6ff af7f 	blt.w	8014134 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x92>
    }
  }
}
 8014236:	bf00      	nop
 8014238:	bf00      	nop
 801423a:	3760      	adds	r7, #96	; 0x60
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8014240:	b580      	push	{r7, lr}
 8014242:	b096      	sub	sp, #88	; 0x58
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	607a      	str	r2, [r7, #4]
 801424c:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	68db      	ldr	r3, [r3, #12]
 8014264:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	691b      	ldr	r3, [r3, #16]
 801426a:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	695b      	ldr	r3, [r3, #20]
 8014270:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	699b      	ldr	r3, [r3, #24]
 8014276:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8014278:	6838      	ldr	r0, [r7, #0]
 801427a:	f7f4 fcff 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801427e:	4603      	mov	r3, r0
 8014280:	2b01      	cmp	r3, #1
 8014282:	dc01      	bgt.n	8014288 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 8014284:	f005 f838 	bl	80192f8 <abort>
//  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8014288:	69fa      	ldr	r2, [r7, #28]
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	429a      	cmp	r2, r3
 801428e:	dd01      	ble.n	8014294 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x54>
 8014290:	f005 f832 	bl	80192f8 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8014294:	6838      	ldr	r0, [r7, #0]
 8014296:	f7f4 fcf1 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801429a:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 801429c:	2100      	movs	r1, #0
 801429e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80142a0:	f7f8 f962 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80142a4:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 80142a6:	2101      	movs	r1, #1
 80142a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80142aa:	f7f8 f95d 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80142ae:	62f8      	str	r0, [r7, #44]	; 0x2c
//  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80142b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142b2:	3b01      	subs	r3, #1
 80142b4:	4619      	mov	r1, r3
 80142b6:	6838      	ldr	r0, [r7, #0]
 80142b8:	f7f8 f956 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80142bc:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 80142be:	2300      	movs	r3, #0
 80142c0:	657b      	str	r3, [r7, #84]	; 0x54
 80142c2:	e074      	b.n	80143ae <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x16e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80142c4:	2300      	movs	r3, #0
 80142c6:	653b      	str	r3, [r7, #80]	; 0x50
 80142c8:	e06a      	b.n	80143a0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x160>
      int32 acc = 0;
 80142ca:	2300      	movs	r3, #0
 80142cc:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 80142ce:	2300      	movs	r3, #0
 80142d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142d2:	e025      	b.n	8014320 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xe0>
        int32 input_val = input_data[b * accum_depth + d];
 80142d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142d8:	fb03 f202 	mul.w	r2, r3, r2
 80142dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142de:	4413      	add	r3, r2
 80142e0:	461a      	mov	r2, r3
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	4413      	add	r3, r2
 80142e6:	f993 3000 	ldrsb.w	r3, [r3]
 80142ea:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 80142ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142f0:	fb03 f202 	mul.w	r2, r3, r2
 80142f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142f6:	4413      	add	r3, r2
 80142f8:	461a      	mov	r2, r3
 80142fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80142fc:	4413      	add	r3, r2
 80142fe:	f993 3000 	ldrsb.w	r3, [r3]
 8014302:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8014304:	6a3a      	ldr	r2, [r7, #32]
 8014306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014308:	4413      	add	r3, r2
 801430a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801430c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801430e:	440a      	add	r2, r1
 8014310:	fb03 f202 	mul.w	r2, r3, r2
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	4413      	add	r3, r2
 8014318:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 801431a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801431c:	3301      	adds	r3, #1
 801431e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	429a      	cmp	r2, r3
 8014326:	dbd5      	blt.n	80142d4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x94>
      }
      if (bias_data) {
 8014328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801432a:	2b00      	cmp	r3, #0
 801432c:	d007      	beq.n	801433e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xfe>
        acc += bias_data[out_c];
 801432e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014334:	4413      	add	r3, r2
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	4413      	add	r3, r2
 801433c:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014344:	4618      	mov	r0, r3
 8014346:	f7fa fa6f 	bl	800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801434a:	4603      	mov	r3, r0
 801434c:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 801434e:	697a      	ldr	r2, [r7, #20]
 8014350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014352:	4413      	add	r3, r2
 8014354:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 8014356:	f107 021c 	add.w	r2, r7, #28
 801435a:	f107 0314 	add.w	r3, r7, #20
 801435e:	4611      	mov	r1, r2
 8014360:	4618      	mov	r0, r3
 8014362:	f7f4 fc0e 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8014366:	4603      	mov	r3, r0
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 801436c:	f107 0218 	add.w	r2, r7, #24
 8014370:	f107 0314 	add.w	r3, r7, #20
 8014374:	4611      	mov	r1, r2
 8014376:	4618      	mov	r0, r3
 8014378:	f7f4 fc17 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 801437c:	4603      	mov	r3, r0
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8014382:	6979      	ldr	r1, [r7, #20]
 8014384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014386:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014388:	fb03 f202 	mul.w	r2, r3, r2
 801438c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801438e:	4413      	add	r3, r2
 8014390:	461a      	mov	r2, r3
 8014392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014394:	4413      	add	r3, r2
 8014396:	b24a      	sxtb	r2, r1
 8014398:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801439a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801439c:	3301      	adds	r3, #1
 801439e:	653b      	str	r3, [r7, #80]	; 0x50
 80143a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a4:	429a      	cmp	r2, r3
 80143a6:	db90      	blt.n	80142ca <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x8a>
  for (int b = 0; b < batches; ++b) {
 80143a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143aa:	3301      	adds	r3, #1
 80143ac:	657b      	str	r3, [r7, #84]	; 0x54
 80143ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80143b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b2:	429a      	cmp	r2, r3
 80143b4:	db86      	blt.n	80142c4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x84>
    }
  }
}
 80143b6:	bf00      	nop
 80143b8:	bf00      	nop
 80143ba:	3758      	adds	r7, #88	; 0x58
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}

080143c0 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b08c      	sub	sp, #48	; 0x30
 80143c4:	af02      	add	r7, sp, #8
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	607b      	str	r3, [r7, #4]
 80143ca:	460b      	mov	r3, r1
 80143cc:	72fb      	strb	r3, [r7, #11]
 80143ce:	4613      	mov	r3, r2
 80143d0:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 80143d2:	2300      	movs	r3, #0
 80143d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  // Set buffer index to a reset value
  data->buffer_idx = -1;
 80143d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143de:	615a      	str	r2, [r3, #20]
  if (data_type != kTfLiteFloat32) {
 80143e0:	7abb      	ldrb	r3, [r7, #10]
 80143e2:	2b01      	cmp	r3, #1
 80143e4:	d041      	beq.n	801446a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xaa>
    double real_multiplier = 0.0;
 80143e6:	f04f 0200 	mov.w	r2, #0
 80143ea:	f04f 0300 	mov.w	r3, #0
 80143ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80143f2:	f107 0318 	add.w	r3, r7, #24
 80143f6:	9301      	str	r3, [sp, #4]
 80143f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014400:	6879      	ldr	r1, [r7, #4]
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	f7f4 f9c8 	bl	8008798 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8014408:	4603      	mov	r3, r0
 801440a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801440e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014412:	2b00      	cmp	r3, #0
 8014414:	d002      	beq.n	801441c <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x5c>
 8014416:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801441a:	e028      	b.n	801446e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xae>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 801441c:	ed97 7b06 	vldr	d7, [r7, #24]
 8014420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014422:	f107 0214 	add.w	r2, r7, #20
 8014426:	4611      	mov	r1, r2
 8014428:	4618      	mov	r0, r3
 801442a:	eeb0 0a47 	vmov.f32	s0, s14
 801442e:	eef0 0a67 	vmov.f32	s1, s15
 8014432:	f7f3 ff11 	bl	8008258 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	425a      	negs	r2, r3
 801443a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801443c:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 801443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014440:	f103 0208 	add.w	r2, r3, #8
 8014444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014446:	330c      	adds	r3, #12
 8014448:	7af9      	ldrb	r1, [r7, #11]
 801444a:	9300      	str	r3, [sp, #0]
 801444c:	4613      	mov	r3, r2
 801444e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014450:	68f8      	ldr	r0, [r7, #12]
 8014452:	f7f4 fb2b 	bl	8008aac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8014456:	4603      	mov	r3, r0
 8014458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801445c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8014460:	2b00      	cmp	r3, #0
 8014462:	d002      	beq.n	801446a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xaa>
 8014464:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8014468:	e001      	b.n	801446e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xae>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 801446a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801446e:	4618      	mov	r0, r3
 8014470:	3728      	adds	r7, #40	; 0x28
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}

08014476 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8014476:	b580      	push	{r7, lr}
 8014478:	b086      	sub	sp, #24
 801447a:	af00      	add	r7, sp, #0
 801447c:	60f8      	str	r0, [r7, #12]
 801447e:	60b9      	str	r1, [r7, #8]
 8014480:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014486:	2b00      	cmp	r3, #0
 8014488:	d101      	bne.n	801448e <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 801448a:	f004 ff35 	bl	80192f8 <abort>
  void* data = nullptr;
 801448e:	2300      	movs	r3, #0
 8014490:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014496:	f107 0214 	add.w	r2, r7, #20
 801449a:	2118      	movs	r1, #24
 801449c:	68f8      	ldr	r0, [r7, #12]
 801449e:	4798      	blx	r3
 80144a0:	4603      	mov	r3, r0
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	bf0c      	ite	eq
 80144a6:	2301      	moveq	r3, #1
 80144a8:	2300      	movne	r3, #0
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d001      	beq.n	80144b4 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 80144b0:	2300      	movs	r3, #0
 80144b2:	e000      	b.n	80144b6 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 80144b4:	697b      	ldr	r3, [r7, #20]
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3718      	adds	r7, #24
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
	...

080144c0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80144c0:	b5b0      	push	{r4, r5, r7, lr}
 80144c2:	b0a0      	sub	sp, #128	; 0x80
 80144c4:	af04      	add	r7, sp, #16
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
 80144ca:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	691b      	ldr	r3, [r3, #16]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d101      	bne.n	80144d8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 80144d4:	f004 ff10 	bl	80192f8 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	695b      	ldr	r3, [r3, #20]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d101      	bne.n	80144e4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 80144e0:	f004 ff0a 	bl	80192f8 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	691b      	ldr	r3, [r3, #16]
 80144e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	695b      	ldr	r3, [r3, #20]
 80144ee:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80144f0:	2200      	movs	r2, #0
 80144f2:	6839      	ldr	r1, [r7, #0]
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f7f7 ffd8 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80144fa:	6678      	str	r0, [r7, #100]	; 0x64
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 80144fc:	2201      	movs	r2, #1
 80144fe:	6839      	ldr	r1, [r7, #0]
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f7f7 ffd2 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014506:	6638      	str	r0, [r7, #96]	; 0x60
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8014508:	2202      	movs	r2, #2
 801450a:	6839      	ldr	r1, [r7, #0]
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7fb fd41 	bl	800ff94 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8014512:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8014514:	2200      	movs	r2, #0
 8014516:	6839      	ldr	r1, [r7, #0]
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7f7 ffdc 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801451e:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8014520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014522:	781a      	ldrb	r2, [r3, #0]
 8014524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	429a      	cmp	r2, r3
 801452a:	d01a      	beq.n	8014562 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	695c      	ldr	r4, [r3, #20]
 8014530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	4618      	mov	r0, r3
 8014536:	f7f0 fc49 	bl	8004dcc <TfLiteTypeGetName>
 801453a:	4605      	mov	r5, r0
 801453c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	4618      	mov	r0, r3
 8014542:	f7f0 fc43 	bl	8004dcc <TfLiteTypeGetName>
 8014546:	4603      	mov	r3, r0
 8014548:	9303      	str	r3, [sp, #12]
 801454a:	9502      	str	r5, [sp, #8]
 801454c:	4b4f      	ldr	r3, [pc, #316]	; (801468c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>)
 801454e:	9301      	str	r3, [sp, #4]
 8014550:	4b4f      	ldr	r3, [pc, #316]	; (8014690 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d0>)
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	2364      	movs	r3, #100	; 0x64
 8014556:	4a4f      	ldr	r2, [pc, #316]	; (8014694 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>)
 8014558:	494f      	ldr	r1, [pc, #316]	; (8014698 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>)
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	47a0      	blx	r4
 801455e:	2401      	movs	r4, #1
 8014560:	e08f      	b.n	8014682 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8014562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014564:	781a      	ldrb	r2, [r3, #0]
 8014566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	429a      	cmp	r2, r3
 801456c:	d006      	beq.n	801457c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	695b      	ldr	r3, [r3, #20]
 8014572:	494a      	ldr	r1, [pc, #296]	; (801469c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	4798      	blx	r3
 8014578:	2401      	movs	r4, #1
 801457a:	e082      	b.n	8014682 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
                     "Hybrid models are not supported on TFLite Micro.");
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params->activation,
 801457c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801457e:	7819      	ldrb	r1, [r3, #0]
 8014580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014582:	781a      	ldrb	r2, [r3, #0]
 8014584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014586:	9303      	str	r3, [sp, #12]
 8014588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801458a:	9302      	str	r3, [sp, #8]
 801458c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801458e:	9301      	str	r3, [sp, #4]
 8014590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f7ff ff12 	bl	80143c0 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 801459c:	4603      	mov	r3, r0
 801459e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80145a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d002      	beq.n	80145b0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
 80145aa:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 80145ae:	e068      	b.n	8014682 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
                                        input->type, input, filter, bias,
                                        output, data));

  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32>(bias)) {
 80145b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	2b09      	cmp	r3, #9
 80145b6:	d107      	bne.n	80145c8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
 80145b8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80145ba:	f7f8 f8a9 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d001      	beq.n	80145c8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
 80145c4:	2301      	movs	r3, #1
 80145c6:	e000      	b.n	80145ca <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
 80145c8:	2300      	movs	r3, #0
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d058      	beq.n	8014680 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c0>
    RuntimeShape filter_shape = GetTensorShape(filter);
 80145ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80145d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7f4 fbb5 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 80145da:	f107 0318 	add.w	r3, r7, #24
 80145de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7f4 fbaf 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

//    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    const int filter_dim_count = filter_shape.DimensionsCount();
 80145e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7f4 fb46 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80145f0:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 80145f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145f4:	1e5a      	subs	r2, r3, #1
 80145f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80145fa:	4611      	mov	r1, r2
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7f7 ffb3 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014602:	4603      	mov	r3, r0
 8014604:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8014606:	2301      	movs	r3, #1
 8014608:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801460a:	2301      	movs	r3, #1
 801460c:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801460e:	f107 0318 	add.w	r3, r7, #24
 8014612:	2101      	movs	r1, #1
 8014614:	4618      	mov	r0, r3
 8014616:	f7f7 ffa7 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 801461a:	4603      	mov	r3, r0
 801461c:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801461e:	f107 0308 	add.w	r3, r7, #8
 8014622:	4618      	mov	r0, r3
 8014624:	f003 fcaf 	bl	8017f86 <arm_fully_connected_s8_get_buffer_size>
 8014628:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801462c:	2b00      	cmp	r3, #0
 801462e:	dd11      	ble.n	8014654 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x194>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014634:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014636:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014638:	3214      	adds	r2, #20
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	4798      	blx	r3
 801463e:	4603      	mov	r3, r0
 8014640:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8014644:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8014648:	2b00      	cmp	r3, #0
 801464a:	d007      	beq.n	801465c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>
 801464c:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8014650:	2500      	movs	r5, #0
 8014652:	e004      	b.n	801465e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x19e>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8014654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801465a:	615a      	str	r2, [r3, #20]
    }
  }
 801465c:	2501      	movs	r5, #1
 801465e:	f107 0318 	add.w	r3, r7, #24
 8014662:	4618      	mov	r0, r3
 8014664:	f7f4 faf4 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014668:	2d01      	cmp	r5, #1
 801466a:	d101      	bne.n	8014670 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>
 801466c:	2501      	movs	r5, #1
 801466e:	e000      	b.n	8014672 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1b2>
 8014670:	2500      	movs	r5, #0
 8014672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014676:	4618      	mov	r0, r3
 8014678:	f7f4 faea 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 801467c:	2d01      	cmp	r5, #1
 801467e:	d100      	bne.n	8014682 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  return kTfLiteOk;
 8014680:	2400      	movs	r4, #0
}
 8014682:	4623      	mov	r3, r4
 8014684:	4618      	mov	r0, r3
 8014686:	3770      	adds	r7, #112	; 0x70
 8014688:	46bd      	mov	sp, r7
 801468a:	bdb0      	pop	{r4, r5, r7, pc}
 801468c:	0804c860 	.word	0x0804c860
 8014690:	0804c870 	.word	0x0804c870
 8014694:	0804c78c 	.word	0x0804c78c
 8014698:	0804c844 	.word	0x0804c844
 801469c:	0804c87c 	.word	0x0804c87c

080146a0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 80146a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146a2:	b0e1      	sub	sp, #388	; 0x184
 80146a4:	af08      	add	r7, sp, #32
 80146a6:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 80146aa:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 80146ae:	6020      	str	r0, [r4, #0]
 80146b0:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 80146b4:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 80146b8:	6001      	str	r1, [r0, #0]
 80146ba:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80146be:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 80146c2:	600a      	str	r2, [r1, #0]
 80146c4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80146c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80146cc:	6013      	str	r3, [r2, #0]
 80146ce:	2400      	movs	r4, #0
  // The 'if' condition can be removed when null handling of bias is added to
  // arm_fully_connected_s8
  if (nullptr != GetTensorData<int32>(bias)) {
 80146d0:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 80146d4:	f7f8 f81c 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	bf14      	ite	ne
 80146de:	2301      	movne	r3, #1
 80146e0:	2300      	moveq	r3, #0
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	f000 818d 	beq.w	8014a04 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x364>
    const RuntimeShape output_shape = GetTensorShape(output);
 80146ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80146ee:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7f4 fb26 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
//    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    const int batches = output_shape.Dims(0);
 80146f8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80146fc:	2100      	movs	r1, #0
 80146fe:	4618      	mov	r0, r3
 8014700:	f7f7 ff32 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014704:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    const int output_depth = output_shape.Dims(1);
 8014708:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801470c:	2101      	movs	r1, #1
 801470e:	4618      	mov	r0, r3
 8014710:	f7f7 ff2a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014714:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
    const RuntimeShape filter_shape = GetTensorShape(filter);
 8014718:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801471c:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8014720:	4618      	mov	r0, r3
 8014722:	f7f4 fb0f 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8014726:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801472a:	4618      	mov	r0, r3
 801472c:	f7f4 faa6 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014730:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8014734:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8014738:	1e5a      	subs	r2, r3, #1
 801473a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801473e:	4611      	mov	r1, r2
 8014740:	4618      	mov	r0, r3
 8014742:	f7f7 ff11 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014746:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
    const RuntimeShape input_shape = GetTensorShape(input);
 801474a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801474e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014752:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014756:	6819      	ldr	r1, [r3, #0]
 8014758:	4610      	mov	r0, r2
 801475a:	f7f4 faf3 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
//    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 2);
//    TFLITE_DCHECK_EQ(batches, input_shape.Dims(0));

    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -input->params.zero_point;
 801475e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014762:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	691b      	ldr	r3, [r3, #16]
 801476a:	425b      	negs	r3, r3
 801476c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    fc_params.filter_offset = -filter->params.zero_point;
 8014770:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	425b      	negs	r3, r3
 8014778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    fc_params.output_offset = output->params.zero_point;
 801477c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    fc_params.activation.min = data.output_activation_min;
 8014786:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801478a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	689b      	ldr	r3, [r3, #8]
 8014792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    fc_params.activation.max = data.output_activation_max;
 8014796:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801479a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    cmsis_nn_per_tensor_quant_params quant_params;
    quant_params.multiplier = data.output_multiplier;
 80147a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80147aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    // TODO(b/138810107): Figure out whether output shift should be inverted
    quant_params.shift = -data.output_shift;
 80147b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80147ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	425b      	negs	r3, r3
 80147c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    cmsis_nn_dims input_dims;
    input_dims.n = batches;
 80147c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80147cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    input_dims.h = 1;
 80147ce:	2301      	movs	r3, #1
 80147d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    input_dims.w = 1;
 80147d4:	2301      	movs	r3, #1
 80147d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    input_dims.c = input_shape.Dims(1);
 80147da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80147de:	2101      	movs	r1, #1
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7f7 fec1 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80147e6:	4603      	mov	r3, r0
 80147e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    cmsis_nn_dims filter_dims;
    filter_dims.n = accum_depth;
 80147ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80147f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    filter_dims.h = 1;
 80147f2:	2301      	movs	r3, #1
 80147f4:	673b      	str	r3, [r7, #112]	; 0x70
    filter_dims.w = 1;
 80147f6:	2301      	movs	r3, #1
 80147f8:	677b      	str	r3, [r7, #116]	; 0x74
    filter_dims.c = output_depth;
 80147fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80147fe:	67bb      	str	r3, [r7, #120]	; 0x78

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8014800:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014808:	2201      	movs	r2, #1
 801480a:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 801480c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014814:	2201      	movs	r2, #1
 8014816:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8014818:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801481c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014820:	2201      	movs	r2, #1
 8014822:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8014824:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801482c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8014830:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batches;
 8014832:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014836:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801483a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801483e:	601a      	str	r2, [r3, #0]
    output_dims.h = 1;
 8014840:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014844:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014848:	2201      	movs	r2, #1
 801484a:	605a      	str	r2, [r3, #4]
    output_dims.w = 1;
 801484c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014850:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014854:	2201      	movs	r2, #1
 8014856:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8014858:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801485c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014860:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8014864:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8014866:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801486a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801486e:	2200      	movs	r2, #0
 8014870:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 8014872:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014876:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801487a:	2200      	movs	r2, #0
 801487c:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 801487e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014882:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	695b      	ldr	r3, [r3, #20]
 801488a:	2b00      	cmp	r3, #0
 801488c:	db17      	blt.n	80148be <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x21e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801488e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014892:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801489a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801489e:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80148a2:	6812      	ldr	r2, [r2, #0]
 80148a4:	6951      	ldr	r1, [r2, #20]
 80148a6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80148aa:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80148ae:	6810      	ldr	r0, [r2, #0]
 80148b0:	4798      	blx	r3
 80148b2:	4602      	mov	r2, r0
 80148b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80148b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80148bc:	601a      	str	r2, [r3, #0]
    }

    TF_LITE_ENSURE_EQ(
 80148be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80148c2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80148c6:	6818      	ldr	r0, [r3, #0]
 80148c8:	f7f7 ff00 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80148cc:	4606      	mov	r6, r0
 80148ce:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 80148d2:	f7f7 fefb 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 80148dc:	f7f7 ff18 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80148e0:	6038      	str	r0, [r7, #0]
 80148e2:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80148e6:	f7f7 ff02 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80148ea:	4603      	mov	r3, r0
 80148ec:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 80148f0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80148f4:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80148f8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80148fc:	9306      	str	r3, [sp, #24]
 80148fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014902:	9305      	str	r3, [sp, #20]
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	9304      	str	r3, [sp, #16]
 8014908:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801490c:	9303      	str	r3, [sp, #12]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	9302      	str	r3, [sp, #8]
 8014912:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014916:	9301      	str	r3, [sp, #4]
 8014918:	9600      	str	r6, [sp, #0]
 801491a:	462b      	mov	r3, r5
 801491c:	f003 fb02 	bl	8017f24 <arm_fully_connected_s8>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	bf14      	ite	ne
 8014926:	2301      	movne	r3, #1
 8014928:	2300      	moveq	r3, #0
 801492a:	b2db      	uxtb	r3, r3
 801492c:	2b00      	cmp	r3, #0
 801492e:	d04b      	beq.n	80149c8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x328>
 8014930:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014934:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	695c      	ldr	r4, [r3, #20]
 801493c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014940:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014944:	6818      	ldr	r0, [r3, #0]
 8014946:	f7f7 fec1 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801494a:	4606      	mov	r6, r0
 801494c:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8014950:	f7f7 febc 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8014954:	6078      	str	r0, [r7, #4]
 8014956:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 801495a:	f7f7 fed9 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801495e:	6038      	str	r0, [r7, #0]
 8014960:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8014964:	f7f7 fec3 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8014968:	4603      	mov	r3, r0
 801496a:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 801496e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8014972:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8014976:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801497a:	9306      	str	r3, [sp, #24]
 801497c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014980:	9305      	str	r3, [sp, #20]
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	9304      	str	r3, [sp, #16]
 8014986:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801498a:	9303      	str	r3, [sp, #12]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	9302      	str	r3, [sp, #8]
 8014990:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014994:	9301      	str	r3, [sp, #4]
 8014996:	9600      	str	r6, [sp, #0]
 8014998:	462b      	mov	r3, r5
 801499a:	f003 fac3 	bl	8017f24 <arm_fully_connected_s8>
 801499e:	4603      	mov	r3, r0
 80149a0:	461a      	mov	r2, r3
 80149a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80149a6:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 80149aa:	2300      	movs	r3, #0
 80149ac:	9303      	str	r3, [sp, #12]
 80149ae:	9202      	str	r2, [sp, #8]
 80149b0:	4b6b      	ldr	r3, [pc, #428]	; (8014b60 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c0>)
 80149b2:	9301      	str	r3, [sp, #4]
 80149b4:	4b6b      	ldr	r3, [pc, #428]	; (8014b64 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c4>)
 80149b6:	9300      	str	r3, [sp, #0]
 80149b8:	23c2      	movs	r3, #194	; 0xc2
 80149ba:	4a6b      	ldr	r2, [pc, #428]	; (8014b68 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c8>)
 80149bc:	496b      	ldr	r1, [pc, #428]	; (8014b6c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4cc>)
 80149be:	6800      	ldr	r0, [r0, #0]
 80149c0:	47a0      	blx	r4
 80149c2:	2401      	movs	r4, #1
 80149c4:	2500      	movs	r5, #0
 80149c6:	e000      	b.n	80149ca <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x32a>
                               GetTensorData<int8_t>(input), &filter_dims,
                               GetTensorData<int8_t>(filter), &bias_dims,
                               GetTensorData<int32>(bias), &output_dims,
                               GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  } else {
 80149c8:	2501      	movs	r5, #1
 80149ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7f4 f93e 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80149d4:	2d01      	cmp	r5, #1
 80149d6:	d101      	bne.n	80149dc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x33c>
 80149d8:	2501      	movs	r5, #1
 80149da:	e000      	b.n	80149de <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x33e>
 80149dc:	2500      	movs	r5, #0
 80149de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7f4 f934 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80149e8:	2d01      	cmp	r5, #1
 80149ea:	d101      	bne.n	80149f0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x350>
 80149ec:	2501      	movs	r5, #1
 80149ee:	e000      	b.n	80149f2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x352>
 80149f0:	2500      	movs	r5, #0
 80149f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7f4 f92a 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80149fc:	2d01      	cmp	r5, #1
 80149fe:	f040 80a9 	bne.w	8014b54 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4b4>
 8014a02:	e0a6      	b.n	8014b52 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4b2>
    tflite::FullyConnectedParams op_params;
    op_params.input_offset = -input->params.zero_point;
 8014a04:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a08:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	691b      	ldr	r3, [r3, #16]
 8014a10:	425a      	negs	r2, r3
 8014a12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014a1a:	601a      	str	r2, [r3, #0]
    op_params.weights_offset = -filter->params.zero_point;
 8014a1c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014a20:	691b      	ldr	r3, [r3, #16]
 8014a22:	425a      	negs	r2, r3
 8014a24:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a28:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014a2c:	605a      	str	r2, [r3, #4]
    op_params.output_offset = output->params.zero_point;
 8014a2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014a32:	691a      	ldr	r2, [r3, #16]
 8014a34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a38:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014a3c:	609a      	str	r2, [r3, #8]
    op_params.output_multiplier = data.output_multiplier;
 8014a3e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	681a      	ldr	r2, [r3, #0]
 8014a4a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014a52:	60da      	str	r2, [r3, #12]
    // TODO(b/138810107): Figure out whether output shift should be inverted
    op_params.output_shift = -data.output_shift;
 8014a54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a58:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	685b      	ldr	r3, [r3, #4]
 8014a60:	425a      	negs	r2, r3
 8014a62:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014a6a:	611a      	str	r2, [r3, #16]
    op_params.quantized_activation_min = data.output_activation_min;
 8014a6c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a70:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	689a      	ldr	r2, [r3, #8]
 8014a78:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014a80:	615a      	str	r2, [r3, #20]
    op_params.quantized_activation_max = data.output_activation_max;
 8014a82:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	68da      	ldr	r2, [r3, #12]
 8014a8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014a96:	619a      	str	r2, [r3, #24]

    reference_integer_ops::FullyConnected(
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014a98:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8014a9c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014aa0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014aa4:	6819      	ldr	r1, [r3, #0]
 8014aa6:	4610      	mov	r0, r2
 8014aa8:	f7f4 f94c 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 8014aac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014ab0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014ab4:	6818      	ldr	r0, [r3, #0]
 8014ab6:	f7f7 fe09 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8014aba:	4606      	mov	r6, r0
        GetTensorShape(filter), GetTensorData<int8_t>(filter),
 8014abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ac0:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7f4 f93d 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 8014aca:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8014ace:	f7f7 fdfd 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8014ad2:	4604      	mov	r4, r0
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
 8014ad4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ad8:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7f4 f931 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 8014ae2:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8014ae6:	f7f7 fe13 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8014aea:	4605      	mov	r5, r0
        GetTensorShape(output), GetTensorData<int8_t>(output));
 8014aec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014af0:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7f4 f925 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 8014afa:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8014afe:	f7f7 fdf6 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8014b02:	4603      	mov	r3, r0
 8014b04:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8014b08:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8014b0c:	f107 001c 	add.w	r0, r7, #28
 8014b10:	9304      	str	r3, [sp, #16]
 8014b12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b16:	9303      	str	r3, [sp, #12]
 8014b18:	9502      	str	r5, [sp, #8]
 8014b1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014b1e:	9301      	str	r3, [sp, #4]
 8014b20:	9400      	str	r4, [sp, #0]
 8014b22:	4613      	mov	r3, r2
 8014b24:	4632      	mov	r2, r6
 8014b26:	f7ff fb8b 	bl	8014240 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
        GetTensorShape(output), GetTensorData<int8_t>(output));
 8014b2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7f4 f88e 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
 8014b34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7f4 f889 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(filter), GetTensorData<int8_t>(filter),
 8014b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7f4 f884 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014b48:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7f4 f87f 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  }
  return kTfLiteOk;
 8014b52:	2400      	movs	r4, #0
}
 8014b54:	4623      	mov	r3, r4
 8014b56:	4618      	mov	r0, r3
 8014b58:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b60:	0804c980 	.word	0x0804c980
 8014b64:	0804c994 	.word	0x0804c994
 8014b68:	0804c78c 	.word	0x0804c78c
 8014b6c:	0804c964 	.word	0x0804c964

08014b70 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 8014b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b72:	b0c9      	sub	sp, #292	; 0x124
 8014b74:	af06      	add	r7, sp, #24
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8014b7c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8014b80:	6001      	str	r1, [r0, #0]
 8014b82:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8014b86:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8014b8a:	600a      	str	r2, [r1, #0]
 8014b8c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8014b90:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8014b94:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 8014b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	691b      	ldr	r3, [r3, #16]
 8014ba2:	425b      	negs	r3, r3
 8014ba4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 8014ba8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	425b      	negs	r3, r3
 8014bb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 8014bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014bb8:	691b      	ldr	r3, [r3, #16]
 8014bba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 8014bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014bc2:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 8014bc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014bc8:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 8014bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014bce:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 8014bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 8014bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	425b      	negs	r3, r3
 8014bec:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 8014bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	689b      	ldr	r3, [r3, #8]
 8014bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8014bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	68db      	ldr	r3, [r3, #12]
 8014c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 8014c0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	2b03      	cmp	r3, #3
 8014c12:	d002      	beq.n	8014c1a <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0xaa>
 8014c14:	2b07      	cmp	r3, #7
 8014c16:	d05e      	beq.n	8014cd6 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x166>
 8014c18:	e0bb      	b.n	8014d92 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x222>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 8014c1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014c26:	6819      	ldr	r1, [r3, #0]
 8014c28:	4610      	mov	r0, r2
 8014c2a:	f7f4 f88b 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014c36:	6818      	ldr	r0, [r3, #0]
 8014c38:	f7f7 fc63 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8014c3c:	4606      	mov	r6, r0
 8014c3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014c42:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7f4 f87c 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014c4c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8014c50:	f7f7 fc57 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8014c54:	4604      	mov	r4, r0
 8014c56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014c5a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7f4 f870 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014c64:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8014c68:	f7f7 fd52 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014c72:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7f4 f864 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014c7c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8014c80:	f7f7 fc50 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8014c84:	4603      	mov	r3, r0
 8014c86:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014c8a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8014c8e:	f107 0014 	add.w	r0, r7, #20
 8014c92:	9304      	str	r3, [sp, #16]
 8014c94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014c98:	9303      	str	r3, [sp, #12]
 8014c9a:	9502      	str	r5, [sp, #8]
 8014c9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014ca0:	9301      	str	r3, [sp, #4]
 8014ca2:	9400      	str	r4, [sp, #0]
 8014ca4:	4613      	mov	r3, r2
 8014ca6:	4632      	mov	r2, r6
 8014ca8:	f7ff f92b 	bl	8013f02 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 8014cac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7f3 ffcd 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014cb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7f3 ffc8 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7f3 ffc3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7f3 ffbe 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8014cd4:	e06e      	b.n	8014db4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x244>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 8014cd6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8014cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014ce2:	6819      	ldr	r1, [r3, #0]
 8014ce4:	4610      	mov	r0, r2
 8014ce6:	f7f4 f82d 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014cf2:	6818      	ldr	r0, [r3, #0]
 8014cf4:	f7f7 fc05 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8014cf8:	4606      	mov	r6, r0
 8014cfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014cfe:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7f4 f81e 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014d08:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8014d0c:	f7f7 fbf9 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8014d10:	4604      	mov	r4, r0
 8014d12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014d16:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7f4 f812 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014d20:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8014d24:	f7f7 fcf4 	bl	800c710 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8014d28:	4605      	mov	r5, r0
 8014d2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014d2e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7f4 f806 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014d38:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8014d3c:	f7fb fae4 	bl	8010308 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8014d40:	4603      	mov	r3, r0
 8014d42:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8014d46:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8014d4a:	f107 0014 	add.w	r0, r7, #20
 8014d4e:	9304      	str	r3, [sp, #16]
 8014d50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014d54:	9303      	str	r3, [sp, #12]
 8014d56:	9502      	str	r5, [sp, #8]
 8014d58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014d5c:	9301      	str	r3, [sp, #4]
 8014d5e:	9400      	str	r4, [sp, #0]
 8014d60:	4613      	mov	r3, r2
 8014d62:	4632      	mov	r2, r6
 8014d64:	f7ff f99d 	bl	80140a2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 8014d68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7f3 ff6f 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014d72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7f3 ff6a 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014d7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7f3 ff65 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014d86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7f3 ff60 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8014d90:	e010      	b.n	8014db4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x244>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	695c      	ldr	r4, [r3, #20]
 8014d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014d9a:	781b      	ldrb	r3, [r3, #0]
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7f0 f815 	bl	8004dcc <TfLiteTypeGetName>
 8014da2:	4602      	mov	r2, r0
 8014da4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	4905      	ldr	r1, [pc, #20]	; (8014dc0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x250>)
 8014dac:	68f8      	ldr	r0, [r7, #12]
 8014dae:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 8014db0:	2301      	movs	r3, #1
 8014db2:	e000      	b.n	8014db6 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x246>
  }

  return kTfLiteOk;
 8014db4:	2300      	movs	r3, #0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dc0:	0804ca7c 	.word	0x0804ca7c

08014dc4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 8014dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dc6:	b0af      	sub	sp, #188	; 0xbc
 8014dc8:	af06      	add	r7, sp, #24
 8014dca:	60f8      	str	r0, [r7, #12]
 8014dcc:	60b9      	str	r1, [r7, #8]
 8014dce:	603b      	str	r3, [r7, #0]
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 8014dd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014dd8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8014ddc:	79fb      	ldrb	r3, [r7, #7]
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fc ff24 	bl	8011c2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 8014de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 8014de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dea:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8014dec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014df0:	6839      	ldr	r1, [r7, #0]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7f3 ffa6 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8014df8:	6838      	ldr	r0, [r7, #0]
 8014dfa:	f7f7 fc45 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8014dfe:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 8014e00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e04:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7f3 ff9b 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8014e0e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8014e12:	f7f7 fc39 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8014e16:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8014e18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014e1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7f3 ff8f 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8014e26:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014e2a:	f7f7 fc2d 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8014e2e:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8014e30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014e34:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7f3 ff83 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8014e3e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8014e42:	f7f7 fc32 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8014e46:	4603      	mov	r3, r0
 8014e48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014e4c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014e50:	f107 0010 	add.w	r0, r7, #16
 8014e54:	9304      	str	r3, [sp, #16]
 8014e56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014e5a:	9303      	str	r3, [sp, #12]
 8014e5c:	9502      	str	r5, [sp, #8]
 8014e5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014e62:	9301      	str	r3, [sp, #4]
 8014e64:	9400      	str	r4, [sp, #0]
 8014e66:	4613      	mov	r3, r2
 8014e68:	4632      	mov	r2, r6
 8014e6a:	f7fe ffb3 	bl	8013dd4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8014e6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014e72:	4618      	mov	r0, r3
 8014e74:	f7f3 feec 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8014e78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7f3 fee7 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 8014e82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7f3 fee2 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8014e8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7f3 fedd 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	37a4      	adds	r7, #164	; 0xa4
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ea0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014ea0:	b590      	push	{r4, r7, lr}
 8014ea2:	b08d      	sub	sp, #52	; 0x34
 8014ea4:	af04      	add	r7, sp, #16
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	695b      	ldr	r3, [r3, #20]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d101      	bne.n	8014eb6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8014eb2:	f004 fa21 	bl	80192f8 <abort>
  const auto* params =
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	695b      	ldr	r3, [r3, #20]
 8014eba:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	6839      	ldr	r1, [r7, #0]
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7f7 faf2 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014ec6:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8014ec8:	2201      	movs	r2, #1
 8014eca:	6839      	ldr	r1, [r7, #0]
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f7f7 faec 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014ed2:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8014ed4:	2202      	movs	r2, #2
 8014ed6:	6839      	ldr	r1, [r7, #0]
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f7fb f85b 	bl	800ff94 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8014ede:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	6878      	ldr	r0, [r7, #4]
 8014ee6:	f7f7 faf6 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014eea:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	691b      	ldr	r3, [r3, #16]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d101      	bne.n	8014ef8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 8014ef4:	f004 fa00 	bl	80192f8 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	691b      	ldr	r3, [r3, #16]
 8014efc:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8014efe:	69bb      	ldr	r3, [r7, #24]
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	2b09      	cmp	r3, #9
 8014f04:	d015      	beq.n	8014f32 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 8014f06:	2b09      	cmp	r3, #9
 8014f08:	dc2f      	bgt.n	8014f6a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 8014f0a:	2b01      	cmp	r3, #1
 8014f0c:	d002      	beq.n	8014f14 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 8014f0e:	2b03      	cmp	r3, #3
 8014f10:	d01d      	beq.n	8014f4e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 8014f12:	e02a      	b.n	8014f6a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	781a      	ldrb	r2, [r3, #0]
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	9302      	str	r3, [sp, #8]
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	9301      	str	r3, [sp, #4]
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7ff ff4b 	bl	8014dc4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 8014f2e:	4603      	mov	r3, r0
                       output);
 8014f30:	e029      	b.n	8014f86 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	9302      	str	r3, [sp, #8]
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	9301      	str	r3, [sp, #4]
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	6839      	ldr	r1, [r7, #0]
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f7ff fbab 	bl	80146a0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 8014f4a:	4603      	mov	r3, r0
                               output);
 8014f4c:	e01b      	b.n	8014f86 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	9302      	str	r3, [sp, #8]
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	9301      	str	r3, [sp, #4]
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	68ba      	ldr	r2, [r7, #8]
 8014f5e:	6839      	ldr	r1, [r7, #0]
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f7ff fe05 	bl	8014b70 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 8014f66:	4603      	mov	r3, r0
 8014f68:	e00d      	b.n	8014f86 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	695c      	ldr	r4, [r3, #20]
 8014f6e:	69bb      	ldr	r3, [r7, #24]
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7ef ff2a 	bl	8004dcc <TfLiteTypeGetName>
 8014f78:	4602      	mov	r2, r0
 8014f7a:	69bb      	ldr	r3, [r7, #24]
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	4904      	ldr	r1, [pc, #16]	; (8014f90 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014f84:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	3724      	adds	r7, #36	; 0x24
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd90      	pop	{r4, r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	0804ca7c 	.word	0x0804ca7c

08014f94 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
 8014f94:	b4b0      	push	{r4, r5, r7}
 8014f96:	b083      	sub	sp, #12
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	4a07      	ldr	r2, [pc, #28]	; (8014fbc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x28>)
 8014fa0:	461c      	mov	r4, r3
 8014fa2:	4615      	mov	r5, r2
 8014fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bcb0      	pop	{r4, r5, r7}
 8014fb8:	4770      	bx	lr
 8014fba:	bf00      	nop
 8014fbc:	0804ca98 	.word	0x0804ca98

08014fc0 <_ZN6tflite13reference_ops14MulElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>:

// Element-wise mul that can often be used for inner loop of broadcast Mul as
// well as the non-broadcast Mul.
inline void MulElementwise(int size, const ArithmeticParams& params,
                           const uint8* input1_data, const uint8* input2_data,
                           uint8* output_data) {
 8014fc0:	b590      	push	{r4, r7, lr}
 8014fc2:	b08b      	sub	sp, #44	; 0x2c
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	60f8      	str	r0, [r7, #12]
 8014fc8:	60b9      	str	r1, [r7, #8]
 8014fca:	607a      	str	r2, [r7, #4]
 8014fcc:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < size; ++i) {
 8014fce:	2300      	movs	r3, #0
 8014fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8014fd2:	e03b      	b.n	801504c <_ZN6tflite13reference_ops14MulElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x8c>
    const int32 input1_val = params.input1_offset + input1_data[i];
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fda:	6879      	ldr	r1, [r7, #4]
 8014fdc:	440a      	add	r2, r1
 8014fde:	7812      	ldrb	r2, [r2, #0]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	623b      	str	r3, [r7, #32]
    const int32 input2_val = params.input2_offset + input2_data[i];
 8014fe4:	68bb      	ldr	r3, [r7, #8]
 8014fe6:	689b      	ldr	r3, [r3, #8]
 8014fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fea:	6839      	ldr	r1, [r7, #0]
 8014fec:	440a      	add	r2, r1
 8014fee:	7812      	ldrb	r2, [r2, #0]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	61fb      	str	r3, [r7, #28]
    const int32 unclamped_result =
        params.output_offset +
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	68dc      	ldr	r4, [r3, #12]
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8014ff8:	6a3b      	ldr	r3, [r7, #32]
 8014ffa:	69fa      	ldr	r2, [r7, #28]
 8014ffc:	fb02 f003 	mul.w	r0, r2, r3
                                      params.output_multiplier,
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	6919      	ldr	r1, [r3, #16]
                                      params.output_shift);
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	695b      	ldr	r3, [r3, #20]
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8015008:	461a      	mov	r2, r3
 801500a:	f7f9 fc0d 	bl	800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801500e:	4603      	mov	r3, r0
        params.output_offset +
 8015010:	4423      	add	r3, r4
                                      params.output_shift);
 8015012:	617b      	str	r3, [r7, #20]
    const int32 clamped_output =
        std::min(params.quantized_activation_max,
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	f103 0430 	add.w	r4, r3, #48	; 0x30
                 std::max(params.quantized_activation_min, unclamped_result));
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	332c      	adds	r3, #44	; 0x2c
        std::min(params.quantized_activation_max,
 801501e:	f107 0214 	add.w	r2, r7, #20
 8015022:	4611      	mov	r1, r2
 8015024:	4618      	mov	r0, r3
 8015026:	f7f3 fdac 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 801502a:	4603      	mov	r3, r0
 801502c:	4619      	mov	r1, r3
 801502e:	4620      	mov	r0, r4
 8015030:	f7f3 fdbb 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 8015034:	4603      	mov	r3, r0
                 std::max(params.quantized_activation_min, unclamped_result));
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	61bb      	str	r3, [r7, #24]
    output_data[i] = static_cast<uint8>(clamped_output);
 801503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801503e:	4413      	add	r3, r2
 8015040:	69ba      	ldr	r2, [r7, #24]
 8015042:	b2d2      	uxtb	r2, r2
 8015044:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 8015046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015048:	3301      	adds	r3, #1
 801504a:	627b      	str	r3, [r7, #36]	; 0x24
 801504c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	429a      	cmp	r2, r3
 8015052:	dbbf      	blt.n	8014fd4 <_ZN6tflite13reference_ops14MulElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x14>
  }
}
 8015054:	bf00      	nop
 8015056:	bf00      	nop
 8015058:	372c      	adds	r7, #44	; 0x2c
 801505a:	46bd      	mov	sp, r7
 801505c:	bd90      	pop	{r4, r7, pc}

0801505e <_ZN6tflite13reference_ops3MulERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Mul(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
 801505e:	b580      	push	{r7, lr}
 8015060:	b088      	sub	sp, #32
 8015062:	af02      	add	r7, sp, #8
 8015064:	60f8      	str	r0, [r7, #12]
 8015066:	60b9      	str	r1, [r7, #8]
 8015068:	607a      	str	r2, [r7, #4]
 801506a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015074:	429a      	cmp	r2, r3
 8015076:	dd01      	ble.n	801507c <_ZN6tflite13reference_ops3MulERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1e>
 8015078:	f004 f93e 	bl	80192f8 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
 801507c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801507e:	6839      	ldr	r1, [r7, #0]
 8015080:	68b8      	ldr	r0, [r7, #8]
 8015082:	f7f7 fce2 	bl	800ca4a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
 8015086:	6178      	str	r0, [r7, #20]

  MulElementwise(flat_size, params, input1_data, input2_data, output_data);
 8015088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508a:	9300      	str	r3, [sp, #0]
 801508c:	6a3b      	ldr	r3, [r7, #32]
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	68f9      	ldr	r1, [r7, #12]
 8015092:	6978      	ldr	r0, [r7, #20]
 8015094:	f7ff ff94 	bl	8014fc0 <_ZN6tflite13reference_ops14MulElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>
}
 8015098:	bf00      	nop
 801509a:	3718      	adds	r7, #24
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
 80150a0:	b590      	push	{r4, r7, lr}
 80150a2:	b0a5      	sub	sp, #148	; 0x94
 80150a4:	af02      	add	r7, sp, #8
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	607a      	str	r2, [r7, #4]
 80150ac:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 80150ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150b2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	68b8      	ldr	r0, [r7, #8]
 80150ba:	f7f7 fdd1 	bl	800cc60 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 80150be:	f107 0314 	add.w	r3, r7, #20
 80150c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80150c6:	2104      	movs	r1, #4
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7f7 fc0f 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 80150ce:	2300      	movs	r3, #0
 80150d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80150d4:	e0a8      	b.n	8015228 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x188>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 80150d6:	2300      	movs	r3, #0
 80150d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80150dc:	e08e      	b.n	80151fc <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x15c>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 80150de:	2300      	movs	r3, #0
 80150e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80150e2:	e076      	b.n	80151d2 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x132>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80150e4:	2300      	movs	r3, #0
 80150e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80150e8:	e061      	b.n	80151ae <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x10e>
          const int32 input1_val =
              params.input1_offset +
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 80150ee:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80150f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80150f4:	9300      	str	r3, [sp, #0]
 80150f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80150f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80150fc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015100:	f7f7 fcf0 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8015104:	4603      	mov	r3, r0
 8015106:	461a      	mov	r2, r3
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	4413      	add	r3, r2
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	4423      	add	r3, r4
 8015110:	677b      	str	r3, [r7, #116]	; 0x74
          const int32 input2_val =
              params.input2_offset +
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 8015116:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801511a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801511c:	9300      	str	r3, [sp, #0]
 801511e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015120:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015124:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015128:	f7f7 fcdc 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015134:	4413      	add	r3, r2
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	4423      	add	r3, r4
 801513a:	673b      	str	r3, [r7, #112]	; 0x70
          const int32 unclamped_result =
              params.output_offset +
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	68dc      	ldr	r4, [r3, #12]
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8015140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015142:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015144:	fb02 f003 	mul.w	r0, r2, r3
                                            params.output_multiplier,
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	6919      	ldr	r1, [r3, #16]
                                            params.output_shift);
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8015150:	461a      	mov	r2, r3
 8015152:	f7f9 fb69 	bl	800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8015156:	4603      	mov	r3, r0
              params.output_offset +
 8015158:	4423      	add	r3, r4
                                            params.output_shift);
 801515a:	613b      	str	r3, [r7, #16]
          const int32 clamped_output = std::min(
              params.quantized_activation_max,
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f103 0430 	add.w	r4, r3, #48	; 0x30
              std::max(params.quantized_activation_min, unclamped_result));
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	332c      	adds	r3, #44	; 0x2c
          const int32 clamped_output = std::min(
 8015166:	f107 0210 	add.w	r2, r7, #16
 801516a:	4611      	mov	r1, r2
 801516c:	4618      	mov	r0, r3
 801516e:	f7f3 fd08 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8015172:	4603      	mov	r3, r0
 8015174:	4619      	mov	r1, r3
 8015176:	4620      	mov	r0, r4
 8015178:	f7f3 fd17 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 801517c:	4603      	mov	r3, r0
              std::max(params.quantized_activation_min, unclamped_result));
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	66fb      	str	r3, [r7, #108]	; 0x6c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 8015182:	f107 0014 	add.w	r0, r7, #20
 8015186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015188:	9300      	str	r3, [sp, #0]
 801518a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801518c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015190:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015194:	f7f7 fc01 	bl	800c99a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015198:	4603      	mov	r3, r0
 801519a:	461a      	mov	r2, r3
 801519c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80151a0:	4413      	add	r3, r2
 80151a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80151a4:	b2d2      	uxtb	r2, r2
 80151a6:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80151a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151aa:	3301      	adds	r3, #1
 80151ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80151ae:	f107 0314 	add.w	r3, r7, #20
 80151b2:	2103      	movs	r1, #3
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7f7 f9d7 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80151ba:	4602      	mov	r2, r0
 80151bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151be:	4293      	cmp	r3, r2
 80151c0:	bfb4      	ite	lt
 80151c2:	2301      	movlt	r3, #1
 80151c4:	2300      	movge	r3, #0
 80151c6:	b2db      	uxtb	r3, r3
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d18e      	bne.n	80150ea <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 80151cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80151ce:	3301      	adds	r3, #1
 80151d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80151d2:	f107 0314 	add.w	r3, r7, #20
 80151d6:	2102      	movs	r1, #2
 80151d8:	4618      	mov	r0, r3
 80151da:	f7f7 f9c5 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 80151de:	4602      	mov	r2, r0
 80151e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80151e2:	4293      	cmp	r3, r2
 80151e4:	bfb4      	ite	lt
 80151e6:	2301      	movlt	r3, #1
 80151e8:	2300      	movge	r3, #0
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	f47f af79 	bne.w	80150e4 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x44>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 80151f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80151f6:	3301      	adds	r3, #1
 80151f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80151fc:	f107 0314 	add.w	r3, r7, #20
 8015200:	2101      	movs	r1, #1
 8015202:	4618      	mov	r0, r3
 8015204:	f7f7 f9b0 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015208:	4602      	mov	r2, r0
 801520a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801520e:	4293      	cmp	r3, r2
 8015210:	bfb4      	ite	lt
 8015212:	2301      	movlt	r3, #1
 8015214:	2300      	movge	r3, #0
 8015216:	b2db      	uxtb	r3, r3
 8015218:	2b00      	cmp	r3, #0
 801521a:	f47f af60 	bne.w	80150de <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3e>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 801521e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015222:	3301      	adds	r3, #1
 8015224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015228:	f107 0314 	add.w	r3, r7, #20
 801522c:	2100      	movs	r1, #0
 801522e:	4618      	mov	r0, r3
 8015230:	f7f7 f99a 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015234:	4602      	mov	r2, r0
 8015236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801523a:	4293      	cmp	r3, r2
 801523c:	bfb4      	ite	lt
 801523e:	2301      	movlt	r3, #1
 8015240:	2300      	movge	r3, #0
 8015242:	b2db      	uxtb	r3, r3
 8015244:	2b00      	cmp	r3, #0
 8015246:	f47f af46 	bne.w	80150d6 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
 801524a:	f107 0314 	add.w	r3, r7, #20
 801524e:	4618      	mov	r0, r3
 8015250:	f7f3 fcfe 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015254:	378c      	adds	r7, #140	; 0x8c
 8015256:	46bd      	mov	sp, r7
 8015258:	bd90      	pop	{r4, r7, pc}
	...

0801525c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>:
  int32_t output_multiplier;
  int output_shift;
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteMulParams* params, OpData* data) {
 801525c:	b5b0      	push	{r4, r5, r7, lr}
 801525e:	b08e      	sub	sp, #56	; 0x38
 8015260:	af04      	add	r7, sp, #16
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
 8015268:	603b      	str	r3, [r7, #0]
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
 801526a:	2200      	movs	r2, #0
 801526c:	68b9      	ldr	r1, [r7, #8]
 801526e:	68f8      	ldr	r0, [r7, #12]
 8015270:	f7f7 f91b 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015274:	6278      	str	r0, [r7, #36]	; 0x24
  const TfLiteTensor* input2 = GetInput(context, node, kInput2Tensor);
 8015276:	2201      	movs	r2, #1
 8015278:	68b9      	ldr	r1, [r7, #8]
 801527a:	68f8      	ldr	r0, [r7, #12]
 801527c:	f7f7 f915 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015280:	6238      	str	r0, [r7, #32]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8015282:	2200      	movs	r2, #0
 8015284:	68b9      	ldr	r1, [r7, #8]
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f7f7 f925 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801528c:	61f8      	str	r0, [r7, #28]

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
 801528e:	68b8      	ldr	r0, [r7, #8]
 8015290:	f7f7 fa5f 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8015294:	4603      	mov	r3, r0
 8015296:	2b02      	cmp	r3, #2
 8015298:	bf14      	ite	ne
 801529a:	2301      	movne	r3, #1
 801529c:	2300      	moveq	r3, #0
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d013      	beq.n	80152cc <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x70>
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	695c      	ldr	r4, [r3, #20]
 80152a8:	68b8      	ldr	r0, [r7, #8]
 80152aa:	f7f7 fa52 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2202      	movs	r2, #2
 80152b2:	9203      	str	r2, [sp, #12]
 80152b4:	9302      	str	r3, [sp, #8]
 80152b6:	4b45      	ldr	r3, [pc, #276]	; (80153cc <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x170>)
 80152b8:	9301      	str	r3, [sp, #4]
 80152ba:	4b45      	ldr	r3, [pc, #276]	; (80153d0 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x174>)
 80152bc:	9300      	str	r3, [sp, #0]
 80152be:	2331      	movs	r3, #49	; 0x31
 80152c0:	4a44      	ldr	r2, [pc, #272]	; (80153d4 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x178>)
 80152c2:	4945      	ldr	r1, [pc, #276]	; (80153d8 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x17c>)
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	47a0      	blx	r4
 80152c8:	2301      	movs	r3, #1
 80152ca:	e07a      	b.n	80153c2 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x166>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80152cc:	68b8      	ldr	r0, [r7, #8]
 80152ce:	f7f7 fa4d 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b01      	cmp	r3, #1
 80152d6:	bf14      	ite	ne
 80152d8:	2301      	movne	r3, #1
 80152da:	2300      	moveq	r3, #0
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d013      	beq.n	801530a <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0xae>
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	695c      	ldr	r4, [r3, #20]
 80152e6:	68b8      	ldr	r0, [r7, #8]
 80152e8:	f7f7 fa40 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2201      	movs	r2, #1
 80152f0:	9203      	str	r2, [sp, #12]
 80152f2:	9302      	str	r3, [sp, #8]
 80152f4:	4b39      	ldr	r3, [pc, #228]	; (80153dc <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x180>)
 80152f6:	9301      	str	r3, [sp, #4]
 80152f8:	4b39      	ldr	r3, [pc, #228]	; (80153e0 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x184>)
 80152fa:	9300      	str	r3, [sp, #0]
 80152fc:	2332      	movs	r3, #50	; 0x32
 80152fe:	4a35      	ldr	r2, [pc, #212]	; (80153d4 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x178>)
 8015300:	4935      	ldr	r1, [pc, #212]	; (80153d8 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x17c>)
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	47a0      	blx	r4
 8015306:	2301      	movs	r3, #1
 8015308:	e05b      	b.n	80153c2 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x166>

  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);
 801530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530c:	781a      	ldrb	r2, [r3, #0]
 801530e:	6a3b      	ldr	r3, [r7, #32]
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	429a      	cmp	r2, r3
 8015314:	d01a      	beq.n	801534c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0xf0>
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	695c      	ldr	r4, [r3, #20]
 801531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	4618      	mov	r0, r3
 8015320:	f7ef fd54 	bl	8004dcc <TfLiteTypeGetName>
 8015324:	4605      	mov	r5, r0
 8015326:	6a3b      	ldr	r3, [r7, #32]
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	4618      	mov	r0, r3
 801532c:	f7ef fd4e 	bl	8004dcc <TfLiteTypeGetName>
 8015330:	4603      	mov	r3, r0
 8015332:	9303      	str	r3, [sp, #12]
 8015334:	9502      	str	r5, [sp, #8]
 8015336:	4b2b      	ldr	r3, [pc, #172]	; (80153e4 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x188>)
 8015338:	9301      	str	r3, [sp, #4]
 801533a:	4b2b      	ldr	r3, [pc, #172]	; (80153e8 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x18c>)
 801533c:	9300      	str	r3, [sp, #0]
 801533e:	2334      	movs	r3, #52	; 0x34
 8015340:	4a24      	ldr	r2, [pc, #144]	; (80153d4 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x178>)
 8015342:	492a      	ldr	r1, [pc, #168]	; (80153ec <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x190>)
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	47a0      	blx	r4
 8015348:	2301      	movs	r3, #1
 801534a:	e03a      	b.n	80153c2 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x166>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	2b03      	cmp	r3, #3
 8015352:	d003      	beq.n	801535c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x100>
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	2b09      	cmp	r3, #9
 801535a:	d131      	bne.n	80153c0 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x164>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	7819      	ldrb	r1, [r3, #0]
 8015360:	683a      	ldr	r2, [r7, #0]
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	3304      	adds	r3, #4
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	4613      	mov	r3, r2
 801536a:	69fa      	ldr	r2, [r7, #28]
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f7f3 fb9d 	bl	8008aac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8015372:	4603      	mov	r3, r0
 8015374:	76fb      	strb	r3, [r7, #27]
 8015376:	7efb      	ldrb	r3, [r7, #27]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d001      	beq.n	8015380 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x124>
 801537c:	7efb      	ldrb	r3, [r7, #27]
 801537e:	e020      	b.n	80153c2 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x166>
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));

    double real_multiplier =
        input1->params.scale * input2->params.scale / output->params.scale;
 8015380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015382:	ed93 7a03 	vldr	s14, [r3, #12]
 8015386:	6a3b      	ldr	r3, [r7, #32]
 8015388:	edd3 7a03 	vldr	s15, [r3, #12]
 801538c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	edd3 7a03 	vldr	s15, [r3, #12]
 8015396:	eec7 6a27 	vdiv.f32	s13, s14, s15
    double real_multiplier =
 801539a:	ee16 0a90 	vmov	r0, s13
 801539e:	f7eb f8db 	bl	8000558 <__aeabi_f2d>
 80153a2:	4602      	mov	r2, r0
 80153a4:	460b      	mov	r3, r1
 80153a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	f103 0208 	add.w	r2, r3, #8
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	330c      	adds	r3, #12
 80153b4:	4619      	mov	r1, r3
 80153b6:	4610      	mov	r0, r2
 80153b8:	ed97 0b04 	vldr	d0, [r7, #16]
 80153bc:	f7f2 ff4c 	bl	8008258 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);
  }

  return kTfLiteOk;
 80153c0:	2300      	movs	r3, #0
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3728      	adds	r7, #40	; 0x28
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bdb0      	pop	{r4, r5, r7, pc}
 80153ca:	bf00      	nop
 80153cc:	0804ced0 	.word	0x0804ced0
 80153d0:	0804ced4 	.word	0x0804ced4
 80153d4:	0804ce08 	.word	0x0804ce08
 80153d8:	0804ceb4 	.word	0x0804ceb4
 80153dc:	0804cee4 	.word	0x0804cee4
 80153e0:	0804cee8 	.word	0x0804cee8
 80153e4:	0804cf18 	.word	0x0804cf18
 80153e8:	0804cf28 	.word	0x0804cf28
 80153ec:	0804cefc 	.word	0x0804cefc

080153f0 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
}

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteMulParams* params, OpData* data,
                   const TfLiteTensor* input1, const TfLiteTensor* input2,
                   TfLiteTensor* output) {
 80153f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153f4:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80153f8:	af08      	add	r7, sp, #32
 80153fa:	f507 74f4 	add.w	r4, r7, #488	; 0x1e8
 80153fe:	f5a4 74e2 	sub.w	r4, r4, #452	; 0x1c4
 8015402:	6020      	str	r0, [r4, #0]
 8015404:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 8015408:	f5a0 70e4 	sub.w	r0, r0, #456	; 0x1c8
 801540c:	6001      	str	r1, [r0, #0]
 801540e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8015412:	f5a1 71e6 	sub.w	r1, r1, #460	; 0x1cc
 8015416:	600a      	str	r2, [r1, #0]
 8015418:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801541c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8015420:	6013      	str	r3, [r2, #0]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8) {
 8015422:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	2b09      	cmp	r3, #9
 801542a:	d005      	beq.n	8015438 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x48>
 801542c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8015430:	781b      	ldrb	r3, [r3, #0]
 8015432:	2b03      	cmp	r3, #3
 8015434:	f040 81be 	bne.w	80157b4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x3c4>
    tflite::ArithmeticParams op_params;
    SetActivationParams(data->output_activation_min,
 8015438:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801543c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	6818      	ldr	r0, [r3, #0]
 8015444:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015448:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	685b      	ldr	r3, [r3, #4]
 8015450:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015454:	4619      	mov	r1, r3
 8015456:	f7fc fc3f 	bl	8011cd8 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>
                        data->output_activation_max, &op_params);
    op_params.input1_offset = -input1->params.zero_point;
 801545a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801545e:	691b      	ldr	r3, [r3, #16]
 8015460:	425a      	negs	r2, r3
 8015462:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015466:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801546a:	605a      	str	r2, [r3, #4]
    op_params.input2_offset = -input2->params.zero_point;
 801546c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015470:	691b      	ldr	r3, [r3, #16]
 8015472:	425a      	negs	r2, r3
 8015474:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015478:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801547c:	609a      	str	r2, [r3, #8]
    op_params.output_offset = output->params.zero_point;
 801547e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8015482:	691a      	ldr	r2, [r3, #16]
 8015484:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015488:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801548c:	60da      	str	r2, [r3, #12]
    op_params.output_multiplier = data->output_multiplier;
 801548e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015492:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	689a      	ldr	r2, [r3, #8]
 801549a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801549e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80154a2:	611a      	str	r2, [r3, #16]
    op_params.output_shift = data->output_shift;
 80154a4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80154a8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	68da      	ldr	r2, [r3, #12]
 80154b0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80154b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80154b8:	615a      	str	r2, [r3, #20]
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 80154ba:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80154be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80154c2:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80154c6:	4618      	mov	r0, r3
 80154c8:	f7f3 fc3c 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80154cc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80154d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80154d4:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80154d8:	4618      	mov	r0, r3
 80154da:	f7f3 fc33 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
 80154de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80154e2:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80154e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7fc f9f9 	bl	80118e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
 80154f0:	4603      	mov	r3, r0
 80154f2:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 80154f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7f3 fba8 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015500:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015504:	4618      	mov	r0, r3
 8015506:	f7f3 fba3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  type::opname(op_params, GetTensorShape(input1),                    \
               GetTensorData<dtype>(input1), GetTensorShape(input2), \
               GetTensorData<dtype>(input2), GetTensorShape(output), \
               GetTensorData<dtype>(output));

    if (output->type == kTfLiteInt8) {
 801550a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	2b09      	cmp	r3, #9
 8015512:	f040 80c0 	bne.w	8015696 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x2a6>
      if (need_broadcast) {
 8015516:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 801551a:	2b00      	cmp	r3, #0
 801551c:	d046      	beq.n	80155ac <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x1bc>
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
 801551e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015522:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015526:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 801552a:	4618      	mov	r0, r3
 801552c:	f7f3 fc0a 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015530:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8015534:	f7f7 f8ca 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8015538:	4605      	mov	r5, r0
 801553a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801553e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015542:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8015546:	4618      	mov	r0, r3
 8015548:	f7f3 fbfc 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801554c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8015550:	f7f7 f8bc 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8015554:	4604      	mov	r4, r0
 8015556:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801555a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801555e:	4618      	mov	r0, r3
 8015560:	f7f3 fbf0 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015564:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8015568:	f7f7 f8c1 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801556c:	4603      	mov	r3, r0
 801556e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8015572:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8015576:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801557a:	9302      	str	r3, [sp, #8]
 801557c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8015580:	9301      	str	r3, [sp, #4]
 8015582:	9400      	str	r4, [sp, #0]
 8015584:	4613      	mov	r3, r2
 8015586:	462a      	mov	r2, r5
 8015588:	f000 fa72 	bl	8015a70 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
 801558c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8015590:	4618      	mov	r0, r3
 8015592:	f7f3 fb5d 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015596:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801559a:	4618      	mov	r0, r3
 801559c:	f7f3 fb58 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80155a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7f3 fb53 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
      }
    }
#undef TF_LITE_MUL
  }
}
 80155aa:	e103      	b.n	80157b4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x3c4>
        arm_elementwise_mul_s8(
 80155ac:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80155b0:	f7f7 f88c 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80155b4:	4680      	mov	r8, r0
 80155b6:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80155ba:	f7f7 f887 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80155be:	4681      	mov	r9, r0
 80155c0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80155c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80155c8:	685b      	ldr	r3, [r3, #4]
 80155ca:	617b      	str	r3, [r7, #20]
 80155cc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80155d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80155d4:	6899      	ldr	r1, [r3, #8]
 80155d6:	6139      	str	r1, [r7, #16]
 80155d8:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80155dc:	f7f7 f887 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80155e0:	60f8      	str	r0, [r7, #12]
 80155e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80155e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80155ea:	68dc      	ldr	r4, [r3, #12]
 80155ec:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80155f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80155f4:	691d      	ldr	r5, [r3, #16]
            op_params.output_multiplier, op_params.output_shift,
 80155f6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80155fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80155fe:	695e      	ldr	r6, [r3, #20]
        arm_elementwise_mul_s8(
 8015600:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015604:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801560a:	60ba      	str	r2, [r7, #8]
 801560c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015610:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015614:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8015616:	6079      	str	r1, [r7, #4]
            MatchingElementsSize(GetTensorShape(input1), GetTensorShape(input2),
 8015618:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801561c:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8015620:	4618      	mov	r0, r3
 8015622:	f7f3 fb8f 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015626:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801562a:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 801562e:	4618      	mov	r0, r3
 8015630:	f7f3 fb88 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                                 GetTensorShape(output)));
 8015634:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8015638:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801563c:	4618      	mov	r0, r3
 801563e:	f7f3 fb81 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            MatchingElementsSize(GetTensorShape(input1), GetTensorShape(input2),
 8015642:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8015646:	f507 7192 	add.w	r1, r7, #292	; 0x124
 801564a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801564e:	4618      	mov	r0, r3
 8015650:	f7fa fc1e 	bl	800fe90 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 8015654:	4603      	mov	r3, r0
        arm_elementwise_mul_s8(
 8015656:	9306      	str	r3, [sp, #24]
 8015658:	6879      	ldr	r1, [r7, #4]
 801565a:	9105      	str	r1, [sp, #20]
 801565c:	68ba      	ldr	r2, [r7, #8]
 801565e:	9204      	str	r2, [sp, #16]
 8015660:	9603      	str	r6, [sp, #12]
 8015662:	9502      	str	r5, [sp, #8]
 8015664:	9401      	str	r4, [sp, #4]
 8015666:	68f8      	ldr	r0, [r7, #12]
 8015668:	9000      	str	r0, [sp, #0]
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	697a      	ldr	r2, [r7, #20]
 801566e:	4649      	mov	r1, r9
 8015670:	4640      	mov	r0, r8
 8015672:	f002 faaf 	bl	8017bd4 <arm_elementwise_mul_s8>
                                 GetTensorShape(output)));
 8015676:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801567a:	4618      	mov	r0, r3
 801567c:	f7f3 fae8 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
            MatchingElementsSize(GetTensorShape(input1), GetTensorShape(input2),
 8015680:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8015684:	4618      	mov	r0, r3
 8015686:	f7f3 fae3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 801568a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801568e:	4618      	mov	r0, r3
 8015690:	f7f3 fade 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015694:	e08e      	b.n	80157b4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x3c4>
    } else if (output->type == kTfLiteUInt8) {
 8015696:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801569a:	781b      	ldrb	r3, [r3, #0]
 801569c:	2b03      	cmp	r3, #3
 801569e:	f040 8089 	bne.w	80157b4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x3c4>
      if (need_broadcast) {
 80156a2:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d042      	beq.n	8015730 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x340>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
 80156aa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80156ae:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7f3 fb46 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80156b8:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80156bc:	f7f6 ff21 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80156c0:	4605      	mov	r5, r0
 80156c2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80156c6:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7f3 fb3a 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80156d0:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80156d4:	f7f6 ff15 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80156d8:	4604      	mov	r4, r0
 80156da:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80156de:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7f3 fb2e 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80156e8:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80156ec:	f7f6 ff1a 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80156f0:	4603      	mov	r3, r0
 80156f2:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 80156f6:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80156fa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80156fe:	9302      	str	r3, [sp, #8]
 8015700:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8015704:	9301      	str	r3, [sp, #4]
 8015706:	9400      	str	r4, [sp, #0]
 8015708:	4613      	mov	r3, r2
 801570a:	462a      	mov	r2, r5
 801570c:	f7ff fcc8 	bl	80150a0 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8015710:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8015714:	4618      	mov	r0, r3
 8015716:	f7f3 fa9b 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 801571a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801571e:	4618      	mov	r0, r3
 8015720:	f7f3 fa96 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015724:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8015728:	4618      	mov	r0, r3
 801572a:	f7f3 fa91 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801572e:	e041      	b.n	80157b4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x3c4>
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
 8015730:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8015734:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8015738:	4618      	mov	r0, r3
 801573a:	f7f3 fb03 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801573e:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8015742:	f7f6 fede 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8015746:	4605      	mov	r5, r0
 8015748:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801574c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8015750:	4618      	mov	r0, r3
 8015752:	f7f3 faf7 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015756:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 801575a:	f7f6 fed2 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801575e:	4604      	mov	r4, r0
 8015760:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8015764:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8015768:	4618      	mov	r0, r3
 801576a:	f7f3 faeb 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801576e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8015772:	f7f6 fed7 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8015776:	4603      	mov	r3, r0
 8015778:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 801577c:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8015780:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8015784:	9302      	str	r3, [sp, #8]
 8015786:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801578a:	9301      	str	r3, [sp, #4]
 801578c:	9400      	str	r4, [sp, #0]
 801578e:	4613      	mov	r3, r2
 8015790:	462a      	mov	r2, r5
 8015792:	f7ff fc64 	bl	801505e <_ZN6tflite13reference_ops3MulERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8015796:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801579a:	4618      	mov	r0, r3
 801579c:	f7f3 fa58 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80157a0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7f3 fa53 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80157aa:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f3 fa4e 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80157b4:	bf00      	nop
 80157b6:	f507 77f6 	add.w	r7, r7, #492	; 0x1ec
 80157ba:	46bd      	mov	sp, r7
 80157bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080157c0 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteMulParams* params, OpData* data,
               const TfLiteTensor* input1, const TfLiteTensor* input2,
               TfLiteTensor* output) {
 80157c0:	b5b0      	push	{r4, r5, r7, lr}
 80157c2:	b0d6      	sub	sp, #344	; 0x158
 80157c4:	af04      	add	r7, sp, #16
 80157c6:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80157ca:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 80157ce:	6020      	str	r0, [r4, #0]
 80157d0:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80157d4:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80157d8:	6001      	str	r1, [r0, #0]
 80157da:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80157de:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80157e2:	600a      	str	r2, [r1, #0]
 80157e4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80157e8:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80157ec:	6013      	str	r3, [r2, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 80157ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80157f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80157fe:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8015802:	4618      	mov	r0, r3
 8015804:	f7fc fa12 	bl	8011c2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::ArithmeticParams op_params;
  SetActivationParams(output_activation_min, output_activation_max, &op_params);
 8015808:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801580c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8015810:	f107 0310 	add.w	r3, r7, #16
 8015814:	4618      	mov	r0, r3
 8015816:	eef0 0a47 	vmov.f32	s1, s14
 801581a:	eeb0 0a67 	vmov.f32	s0, s15
 801581e:	f7fc fa47 	bl	8011cb0 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>

  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
 8015822:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015826:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 801582a:	4618      	mov	r0, r3
 801582c:	f7f3 fa8a 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015830:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015834:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015838:	4618      	mov	r0, r3
 801583a:	f7f3 fa83 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
 801583e:	f107 0210 	add.w	r2, r7, #16
 8015842:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8015846:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801584a:	4618      	mov	r0, r3
 801584c:	f7fc f849 	bl	80118e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
 8015850:	4603      	mov	r3, r0
 8015852:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
 8015856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801585a:	4618      	mov	r0, r3
 801585c:	f7f3 f9f8 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015860:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015864:	4618      	mov	r0, r3
 8015866:	f7f3 f9f3 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::opname(op_params, GetTensorShape(input1),                    \
                        GetTensorData<float>(input1), GetTensorShape(input2), \
                        GetTensorData<float>(input2), GetTensorShape(output), \
                        GetTensorData<float>(output));

  if (need_broadcast) {
 801586a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 801586e:	2b00      	cmp	r3, #0
 8015870:	d042      	beq.n	80158f8 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x138>
    TF_LITE_MUL(BroadcastMul4DSlow);
 8015872:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015876:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 801587a:	4618      	mov	r0, r3
 801587c:	f7f3 fa62 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015880:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8015884:	f7f6 ff00 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8015888:	4605      	mov	r5, r0
 801588a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801588e:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015892:	4618      	mov	r0, r3
 8015894:	f7f3 fa56 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015898:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 801589c:	f7f6 fef4 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80158a0:	4604      	mov	r4, r0
 80158a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80158a6:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80158aa:	4618      	mov	r0, r3
 80158ac:	f7f3 fa4a 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80158b0:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 80158b4:	f7f6 fef9 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80158b8:	4603      	mov	r3, r0
 80158ba:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80158be:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80158c2:	f107 0010 	add.w	r0, r7, #16
 80158c6:	9302      	str	r3, [sp, #8]
 80158c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80158cc:	9301      	str	r3, [sp, #4]
 80158ce:	9400      	str	r4, [sp, #0]
 80158d0:	4613      	mov	r3, r2
 80158d2:	462a      	mov	r2, r5
 80158d4:	f000 f9c6 	bl	8015c64 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
 80158d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80158dc:	4618      	mov	r0, r3
 80158de:	f7f3 f9b7 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80158e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7f3 f9b2 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80158ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7f3 f9ad 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    TF_LITE_MUL(Mul);
  }
#undef TF_LITE_MUL
}
 80158f6:	e041      	b.n	801597c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x1bc>
    TF_LITE_MUL(Mul);
 80158f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80158fc:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8015900:	4618      	mov	r0, r3
 8015902:	f7f3 fa1f 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015906:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 801590a:	f7f6 febd 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801590e:	4605      	mov	r5, r0
 8015910:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8015914:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015918:	4618      	mov	r0, r3
 801591a:	f7f3 fa13 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801591e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8015922:	f7f6 feb1 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8015926:	4604      	mov	r4, r0
 8015928:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801592c:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8015930:	4618      	mov	r0, r3
 8015932:	f7f3 fa07 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8015936:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 801593a:	f7f6 feb6 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801593e:	4603      	mov	r3, r0
 8015940:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8015944:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8015948:	f107 0010 	add.w	r0, r7, #16
 801594c:	9302      	str	r3, [sp, #8]
 801594e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8015952:	9301      	str	r3, [sp, #4]
 8015954:	9400      	str	r4, [sp, #0]
 8015956:	4613      	mov	r3, r2
 8015958:	462a      	mov	r2, r5
 801595a:	f000 fa5b 	bl	8015e14 <_ZN6tflite13reference_ops3MulIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
 801595e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8015962:	4618      	mov	r0, r3
 8015964:	f7f3 f974 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015968:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801596c:	4618      	mov	r0, r3
 801596e:	f7f3 f96f 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015972:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8015976:	4618      	mov	r0, r3
 8015978:	f7f3 f96a 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801597c:	bf00      	nop
 801597e:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8015982:	46bd      	mov	sp, r7
 8015984:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015988 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015988:	b590      	push	{r4, r7, lr}
 801598a:	b08f      	sub	sp, #60	; 0x3c
 801598c:	af04      	add	r7, sp, #16
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	695b      	ldr	r3, [r3, #20]
 8015996:	627b      	str	r3, [r7, #36]	; 0x24
  OpData data;

  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
 8015998:	2200      	movs	r2, #0
 801599a:	6839      	ldr	r1, [r7, #0]
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f7f6 fd84 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80159a2:	6238      	str	r0, [r7, #32]
  const TfLiteTensor* input2 = GetInput(context, node, kInput2Tensor);
 80159a4:	2201      	movs	r2, #1
 80159a6:	6839      	ldr	r1, [r7, #0]
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f7f6 fd7e 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80159ae:	61f8      	str	r0, [r7, #28]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80159b0:	2200      	movs	r2, #0
 80159b2:	6839      	ldr	r1, [r7, #0]
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7f6 fd8e 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80159ba:	61b8      	str	r0, [r7, #24]

  CalculateOpData(context, node, params, &data);
 80159bc:	f107 0308 	add.w	r3, r7, #8
 80159c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f7ff fc49 	bl	801525c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>

  switch (input1->type) {
 80159ca:	6a3b      	ldr	r3, [r7, #32]
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	2b09      	cmp	r3, #9
 80159d0:	d005      	beq.n	80159de <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x56>
 80159d2:	2b09      	cmp	r3, #9
 80159d4:	dc21      	bgt.n	8015a1a <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d010      	beq.n	80159fc <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 80159da:	2b03      	cmp	r3, #3
 80159dc:	d11d      	bne.n	8015a1a <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      EvalQuantized(context, node, params, &data, input1, input2, output);
 80159de:	f107 0208 	add.w	r2, r7, #8
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	9302      	str	r3, [sp, #8]
 80159e6:	69fb      	ldr	r3, [r7, #28]
 80159e8:	9301      	str	r3, [sp, #4]
 80159ea:	6a3b      	ldr	r3, [r7, #32]
 80159ec:	9300      	str	r3, [sp, #0]
 80159ee:	4613      	mov	r3, r2
 80159f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159f2:	6839      	ldr	r1, [r7, #0]
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7ff fcfb 	bl	80153f0 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
      break;
 80159fa:	e01d      	b.n	8015a38 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, &data, input1, input2, output);
 80159fc:	f107 0208 	add.w	r2, r7, #8
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	9302      	str	r3, [sp, #8]
 8015a04:	69fb      	ldr	r3, [r7, #28]
 8015a06:	9301      	str	r3, [sp, #4]
 8015a08:	6a3b      	ldr	r3, [r7, #32]
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f7ff fed4 	bl	80157c0 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
      break;
 8015a18:	e00e      	b.n	8015a38 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	695c      	ldr	r4, [r3, #20]
 8015a1e:	6a3b      	ldr	r3, [r7, #32]
 8015a20:	781b      	ldrb	r3, [r3, #0]
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7ef f9d2 	bl	8004dcc <TfLiteTypeGetName>
 8015a28:	4602      	mov	r2, r0
 8015a2a:	6a3b      	ldr	r3, [r7, #32]
 8015a2c:	781b      	ldrb	r3, [r3, #0]
 8015a2e:	4905      	ldr	r1, [pc, #20]	; (8015a44 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	47a0      	blx	r4
                         TfLiteTypeGetName(input1->type), input1->type);
      return kTfLiteError;
 8015a34:	2301      	movs	r3, #1
 8015a36:	e000      	b.n	8015a3a <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  }

  return kTfLiteOk;
 8015a38:	2300      	movs	r3, #0
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	372c      	adds	r7, #44	; 0x2c
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd90      	pop	{r4, r7, pc}
 8015a42:	bf00      	nop
 8015a44:	0804cf38 	.word	0x0804cf38

08015a48 <_ZN6tflite3ops5micro12Register_MULEv>:
}  // namespace mul

TfLiteRegistration Register_MUL() {
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
  return {nullptr /* Init */, nullptr /* Free */, nullptr /* Prepare */,
          mul::Eval};
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	4618      	mov	r0, r3
 8015a54:	2320      	movs	r3, #32
 8015a56:	461a      	mov	r2, r3
 8015a58:	2100      	movs	r1, #0
 8015a5a:	f003 fef1 	bl	8019840 <memset>
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	4a02      	ldr	r2, [pc, #8]	; (8015a6c <_ZN6tflite3ops5micro12Register_MULEv+0x24>)
 8015a62:	60da      	str	r2, [r3, #12]
}
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	3708      	adds	r7, #8
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}
 8015a6c:	08015989 	.word	0x08015989

08015a70 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    output_data[i] = output_offset + clamped_result;
  }
}

template <typename T>
inline void BroadcastMul4DSlow(
 8015a70:	b590      	push	{r4, r7, lr}
 8015a72:	b0a7      	sub	sp, #156	; 0x9c
 8015a74:	af02      	add	r7, sp, #8
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	607a      	str	r2, [r7, #4]
 8015a7c:	603b      	str	r3, [r7, #0]
    const ArithmeticParams& params, const RuntimeShape& input1_shape,
    const T* input1_data, const RuntimeShape& input2_shape,
    const T* input2_data, const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("BroadcastMul4DSlow");
 8015a7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015a82:	4977      	ldr	r1, [pc, #476]	; (8015c60 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1f0>)
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7f8 fefe 	bl	800e886 <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  // The input shapes are extended as part of NdArrayDesc initialization.
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 8015a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015a92:	6839      	ldr	r1, [r7, #0]
 8015a94:	68b8      	ldr	r0, [r7, #8]
 8015a96:	f7f7 f8e3 	bl	800cc60 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
 8015a9a:	f107 0318 	add.w	r3, r7, #24
 8015a9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015aa2:	2104      	movs	r1, #4
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7f6 ff21 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
      RuntimeShape::ExtendedShape(4, output_shape);

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8015aaa:	2300      	movs	r3, #0
 8015aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015ab0:	e0b8      	b.n	8015c24 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1b4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015ab8:	e09e      	b.n	8015bf8 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x188>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8015aba:	2300      	movs	r3, #0
 8015abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015ac0:	e084      	b.n	8015bcc <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x15c>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ac8:	e06b      	b.n	8015ba2 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x132>
          const int32 input1_val =
              params.input1_offset +
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 8015ace:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8015ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ad6:	9300      	str	r3, [sp, #0]
 8015ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015adc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015ae0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8015ae4:	f7f6 fffe 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	461a      	mov	r2, r3
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	4413      	add	r3, r2
 8015af0:	f993 3000 	ldrsb.w	r3, [r3]
          const int32 input1_val =
 8015af4:	4423      	add	r3, r4
 8015af6:	67fb      	str	r3, [r7, #124]	; 0x7c
          const int32 input2_val =
              params.input2_offset +
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 8015afc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8015b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015b04:	9300      	str	r3, [sp, #0]
 8015b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015b0e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8015b12:	f7f6 ffe7 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8015b16:	4603      	mov	r3, r0
 8015b18:	461a      	mov	r2, r3
 8015b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015b1e:	4413      	add	r3, r2
 8015b20:	f993 3000 	ldrsb.w	r3, [r3]
          const int32 input2_val =
 8015b24:	4423      	add	r3, r4
 8015b26:	67bb      	str	r3, [r7, #120]	; 0x78
          const int32 unclamped_result =
              params.output_offset +
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	68dc      	ldr	r4, [r3, #12]
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8015b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015b2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015b30:	fb02 f003 	mul.w	r0, r2, r3
                                            params.output_multiplier,
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	6919      	ldr	r1, [r3, #16]
                                            params.output_shift);
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
 8015b3c:	461a      	mov	r2, r3
 8015b3e:	f7f8 fe73 	bl	800e828 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8015b42:	4603      	mov	r3, r0
              params.output_offset +
 8015b44:	4423      	add	r3, r4
          const int32 unclamped_result =
 8015b46:	617b      	str	r3, [r7, #20]
          const int32 clamped_output = std::min(
              params.quantized_activation_max,
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	f103 0430 	add.w	r4, r3, #48	; 0x30
              std::max(params.quantized_activation_min, unclamped_result));
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	332c      	adds	r3, #44	; 0x2c
          const int32 clamped_output = std::min(
 8015b52:	f107 0214 	add.w	r2, r7, #20
 8015b56:	4611      	mov	r1, r2
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7f3 f812 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	4619      	mov	r1, r3
 8015b62:	4620      	mov	r0, r4
 8015b64:	f7f3 f821 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	677b      	str	r3, [r7, #116]	; 0x74
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 8015b6e:	f107 0018 	add.w	r0, r7, #24
 8015b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015b76:	9300      	str	r3, [sp, #0]
 8015b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015b80:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8015b84:	f7f6 ff09 	bl	800c99a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b90:	4413      	add	r3, r2
 8015b92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015b94:	b252      	sxtb	r2, r2
 8015b96:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 8015b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ba2:	f107 0318 	add.w	r3, r7, #24
 8015ba6:	2103      	movs	r1, #3
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7f6 fcdd 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015bae:	4602      	mov	r2, r0
 8015bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015bb4:	4293      	cmp	r3, r2
 8015bb6:	bfb4      	ite	lt
 8015bb8:	2301      	movlt	r3, #1
 8015bba:	2300      	movge	r3, #0
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d183      	bne.n	8015aca <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8015bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015bc6:	3301      	adds	r3, #1
 8015bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015bcc:	f107 0318 	add.w	r3, r7, #24
 8015bd0:	2102      	movs	r1, #2
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7f6 fcc8 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015bd8:	4602      	mov	r2, r0
 8015bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015bde:	4293      	cmp	r3, r2
 8015be0:	bfb4      	ite	lt
 8015be2:	2301      	movlt	r3, #1
 8015be4:	2300      	movge	r3, #0
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f47f af6a 	bne.w	8015ac2 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x52>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8015bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015bf8:	f107 0318 	add.w	r3, r7, #24
 8015bfc:	2101      	movs	r1, #1
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7f6 fcb2 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c04:	4602      	mov	r2, r0
 8015c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015c0a:	4293      	cmp	r3, r2
 8015c0c:	bfb4      	ite	lt
 8015c0e:	2301      	movlt	r3, #1
 8015c10:	2300      	movge	r3, #0
 8015c12:	b2db      	uxtb	r3, r3
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f47f af50 	bne.w	8015aba <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4a>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8015c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c1e:	3301      	adds	r3, #1
 8015c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015c24:	f107 0318 	add.w	r3, r7, #24
 8015c28:	2100      	movs	r1, #0
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7f6 fc9c 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015c30:	4602      	mov	r2, r0
 8015c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c36:	4293      	cmp	r3, r2
 8015c38:	bfb4      	ite	lt
 8015c3a:	2301      	movlt	r3, #1
 8015c3c:	2300      	movge	r3, #0
 8015c3e:	b2db      	uxtb	r3, r3
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f47f af36 	bne.w	8015ab2 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
 8015c46:	f107 0318 	add.w	r3, r7, #24
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7f3 f800 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015c50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7f8 fe0b 	bl	800e870 <_ZN3ruy8profiler10ScopeLabelD1Ev>
 8015c5a:	3794      	adds	r7, #148	; 0x94
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd90      	pop	{r4, r7, pc}
 8015c60:	0804d070 	.word	0x0804d070

08015c64 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:

template <typename T>
void BroadcastMul4DSlow(const ArithmeticParams& params,
 8015c64:	b590      	push	{r4, r7, lr}
 8015c66:	ed2d 8b04 	vpush	{d8-d9}
 8015c6a:	b0a3      	sub	sp, #140	; 0x8c
 8015c6c:	af02      	add	r7, sp, #8
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	607a      	str	r2, [r7, #4]
 8015c74:	603b      	str	r3, [r7, #0]
                        const T* input2_data,
                        const RuntimeShape& unextended_output_shape,
                        T* output_data) {
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);
 8015c76:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015c7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015c7e:	4619      	mov	r1, r3
 8015c80:	68f8      	ldr	r0, [r7, #12]
 8015c82:	f000 f90d 	bl	8015ea0 <_ZN6tflite19GetActivationParamsINS_16ArithmeticParamsEEEvRKT_PfS5_>

  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
 8015c86:	68b8      	ldr	r0, [r7, #8]
 8015c88:	f7f2 fff8 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	2b04      	cmp	r3, #4
 8015c90:	dd01      	ble.n	8015c96 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x32>
 8015c92:	f003 fb31 	bl	80192f8 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
 8015c96:	6838      	ldr	r0, [r7, #0]
 8015c98:	f7f2 fff0 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	2b04      	cmp	r3, #4
 8015ca0:	dd01      	ble.n	8015ca6 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
 8015ca2:	f003 fb29 	bl	80192f8 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 8015ca6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8015caa:	f7f2 ffe7 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	2b04      	cmp	r3, #4
 8015cb2:	dd01      	ble.n	8015cb8 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x54>
 8015cb4:	f003 fb20 	bl	80192f8 <abort>
  const RuntimeShape output_shape =
 8015cb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015cbc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015cc0:	2104      	movs	r1, #4
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7f6 fe12 	bl	800c8ec <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
 8015cc8:	f107 0310 	add.w	r3, r7, #16
 8015ccc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015cd0:	6839      	ldr	r1, [r7, #0]
 8015cd2:	68b8      	ldr	r0, [r7, #8]
 8015cd4:	f7f6 ffc4 	bl	800cc60 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < output_shape.Dims(0); ++b) {
 8015cd8:	2300      	movs	r3, #0
 8015cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015cdc:	e080      	b.n	8015de0 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x17c>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
 8015cde:	2300      	movs	r3, #0
 8015ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8015ce2:	e06b      	b.n	8015dbc <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x158>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	677b      	str	r3, [r7, #116]	; 0x74
 8015ce8:	e056      	b.n	8015d98 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x134>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
 8015cea:	2300      	movs	r3, #0
 8015cec:	673b      	str	r3, [r7, #112]	; 0x70
 8015cee:	e041      	b.n	8015d74 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x110>
          output_data[Offset(output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
 8015cf0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8015cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015cf6:	9300      	str	r3, [sp, #0]
 8015cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015cfa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015cfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015cfe:	f7f6 fef1 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8015d02:	4603      	mov	r3, r0
 8015d04:	009b      	lsls	r3, r3, #2
 8015d06:	687a      	ldr	r2, [r7, #4]
 8015d08:	4413      	add	r3, r2
 8015d0a:	ed93 8a00 	vldr	s16, [r3]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
 8015d0e:	f107 0010 	add.w	r0, r7, #16
 8015d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015d1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015d1c:	f7f6 fee2 	bl	800cae4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8015d20:	4603      	mov	r3, r0
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8015d28:	4413      	add	r3, r2
 8015d2a:	edd3 7a00 	vldr	s15, [r3]
              ActivationFunctionWithMinMax(
 8015d2e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015d32:	edd7 8a1b 	vldr	s17, [r7, #108]	; 0x6c
 8015d36:	ed97 9a1a 	vldr	s18, [r7, #104]	; 0x68
          output_data[Offset(output_shape, b, y, x, c)] =
 8015d3a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8015d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d40:	9300      	str	r3, [sp, #0]
 8015d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015d46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015d48:	f7f6 fe27 	bl	800c99a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	009b      	lsls	r3, r3, #2
 8015d50:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015d54:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(
 8015d56:	eeb0 1a49 	vmov.f32	s2, s18
 8015d5a:	eef0 0a68 	vmov.f32	s1, s17
 8015d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8015d62:	f7fb ff42 	bl	8011bea <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8015d66:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, b, y, x, c)] =
 8015d6a:	edc4 7a00 	vstr	s15, [r4]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
 8015d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d70:	3301      	adds	r3, #1
 8015d72:	673b      	str	r3, [r7, #112]	; 0x70
 8015d74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015d78:	2103      	movs	r1, #3
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f7f6 fbf4 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015d80:	4602      	mov	r2, r0
 8015d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d84:	4293      	cmp	r3, r2
 8015d86:	bfb4      	ite	lt
 8015d88:	2301      	movlt	r3, #1
 8015d8a:	2300      	movge	r3, #0
 8015d8c:	b2db      	uxtb	r3, r3
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d1ae      	bne.n	8015cf0 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x8c>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
 8015d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d94:	3301      	adds	r3, #1
 8015d96:	677b      	str	r3, [r7, #116]	; 0x74
 8015d98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015d9c:	2102      	movs	r1, #2
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7f6 fbe2 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015da4:	4602      	mov	r2, r0
 8015da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015da8:	4293      	cmp	r3, r2
 8015daa:	bfb4      	ite	lt
 8015dac:	2301      	movlt	r3, #1
 8015dae:	2300      	movge	r3, #0
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d199      	bne.n	8015cea <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x86>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
 8015db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015db8:	3301      	adds	r3, #1
 8015dba:	67bb      	str	r3, [r7, #120]	; 0x78
 8015dbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015dc0:	2101      	movs	r1, #1
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7f6 fbd0 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015dc8:	4602      	mov	r2, r0
 8015dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	bfb4      	ite	lt
 8015dd0:	2301      	movlt	r3, #1
 8015dd2:	2300      	movge	r3, #0
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d184      	bne.n	8015ce4 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x80>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
 8015dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015ddc:	3301      	adds	r3, #1
 8015dde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015de0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015de4:	2100      	movs	r1, #0
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f6 fbbe 	bl	800c568 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015dec:	4602      	mov	r2, r0
 8015dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015df0:	4293      	cmp	r3, r2
 8015df2:	bfb4      	ite	lt
 8015df4:	2301      	movlt	r3, #1
 8015df6:	2300      	movge	r3, #0
 8015df8:	b2db      	uxtb	r3, r3
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	f47f af6f 	bne.w	8015cde <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x7a>
                  output_activation_min, output_activation_max);
        }
      }
    }
  }
}
 8015e00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7f2 ff23 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8015e0a:	3784      	adds	r7, #132	; 0x84
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	ecbd 8b04 	vpop	{d8-d9}
 8015e12:	bd90      	pop	{r4, r7, pc}

08015e14 <_ZN6tflite13reference_ops3MulIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
inline void Mul(const ArithmeticParams& params,
 8015e14:	b590      	push	{r4, r7, lr}
 8015e16:	b089      	sub	sp, #36	; 0x24
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	60f8      	str	r0, [r7, #12]
 8015e1c:	60b9      	str	r1, [r7, #8]
 8015e1e:	607a      	str	r2, [r7, #4]
 8015e20:	603b      	str	r3, [r7, #0]
  GetActivationParams(params, &output_activation_min, &output_activation_max);
 8015e22:	f107 0210 	add.w	r2, r7, #16
 8015e26:	f107 0314 	add.w	r3, r7, #20
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	68f8      	ldr	r0, [r7, #12]
 8015e2e:	f000 f837 	bl	8015ea0 <_ZN6tflite19GetActivationParamsINS_16ArithmeticParamsEEEvRKT_PfS5_>
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
 8015e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	68b8      	ldr	r0, [r7, #8]
 8015e38:	f7f6 fe07 	bl	800ca4a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
 8015e3c:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8015e3e:	2300      	movs	r3, #0
 8015e40:	61fb      	str	r3, [r7, #28]
 8015e42:	e024      	b.n	8015e8e <_ZN6tflite13reference_ops3MulIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x7a>
        input1_data[i] * input2_data[i], output_activation_min,
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	4413      	add	r3, r2
 8015e4c:	ed93 7a00 	vldr	s14, [r3]
 8015e50:	69fb      	ldr	r3, [r7, #28]
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e56:	4413      	add	r3, r2
 8015e58:	edd3 7a00 	vldr	s15, [r3]
    output_data[i] = ActivationFunctionWithMinMax(
 8015e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e60:	ed97 7a05 	vldr	s14, [r7, #20]
 8015e64:	edd7 6a04 	vldr	s13, [r7, #16]
 8015e68:	69fb      	ldr	r3, [r7, #28]
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e6e:	18d4      	adds	r4, r2, r3
 8015e70:	eeb0 1a66 	vmov.f32	s2, s13
 8015e74:	eef0 0a47 	vmov.f32	s1, s14
 8015e78:	eeb0 0a67 	vmov.f32	s0, s15
 8015e7c:	f7fb feb5 	bl	8011bea <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8015e80:	eef0 7a40 	vmov.f32	s15, s0
 8015e84:	edc4 7a00 	vstr	s15, [r4]
  for (int i = 0; i < flat_size; ++i) {
 8015e88:	69fb      	ldr	r3, [r7, #28]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	61fb      	str	r3, [r7, #28]
 8015e8e:	69fa      	ldr	r2, [r7, #28]
 8015e90:	69bb      	ldr	r3, [r7, #24]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	dbd6      	blt.n	8015e44 <_ZN6tflite13reference_ops3MulIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x30>
}
 8015e96:	bf00      	nop
 8015e98:	bf00      	nop
 8015e9a:	3724      	adds	r7, #36	; 0x24
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd90      	pop	{r4, r7, pc}

08015ea0 <_ZN6tflite19GetActivationParamsINS_16ArithmeticParamsEEEvRKT_PfS5_>:
  *min = params.quantized_activation_min;
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
 8015ea0:	b480      	push	{r7}
 8015ea2:	b085      	sub	sp, #20
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	60f8      	str	r0, [r7, #12]
 8015ea8:	60b9      	str	r1, [r7, #8]
 8015eaa:	607a      	str	r2, [r7, #4]
  *min = params.float_activation_min;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	601a      	str	r2, [r3, #0]
  *max = params.float_activation_max;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	601a      	str	r2, [r3, #0]
}
 8015ebc:	bf00      	nop
 8015ebe:	3714      	adds	r7, #20
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec6:	4770      	bx	lr

08015ec8 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015ec8:	b480      	push	{r7}
 8015eca:	b083      	sub	sp, #12
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	781a      	ldrb	r2, [r3, #0]
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	781b      	ldrb	r3, [r3, #0]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d201      	bcs.n	8015ee2 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	e000      	b.n	8015ee4 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8015ee2:	687b      	ldr	r3, [r7, #4]
    }
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	370c      	adds	r7, #12
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr

08015ef0 <_ZN6tflite13GetReciprocalEliPi>:
                           int* num_bits_over_unit) {
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b088      	sub	sp, #32
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	60f8      	str	r0, [r7, #12]
 8015ef8:	60b9      	str	r1, [r7, #8]
 8015efa:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7f9 f8d3 	bl	800f0aa <_ZN6tflite17CountLeadingZerosImEEiT_>
 8015f04:	61f8      	str	r0, [r7, #28]
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8015f06:	68ba      	ldr	r2, [r7, #8]
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	1ad2      	subs	r2, r2, r3
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	601a      	str	r2, [r3, #0]
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 8015f10:	68fa      	ldr	r2, [r7, #12]
 8015f12:	69fb      	ldr	r3, [r7, #28]
 8015f14:	fa02 f303 	lsl.w	r3, r2, r3
 8015f18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 8015f1c:	61bb      	str	r3, [r7, #24]
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
 8015f1e:	69b8      	ldr	r0, [r7, #24]
 8015f20:	f7f9 fbd1 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015f24:	4603      	mov	r3, r0
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7f9 fbde 	bl	800f6e8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8015f30:	f107 0314 	add.w	r3, r7, #20
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7f9 f8ca 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	681b      	ldr	r3, [r3, #0]
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3720      	adds	r7, #32
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}

08015f46 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8015f46:	b580      	push	{r7, lr}
 8015f48:	ed2d 8b02 	vpush	{d8}
 8015f4c:	b08e      	sub	sp, #56	; 0x38
 8015f4e:	af00      	add	r7, sp, #0
 8015f50:	60f8      	str	r0, [r7, #12]
 8015f52:	60b9      	str	r1, [r7, #8]
 8015f54:	607a      	str	r2, [r7, #4]
 8015f56:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015f58:	68b8      	ldr	r0, [r7, #8]
 8015f5a:	f7f2 fe8f 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	3b01      	subs	r3, #1
 8015f62:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015f64:	683a      	ldr	r2, [r7, #0]
 8015f66:	6a39      	ldr	r1, [r7, #32]
 8015f68:	68b8      	ldr	r0, [r7, #8]
 8015f6a:	f7f8 fcde 	bl	800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8015f6e:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8015f70:	6a3b      	ldr	r3, [r7, #32]
 8015f72:	683a      	ldr	r2, [r7, #0]
 8015f74:	6a39      	ldr	r1, [r7, #32]
 8015f76:	68b8      	ldr	r0, [r7, #8]
 8015f78:	f7f6 ff8c 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015f7c:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8015f7e:	2300      	movs	r3, #0
 8015f80:	637b      	str	r3, [r7, #52]	; 0x34
 8015f82:	e08d      	b.n	80160a0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8015f84:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8015f88:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8015f8e:	e014      	b.n	8015fba <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 8015f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f92:	69ba      	ldr	r2, [r7, #24]
 8015f94:	fb03 f202 	mul.w	r2, r3, r2
 8015f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9a:	4413      	add	r3, r2
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	441a      	add	r2, r3
 8015fa2:	f107 0314 	add.w	r3, r7, #20
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f2 fb1d 	bl	80085e8 <_ZSt3maxIfERKT_S2_S2_>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8015fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8015fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fbc:	69bb      	ldr	r3, [r7, #24]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	dbe6      	blt.n	8015f90 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 8015fc2:	f04f 0300 	mov.w	r3, #0
 8015fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8015fc8:	2300      	movs	r3, #0
 8015fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8015fcc:	e028      	b.n	8016020 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xda>
      sum += std::exp((input_data[i * depth + c] - max) *
 8015fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fd0:	69ba      	ldr	r2, [r7, #24]
 8015fd2:	fb03 f202 	mul.w	r2, r3, r2
 8015fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd8:	4413      	add	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	687a      	ldr	r2, [r7, #4]
 8015fde:	4413      	add	r3, r2
 8015fe0:	ed93 7a00 	vldr	s14, [r3]
 8015fe4:	edd7 7a05 	vldr	s15, [r7, #20]
 8015fe8:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff2:	4610      	mov	r0, r2
 8015ff4:	4619      	mov	r1, r3
 8015ff6:	f7ea fdc9 	bl	8000b8c <__aeabi_d2f>
 8015ffa:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 8015ffe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016002:	eeb0 0a67 	vmov.f32	s0, s15
 8016006:	f7f9 fafc 	bl	800f602 <_ZSt3expf>
 801600a:	eeb0 7a40 	vmov.f32	s14, s0
 801600e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016012:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016016:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601c:	3301      	adds	r3, #1
 801601e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016022:	69bb      	ldr	r3, [r7, #24]
 8016024:	429a      	cmp	r2, r3
 8016026:	dbd2      	blt.n	8015fce <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8016028:	2300      	movs	r3, #0
 801602a:	627b      	str	r3, [r7, #36]	; 0x24
 801602c:	e031      	b.n	8016092 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016030:	69ba      	ldr	r2, [r7, #24]
 8016032:	fb03 f202 	mul.w	r2, r3, r2
 8016036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016038:	4413      	add	r3, r2
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	4413      	add	r3, r2
 8016040:	ed93 7a00 	vldr	s14, [r3]
 8016044:	edd7 7a05 	vldr	s15, [r7, #20]
 8016048:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016052:	4610      	mov	r0, r2
 8016054:	4619      	mov	r1, r3
 8016056:	f7ea fd99 	bl	8000b8c <__aeabi_d2f>
 801605a:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801605e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016062:	eeb0 0a67 	vmov.f32	s0, s15
 8016066:	f7f9 facc 	bl	800f602 <_ZSt3expf>
 801606a:	eef0 6a40 	vmov.f32	s13, s0
 801606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016070:	69ba      	ldr	r2, [r7, #24]
 8016072:	fb03 f202 	mul.w	r2, r3, r2
 8016076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016078:	4413      	add	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801607e:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 8016080:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016084:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8016088:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 801608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801608e:	3301      	adds	r3, #1
 8016090:	627b      	str	r3, [r7, #36]	; 0x24
 8016092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016094:	69bb      	ldr	r3, [r7, #24]
 8016096:	429a      	cmp	r2, r3
 8016098:	dbc9      	blt.n	801602e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
  for (int i = 0; i < outer_size; ++i) {
 801609a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801609c:	3301      	adds	r3, #1
 801609e:	637b      	str	r3, [r7, #52]	; 0x34
 80160a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160a2:	69fb      	ldr	r3, [r7, #28]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	f6ff af6d 	blt.w	8015f84 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
                                   sum;
    }
  }
}
 80160aa:	bf00      	nop
 80160ac:	bf00      	nop
 80160ae:	3738      	adds	r7, #56	; 0x38
 80160b0:	46bd      	mov	sp, r7
 80160b2:	ecbd 8b02 	vpop	{d8}
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 80160b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80160bc:	b08a      	sub	sp, #40	; 0x28
 80160be:	af04      	add	r7, sp, #16
 80160c0:	60f8      	str	r0, [r7, #12]
 80160c2:	60b9      	str	r1, [r7, #8]
 80160c4:	607a      	str	r2, [r7, #4]
 80160c6:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	2b03      	cmp	r3, #3
 80160ce:	d004      	beq.n	80160da <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	2b09      	cmp	r3, #9
 80160d6:	f040 810e 	bne.w	80162f6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x23e>
    if (input->type == kTfLiteUInt8) {
 80160da:	68bb      	ldr	r3, [r7, #8]
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	2b03      	cmp	r3, #3
 80160e0:	d133      	bne.n	801614a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x92>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	781b      	ldrb	r3, [r3, #0]
 80160e6:	2b03      	cmp	r3, #3
 80160e8:	d018      	beq.n	801611c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x64>
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	695c      	ldr	r4, [r3, #20]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	781b      	ldrb	r3, [r3, #0]
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7ee fe6a 	bl	8004dcc <TfLiteTypeGetName>
 80160f8:	4605      	mov	r5, r0
 80160fa:	2003      	movs	r0, #3
 80160fc:	f7ee fe66 	bl	8004dcc <TfLiteTypeGetName>
 8016100:	4603      	mov	r3, r0
 8016102:	9303      	str	r3, [sp, #12]
 8016104:	9502      	str	r5, [sp, #8]
 8016106:	4b99      	ldr	r3, [pc, #612]	; (801636c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8016108:	9301      	str	r3, [sp, #4]
 801610a:	4b99      	ldr	r3, [pc, #612]	; (8016370 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 801610c:	9300      	str	r3, [sp, #0]
 801610e:	2323      	movs	r3, #35	; 0x23
 8016110:	4a98      	ldr	r2, [pc, #608]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8016112:	4999      	ldr	r1, [pc, #612]	; (8016378 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	47a0      	blx	r4
 8016118:	2301      	movs	r3, #1
 801611a:	e156      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	691b      	ldr	r3, [r3, #16]
 8016120:	2b00      	cmp	r3, #0
 8016122:	f000 8094 	beq.w	801624e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	695c      	ldr	r4, [r3, #20]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	691b      	ldr	r3, [r3, #16]
 801612e:	2200      	movs	r2, #0
 8016130:	9203      	str	r2, [sp, #12]
 8016132:	9302      	str	r3, [sp, #8]
 8016134:	4b91      	ldr	r3, [pc, #580]	; (801637c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>)
 8016136:	9301      	str	r3, [sp, #4]
 8016138:	4b91      	ldr	r3, [pc, #580]	; (8016380 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801613a:	9300      	str	r3, [sp, #0]
 801613c:	2324      	movs	r3, #36	; 0x24
 801613e:	4a8d      	ldr	r2, [pc, #564]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8016140:	4990      	ldr	r1, [pc, #576]	; (8016384 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8016142:	68f8      	ldr	r0, [r7, #12]
 8016144:	47a0      	blx	r4
 8016146:	2301      	movs	r3, #1
 8016148:	e13f      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b09      	cmp	r3, #9
 8016150:	d018      	beq.n	8016184 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	695c      	ldr	r4, [r3, #20]
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	4618      	mov	r0, r3
 801615c:	f7ee fe36 	bl	8004dcc <TfLiteTypeGetName>
 8016160:	4605      	mov	r5, r0
 8016162:	2009      	movs	r0, #9
 8016164:	f7ee fe32 	bl	8004dcc <TfLiteTypeGetName>
 8016168:	4603      	mov	r3, r0
 801616a:	9303      	str	r3, [sp, #12]
 801616c:	9502      	str	r5, [sp, #8]
 801616e:	4b86      	ldr	r3, [pc, #536]	; (8016388 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016170:	9301      	str	r3, [sp, #4]
 8016172:	4b86      	ldr	r3, [pc, #536]	; (801638c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8016174:	9300      	str	r3, [sp, #0]
 8016176:	2326      	movs	r3, #38	; 0x26
 8016178:	4a7e      	ldr	r2, [pc, #504]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 801617a:	497f      	ldr	r1, [pc, #508]	; (8016378 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801617c:	68f8      	ldr	r0, [r7, #12]
 801617e:	47a0      	blx	r4
 8016180:	2301      	movs	r3, #1
 8016182:	e122      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
      if (output->type == kTfLiteInt16) {
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	2b07      	cmp	r3, #7
 801618a:	d116      	bne.n	80161ba <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	691b      	ldr	r3, [r3, #16]
 8016190:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016194:	d05b      	beq.n	801624e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	695c      	ldr	r4, [r3, #20]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	691b      	ldr	r3, [r3, #16]
 801619e:	4a7c      	ldr	r2, [pc, #496]	; (8016390 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
 80161a0:	9203      	str	r2, [sp, #12]
 80161a2:	9302      	str	r3, [sp, #8]
 80161a4:	4b7b      	ldr	r3, [pc, #492]	; (8016394 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 80161a6:	9301      	str	r3, [sp, #4]
 80161a8:	4b75      	ldr	r3, [pc, #468]	; (8016380 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	2328      	movs	r3, #40	; 0x28
 80161ae:	4a71      	ldr	r2, [pc, #452]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 80161b0:	4974      	ldr	r1, [pc, #464]	; (8016384 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80161b2:	68f8      	ldr	r0, [r7, #12]
 80161b4:	47a0      	blx	r4
 80161b6:	2301      	movs	r3, #1
 80161b8:	e107      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	2b09      	cmp	r3, #9
 80161c0:	d018      	beq.n	80161f4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x13c>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	695c      	ldr	r4, [r3, #20]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	4618      	mov	r0, r3
 80161cc:	f7ee fdfe 	bl	8004dcc <TfLiteTypeGetName>
 80161d0:	4605      	mov	r5, r0
 80161d2:	2009      	movs	r0, #9
 80161d4:	f7ee fdfa 	bl	8004dcc <TfLiteTypeGetName>
 80161d8:	4603      	mov	r3, r0
 80161da:	9303      	str	r3, [sp, #12]
 80161dc:	9502      	str	r5, [sp, #8]
 80161de:	4b6a      	ldr	r3, [pc, #424]	; (8016388 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80161e0:	9301      	str	r3, [sp, #4]
 80161e2:	4b63      	ldr	r3, [pc, #396]	; (8016370 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 80161e4:	9300      	str	r3, [sp, #0]
 80161e6:	232c      	movs	r3, #44	; 0x2c
 80161e8:	4a62      	ldr	r2, [pc, #392]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 80161ea:	4963      	ldr	r1, [pc, #396]	; (8016378 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80161ec:	68f8      	ldr	r0, [r7, #12]
 80161ee:	47a0      	blx	r4
 80161f0:	2301      	movs	r3, #1
 80161f2:	e0ea      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	691b      	ldr	r3, [r3, #16]
 80161f8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80161fc:	d012      	beq.n	8016224 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	695c      	ldr	r4, [r3, #20]
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	691b      	ldr	r3, [r3, #16]
 8016206:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801620a:	9203      	str	r2, [sp, #12]
 801620c:	9302      	str	r3, [sp, #8]
 801620e:	4b62      	ldr	r3, [pc, #392]	; (8016398 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8016210:	9301      	str	r3, [sp, #4]
 8016212:	4b5b      	ldr	r3, [pc, #364]	; (8016380 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8016214:	9300      	str	r3, [sp, #0]
 8016216:	232d      	movs	r3, #45	; 0x2d
 8016218:	4a56      	ldr	r2, [pc, #344]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 801621a:	495a      	ldr	r1, [pc, #360]	; (8016384 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801621c:	68f8      	ldr	r0, [r7, #12]
 801621e:	47a0      	blx	r4
 8016220:	2301      	movs	r3, #1
 8016222:	e0d2      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	edd3 7a03 	vldr	s15, [r3, #12]
 801622a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801639c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>
 801622e:	eef4 7a47 	vcmp.f32	s15, s14
 8016232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016236:	d00a      	beq.n	801624e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	695c      	ldr	r4, [r3, #20]
 801623c:	4b58      	ldr	r3, [pc, #352]	; (80163a0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801623e:	9300      	str	r3, [sp, #0]
 8016240:	232e      	movs	r3, #46	; 0x2e
 8016242:	4a4c      	ldr	r2, [pc, #304]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8016244:	4957      	ldr	r1, [pc, #348]	; (80163a4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8016246:	68f8      	ldr	r0, [r7, #12]
 8016248:	47a0      	blx	r4
 801624a:	2301      	movs	r3, #1
 801624c:	e0bd      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
      }
    }
    TF_LITE_ENSURE(context, (output->params.scale == 1.f / 256) ||
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	edd3 7a03 	vldr	s15, [r3, #12]
 8016254:	ed9f 7a51 	vldr	s14, [pc, #324]	; 801639c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>
 8016258:	eef4 7a47 	vcmp.f32	s15, s14
 801625c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016260:	d014      	beq.n	801628c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1d4>
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	edd3 7a03 	vldr	s15, [r3, #12]
 8016268:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80163a8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>
 801626c:	eef4 7a47 	vcmp.f32	s15, s14
 8016270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016274:	d00a      	beq.n	801628c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1d4>
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	695c      	ldr	r4, [r3, #20]
 801627a:	4b4c      	ldr	r3, [pc, #304]	; (80163ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801627c:	9300      	str	r3, [sp, #0]
 801627e:	2331      	movs	r3, #49	; 0x31
 8016280:	4a3c      	ldr	r2, [pc, #240]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8016282:	4948      	ldr	r1, [pc, #288]	; (80163a4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8016284:	68f8      	ldr	r0, [r7, #12]
 8016286:	47a0      	blx	r4
 8016288:	2301      	movs	r3, #1
 801628a:	e09e      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 8016290:	4618      	mov	r0, r3
 8016292:	f7ea f961 	bl	8000558 <__aeabi_f2d>
 8016296:	4680      	mov	r8, r0
 8016298:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 801629e:	4618      	mov	r0, r3
 80162a0:	f7ea f95a 	bl	8000558 <__aeabi_f2d>
 80162a4:	4682      	mov	sl, r0
 80162a6:	468b      	mov	fp, r1
 80162a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162aa:	3308      	adds	r3, #8
 80162ac:	f107 0214 	add.w	r2, r7, #20
 80162b0:	4619      	mov	r1, r3
 80162b2:	2005      	movs	r0, #5
 80162b4:	ec4b ab11 	vmov	d1, sl, fp
 80162b8:	ec49 8b10 	vmov	d0, r8, r9
 80162bc:	f7f2 f8cc 	bl	8008458 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 80162c0:	697a      	ldr	r2, [r7, #20]
 80162c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c4:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 80162c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c8:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 80162ca:	221f      	movs	r2, #31
 80162cc:	4619      	mov	r1, r3
 80162ce:	2005      	movs	r0, #5
 80162d0:	f7f2 f90a 	bl	80084e8 <_ZN6tflite20CalculateInputRadiusEiii>
 80162d4:	4603      	mov	r3, r0
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7ea f92c 	bl	8000534 <__aeabi_i2d>
 80162dc:	4602      	mov	r2, r0
 80162de:	460b      	mov	r3, r1
 80162e0:	4614      	mov	r4, r2
 80162e2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 80162e6:	4620      	mov	r0, r4
 80162e8:	4629      	mov	r1, r5
 80162ea:	f7ea fc27 	bl	8000b3c <__aeabi_d2iz>
 80162ee:	4602      	mov	r2, r0
 80162f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f2:	619a      	str	r2, [r3, #24]
  } else {
 80162f4:	e068      	b.n	80163c8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	781b      	ldrb	r3, [r3, #0]
 80162fa:	2b01      	cmp	r3, #1
 80162fc:	d018      	beq.n	8016330 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x278>
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	695c      	ldr	r4, [r3, #20]
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	781b      	ldrb	r3, [r3, #0]
 8016306:	4618      	mov	r0, r3
 8016308:	f7ee fd60 	bl	8004dcc <TfLiteTypeGetName>
 801630c:	4605      	mov	r5, r0
 801630e:	2001      	movs	r0, #1
 8016310:	f7ee fd5c 	bl	8004dcc <TfLiteTypeGetName>
 8016314:	4603      	mov	r3, r0
 8016316:	9303      	str	r3, [sp, #12]
 8016318:	9502      	str	r5, [sp, #8]
 801631a:	4b25      	ldr	r3, [pc, #148]	; (80163b0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801631c:	9301      	str	r3, [sp, #4]
 801631e:	4b1b      	ldr	r3, [pc, #108]	; (801638c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8016320:	9300      	str	r3, [sp, #0]
 8016322:	2340      	movs	r3, #64	; 0x40
 8016324:	4a13      	ldr	r2, [pc, #76]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8016326:	4914      	ldr	r1, [pc, #80]	; (8016378 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8016328:	68f8      	ldr	r0, [r7, #12]
 801632a:	47a0      	blx	r4
 801632c:	2301      	movs	r3, #1
 801632e:	e04c      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	781b      	ldrb	r3, [r3, #0]
 8016334:	2b01      	cmp	r3, #1
 8016336:	d03d      	beq.n	80163b4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	695c      	ldr	r4, [r3, #20]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	781b      	ldrb	r3, [r3, #0]
 8016340:	4618      	mov	r0, r3
 8016342:	f7ee fd43 	bl	8004dcc <TfLiteTypeGetName>
 8016346:	4605      	mov	r5, r0
 8016348:	2001      	movs	r0, #1
 801634a:	f7ee fd3f 	bl	8004dcc <TfLiteTypeGetName>
 801634e:	4603      	mov	r3, r0
 8016350:	9303      	str	r3, [sp, #12]
 8016352:	9502      	str	r5, [sp, #8]
 8016354:	4b16      	ldr	r3, [pc, #88]	; (80163b0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8016356:	9301      	str	r3, [sp, #4]
 8016358:	4b05      	ldr	r3, [pc, #20]	; (8016370 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 801635a:	9300      	str	r3, [sp, #0]
 801635c:	2341      	movs	r3, #65	; 0x41
 801635e:	4a05      	ldr	r2, [pc, #20]	; (8016374 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8016360:	4905      	ldr	r1, [pc, #20]	; (8016378 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8016362:	68f8      	ldr	r0, [r7, #12]
 8016364:	47a0      	blx	r4
 8016366:	2301      	movs	r3, #1
 8016368:	e02f      	b.n	80163ca <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
 801636a:	bf00      	nop
 801636c:	0804d364 	.word	0x0804d364
 8016370:	0804d374 	.word	0x0804d374
 8016374:	0804d298 	.word	0x0804d298
 8016378:	0804d348 	.word	0x0804d348
 801637c:	0804d3a0 	.word	0x0804d3a0
 8016380:	0804d3a4 	.word	0x0804d3a4
 8016384:	0804d384 	.word	0x0804d384
 8016388:	0804d3c0 	.word	0x0804d3c0
 801638c:	0804d3cc 	.word	0x0804d3cc
 8016390:	ffff8000 	.word	0xffff8000
 8016394:	0804d3d8 	.word	0x0804d3d8
 8016398:	0804d3e0 	.word	0x0804d3e0
 801639c:	3b800000 	.word	0x3b800000
 80163a0:	0804d400 	.word	0x0804d400
 80163a4:	0804d3e8 	.word	0x0804d3e8
 80163a8:	3b808081 	.word	0x3b808081
 80163ac:	0804d424 	.word	0x0804d424
 80163b0:	0804d470 	.word	0x0804d470
    op_data->beta = static_cast<double>(params->beta);
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7ea f8cd 	bl	8000558 <__aeabi_f2d>
 80163be:	4602      	mov	r2, r0
 80163c0:	460b      	mov	r3, r1
 80163c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80163c4:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 80163c8:	2300      	movs	r3, #0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3718      	adds	r7, #24
 80163ce:	46bd      	mov	sp, r7
 80163d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080163d4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80163d4:	b590      	push	{r4, r7, lr}
 80163d6:	b089      	sub	sp, #36	; 0x24
 80163d8:	af04      	add	r7, sp, #16
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80163de:	6838      	ldr	r0, [r7, #0]
 80163e0:	f7f6 f9b7 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80163e4:	4603      	mov	r3, r0
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	bf14      	ite	ne
 80163ea:	2301      	movne	r3, #1
 80163ec:	2300      	moveq	r3, #0
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d013      	beq.n	801641c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	695c      	ldr	r4, [r3, #20]
 80163f8:	6838      	ldr	r0, [r7, #0]
 80163fa:	f7f6 f9aa 	bl	800c752 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80163fe:	4603      	mov	r3, r0
 8016400:	2201      	movs	r2, #1
 8016402:	9203      	str	r2, [sp, #12]
 8016404:	9302      	str	r3, [sp, #8]
 8016406:	4b25      	ldr	r3, [pc, #148]	; (801649c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8016408:	9301      	str	r3, [sp, #4]
 801640a:	4b25      	ldr	r3, [pc, #148]	; (80164a0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 801640c:	9300      	str	r3, [sp, #0]
 801640e:	234a      	movs	r3, #74	; 0x4a
 8016410:	4a24      	ldr	r2, [pc, #144]	; (80164a4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8016412:	4925      	ldr	r1, [pc, #148]	; (80164a8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	47a0      	blx	r4
 8016418:	2301      	movs	r3, #1
 801641a:	e03b      	b.n	8016494 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801641c:	6838      	ldr	r0, [r7, #0]
 801641e:	f7f6 f9a5 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8016422:	4603      	mov	r3, r0
 8016424:	2b01      	cmp	r3, #1
 8016426:	bf14      	ite	ne
 8016428:	2301      	movne	r3, #1
 801642a:	2300      	moveq	r3, #0
 801642c:	b2db      	uxtb	r3, r3
 801642e:	2b00      	cmp	r3, #0
 8016430:	d013      	beq.n	801645a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	695c      	ldr	r4, [r3, #20]
 8016436:	6838      	ldr	r0, [r7, #0]
 8016438:	f7f6 f998 	bl	800c76c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801643c:	4603      	mov	r3, r0
 801643e:	2201      	movs	r2, #1
 8016440:	9203      	str	r2, [sp, #12]
 8016442:	9302      	str	r3, [sp, #8]
 8016444:	4b15      	ldr	r3, [pc, #84]	; (801649c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8016446:	9301      	str	r3, [sp, #4]
 8016448:	4b18      	ldr	r3, [pc, #96]	; (80164ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 801644a:	9300      	str	r3, [sp, #0]
 801644c:	234b      	movs	r3, #75	; 0x4b
 801644e:	4a15      	ldr	r2, [pc, #84]	; (80164a4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8016450:	4915      	ldr	r1, [pc, #84]	; (80164a8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	47a0      	blx	r4
 8016456:	2301      	movs	r3, #1
 8016458:	e01c      	b.n	8016494 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801645a:	2200      	movs	r2, #0
 801645c:	6839      	ldr	r1, [r7, #0]
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f7f6 f823 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016464:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8016466:	68f8      	ldr	r0, [r7, #12]
 8016468:	f7f2 f92f 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801646c:	4603      	mov	r3, r0
 801646e:	2b00      	cmp	r3, #0
 8016470:	bfd4      	ite	le
 8016472:	2301      	movle	r3, #1
 8016474:	2300      	movgt	r3, #0
 8016476:	b2db      	uxtb	r3, r3
 8016478:	2b00      	cmp	r3, #0
 801647a:	d00a      	beq.n	8016492 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	695c      	ldr	r4, [r3, #20]
 8016480:	4b0b      	ldr	r3, [pc, #44]	; (80164b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	234d      	movs	r3, #77	; 0x4d
 8016486:	4a07      	ldr	r2, [pc, #28]	; (80164a4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8016488:	490a      	ldr	r1, [pc, #40]	; (80164b4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	47a0      	blx	r4
 801648e:	2301      	movs	r3, #1
 8016490:	e000      	b.n	8016494 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>

  return kTfLiteOk;
 8016492:	2300      	movs	r3, #0
}
 8016494:	4618      	mov	r0, r3
 8016496:	3714      	adds	r7, #20
 8016498:	46bd      	mov	sp, r7
 801649a:	bd90      	pop	{r4, r7, pc}
 801649c:	0804d480 	.word	0x0804d480
 80164a0:	0804d484 	.word	0x0804d484
 80164a4:	0804d298 	.word	0x0804d298
 80164a8:	0804d384 	.word	0x0804d384
 80164ac:	0804d494 	.word	0x0804d494
 80164b0:	0804d4a8 	.word	0x0804d4a8
 80164b4:	0804d3e8 	.word	0x0804d3e8

080164b8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 80164b8:	b590      	push	{r4, r7, lr}
 80164ba:	b093      	sub	sp, #76	; 0x4c
 80164bc:	af02      	add	r7, sp, #8
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	60b9      	str	r1, [r7, #8]
 80164c2:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 80164c4:	f107 0310 	add.w	r3, r7, #16
 80164c8:	68f9      	ldr	r1, [r7, #12]
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7f2 fc3a 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 80164d0:	68f8      	ldr	r0, [r7, #12]
 80164d2:	f7f6 f8d9 	bl	800c688 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80164d6:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 80164d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164dc:	68b9      	ldr	r1, [r7, #8]
 80164de:	4618      	mov	r0, r3
 80164e0:	f7f2 fc30 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 80164e4:	68b8      	ldr	r0, [r7, #8]
 80164e6:	f7f6 f8e0 	bl	800c6aa <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80164ea:	4602      	mov	r2, r0
 80164ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164f0:	f107 0110 	add.w	r1, r7, #16
 80164f4:	9200      	str	r2, [sp, #0]
 80164f6:	4622      	mov	r2, r4
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f7ff fd24 	bl	8015f46 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 80164fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016502:	4618      	mov	r0, r3
 8016504:	f7f2 fba4 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8016508:	f107 0310 	add.w	r3, r7, #16
 801650c:	4618      	mov	r0, r3
 801650e:	f7f2 fb9f 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8016512:	bf00      	nop
 8016514:	3744      	adds	r7, #68	; 0x44
 8016516:	46bd      	mov	sp, r7
 8016518:	bd90      	pop	{r4, r7, pc}

0801651a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 801651a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801651e:	b0a4      	sub	sp, #144	; 0x90
 8016520:	af04      	add	r7, sp, #16
 8016522:	60f8      	str	r0, [r7, #12]
 8016524:	60b9      	str	r1, [r7, #8]
 8016526:	607a      	str	r2, [r7, #4]
  const auto input_shape = GetTensorShape(input);
 8016528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801652c:	68f9      	ldr	r1, [r7, #12]
 801652e:	4618      	mov	r0, r3
 8016530:	f7f2 fc08 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 8016534:	f107 0310 	add.w	r3, r7, #16
 8016538:	68b9      	ldr	r1, [r7, #8]
 801653a:	4618      	mov	r0, r3
 801653c:	f7f2 fc02 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  if (input->type == kTfLiteUInt8) {
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	2b03      	cmp	r3, #3
 8016546:	d111      	bne.n	801656c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x52>
    tflite::reference_ops::Softmax(op_data, input_shape,
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	f7f5 ffda 	bl	800c502 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801654e:	4604      	mov	r4, r0
 8016550:	68b8      	ldr	r0, [r7, #8]
 8016552:	f7f5 ffe7 	bl	800c524 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8016556:	4602      	mov	r2, r0
 8016558:	f107 0310 	add.w	r3, r7, #16
 801655c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8016560:	9200      	str	r2, [sp, #0]
 8016562:	4622      	mov	r2, r4
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f000 f8df 	bl	8016728 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
 801656a:	e061      	b.n	8016630 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x116>
                                   GetTensorData<uint8_t>(input), output_shape,
                                   GetTensorData<uint8_t>(output));
  } else {
    if (output->type == kTfLiteInt16) {
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	2b07      	cmp	r3, #7
 8016572:	d127      	bne.n	80165c4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaa>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8016574:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016578:	68f9      	ldr	r1, [r7, #12]
 801657a:	4618      	mov	r0, r3
 801657c:	f7f2 fbe2 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8016580:	68f8      	ldr	r0, [r7, #12]
 8016582:	f7f6 f8a3 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8016586:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8016588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801658c:	68b9      	ldr	r1, [r7, #8]
 801658e:	4618      	mov	r0, r3
 8016590:	f7f2 fbd8 	bl	8008d44 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8016594:	68b8      	ldr	r0, [r7, #8]
 8016596:	f7f9 feb7 	bl	8010308 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 801659a:	4602      	mov	r2, r0
 801659c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80165a0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80165a4:	9200      	str	r2, [sp, #0]
 80165a6:	4622      	mov	r2, r4
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	f000 f9d9 	bl	8016960 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 80165ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80165b2:	4618      	mov	r0, r3
 80165b4:	f7f2 fb4c 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 80165b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80165bc:	4618      	mov	r0, r3
 80165be:	f7f2 fb47 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 80165c2:	e035      	b.n	8016630 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x116>
    } else {
      const unsigned int num_dims = NumDimensions(input);
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	f7f2 f880 	bl	80086ca <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80165ca:	4603      	mov	r3, r0
 80165cc:	67fb      	str	r3, [r7, #124]	; 0x7c

      const int trailing_dim = input_shape.DimensionsCount() - 1;
 80165ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7f2 fb52 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80165d8:	4603      	mov	r3, r0
 80165da:	3b01      	subs	r3, #1
 80165dc:	67bb      	str	r3, [r7, #120]	; 0x78
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80165de:	f107 0210 	add.w	r2, r7, #16
 80165e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80165e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7f8 f99e 	bl	800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80165ee:	6778      	str	r0, [r7, #116]	; 0x74
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80165f0:	f107 0210 	add.w	r2, r7, #16
 80165f4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80165f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80165fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80165fc:	f7f6 fc4a 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016600:	6738      	str	r0, [r7, #112]	; 0x70

      arm_softmax_s8(GetTensorData<int8_t>(input), outer_size, depth,
 8016602:	68f8      	ldr	r0, [r7, #12]
 8016604:	f7f6 f862 	bl	800c6cc <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8016608:	4680      	mov	r8, r0
                     op_data.input_multiplier, op_data.input_left_shift,
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	689e      	ldr	r6, [r3, #8]
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min, GetTensorData<int8_t>(output));
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(GetTensorData<int8_t>(input), outer_size, depth,
 8016616:	68b8      	ldr	r0, [r7, #8]
 8016618:	f7f6 f869 	bl	800c6ee <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801661c:	4603      	mov	r3, r0
 801661e:	9302      	str	r3, [sp, #8]
 8016620:	9501      	str	r5, [sp, #4]
 8016622:	9400      	str	r4, [sp, #0]
 8016624:	4633      	mov	r3, r6
 8016626:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016628:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801662a:	4640      	mov	r0, r8
 801662c:	f001 ff08 	bl	8018440 <arm_softmax_s8>
    }
  }
}
 8016630:	f107 0310 	add.w	r3, r7, #16
 8016634:	4618      	mov	r0, r3
 8016636:	f7f2 fb0b 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 801663a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801663e:	4618      	mov	r0, r3
 8016640:	f7f2 fb06 	bl	8008c50 <_ZN6tflite12RuntimeShapeD1Ev>
 8016644:	3780      	adds	r7, #128	; 0x80
 8016646:	46bd      	mov	sp, r7
 8016648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801664c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801664c:	b590      	push	{r4, r7, lr}
 801664e:	b097      	sub	sp, #92	; 0x5c
 8016650:	af02      	add	r7, sp, #8
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	695b      	ldr	r3, [r3, #20]
 801665a:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 801665c:	2200      	movs	r2, #0
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f7f5 ff22 	bl	800c4aa <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016666:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 8016668:	2200      	movs	r2, #0
 801666a:	6839      	ldr	r1, [r7, #0]
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	f7f5 ff32 	bl	800c4d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8016672:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 8016674:	f107 0308 	add.w	r3, r7, #8
 8016678:	9300      	str	r3, [sp, #0]
 801667a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801667c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801667e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f7ff fd19 	bl	80160b8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8016686:	4603      	mov	r3, r0
 8016688:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801668c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016690:	2b00      	cmp	r3, #0
 8016692:	d002      	beq.n	801669a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8016694:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016698:	e02a      	b.n	80166f0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 801669a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801669c:	781b      	ldrb	r3, [r3, #0]
 801669e:	2b09      	cmp	r3, #9
 80166a0:	d00f      	beq.n	80166c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 80166a2:	2b09      	cmp	r3, #9
 80166a4:	dc16      	bgt.n	80166d4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 80166a6:	2b01      	cmp	r3, #1
 80166a8:	d002      	beq.n	80166b0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>
 80166aa:	2b03      	cmp	r3, #3
 80166ac:	d009      	beq.n	80166c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 80166ae:	e011      	b.n	80166d4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 80166b0:	f107 0308 	add.w	r3, r7, #8
 80166b4:	461a      	mov	r2, r3
 80166b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80166b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80166ba:	f7ff fefd 	bl	80164b8 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 80166be:	2300      	movs	r3, #0
 80166c0:	e016      	b.n	80166f0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 80166c2:	f107 0308 	add.w	r3, r7, #8
 80166c6:	461a      	mov	r2, r3
 80166c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80166ca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80166cc:	f7ff ff25 	bl	801651a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 80166d0:	2300      	movs	r3, #0
 80166d2:	e00d      	b.n	80166f0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	695c      	ldr	r4, [r3, #20]
 80166d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	4618      	mov	r0, r3
 80166de:	f7ee fb75 	bl	8004dcc <TfLiteTypeGetName>
 80166e2:	4602      	mov	r2, r0
 80166e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	4903      	ldr	r1, [pc, #12]	; (80166f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80166ee:	2301      	movs	r3, #1
  }
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3754      	adds	r7, #84	; 0x54
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd90      	pop	{r4, r7, pc}
 80166f8:	0804d4c4 	.word	0x0804d4c4

080166fc <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
 80166fc:	b4b0      	push	{r4, r5, r7}
 80166fe:	b083      	sub	sp, #12
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	4a07      	ldr	r2, [pc, #28]	; (8016724 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x28>)
 8016708:	461c      	mov	r4, r3
 801670a:	4615      	mov	r5, r2
 801670c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801670e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016710:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	370c      	adds	r7, #12
 801671c:	46bd      	mov	sp, r7
 801671e:	bcb0      	pop	{r4, r5, r7}
 8016720:	4770      	bx	lr
 8016722:	bf00      	nop
 8016724:	0804d4e0 	.word	0x0804d4e0

08016728 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 8016728:	b590      	push	{r4, r7, lr}
 801672a:	b09f      	sub	sp, #124	; 0x7c
 801672c:	af00      	add	r7, sp, #0
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	60b9      	str	r1, [r7, #8]
 8016732:	607a      	str	r2, [r7, #4]
 8016734:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	689b      	ldr	r3, [r3, #8]
 801673a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	68db      	ldr	r3, [r3, #12]
 8016740:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	699b      	ldr	r3, [r3, #24]
 8016746:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8016748:	68b8      	ldr	r0, [r7, #8]
 801674a:	f7f2 fa97 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801674e:	4603      	mov	r3, r0
 8016750:	3b01      	subs	r3, #1
 8016752:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8016754:	683a      	ldr	r2, [r7, #0]
 8016756:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016758:	68b8      	ldr	r0, [r7, #8]
 801675a:	f7f8 f8e6 	bl	800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801675e:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8016760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016762:	683a      	ldr	r2, [r7, #0]
 8016764:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016766:	68b8      	ldr	r0, [r7, #8]
 8016768:	f7f6 fb94 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801676c:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 801676e:	2300      	movs	r3, #0
 8016770:	677b      	str	r3, [r7, #116]	; 0x74
 8016772:	e0eb      	b.n	801694c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8016774:	2300      	movs	r3, #0
 8016776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801677a:	2300      	movs	r3, #0
 801677c:	673b      	str	r3, [r7, #112]	; 0x70
 801677e:	e015      	b.n	80167ac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8016780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016782:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016784:	fb03 f202 	mul.w	r2, r3, r2
 8016788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801678a:	4413      	add	r3, r2
 801678c:	461a      	mov	r2, r3
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	441a      	add	r2, r3
 8016792:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8016796:	4611      	mov	r1, r2
 8016798:	4618      	mov	r0, r3
 801679a:	f7ff fb95 	bl	8015ec8 <_ZSt3maxIhERKT_S2_S2_>
 801679e:	4603      	mov	r3, r0
 80167a0:	781b      	ldrb	r3, [r3, #0]
 80167a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80167a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80167a8:	3301      	adds	r3, #1
 80167aa:	673b      	str	r3, [r7, #112]	; 0x70
 80167ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80167ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167b0:	429a      	cmp	r2, r3
 80167b2:	dbe5      	blt.n	8016780 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x58>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80167b4:	f000 f9f3 	bl	8016b9e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80167b8:	4603      	mov	r3, r0
 80167ba:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80167bc:	2300      	movs	r3, #0
 80167be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80167c0:	e02e      	b.n	8016820 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf8>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80167c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80167c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80167c6:	fb03 f202 	mul.w	r2, r3, r2
 80167ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167cc:	4413      	add	r3, r2
 80167ce:	461a      	mov	r2, r3
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	4413      	add	r3, r2
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	461a      	mov	r2, r3
 80167d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80167dc:	1ad3      	subs	r3, r2, r3
 80167de:	643b      	str	r3, [r7, #64]	; 0x40
      if (input_diff >= diff_min) {
 80167e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167e4:	429a      	cmp	r2, r3
 80167e6:	db18      	blt.n	801681a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf2>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80167e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80167ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80167ec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80167ee:	f7fb fa85 	bl	8011cfc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80167f2:	63f8      	str	r0, [r7, #60]	; 0x3c
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80167f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80167f6:	f7fb fc6d 	bl	80120d4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80167fa:	4603      	mov	r3, r0
 80167fc:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80167fe:	69f8      	ldr	r0, [r7, #28]
 8016800:	f7fb fa90 	bl	8011d24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016804:	4603      	mov	r3, r0
 8016806:	4618      	mov	r0, r3
 8016808:	f000 f9ef 	bl	8016bea <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801680c:	4603      	mov	r3, r0
 801680e:	4619      	mov	r1, r3
 8016810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016812:	f000 f9cc 	bl	8016bae <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016816:	4603      	mov	r3, r0
 8016818:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801681a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801681c:	3301      	adds	r3, #1
 801681e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016824:	429a      	cmp	r2, r3
 8016826:	dbcc      	blt.n	80167c2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9a>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8016828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801682c:	4618      	mov	r0, r3
 801682e:	f000 f9f6 	bl	8016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016832:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801683a:	210c      	movs	r1, #12
 801683c:	4618      	mov	r0, r3
 801683e:	f7ff fb57 	bl	8015ef0 <_ZN6tflite13GetReciprocalEliPi>
 8016842:	4603      	mov	r3, r0
 8016844:	4618      	mov	r0, r3
 8016846:	f7f8 ff3e 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801684a:	4603      	mov	r3, r0
 801684c:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 801684e:	2300      	movs	r3, #0
 8016850:	66bb      	str	r3, [r7, #104]	; 0x68
 8016852:	e074      	b.n	801693e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8016854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016858:	fb03 f202 	mul.w	r2, r3, r2
 801685c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801685e:	4413      	add	r3, r2
 8016860:	461a      	mov	r2, r3
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	4413      	add	r3, r2
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	461a      	mov	r2, r3
 801686a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8016872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016876:	429a      	cmp	r2, r3
 8016878:	db50      	blt.n	801691c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801687a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801687c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801687e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016880:	f7fb fa3c 	bl	8011cfc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016884:	64b8      	str	r0, [r7, #72]	; 0x48
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016886:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8016888:	f7fb fc24 	bl	80120d4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801688c:	4603      	mov	r3, r0
 801688e:	61bb      	str	r3, [r7, #24]

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8016890:	69b8      	ldr	r0, [r7, #24]
 8016892:	f7fb fa47 	bl	8011d24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016896:	4603      	mov	r3, r0
 8016898:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 801689a:	6979      	ldr	r1, [r7, #20]
 801689c:	6a38      	ldr	r0, [r7, #32]
 801689e:	f7f9 fa0b 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80168a2:	4603      	mov	r3, r0
 80168a4:	633b      	str	r3, [r7, #48]	; 0x30
 80168a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7f8 fc0f 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80168b0:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 80168b2:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 80168b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168b6:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 80168b8:	4611      	mov	r1, r2
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7f6 f95c 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80168c0:	6478      	str	r0, [r7, #68]	; 0x44

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 80168c2:	f7f1 fedf 	bl	8008684 <_ZNSt14numeric_limitsIhE3minEv>
 80168c6:	4603      	mov	r3, r0
 80168c8:	461a      	mov	r2, r3
            unsat_output +
 80168ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168cc:	4413      	add	r3, r2
        const int32 shifted_output =
 80168ce:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 80168d0:	f7f1 fee0 	bl	8008694 <_ZNSt14numeric_limitsIhE3maxEv>
 80168d4:	4603      	mov	r3, r0
 80168d6:	637b      	str	r3, [r7, #52]	; 0x34
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80168d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80168dc:	f107 0310 	add.w	r3, r7, #16
 80168e0:	4611      	mov	r1, r2
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7f2 f961 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 80168e8:	4604      	mov	r4, r0
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 80168ea:	f7f1 fecb 	bl	8008684 <_ZNSt14numeric_limitsIhE3minEv>
 80168ee:	4603      	mov	r3, r0
 80168f0:	63bb      	str	r3, [r7, #56]	; 0x38
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80168f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80168f6:	4619      	mov	r1, r3
 80168f8:	4620      	mov	r0, r4
 80168fa:	f7f2 f942 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 80168fe:	4603      	mov	r3, r0
 8016900:	6819      	ldr	r1, [r3, #0]
 8016902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016906:	fb03 f202 	mul.w	r2, r3, r2
 801690a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801690c:	4413      	add	r3, r2
 801690e:	461a      	mov	r2, r3
 8016910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016914:	4413      	add	r3, r2
 8016916:	b2ca      	uxtb	r2, r1
 8016918:	701a      	strb	r2, [r3, #0]
 801691a:	e00d      	b.n	8016938 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x210>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801691c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801691e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016920:	fb03 f202 	mul.w	r2, r3, r2
 8016924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016926:	4413      	add	r3, r2
 8016928:	461a      	mov	r2, r3
 801692a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801692e:	189c      	adds	r4, r3, r2
 8016930:	f7f1 fea8 	bl	8008684 <_ZNSt14numeric_limitsIhE3minEv>
 8016934:	4603      	mov	r3, r0
 8016936:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8016938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801693a:	3301      	adds	r3, #1
 801693c:	66bb      	str	r3, [r7, #104]	; 0x68
 801693e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016942:	429a      	cmp	r2, r3
 8016944:	db86      	blt.n	8016854 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
  for (int i = 0; i < outer_size; ++i) {
 8016946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016948:	3301      	adds	r3, #1
 801694a:	677b      	str	r3, [r7, #116]	; 0x74
 801694c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801694e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016950:	429a      	cmp	r2, r3
 8016952:	f6ff af0f 	blt.w	8016774 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4c>
      }
    }
  }
}
 8016956:	bf00      	nop
 8016958:	bf00      	nop
 801695a:	377c      	adds	r7, #124	; 0x7c
 801695c:	46bd      	mov	sp, r7
 801695e:	bd90      	pop	{r4, r7, pc}

08016960 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8016960:	b590      	push	{r4, r7, lr}
 8016962:	b09f      	sub	sp, #124	; 0x7c
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	607a      	str	r2, [r7, #4]
 801696c:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	689b      	ldr	r3, [r3, #8]
 8016972:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	68db      	ldr	r3, [r3, #12]
 8016978:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	699b      	ldr	r3, [r3, #24]
 801697e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8016980:	68b8      	ldr	r0, [r7, #8]
 8016982:	f7f2 f97b 	bl	8008c7c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016986:	4603      	mov	r3, r0
 8016988:	3b01      	subs	r3, #1
 801698a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801698c:	683a      	ldr	r2, [r7, #0]
 801698e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016990:	68b8      	ldr	r0, [r7, #8]
 8016992:	f7f7 ffca 	bl	800e92a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8016996:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8016998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801699a:	683a      	ldr	r2, [r7, #0]
 801699c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801699e:	68b8      	ldr	r0, [r7, #8]
 80169a0:	f7f6 fa78 	bl	800ce94 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80169a4:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80169a6:	2300      	movs	r3, #0
 80169a8:	677b      	str	r3, [r7, #116]	; 0x74
 80169aa:	e0ee      	b.n	8016b8a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80169ac:	2380      	movs	r3, #128	; 0x80
 80169ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80169b2:	2300      	movs	r3, #0
 80169b4:	673b      	str	r3, [r7, #112]	; 0x70
 80169b6:	e016      	b.n	80169e6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x86>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80169b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80169bc:	fb03 f202 	mul.w	r2, r3, r2
 80169c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169c2:	4413      	add	r3, r2
 80169c4:	461a      	mov	r2, r3
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	441a      	add	r2, r3
 80169ca:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80169ce:	4611      	mov	r1, r2
 80169d0:	4618      	mov	r0, r3
 80169d2:	f000 f92f 	bl	8016c34 <_ZSt3maxIaERKT_S2_S2_>
 80169d6:	4603      	mov	r3, r0
 80169d8:	f993 3000 	ldrsb.w	r3, [r3]
 80169dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80169e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169e2:	3301      	adds	r3, #1
 80169e4:	673b      	str	r3, [r7, #112]	; 0x70
 80169e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80169e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169ea:	429a      	cmp	r2, r3
 80169ec:	dbe4      	blt.n	80169b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x58>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80169ee:	f000 f8d6 	bl	8016b9e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80169f2:	4603      	mov	r3, r0
 80169f4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80169f6:	2300      	movs	r3, #0
 80169f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80169fa:	e02f      	b.n	8016a5c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfc>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80169fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a00:	fb03 f202 	mul.w	r2, r3, r2
 8016a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a06:	4413      	add	r3, r2
 8016a08:	461a      	mov	r2, r3
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	4413      	add	r3, r2
 8016a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8016a12:	461a      	mov	r2, r3
 8016a14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8016a18:	1ad3      	subs	r3, r2, r3
 8016a1a:	643b      	str	r3, [r7, #64]	; 0x40
      if (input_diff >= diff_min) {
 8016a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a20:	429a      	cmp	r2, r3
 8016a22:	db18      	blt.n	8016a56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8016a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016a26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016a28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016a2a:	f7fb f967 	bl	8011cfc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016a30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016a32:	f7fb fb4f 	bl	80120d4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016a36:	4603      	mov	r3, r0
 8016a38:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8016a3a:	69f8      	ldr	r0, [r7, #28]
 8016a3c:	f7fb f972 	bl	8011d24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016a40:	4603      	mov	r3, r0
 8016a42:	4618      	mov	r0, r3
 8016a44:	f000 f8d1 	bl	8016bea <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	4619      	mov	r1, r3
 8016a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a4e:	f000 f8ae 	bl	8016bae <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016a52:	4603      	mov	r3, r0
 8016a54:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8016a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a58:	3301      	adds	r3, #1
 8016a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a60:	429a      	cmp	r2, r3
 8016a62:	dbcb      	blt.n	80169fc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8016a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f000 f8d8 	bl	8016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016a6e:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016a76:	210c      	movs	r1, #12
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7ff fa39 	bl	8015ef0 <_ZN6tflite13GetReciprocalEliPi>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	4618      	mov	r0, r3
 8016a82:	f7f8 fe20 	bl	800f6c6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016a86:	4603      	mov	r3, r0
 8016a88:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8016a8e:	e075      	b.n	8016b7c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8016a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a94:	fb03 f202 	mul.w	r2, r3, r2
 8016a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016a9a:	4413      	add	r3, r2
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	4413      	add	r3, r2
 8016aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8016aa6:	461a      	mov	r2, r3
 8016aa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8016aac:	1ad3      	subs	r3, r2, r3
 8016aae:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8016ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	db50      	blt.n	8016b5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1fa>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8016ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016aba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016abc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016abe:	f7fb f91d 	bl	8011cfc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016ac2:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016ac4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8016ac6:	f7fb fb05 	bl	80120d4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016aca:	4603      	mov	r3, r0
 8016acc:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8016ace:	69b8      	ldr	r0, [r7, #24]
 8016ad0:	f7fb f928 	bl	8011d24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8016ad8:	6979      	ldr	r1, [r7, #20]
 8016ada:	6a38      	ldr	r0, [r7, #32]
 8016adc:	f7f9 f8ec 	bl	800fcb8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8016ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7f8 faf0 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016aee:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8016af0:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8016af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016af4:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8016af6:	4611      	mov	r1, r2
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7f6 f83d 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8016afe:	6478      	str	r0, [r7, #68]	; 0x44
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8016b00:	f7f1 fdd0 	bl	80086a4 <_ZNSt14numeric_limitsIsE3minEv>
 8016b04:	4603      	mov	r3, r0
 8016b06:	461a      	mov	r2, r3
            unsat_output +
 8016b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b0a:	4413      	add	r3, r2
        const int32 shifted_output =
 8016b0c:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8016b0e:	f7f1 fdd3 	bl	80086b8 <_ZNSt14numeric_limitsIsE3maxEv>
 8016b12:	4603      	mov	r3, r0
 8016b14:	637b      	str	r3, [r7, #52]	; 0x34
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8016b16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016b1a:	f107 0310 	add.w	r3, r7, #16
 8016b1e:	4611      	mov	r1, r2
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7f2 f842 	bl	8008baa <_ZSt3minIlERKT_S2_S2_>
 8016b26:	4604      	mov	r4, r0
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8016b28:	f7f1 fdbc 	bl	80086a4 <_ZNSt14numeric_limitsIsE3minEv>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	63bb      	str	r3, [r7, #56]	; 0x38
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8016b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016b34:	4619      	mov	r1, r3
 8016b36:	4620      	mov	r0, r4
 8016b38:	f7f2 f823 	bl	8008b82 <_ZSt3maxIlERKT_S2_S2_>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	6819      	ldr	r1, [r3, #0]
 8016b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b44:	fb03 f202 	mul.w	r2, r3, r2
 8016b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b4a:	4413      	add	r3, r2
 8016b4c:	005b      	lsls	r3, r3, #1
 8016b4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016b52:	4413      	add	r3, r2
 8016b54:	b20a      	sxth	r2, r1
 8016b56:	801a      	strh	r2, [r3, #0]
 8016b58:	e00d      	b.n	8016b76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8016b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b5e:	fb03 f202 	mul.w	r2, r3, r2
 8016b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b64:	4413      	add	r3, r2
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016b6c:	18d4      	adds	r4, r2, r3
 8016b6e:	f7f1 fd99 	bl	80086a4 <_ZNSt14numeric_limitsIsE3minEv>
 8016b72:	4603      	mov	r3, r0
 8016b74:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8016b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b78:	3301      	adds	r3, #1
 8016b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8016b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b80:	429a      	cmp	r2, r3
 8016b82:	db85      	blt.n	8016a90 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x130>
  for (int i = 0; i < outer_size; ++i) {
 8016b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b86:	3301      	adds	r3, #1
 8016b88:	677b      	str	r3, [r7, #116]	; 0x74
 8016b8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	f6ff af0c 	blt.w	80169ac <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4c>
}
 8016b94:	bf00      	nop
 8016b96:	bf00      	nop
 8016b98:	377c      	adds	r7, #124	; 0x7c
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd90      	pop	{r4, r7, pc}

08016b9e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8016b9e:	b580      	push	{r7, lr}
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	2000      	movs	r0, #0
 8016ba4:	f000 f85c 	bl	8016c60 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	4618      	mov	r0, r3
 8016bac:	bd80      	pop	{r7, pc}

08016bae <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8016bae:	b590      	push	{r4, r7, lr}
 8016bb0:	b083      	sub	sp, #12
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
 8016bb6:	6039      	str	r1, [r7, #0]
 8016bb8:	1d3b      	adds	r3, r7, #4
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f000 f82f 	bl	8016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	681c      	ldr	r4, [r3, #0]
 8016bc4:	463b      	mov	r3, r7
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f000 f829 	bl	8016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	f7f6 f8f2 	bl	800cdbc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f000 f854 	bl	8016c88 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8016be0:	4603      	mov	r3, r0
 8016be2:	4618      	mov	r0, r3
 8016be4:	370c      	adds	r7, #12
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd90      	pop	{r4, r7, pc}

08016bea <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016bea:	b5b0      	push	{r4, r5, r7, lr}
 8016bec:	b084      	sub	sp, #16
 8016bee:	af00      	add	r7, sp, #0
 8016bf0:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016bf2:	1d3b      	adds	r3, r7, #4
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f7f8 fa6a 	bl	800f0ce <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	681d      	ldr	r5, [r3, #0]
 8016bfe:	f107 030c 	add.w	r3, r7, #12
 8016c02:	4618      	mov	r0, r3
 8016c04:	f000 f80b 	bl	8016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016c08:	4604      	mov	r4, r0
 8016c0a:	4628      	mov	r0, r5
 8016c0c:	f000 f84d 	bl	8016caa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8016c10:	4603      	mov	r3, r0
 8016c12:	6023      	str	r3, [r4, #0]
  return result;
 8016c14:	68fb      	ldr	r3, [r7, #12]
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3710      	adds	r7, #16
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bdb0      	pop	{r4, r5, r7, pc}

08016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8016c1e:	b480      	push	{r7}
 8016c20:	b083      	sub	sp, #12
 8016c22:	af00      	add	r7, sp, #0
 8016c24:	6078      	str	r0, [r7, #4]
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	370c      	adds	r7, #12
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c32:	4770      	bx	lr

08016c34 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8016c34:	b480      	push	{r7}
 8016c36:	b083      	sub	sp, #12
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	f993 2000 	ldrsb.w	r2, [r3]
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	f993 3000 	ldrsb.w	r3, [r3]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	da01      	bge.n	8016c52 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	e000      	b.n	8016c54 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8016c52:	687b      	ldr	r3, [r7, #4]
    }
 8016c54:	4618      	mov	r0, r3
 8016c56:	370c      	adds	r7, #12
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5e:	4770      	bx	lr

08016c60 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016c60:	b590      	push	{r4, r7, lr}
 8016c62:	b085      	sub	sp, #20
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016c68:	f107 030c 	add.w	r3, r7, #12
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f7ff ffd6 	bl	8016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016c72:	4604      	mov	r4, r0
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f7f6 f865 	bl	800cd44 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	6023      	str	r3, [r4, #0]
    return retval;
 8016c7e:	68fb      	ldr	r3, [r7, #12]
  }
 8016c80:	4618      	mov	r0, r3
 8016c82:	3714      	adds	r7, #20
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd90      	pop	{r4, r7, pc}

08016c88 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b084      	sub	sp, #16
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8016c90:	f107 030c 	add.w	r3, r7, #12
 8016c94:	4618      	mov	r0, r3
 8016c96:	f7ff ffc2 	bl	8016c1e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016c9a:	4602      	mov	r2, r0
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6013      	str	r3, [r2, #0]
    return retval;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
  }
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	3710      	adds	r7, #16
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}

08016caa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8016caa:	b580      	push	{r7, lr}
 8016cac:	b082      	sub	sp, #8
 8016cae:	af00      	add	r7, sp, #0
 8016cb0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8016cb2:	6878      	ldr	r0, [r7, #4]
 8016cb4:	f000 f805 	bl	8016cc2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8016cb8:	4603      	mov	r3, r0
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3708      	adds	r7, #8
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}

08016cc2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8016cc2:	b580      	push	{r7, lr}
 8016cc4:	b082      	sub	sp, #8
 8016cc6:	af00      	add	r7, sp, #0
 8016cc8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8016cca:	210c      	movs	r1, #12
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f7f5 ff53 	bl	800cb78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8016cd2:	4603      	mov	r3, r0
  }
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8016cdc:	b480      	push	{r7}
 8016cde:	b083      	sub	sp, #12
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
 8016ce4:	4a04      	ldr	r2, [pc, #16]	; (8016cf8 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	601a      	str	r2, [r3, #0]
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	4618      	mov	r0, r3
 8016cee:	370c      	adds	r7, #12
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr
 8016cf8:	0804da6c 	.word	0x0804da6c

08016cfc <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8016cfc:	b480      	push	{r7}
 8016cfe:	b083      	sub	sp, #12
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	4a04      	ldr	r2, [pc, #16]	; (8016d18 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	601a      	str	r2, [r3, #0]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	370c      	adds	r7, #12
 8016d10:	46bd      	mov	sp, r7
 8016d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d16:	4770      	bx	lr
 8016d18:	0804da6c 	.word	0x0804da6c

08016d1c <_ZN6tflite13MemoryPlannerD0Ev>:
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b082      	sub	sp, #8
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f7ff ffe9 	bl	8016cfc <_ZN6tflite13MemoryPlannerD1Ev>
 8016d2a:	2104      	movs	r1, #4
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f001 fff7 	bl	8018d20 <_ZdlPvj>
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	4618      	mov	r0, r3
 8016d36:	3708      	adds	r7, #8
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}

08016d3c <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8016d3c:	b480      	push	{r7}
 8016d3e:	b083      	sub	sp, #12
 8016d40:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8016d42:	2328      	movs	r3, #40	; 0x28
 8016d44:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8016d46:	2328      	movs	r3, #40	; 0x28
  }
 8016d48:	4618      	mov	r0, r3
 8016d4a:	370c      	adds	r7, #12
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d52:	4770      	bx	lr

08016d54 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8016d54:	b480      	push	{r7}
 8016d56:	b089      	sub	sp, #36	; 0x24
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	60f8      	str	r0, [r7, #12]
 8016d5c:	60b9      	str	r1, [r7, #8]
 8016d5e:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8016d60:	2300      	movs	r3, #0
 8016d62:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8016d64:	2301      	movs	r3, #1
 8016d66:	61bb      	str	r3, [r7, #24]
 8016d68:	e04b      	b.n	8016e02 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
      if (values[i - 1] < values[i]) {
 8016d6a:	69bb      	ldr	r3, [r7, #24]
 8016d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016d70:	3b01      	subs	r3, #1
 8016d72:	009b      	lsls	r3, r3, #2
 8016d74:	68fa      	ldr	r2, [r7, #12]
 8016d76:	4413      	add	r3, r2
 8016d78:	681a      	ldr	r2, [r3, #0]
 8016d7a:	69bb      	ldr	r3, [r7, #24]
 8016d7c:	009b      	lsls	r3, r3, #2
 8016d7e:	68f9      	ldr	r1, [r7, #12]
 8016d80:	440b      	add	r3, r1
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	da39      	bge.n	8016dfc <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa8>
        const int value_temp = values[i - 1];
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016d8e:	3b01      	subs	r3, #1
 8016d90:	009b      	lsls	r3, r3, #2
 8016d92:	68fa      	ldr	r2, [r7, #12]
 8016d94:	4413      	add	r3, r2
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8016d9a:	69bb      	ldr	r3, [r7, #24]
 8016d9c:	009b      	lsls	r3, r3, #2
 8016d9e:	68fa      	ldr	r2, [r7, #12]
 8016da0:	441a      	add	r2, r3
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016da8:	3b01      	subs	r3, #1
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	68f9      	ldr	r1, [r7, #12]
 8016dae:	440b      	add	r3, r1
 8016db0:	6812      	ldr	r2, [r2, #0]
 8016db2:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8016db4:	69bb      	ldr	r3, [r7, #24]
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	68fa      	ldr	r2, [r7, #12]
 8016dba:	4413      	add	r3, r2
 8016dbc:	697a      	ldr	r2, [r7, #20]
 8016dbe:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8016dc0:	69bb      	ldr	r3, [r7, #24]
 8016dc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016dc6:	3b01      	subs	r3, #1
 8016dc8:	009b      	lsls	r3, r3, #2
 8016dca:	68ba      	ldr	r2, [r7, #8]
 8016dcc:	4413      	add	r3, r2
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8016dd2:	69bb      	ldr	r3, [r7, #24]
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	68ba      	ldr	r2, [r7, #8]
 8016dd8:	441a      	add	r2, r3
 8016dda:	69bb      	ldr	r3, [r7, #24]
 8016ddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016de0:	3b01      	subs	r3, #1
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	68b9      	ldr	r1, [r7, #8]
 8016de6:	440b      	add	r3, r1
 8016de8:	6812      	ldr	r2, [r2, #0]
 8016dea:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8016dec:	69bb      	ldr	r3, [r7, #24]
 8016dee:	009b      	lsls	r3, r3, #2
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	4413      	add	r3, r2
 8016df4:	693a      	ldr	r2, [r7, #16]
 8016df6:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8016df8:	2301      	movs	r3, #1
 8016dfa:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8016dfc:	69bb      	ldr	r3, [r7, #24]
 8016dfe:	3301      	adds	r3, #1
 8016e00:	61bb      	str	r3, [r7, #24]
 8016e02:	69ba      	ldr	r2, [r7, #24]
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	dbaf      	blt.n	8016d6a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x16>
  do {
 8016e0a:	7ffb      	ldrb	r3, [r7, #31]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d1a7      	bne.n	8016d60 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8016e10:	bf00      	nop
 8016e12:	bf00      	nop
 8016e14:	3724      	adds	r7, #36	; 0x24
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr
	...

08016e20 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8016e20:	b590      	push	{r4, r7, lr}
 8016e22:	b087      	sub	sp, #28
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	60f8      	str	r0, [r7, #12]
 8016e28:	60b9      	str	r1, [r7, #8]
 8016e2a:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7ff ff54 	bl	8016cdc <_ZN6tflite13MemoryPlannerC1Ev>
 8016e34:	4a22      	ldr	r2, [pc, #136]	; (8016ec0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	601a      	str	r2, [r3, #0]
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	609a      	str	r2, [r3, #8]
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	2201      	movs	r2, #1
 8016e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8016e48:	687c      	ldr	r4, [r7, #4]
 8016e4a:	f7ff ff77 	bl	8016d3c <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	fbb4 f3f3 	udiv	r3, r4, r3
 8016e54:	461a      	mov	r2, r3
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	697a      	ldr	r2, [r7, #20]
 8016e62:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	685b      	ldr	r3, [r3, #4]
 8016e68:	011b      	lsls	r3, r3, #4
 8016e6a:	697a      	ldr	r2, [r7, #20]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	697a      	ldr	r2, [r7, #20]
 8016e74:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	697a      	ldr	r2, [r7, #20]
 8016e7e:	4413      	add	r3, r2
 8016e80:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	697a      	ldr	r2, [r7, #20]
 8016e86:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	009b      	lsls	r3, r3, #2
 8016e8e:	697a      	ldr	r2, [r7, #20]
 8016e90:	4413      	add	r3, r2
 8016e92:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	697a      	ldr	r2, [r7, #20]
 8016e98:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	685b      	ldr	r3, [r3, #4]
 8016e9e:	461a      	mov	r2, r3
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	4413      	add	r3, r2
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	4413      	add	r3, r2
 8016eae:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	697a      	ldr	r2, [r7, #20]
 8016eb4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	4618      	mov	r0, r3
 8016eba:	371c      	adds	r7, #28
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd90      	pop	{r4, r7, pc}
 8016ec0:	0804d718 	.word	0x0804d718

08016ec4 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b082      	sub	sp, #8
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
 8016ecc:	4a05      	ldr	r2, [pc, #20]	; (8016ee4 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	601a      	str	r2, [r3, #0]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7ff ff11 	bl	8016cfc <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	4618      	mov	r0, r3
 8016ede:	3708      	adds	r7, #8
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	bd80      	pop	{r7, pc}
 8016ee4:	0804d718 	.word	0x0804d718

08016ee8 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b082      	sub	sp, #8
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
}
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f7ff ffe7 	bl	8016ec4 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8016ef6:	212c      	movs	r1, #44	; 0x2c
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	f001 ff11 	bl	8018d20 <_ZdlPvj>
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	4618      	mov	r0, r3
 8016f02:	3708      	adds	r7, #8
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}

08016f08 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b086      	sub	sp, #24
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	60f8      	str	r0, [r7, #12]
 8016f10:	60b9      	str	r1, [r7, #8]
 8016f12:	607a      	str	r2, [r7, #4]
 8016f14:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	689a      	ldr	r2, [r3, #8]
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	db08      	blt.n	8016f34 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	461a      	mov	r2, r3
 8016f28:	4913      	ldr	r1, [pc, #76]	; (8016f78 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8016f2a:	68b8      	ldr	r0, [r7, #8]
 8016f2c:	f7ed ff5a 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8016f30:	2301      	movs	r3, #1
 8016f32:	e01d      	b.n	8016f70 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	68da      	ldr	r2, [r3, #12]
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	689b      	ldr	r3, [r3, #8]
 8016f3c:	011b      	lsls	r3, r3, #4
 8016f3e:	4413      	add	r3, r2
 8016f40:	617b      	str	r3, [r7, #20]
  current->size = size;
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8016f48:	697b      	ldr	r3, [r7, #20]
 8016f4a:	683a      	ldr	r2, [r7, #0]
 8016f4c:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	6a3a      	ldr	r2, [r7, #32]
 8016f52:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f5a:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	689b      	ldr	r3, [r3, #8]
 8016f60:	1c5a      	adds	r2, r3, #1
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	2201      	movs	r2, #1
 8016f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8016f6e:	2300      	movs	r3, #0
}
 8016f70:	4618      	mov	r0, r3
 8016f72:	3718      	adds	r7, #24
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	0804d620 	.word	0x0804d620

08016f7c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8016f7c:	b590      	push	{r4, r7, lr}
 8016f7e:	b089      	sub	sp, #36	; 0x24
 8016f80:	af02      	add	r7, sp, #8
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
 8016f88:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	68da      	ldr	r2, [r3, #12]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	689b      	ldr	r3, [r3, #8]
 8016f92:	011b      	lsls	r3, r3, #4
 8016f94:	4413      	add	r3, r2
 8016f96:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	3308      	adds	r3, #8
 8016f9e:	681c      	ldr	r4, [r3, #0]
 8016fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa2:	9300      	str	r3, [sp, #0]
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	68b9      	ldr	r1, [r7, #8]
 8016faa:	68f8      	ldr	r0, [r7, #12]
 8016fac:	47a0      	blx	r4
 8016fae:	4603      	mov	r3, r0
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	bf14      	ite	ne
 8016fb4:	2301      	movne	r3, #1
 8016fb6:	2300      	moveq	r3, #0
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d001      	beq.n	8016fc2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	e003      	b.n	8016fca <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016fc6:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8016fc8:	2300      	movs	r3, #0
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	371c      	adds	r7, #28
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd90      	pop	{r4, r7, pc}

08016fd2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8016fd2:	b480      	push	{r7}
 8016fd4:	b087      	sub	sp, #28
 8016fd6:	af00      	add	r7, sp, #0
 8016fd8:	60f8      	str	r0, [r7, #12]
 8016fda:	60b9      	str	r1, [r7, #8]
 8016fdc:	607a      	str	r2, [r7, #4]
 8016fde:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	68da      	ldr	r2, [r3, #12]
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	685b      	ldr	r3, [r3, #4]
 8016fe8:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8016fea:	4413      	add	r3, r2
 8016fec:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	689b      	ldr	r3, [r3, #8]
 8016ff2:	683a      	ldr	r2, [r7, #0]
 8016ff4:	429a      	cmp	r2, r3
 8016ff6:	da01      	bge.n	8016ffc <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	e007      	b.n	801700c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8016ffc:	697b      	ldr	r3, [r7, #20]
 8016ffe:	68db      	ldr	r3, [r3, #12]
 8017000:	687a      	ldr	r2, [r7, #4]
 8017002:	429a      	cmp	r2, r3
 8017004:	dd01      	ble.n	801700a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8017006:	2300      	movs	r3, #0
 8017008:	e000      	b.n	801700c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 801700a:	2301      	movs	r3, #1
}
 801700c:	4618      	mov	r0, r3
 801700e:	371c      	adds	r7, #28
 8017010:	46bd      	mov	sp, r7
 8017012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017016:	4770      	bx	lr

08017018 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8017018:	b580      	push	{r7, lr}
 801701a:	b086      	sub	sp, #24
 801701c:	af00      	add	r7, sp, #0
 801701e:	60f8      	str	r0, [r7, #12]
 8017020:	60b9      	str	r1, [r7, #8]
 8017022:	607a      	str	r2, [r7, #4]
 8017024:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8017026:	2300      	movs	r3, #0
 8017028:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d10b      	bne.n	8017048 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	699a      	ldr	r2, [r3, #24]
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	6a1b      	ldr	r3, [r3, #32]
 8017038:	4619      	mov	r1, r3
 801703a:	460b      	mov	r3, r1
 801703c:	005b      	lsls	r3, r3, #1
 801703e:	440b      	add	r3, r1
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	4413      	add	r3, r2
 8017044:	613b      	str	r3, [r7, #16]
 8017046:	e011      	b.n	801706c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	689b      	ldr	r3, [r3, #8]
 801704c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017050:	d101      	bne.n	8017056 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8017052:	2300      	movs	r3, #0
 8017054:	e029      	b.n	80170aa <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	699a      	ldr	r2, [r3, #24]
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	689b      	ldr	r3, [r3, #8]
 801705e:	4619      	mov	r1, r3
 8017060:	460b      	mov	r3, r1
 8017062:	005b      	lsls	r3, r3, #1
 8017064:	440b      	add	r3, r1
 8017066:	009b      	lsls	r3, r3, #2
 8017068:	4413      	add	r3, r2
 801706a:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	687a      	ldr	r2, [r7, #4]
 8017070:	6939      	ldr	r1, [r7, #16]
 8017072:	68f8      	ldr	r0, [r7, #12]
 8017074:	f7ff ffad 	bl	8016fd2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d002      	beq.n	8017084 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	617b      	str	r3, [r7, #20]
      break;
 8017082:	e011      	b.n	80170a8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8017084:	693b      	ldr	r3, [r7, #16]
 8017086:	689b      	ldr	r3, [r3, #8]
 8017088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801708c:	d00b      	beq.n	80170a6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	699a      	ldr	r2, [r3, #24]
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	689b      	ldr	r3, [r3, #8]
 8017096:	4619      	mov	r1, r3
 8017098:	460b      	mov	r3, r1
 801709a:	005b      	lsls	r3, r3, #1
 801709c:	440b      	add	r3, r1
 801709e:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 80170a0:	4413      	add	r3, r2
 80170a2:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80170a4:	e7e2      	b.n	801706c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 80170a6:	bf00      	nop
  } while (true);
  return result;
 80170a8:	697b      	ldr	r3, [r7, #20]
}
 80170aa:	4618      	mov	r0, r3
 80170ac:	3718      	adds	r7, #24
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}

080170b2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 80170b2:	b580      	push	{r7, lr}
 80170b4:	b098      	sub	sp, #96	; 0x60
 80170b6:	af00      	add	r7, sp, #0
 80170b8:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80170c0:	f083 0301 	eor.w	r3, r3, #1
 80170c4:	b2db      	uxtb	r3, r3
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	f040 8160 	bne.w	801738c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	689b      	ldr	r3, [r3, #8]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 815b 	beq.w	801738c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    return;
  }
  need_to_calculate_offsets_ = false;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2200      	movs	r2, #0
 80170da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	689b      	ldr	r3, [r3, #8]
 80170e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 80170e4:	2300      	movs	r3, #0
 80170e6:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 80170e8:	2300      	movs	r3, #0
 80170ea:	657b      	str	r3, [r7, #84]	; 0x54
 80170ec:	e04c      	b.n	8017188 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	68da      	ldr	r2, [r3, #12]
 80170f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170f4:	011b      	lsls	r3, r3, #4
 80170f6:	4413      	add	r3, r2
 80170f8:	685b      	ldr	r3, [r3, #4]
 80170fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170fe:	d11e      	bne.n	801713e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8c>
      idx_from_tail--;
 8017100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017102:	3b01      	subs	r3, #1
 8017104:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	68da      	ldr	r2, [r3, #12]
 801710a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801710c:	011b      	lsls	r3, r3, #4
 801710e:	441a      	add	r2, r3
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6919      	ldr	r1, [r3, #16]
 8017114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017116:	009b      	lsls	r3, r3, #2
 8017118:	440b      	add	r3, r1
 801711a:	6812      	ldr	r2, [r2, #0]
 801711c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	695a      	ldr	r2, [r3, #20]
 8017122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017124:	009b      	lsls	r3, r3, #2
 8017126:	4413      	add	r3, r2
 8017128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801712a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017132:	009b      	lsls	r3, r3, #2
 8017134:	4413      	add	r3, r2
 8017136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801713a:	601a      	str	r2, [r3, #0]
 801713c:	e021      	b.n	8017182 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd0>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	68da      	ldr	r2, [r3, #12]
 8017142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017144:	011b      	lsls	r3, r3, #4
 8017146:	441a      	add	r2, r3
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6919      	ldr	r1, [r3, #16]
 801714c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	440b      	add	r3, r1
 8017152:	6812      	ldr	r2, [r2, #0]
 8017154:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	695a      	ldr	r2, [r3, #20]
 801715a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801715c:	009b      	lsls	r3, r3, #2
 801715e:	4413      	add	r3, r2
 8017160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017162:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	68da      	ldr	r2, [r3, #12]
 8017168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801716a:	011b      	lsls	r3, r3, #4
 801716c:	441a      	add	r2, r3
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017174:	009b      	lsls	r3, r3, #2
 8017176:	440b      	add	r3, r1
 8017178:	6852      	ldr	r2, [r2, #4]
 801717a:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 801717c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801717e:	3301      	adds	r3, #1
 8017180:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8017182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017184:	3301      	adds	r3, #1
 8017186:	657b      	str	r3, [r7, #84]	; 0x54
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	689b      	ldr	r3, [r3, #8]
 801718c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801718e:	429a      	cmp	r2, r3
 8017190:	dbad      	blt.n	80170ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	691a      	ldr	r2, [r3, #16]
 8017196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017198:	009b      	lsls	r3, r3, #2
 801719a:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	695a      	ldr	r2, [r3, #20]
 80171a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171a2:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80171a4:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80171aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171ac:	1ad3      	subs	r3, r2, r3
 80171ae:	461a      	mov	r2, r3
 80171b0:	f7ff fdd0 	bl	8016d54 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2200      	movs	r2, #0
 80171b8:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	2201      	movs	r2, #1
 80171be:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	699a      	ldr	r2, [r3, #24]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	6a1b      	ldr	r3, [r3, #32]
 80171c8:	4619      	mov	r1, r3
 80171ca:	460b      	mov	r3, r1
 80171cc:	005b      	lsls	r3, r3, #1
 80171ce:	440b      	add	r3, r1
 80171d0:	009b      	lsls	r3, r3, #2
 80171d2:	4413      	add	r3, r2
 80171d4:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 80171d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80171dc:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	695b      	ldr	r3, [r3, #20]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 80171e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80171ea:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	68da      	ldr	r2, [r3, #12]
 80171f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171f2:	011b      	lsls	r3, r3, #4
 80171f4:	4413      	add	r3, r2
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80171fc:	d106      	bne.n	801720c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017204:	009b      	lsls	r3, r3, #2
 8017206:	4413      	add	r3, r2
 8017208:	2200      	movs	r2, #0
 801720a:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017212:	009b      	lsls	r3, r3, #2
 8017214:	4413      	add	r3, r2
 8017216:	681a      	ldr	r2, [r3, #0]
 8017218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801721a:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 801721c:	2301      	movs	r3, #1
 801721e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017220:	e0ad      	b.n	801737e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2cc>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	695a      	ldr	r2, [r3, #20]
 8017226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	4413      	add	r3, r2
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	68da      	ldr	r2, [r3, #12]
 8017234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017236:	011b      	lsls	r3, r3, #4
 8017238:	4413      	add	r3, r2
 801723a:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 801723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8017242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017244:	689b      	ldr	r3, [r3, #8]
 8017246:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8017248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 801724e:	2300      	movs	r3, #0
 8017250:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8017252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801725a:	d12d      	bne.n	80172b8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
      ListEntry* prior_entry = nullptr;
 801725c:	2300      	movs	r3, #0
 801725e:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 8017260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017264:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f7ff fed6 	bl	8017018 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 801726c:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 801726e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017270:	2b00      	cmp	r3, #0
 8017272:	d012      	beq.n	801729a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	68da      	ldr	r2, [r3, #12]
 8017278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 801727e:	4413      	add	r3, r2
 8017280:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8017282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017288:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 801728a:	4413      	add	r3, r2
 801728c:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 801728e:	6a3a      	ldr	r2, [r7, #32]
 8017290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017292:	429a      	cmp	r2, r3
 8017294:	dd01      	ble.n	801729a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
            candidate_offset = prior_entry_offset;
 8017296:	6a3b      	ldr	r3, [r7, #32]
 8017298:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 801729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729c:	2b00      	cmp	r3, #0
 801729e:	d00f      	beq.n	80172c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20e>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 80172a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a2:	681a      	ldr	r2, [r3, #0]
 80172a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172a6:	1ad3      	subs	r3, r2, r3
 80172a8:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 80172aa:	69fa      	ldr	r2, [r7, #28]
 80172ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172ae:	429a      	cmp	r2, r3
 80172b0:	da08      	bge.n	80172c4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x212>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 80172b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
 80172b6:	e7d3      	b.n	8017260 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 80172b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80172be:	e002      	b.n	80172c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 80172c0:	bf00      	nop
 80172c2:	e000      	b.n	80172c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 80172c4:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80172ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172cc:	009b      	lsls	r3, r3, #2
 80172ce:	4413      	add	r3, r2
 80172d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80172d2:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	699a      	ldr	r2, [r3, #24]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	69db      	ldr	r3, [r3, #28]
 80172dc:	4619      	mov	r1, r3
 80172de:	460b      	mov	r3, r1
 80172e0:	005b      	lsls	r3, r3, #1
 80172e2:	440b      	add	r3, r1
 80172e4:	009b      	lsls	r3, r3, #2
 80172e6:	4413      	add	r3, r2
 80172e8:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 80172ea:	69bb      	ldr	r3, [r7, #24]
 80172ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80172ee:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 80172f0:	69bb      	ldr	r3, [r7, #24]
 80172f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80172f4:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	69db      	ldr	r3, [r3, #28]
 80172fa:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	69db      	ldr	r3, [r3, #28]
 8017300:	1c5a      	adds	r2, r3, #1
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8017306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801730c:	429a      	cmp	r2, r3
 801730e:	da09      	bge.n	8017324 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x272>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8017310:	69bb      	ldr	r3, [r7, #24]
 8017312:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6a1a      	ldr	r2, [r3, #32]
 8017318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801731a:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	697a      	ldr	r2, [r7, #20]
 8017320:	621a      	str	r2, [r3, #32]
 8017322:	e029      	b.n	8017378 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
    } else {
      ListEntry* current_entry = first_entry;
 8017324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017326:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 8017328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801732a:	689b      	ldr	r3, [r3, #8]
 801732c:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 801732e:	693b      	ldr	r3, [r7, #16]
 8017330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017334:	d107      	bne.n	8017346 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x294>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8017336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017338:	697a      	ldr	r2, [r7, #20]
 801733a:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 801733c:	69bb      	ldr	r3, [r7, #24]
 801733e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017342:	609a      	str	r2, [r3, #8]
          break;
 8017344:	e018      	b.n	8017378 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6999      	ldr	r1, [r3, #24]
 801734a:	693a      	ldr	r2, [r7, #16]
 801734c:	4613      	mov	r3, r2
 801734e:	005b      	lsls	r3, r3, #1
 8017350:	4413      	add	r3, r2
 8017352:	009b      	lsls	r3, r3, #2
 8017354:	440b      	add	r3, r1
 8017356:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801735e:	429a      	cmp	r2, r3
 8017360:	da07      	bge.n	8017372 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c0>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 8017362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017364:	689a      	ldr	r2, [r3, #8]
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 801736a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801736c:	697a      	ldr	r2, [r7, #20]
 801736e:	609a      	str	r2, [r3, #8]
          break;
 8017370:	e002      	b.n	8017378 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        current_entry = next_entry;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	643b      	str	r3, [r7, #64]	; 0x40
      }
 8017376:	e7d7      	b.n	8017328 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x276>
  for (int i = 1; i < buffer_count_; ++i) {
 8017378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801737a:	3301      	adds	r3, #1
 801737c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	689b      	ldr	r3, [r3, #8]
 8017382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017384:	429a      	cmp	r2, r3
 8017386:	f6ff af4c 	blt.w	8017222 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x170>
 801738a:	e000      	b.n	801738e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2dc>
    return;
 801738c:	bf00      	nop
    }
  }
}
 801738e:	3760      	adds	r7, #96	; 0x60
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}

08017394 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 8017394:	b580      	push	{r7, lr}
 8017396:	b086      	sub	sp, #24
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f7ff fe88 	bl	80170b2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	689b      	ldr	r3, [r3, #8]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d101      	bne.n	80173ae <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 80173aa:	2300      	movs	r3, #0
 80173ac:	e036      	b.n	801741c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x88>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	699a      	ldr	r2, [r3, #24]
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6a1b      	ldr	r3, [r3, #32]
 80173b6:	4619      	mov	r1, r3
 80173b8:	460b      	mov	r3, r1
 80173ba:	005b      	lsls	r3, r3, #1
 80173bc:	440b      	add	r3, r1
 80173be:	009b      	lsls	r3, r3, #2
 80173c0:	4413      	add	r3, r2
 80173c2:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 80173c4:	2300      	movs	r3, #0
 80173c6:	613b      	str	r3, [r7, #16]
  while (entry) {
 80173c8:	e022      	b.n	8017410 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7c>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	68da      	ldr	r2, [r3, #12]
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 80173d4:	4413      	add	r3, r2
 80173d6:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	681a      	ldr	r2, [r3, #0]
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	4413      	add	r3, r2
 80173e2:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 80173e4:	68ba      	ldr	r2, [r7, #8]
 80173e6:	693b      	ldr	r3, [r7, #16]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d901      	bls.n	80173f0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
      max_size = current_size;
 80173ec:	68bb      	ldr	r3, [r7, #8]
 80173ee:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 80173f0:	697b      	ldr	r3, [r7, #20]
 80173f2:	689b      	ldr	r3, [r3, #8]
 80173f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173f8:	d00e      	beq.n	8017418 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	699a      	ldr	r2, [r3, #24]
 80173fe:	697b      	ldr	r3, [r7, #20]
 8017400:	689b      	ldr	r3, [r3, #8]
 8017402:	4619      	mov	r1, r3
 8017404:	460b      	mov	r3, r1
 8017406:	005b      	lsls	r3, r3, #1
 8017408:	440b      	add	r3, r1
 801740a:	009b      	lsls	r3, r3, #2
 801740c:	4413      	add	r3, r2
 801740e:	617b      	str	r3, [r7, #20]
  while (entry) {
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d1d9      	bne.n	80173ca <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x36>
 8017416:	e000      	b.n	801741a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
      break;
 8017418:	bf00      	nop
  }
  return max_size;
 801741a:	693b      	ldr	r3, [r7, #16]
}
 801741c:	4618      	mov	r0, r3
 801741e:	3718      	adds	r7, #24
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8017424:	b480      	push	{r7}
 8017426:	b083      	sub	sp, #12
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	689b      	ldr	r3, [r3, #8]
 8017430:	4618      	mov	r0, r3
 8017432:	370c      	adds	r7, #12
 8017434:	46bd      	mov	sp, r7
 8017436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743a:	4770      	bx	lr

0801743c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 801743c:	b580      	push	{r7, lr}
 801743e:	b084      	sub	sp, #16
 8017440:	af00      	add	r7, sp, #0
 8017442:	60f8      	str	r0, [r7, #12]
 8017444:	60b9      	str	r1, [r7, #8]
 8017446:	607a      	str	r2, [r7, #4]
 8017448:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 801744a:	68f8      	ldr	r0, [r7, #12]
 801744c:	f7ff fe31 	bl	80170b2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2b00      	cmp	r3, #0
 8017454:	db04      	blt.n	8017460 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	689b      	ldr	r3, [r3, #8]
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	429a      	cmp	r2, r3
 801745e:	db08      	blt.n	8017472 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	689b      	ldr	r3, [r3, #8]
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	4909      	ldr	r1, [pc, #36]	; (801748c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 8017468:	68b8      	ldr	r0, [r7, #8]
 801746a:	f7ed fcbb 	bl	8004de4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 801746e:	2301      	movs	r3, #1
 8017470:	e008      	b.n	8017484 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	009b      	lsls	r3, r3, #2
 801747a:	4413      	add	r3, r2
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8017482:	2300      	movs	r3, #0
}
 8017484:	4618      	mov	r0, r3
 8017486:	3710      	adds	r7, #16
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}
 801748c:	0804d6b0 	.word	0x0804d6b0

08017490 <arm_elementwise_add_s8>:
                       const int32_t out_mult,
                       const int32_t out_shift,
                       const int32_t out_activation_min,
                       const int32_t out_activation_max,
                       const uint32_t block_size)
{
 8017490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017494:	b099      	sub	sp, #100	; 0x64
 8017496:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
 801749a:	920e      	str	r2, [sp, #56]	; 0x38

  int32_t offset_1_packed, offset_2_packed;

  int8_t r1, r2, r3, r4;

  offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
 801749c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801749e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
{
 80174a2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80174a4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80174a6:	9829      	ldr	r0, [sp, #164]	; 0xa4
    // Rounding offset to add for a right shift of 31
    q63_t mult = 1 << 30;

    if ((m1 < 0) ^ (m2 < 0))
    {
        mult = 1 - mult;
 80174a8:	f8df 8724 	ldr.w	r8, [pc, #1828]	; 8017bd0 <arm_elementwise_add_s8+0x740>
  offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
 80174ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80174b0:	9211      	str	r2, [sp, #68]	; 0x44
  offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
 80174b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80174b4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80174b6:	b292      	uxth	r2, r2
 80174b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80174bc:	9212      	str	r2, [sp, #72]	; 0x48
    a_2 = __SADD16(a_2, offset_2_packed);
    b_2 = __SADD16(b_2, offset_2_packed);

    /* Sum 1 */
    input_1 = (int16_t)(b_1 & 0x0FFFFL) << left_shift;
    SAT_INPUT(input_1, input_1_mult, input_1_shift);
 80174be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent)
{
    q31_t result = 0;
    const q31_t remainder_mask = (1 << exponent) - 1;
 80174c0:	2401      	movs	r4, #1
 80174c2:	4252      	negs	r2, r2
 80174c4:	9200      	str	r2, [sp, #0]
 80174c6:	fa04 f202 	lsl.w	r2, r4, r2
 80174ca:	3a01      	subs	r2, #1
 80174cc:	9207      	str	r2, [sp, #28]

    // Basic division
    result = dividend >> exponent;

    // Adjust 'result' for rounding (mid point away from zero)
    q31_t threshold = remainder_mask >> 1;
 80174ce:	4122      	asrs	r2, r4
 80174d0:	9208      	str	r2, [sp, #32]
    if (result < 0)
    {
        threshold++;
 80174d2:	4422      	add	r2, r4
 80174d4:	920b      	str	r2, [sp, #44]	; 0x2c

    input_2 = (int16_t)(b_2 & 0x0FFFFL) << left_shift;
    SAT_INPUT(input_2, input_2_mult, input_2_shift);
 80174d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80174d8:	4252      	negs	r2, r2
 80174da:	9201      	str	r2, [sp, #4]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80174dc:	fa04 f202 	lsl.w	r2, r4, r2
 80174e0:	3a01      	subs	r2, #1
 80174e2:	9205      	str	r2, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 80174e4:	4122      	asrs	r2, r4
 80174e6:	9206      	str	r2, [sp, #24]
        threshold++;
 80174e8:	4422      	add	r2, r4
 80174ea:	920a      	str	r2, [sp, #40]	; 0x28

    sum = input_1 + input_2;
    SAT_INPUT(sum, out_mult, out_shift);
 80174ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80174ee:	4252      	negs	r2, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 80174f0:	4094      	lsls	r4, r2
 80174f2:	9202      	str	r2, [sp, #8]
 80174f4:	1e62      	subs	r2, r4, #1
 80174f6:	9203      	str	r2, [sp, #12]
    q31_t threshold = remainder_mask >> 1;
 80174f8:	1052      	asrs	r2, r2, #1
 80174fa:	9204      	str	r2, [sp, #16]
        threshold++;
 80174fc:	3201      	adds	r2, #1
 80174fe:	9209      	str	r2, [sp, #36]	; 0x24
 8017500:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017502:	f022 0b03 	bic.w	fp, r2, #3
 8017506:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017508:	445a      	add	r2, fp
 801750a:	920c      	str	r2, [sp, #48]	; 0x30
  while (loop_count > 0U)
 801750c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801750e:	9210      	str	r2, [sp, #64]	; 0x40
 8017510:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017512:	920f      	str	r2, [sp, #60]	; 0x3c
    result = (int32_t) (mult / (1ll << 31));
 8017514:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8017518:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801751a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801751c:	42b2      	cmp	r2, r6
 801751e:	d118      	bne.n	8017552 <arm_elementwise_add_s8+0xc2>
 8017520:	9a15      	ldr	r2, [sp, #84]	; 0x54
        mult = 1 - mult;
 8017522:	f8df e6ac 	ldr.w	lr, [pc, #1708]	; 8017bd0 <arm_elementwise_add_s8+0x740>
 8017526:	445a      	add	r2, fp
 8017528:	4690      	mov	r8, r2
 801752a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801752c:	445a      	add	r2, fp
 801752e:	4691      	mov	r9, r2
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));

    loop_count--;
  }

  loop_count = block_size & 0x3;
 8017530:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017532:	f002 0603 	and.w	r6, r2, #3
 8017536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017538:	18b2      	adds	r2, r6, r2
 801753a:	920d      	str	r2, [sp, #52]	; 0x34
    result = (int32_t) (mult / (1ll << 31));
 801753c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
#else
  loop_count = block_size;
#endif

  while (loop_count > 0U)
 8017540:	e9dd 240c 	ldrd	r2, r4, [sp, #48]	; 0x30
 8017544:	42a2      	cmp	r2, r4
 8017546:	f040 82a4 	bne.w	8017a92 <arm_elementwise_add_s8+0x602>
  }

#endif /* ARM_MATH_MVEI */

  return (ARM_MATH_SUCCESS);
}
 801754a:	2000      	movs	r0, #0
 801754c:	b019      	add	sp, #100	; 0x64
 801754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memcpy(&val, *in_q7, 4);
 8017552:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017554:	f852 eb04 	ldr.w	lr, [r2], #4
 8017558:	920f      	str	r2, [sp, #60]	; 0x3c
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 801755a:	ea4f 263e 	mov.w	r6, lr, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801755e:	fa2f f686 	sxtb16	r6, r6
 8017562:	fa2f fe8e 	sxtb16	lr, lr
 8017566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017568:	f852 cb04 	ldr.w	ip, [r2], #4
 801756c:	9210      	str	r2, [sp, #64]	; 0x40
  return (op1 >> op2) | (op1 << (32U - op2));
 801756e:	ea4f 223c 	mov.w	r2, ip, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017572:	fa2f f282 	sxtb16	r2, r2
 8017576:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801757a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801757c:	fa96 f607 	sadd16	r6, r6, r7
 8017580:	9614      	str	r6, [sp, #80]	; 0x50
 8017582:	fa9e fe07 	sadd16	lr, lr, r7
 8017586:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017588:	fa92 f206 	sadd16	r2, r2, r6
 801758c:	9213      	str	r2, [sp, #76]	; 0x4c
 801758e:	fa9c fc06 	sadd16	ip, ip, r6
    input_1 = (int16_t)(b_1 & 0x0FFFFL) << left_shift;
 8017592:	fa0f f28e 	sxth.w	r2, lr
 8017596:	40aa      	lsls	r2, r5
    if ((m1 < 0) ^ (m2 < 0))
 8017598:	ea83 0602 	eor.w	r6, r3, r2
 801759c:	0ff6      	lsrs	r6, r6, #31
        mult = 1 - mult;
 801759e:	2e00      	cmp	r6, #0
 80175a0:	bf0b      	itete	eq
 80175a2:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 80175a6:	4646      	movne	r6, r8
 80175a8:	f04f 0900 	moveq.w	r9, #0
 80175ac:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80175b0:	fbc2 6903 	smlal	r6, r9, r2, r3
 80175b4:	f1b9 0f00 	cmp.w	r9, #0
 80175b8:	da02      	bge.n	80175c0 <arm_elementwise_add_s8+0x130>
 80175ba:	1936      	adds	r6, r6, r4
 80175bc:	f149 0900 	adc.w	r9, r9, #0
 80175c0:	0ff6      	lsrs	r6, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80175c2:	4293      	cmp	r3, r2
    result = (int32_t) (mult / (1ll << 31));
 80175c4:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80175c8:	d104      	bne.n	80175d4 <arm_elementwise_add_s8+0x144>
        result = Q31_MAX;
 80175ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80175ce:	bf08      	it	eq
 80175d0:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 80175d4:	9a07      	ldr	r2, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
 80175d6:	9f00      	ldr	r7, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 80175d8:	ea02 0a06 	and.w	sl, r2, r6
    q31_t threshold = remainder_mask >> 1;
 80175dc:	413e      	asrs	r6, r7
 80175de:	9a08      	ldr	r2, [sp, #32]
 80175e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80175e2:	bf54      	ite	pl
 80175e4:	4691      	movpl	r9, r2
 80175e6:	46b9      	movmi	r9, r7
    }
    if (remainder > threshold)
 80175e8:	45ca      	cmp	sl, r9
    input_2 = (int16_t)(b_2 & 0x0FFFFL) << left_shift;
 80175ea:	fa0f f98c 	sxth.w	r9, ip
 80175ee:	fa09 f905 	lsl.w	r9, r9, r5
    if ((m1 < 0) ^ (m2 < 0))
 80175f2:	ea81 0209 	eor.w	r2, r1, r9
 80175f6:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    {
        result++;
 80175fa:	bfc8      	it	gt
 80175fc:	3601      	addgt	r6, #1
        mult = 1 - mult;
 80175fe:	2a00      	cmp	r2, #0
 8017600:	bf0b      	itete	eq
 8017602:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8017606:	4642      	movne	r2, r8
 8017608:	f04f 0a00 	moveq.w	sl, #0
 801760c:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017610:	fbc9 2a01 	smlal	r2, sl, r9, r1
 8017614:	f1ba 0f00 	cmp.w	sl, #0
 8017618:	da02      	bge.n	8017620 <arm_elementwise_add_s8+0x190>
 801761a:	1912      	adds	r2, r2, r4
 801761c:	f14a 0a00 	adc.w	sl, sl, #0
 8017620:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017622:	4549      	cmp	r1, r9
    result = (int32_t) (mult / (1ll << 31));
 8017624:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017628:	d104      	bne.n	8017634 <arm_elementwise_add_s8+0x1a4>
        result = Q31_MAX;
 801762a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 801762e:	bf08      	it	eq
 8017630:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017634:	9f05      	ldr	r7, [sp, #20]
 8017636:	ea07 0902 	and.w	r9, r7, r2
    q31_t threshold = remainder_mask >> 1;
 801763a:	9f01      	ldr	r7, [sp, #4]
 801763c:	413a      	asrs	r2, r7
 801763e:	920d      	str	r2, [sp, #52]	; 0x34
 8017640:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017642:	9a06      	ldr	r2, [sp, #24]
 8017644:	bf4c      	ite	mi
 8017646:	46ba      	movmi	sl, r7
 8017648:	4692      	movpl	sl, r2
    if (remainder > threshold)
 801764a:	45d1      	cmp	r9, sl
        result++;
 801764c:	bfc2      	ittt	gt
 801764e:	9a0d      	ldrgt	r2, [sp, #52]	; 0x34
 8017650:	3201      	addgt	r2, #1
 8017652:	920d      	strgt	r2, [sp, #52]	; 0x34
    sum = input_1 + input_2;
 8017654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017656:	4432      	add	r2, r6
    if ((m1 < 0) ^ (m2 < 0))
 8017658:	ea80 0602 	eor.w	r6, r0, r2
 801765c:	0ff6      	lsrs	r6, r6, #31
        mult = 1 - mult;
 801765e:	2e00      	cmp	r6, #0
 8017660:	bf0b      	itete	eq
 8017662:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 8017666:	4646      	movne	r6, r8
 8017668:	f04f 0900 	moveq.w	r9, #0
 801766c:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017670:	fbc2 6900 	smlal	r6, r9, r2, r0
 8017674:	f1b9 0f00 	cmp.w	r9, #0
 8017678:	da02      	bge.n	8017680 <arm_elementwise_add_s8+0x1f0>
 801767a:	1936      	adds	r6, r6, r4
 801767c:	f149 0900 	adc.w	r9, r9, #0
 8017680:	0ff6      	lsrs	r6, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017682:	4290      	cmp	r0, r2
    result = (int32_t) (mult / (1ll << 31));
 8017684:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017688:	d104      	bne.n	8017694 <arm_elementwise_add_s8+0x204>
        result = Q31_MAX;
 801768a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801768e:	bf08      	it	eq
 8017690:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017694:	9a03      	ldr	r2, [sp, #12]
    q31_t threshold = remainder_mask >> 1;
 8017696:	9f02      	ldr	r7, [sp, #8]
    int32_t remainder = remainder_mask & dividend;
 8017698:	ea02 0a06 	and.w	sl, r2, r6
    q31_t threshold = remainder_mask >> 1;
 801769c:	413e      	asrs	r6, r7
 801769e:	9a04      	ldr	r2, [sp, #16]
 80176a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80176a2:	bf54      	ite	pl
 80176a4:	4691      	movpl	r9, r2
 80176a6:	46b9      	movmi	r9, r7
    sum += out_offset;
 80176a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    if (remainder > threshold)
 80176aa:	45ca      	cmp	sl, r9
        result++;
 80176ac:	bfc8      	it	gt
 80176ae:	3601      	addgt	r6, #1
 80176b0:	4416      	add	r6, r2
    sum = MAX(sum, out_activation_min);
 80176b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80176b4:	4296      	cmp	r6, r2
 80176b6:	bfb8      	it	lt
 80176b8:	4616      	movlt	r6, r2
    sum = MIN(sum, out_activation_max);
 80176ba:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80176bc:	4296      	cmp	r6, r2
 80176be:	bfa8      	it	ge
 80176c0:	4616      	movge	r6, r2
    input_1 = (int16_t)((b_1 >> 16) & 0x0FFFFL) << left_shift;
 80176c2:	ea4f 4e2e 	mov.w	lr, lr, asr #16
    r1 = (q7_t)sum;
 80176c6:	b272      	sxtb	r2, r6
    input_1 = (int16_t)((b_1 >> 16) & 0x0FFFFL) << left_shift;
 80176c8:	fa0e fe05 	lsl.w	lr, lr, r5
    r1 = (q7_t)sum;
 80176cc:	920d      	str	r2, [sp, #52]	; 0x34
    if ((m1 < 0) ^ (m2 < 0))
 80176ce:	ea83 020e 	eor.w	r2, r3, lr
 80176d2:	0fd2      	lsrs	r2, r2, #31
        mult = 1 - mult;
 80176d4:	2a00      	cmp	r2, #0
 80176d6:	bf0b      	itete	eq
 80176d8:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 80176dc:	4646      	movne	r6, r8
 80176de:	2200      	moveq	r2, #0
 80176e0:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80176e4:	fbce 6203 	smlal	r6, r2, lr, r3
 80176e8:	2a00      	cmp	r2, #0
 80176ea:	da02      	bge.n	80176f2 <arm_elementwise_add_s8+0x262>
 80176ec:	1936      	adds	r6, r6, r4
 80176ee:	f142 0200 	adc.w	r2, r2, #0
 80176f2:	0ff6      	lsrs	r6, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80176f4:	4573      	cmp	r3, lr
    result = (int32_t) (mult / (1ll << 31));
 80176f6:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80176fa:	d104      	bne.n	8017706 <arm_elementwise_add_s8+0x276>
        result = Q31_MAX;
 80176fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017700:	bf08      	it	eq
 8017702:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017706:	9a07      	ldr	r2, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
 8017708:	9f00      	ldr	r7, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 801770a:	ea06 0902 	and.w	r9, r6, r2
    input_2 = (int16_t)((b_2 >> 16) & 0x0FFFFL) << left_shift;
 801770e:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    q31_t threshold = remainder_mask >> 1;
 8017712:	413e      	asrs	r6, r7
 8017714:	9a08      	ldr	r2, [sp, #32]
 8017716:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017718:	fa0c fc05 	lsl.w	ip, ip, r5
 801771c:	bf54      	ite	pl
 801771e:	4696      	movpl	lr, r2
 8017720:	46be      	movmi	lr, r7
    if ((m1 < 0) ^ (m2 < 0))
 8017722:	ea81 020c 	eor.w	r2, r1, ip
    if (remainder > threshold)
 8017726:	45f1      	cmp	r9, lr
    if ((m1 < 0) ^ (m2 < 0))
 8017728:	ea4f 72d2 	mov.w	r2, r2, lsr #31
        result++;
 801772c:	bfc8      	it	gt
 801772e:	3601      	addgt	r6, #1
        mult = 1 - mult;
 8017730:	2a00      	cmp	r2, #0
 8017732:	bf0b      	itete	eq
 8017734:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8017738:	4642      	movne	r2, r8
 801773a:	f04f 0e00 	moveq.w	lr, #0
 801773e:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017742:	fbcc 2e01 	smlal	r2, lr, ip, r1
 8017746:	f1be 0f00 	cmp.w	lr, #0
 801774a:	da02      	bge.n	8017752 <arm_elementwise_add_s8+0x2c2>
 801774c:	1912      	adds	r2, r2, r4
 801774e:	f14e 0e00 	adc.w	lr, lr, #0
 8017752:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017754:	4561      	cmp	r1, ip
    result = (int32_t) (mult / (1ll << 31));
 8017756:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801775a:	d104      	bne.n	8017766 <arm_elementwise_add_s8+0x2d6>
        result = Q31_MAX;
 801775c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8017760:	bf08      	it	eq
 8017762:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017766:	9f05      	ldr	r7, [sp, #20]
 8017768:	ea02 0c07 	and.w	ip, r2, r7
    q31_t threshold = remainder_mask >> 1;
 801776c:	9f01      	ldr	r7, [sp, #4]
 801776e:	fa52 f907 	asrs.w	r9, r2, r7
 8017772:	9a06      	ldr	r2, [sp, #24]
 8017774:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017776:	bf54      	ite	pl
 8017778:	4696      	movpl	lr, r2
 801777a:	46be      	movmi	lr, r7
    if (remainder > threshold)
 801777c:	45f4      	cmp	ip, lr
        result++;
 801777e:	bfc8      	it	gt
 8017780:	f109 0901 	addgt.w	r9, r9, #1
    sum = input_1 + input_2;
 8017784:	eb09 0206 	add.w	r2, r9, r6
    if ((m1 < 0) ^ (m2 < 0))
 8017788:	ea80 0602 	eor.w	r6, r0, r2
 801778c:	0ff6      	lsrs	r6, r6, #31
        mult = 1 - mult;
 801778e:	2e00      	cmp	r6, #0
 8017790:	bf0b      	itete	eq
 8017792:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 8017796:	4646      	movne	r6, r8
 8017798:	f04f 0c00 	moveq.w	ip, #0
 801779c:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80177a0:	fbc2 6c00 	smlal	r6, ip, r2, r0
 80177a4:	f1bc 0f00 	cmp.w	ip, #0
 80177a8:	da02      	bge.n	80177b0 <arm_elementwise_add_s8+0x320>
 80177aa:	1936      	adds	r6, r6, r4
 80177ac:	f14c 0c00 	adc.w	ip, ip, #0
 80177b0:	0ff6      	lsrs	r6, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80177b2:	4290      	cmp	r0, r2
    result = (int32_t) (mult / (1ll << 31));
 80177b4:	ea46 064c 	orr.w	r6, r6, ip, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80177b8:	d104      	bne.n	80177c4 <arm_elementwise_add_s8+0x334>
        result = Q31_MAX;
 80177ba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80177be:	bf08      	it	eq
 80177c0:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 80177c4:	9a03      	ldr	r2, [sp, #12]
    q31_t threshold = remainder_mask >> 1;
 80177c6:	9f02      	ldr	r7, [sp, #8]
    int32_t remainder = remainder_mask & dividend;
 80177c8:	ea06 0e02 	and.w	lr, r6, r2
    q31_t threshold = remainder_mask >> 1;
 80177cc:	413e      	asrs	r6, r7
 80177ce:	9a04      	ldr	r2, [sp, #16]
 80177d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80177d2:	bf54      	ite	pl
 80177d4:	4694      	movpl	ip, r2
 80177d6:	46bc      	movmi	ip, r7
    if (remainder > threshold)
 80177d8:	45e6      	cmp	lr, ip
    sum += out_offset;
 80177da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
        result++;
 80177dc:	bfc8      	it	gt
 80177de:	3601      	addgt	r6, #1
 80177e0:	4416      	add	r6, r2
    sum = MAX(sum, out_activation_min);
 80177e2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80177e4:	4296      	cmp	r6, r2
 80177e6:	bfb8      	it	lt
 80177e8:	4616      	movlt	r6, r2
    sum = MIN(sum, out_activation_max);
 80177ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80177ec:	4296      	cmp	r6, r2
 80177ee:	bfa8      	it	ge
 80177f0:	4616      	movge	r6, r2
    input_1 = (int16_t)(a_1 & 0x0FFFFL) << left_shift;
 80177f2:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 80177f6:	40aa      	lsls	r2, r5
    r3 = (q7_t)sum;
 80177f8:	fa4f fa86 	sxtb.w	sl, r6
    if ((m1 < 0) ^ (m2 < 0))
 80177fc:	ea83 0602 	eor.w	r6, r3, r2
 8017800:	0ff6      	lsrs	r6, r6, #31
        mult = 1 - mult;
 8017802:	2e00      	cmp	r6, #0
 8017804:	bf0b      	itete	eq
 8017806:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 801780a:	4646      	movne	r6, r8
 801780c:	f04f 0c00 	moveq.w	ip, #0
 8017810:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017814:	fbc2 6c03 	smlal	r6, ip, r2, r3
 8017818:	f1bc 0f00 	cmp.w	ip, #0
 801781c:	da02      	bge.n	8017824 <arm_elementwise_add_s8+0x394>
 801781e:	1936      	adds	r6, r6, r4
 8017820:	f14c 0c00 	adc.w	ip, ip, #0
 8017824:	0ff6      	lsrs	r6, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017826:	4293      	cmp	r3, r2
    result = (int32_t) (mult / (1ll << 31));
 8017828:	ea46 064c 	orr.w	r6, r6, ip, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801782c:	d104      	bne.n	8017838 <arm_elementwise_add_s8+0x3a8>
        result = Q31_MAX;
 801782e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017832:	bf08      	it	eq
 8017834:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017838:	9a07      	ldr	r2, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
 801783a:	9f00      	ldr	r7, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 801783c:	ea06 0e02 	and.w	lr, r6, r2
    q31_t threshold = remainder_mask >> 1;
 8017840:	413e      	asrs	r6, r7
 8017842:	9a08      	ldr	r2, [sp, #32]
 8017844:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017846:	bf54      	ite	pl
 8017848:	4694      	movpl	ip, r2
 801784a:	46bc      	movmi	ip, r7
    if (remainder > threshold)
 801784c:	45e6      	cmp	lr, ip
    input_2 = (int16_t)(a_2 & 0x0FFFFL) << left_shift;
 801784e:	f9bd c04c 	ldrsh.w	ip, [sp, #76]	; 0x4c
 8017852:	fa0c fc05 	lsl.w	ip, ip, r5
    if ((m1 < 0) ^ (m2 < 0))
 8017856:	ea81 020c 	eor.w	r2, r1, ip
 801785a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
        result++;
 801785e:	bfc8      	it	gt
 8017860:	3601      	addgt	r6, #1
        mult = 1 - mult;
 8017862:	2a00      	cmp	r2, #0
 8017864:	bf0b      	itete	eq
 8017866:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 801786a:	4642      	movne	r2, r8
 801786c:	f04f 0e00 	moveq.w	lr, #0
 8017870:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017874:	fbcc 2e01 	smlal	r2, lr, ip, r1
 8017878:	f1be 0f00 	cmp.w	lr, #0
 801787c:	da02      	bge.n	8017884 <arm_elementwise_add_s8+0x3f4>
 801787e:	1912      	adds	r2, r2, r4
 8017880:	f14e 0e00 	adc.w	lr, lr, #0
 8017884:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017886:	4561      	cmp	r1, ip
    result = (int32_t) (mult / (1ll << 31));
 8017888:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801788c:	d104      	bne.n	8017898 <arm_elementwise_add_s8+0x408>
        result = Q31_MAX;
 801788e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8017892:	bf08      	it	eq
 8017894:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017898:	9f05      	ldr	r7, [sp, #20]
 801789a:	ea02 0c07 	and.w	ip, r2, r7
    q31_t threshold = remainder_mask >> 1;
 801789e:	9f01      	ldr	r7, [sp, #4]
 80178a0:	fa52 f907 	asrs.w	r9, r2, r7
 80178a4:	9a06      	ldr	r2, [sp, #24]
 80178a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80178a8:	bf54      	ite	pl
 80178aa:	4696      	movpl	lr, r2
 80178ac:	46be      	movmi	lr, r7
    if (remainder > threshold)
 80178ae:	45f4      	cmp	ip, lr
        result++;
 80178b0:	bfc8      	it	gt
 80178b2:	f109 0901 	addgt.w	r9, r9, #1
    sum = input_1 + input_2;
 80178b6:	eb09 0206 	add.w	r2, r9, r6
    if ((m1 < 0) ^ (m2 < 0))
 80178ba:	ea80 0602 	eor.w	r6, r0, r2
 80178be:	0ff6      	lsrs	r6, r6, #31
        mult = 1 - mult;
 80178c0:	2e00      	cmp	r6, #0
 80178c2:	bf0b      	itete	eq
 80178c4:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 80178c8:	4646      	movne	r6, r8
 80178ca:	f04f 0c00 	moveq.w	ip, #0
 80178ce:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80178d2:	fbc2 6c00 	smlal	r6, ip, r2, r0
 80178d6:	f1bc 0f00 	cmp.w	ip, #0
 80178da:	da02      	bge.n	80178e2 <arm_elementwise_add_s8+0x452>
 80178dc:	1936      	adds	r6, r6, r4
 80178de:	f14c 0c00 	adc.w	ip, ip, #0
 80178e2:	0ff6      	lsrs	r6, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80178e4:	4290      	cmp	r0, r2
    result = (int32_t) (mult / (1ll << 31));
 80178e6:	ea46 064c 	orr.w	r6, r6, ip, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80178ea:	d104      	bne.n	80178f6 <arm_elementwise_add_s8+0x466>
        result = Q31_MAX;
 80178ec:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80178f0:	bf08      	it	eq
 80178f2:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 80178f6:	9a03      	ldr	r2, [sp, #12]
    q31_t threshold = remainder_mask >> 1;
 80178f8:	9f02      	ldr	r7, [sp, #8]
    int32_t remainder = remainder_mask & dividend;
 80178fa:	ea06 0e02 	and.w	lr, r6, r2
    q31_t threshold = remainder_mask >> 1;
 80178fe:	413e      	asrs	r6, r7
 8017900:	9a04      	ldr	r2, [sp, #16]
 8017902:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017904:	bf54      	ite	pl
 8017906:	4694      	movpl	ip, r2
 8017908:	46bc      	movmi	ip, r7
    if (remainder > threshold)
 801790a:	45e6      	cmp	lr, ip
    sum += out_offset;
 801790c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
        result++;
 801790e:	bfc8      	it	gt
 8017910:	3601      	addgt	r6, #1
 8017912:	4416      	add	r6, r2
    sum = MAX(sum, out_activation_min);
 8017914:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017916:	4296      	cmp	r6, r2
 8017918:	bfb8      	it	lt
 801791a:	4616      	movlt	r6, r2
    sum = MIN(sum, out_activation_max);
 801791c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801791e:	4296      	cmp	r6, r2
 8017920:	bfa8      	it	ge
 8017922:	4616      	movge	r6, r2
    r2 = (q7_t)sum;
 8017924:	b272      	sxtb	r2, r6
    input_1 = (int16_t)((a_1 >> 16) & 0x0FFFFL) << left_shift;
 8017926:	9e14      	ldr	r6, [sp, #80]	; 0x50
    r2 = (q7_t)sum;
 8017928:	9217      	str	r2, [sp, #92]	; 0x5c
    input_1 = (int16_t)((a_1 >> 16) & 0x0FFFFL) << left_shift;
 801792a:	1436      	asrs	r6, r6, #16
 801792c:	40ae      	lsls	r6, r5
    if ((m1 < 0) ^ (m2 < 0))
 801792e:	ea83 0c06 	eor.w	ip, r3, r6
 8017932:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
        mult = 1 - mult;
 8017936:	f1bc 0f00 	cmp.w	ip, #0
 801793a:	bf0b      	itete	eq
 801793c:	f04f 4c80 	moveq.w	ip, #1073741824	; 0x40000000
 8017940:	46c4      	movne	ip, r8
 8017942:	f04f 0e00 	moveq.w	lr, #0
 8017946:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801794a:	fbc6 ce03 	smlal	ip, lr, r6, r3
 801794e:	f1be 0f00 	cmp.w	lr, #0
 8017952:	da03      	bge.n	801795c <arm_elementwise_add_s8+0x4cc>
 8017954:	eb1c 0c04 	adds.w	ip, ip, r4
 8017958:	f14e 0e00 	adc.w	lr, lr, #0
 801795c:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017960:	42b3      	cmp	r3, r6
    result = (int32_t) (mult / (1ll << 31));
 8017962:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017966:	d104      	bne.n	8017972 <arm_elementwise_add_s8+0x4e2>
        result = Q31_MAX;
 8017968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801796c:	bf08      	it	eq
 801796e:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8017972:	9f00      	ldr	r7, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 8017974:	9e07      	ldr	r6, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
 8017976:	9a08      	ldr	r2, [sp, #32]
    int32_t remainder = remainder_mask & dividend;
 8017978:	ea0c 0606 	and.w	r6, ip, r6
    q31_t threshold = remainder_mask >> 1;
 801797c:	fa5c fc07 	asrs.w	ip, ip, r7
 8017980:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017982:	bf58      	it	pl
 8017984:	4696      	movpl	lr, r2
    input_2 = (int16_t)((a_2 >> 16) & 0x0FFFFL) << left_shift;
 8017986:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017988:	bf48      	it	mi
 801798a:	46be      	movmi	lr, r7
    if (remainder > threshold)
 801798c:	4576      	cmp	r6, lr
 801798e:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017992:	fa0e fe05 	lsl.w	lr, lr, r5
    if ((m1 < 0) ^ (m2 < 0))
 8017996:	ea81 060e 	eor.w	r6, r1, lr
 801799a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
        result++;
 801799e:	bfc8      	it	gt
 80179a0:	f10c 0c01 	addgt.w	ip, ip, #1
        mult = 1 - mult;
 80179a4:	2e00      	cmp	r6, #0
 80179a6:	bf0b      	itete	eq
 80179a8:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 80179ac:	4646      	movne	r6, r8
 80179ae:	f04f 0900 	moveq.w	r9, #0
 80179b2:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80179b6:	fbce 6901 	smlal	r6, r9, lr, r1
 80179ba:	f1b9 0f00 	cmp.w	r9, #0
 80179be:	da02      	bge.n	80179c6 <arm_elementwise_add_s8+0x536>
 80179c0:	1936      	adds	r6, r6, r4
 80179c2:	f149 0900 	adc.w	r9, r9, #0
 80179c6:	0ff6      	lsrs	r6, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80179c8:	4571      	cmp	r1, lr
    result = (int32_t) (mult / (1ll << 31));
 80179ca:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80179ce:	d104      	bne.n	80179da <arm_elementwise_add_s8+0x54a>
        result = Q31_MAX;
 80179d0:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80179d4:	bf08      	it	eq
 80179d6:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 80179da:	9a05      	ldr	r2, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 80179dc:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 80179de:	ea06 0e02 	and.w	lr, r6, r2
    q31_t threshold = remainder_mask >> 1;
 80179e2:	9a01      	ldr	r2, [sp, #4]
 80179e4:	4116      	asrs	r6, r2
 80179e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179e8:	bf54      	ite	pl
 80179ea:	46b9      	movpl	r9, r7
 80179ec:	4691      	movmi	r9, r2
    if (remainder > threshold)
 80179ee:	45ce      	cmp	lr, r9
        result++;
 80179f0:	bfc8      	it	gt
 80179f2:	3601      	addgt	r6, #1
    sum = input_1 + input_2;
 80179f4:	4466      	add	r6, ip
    if ((m1 < 0) ^ (m2 < 0))
 80179f6:	ea80 0c06 	eor.w	ip, r0, r6
 80179fa:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
        mult = 1 - mult;
 80179fe:	f1bc 0f00 	cmp.w	ip, #0
 8017a02:	bf0b      	itete	eq
 8017a04:	f04f 4c80 	moveq.w	ip, #1073741824	; 0x40000000
 8017a08:	46c4      	movne	ip, r8
 8017a0a:	f04f 0e00 	moveq.w	lr, #0
 8017a0e:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017a12:	fbc6 ce00 	smlal	ip, lr, r6, r0
 8017a16:	f1be 0f00 	cmp.w	lr, #0
 8017a1a:	da03      	bge.n	8017a24 <arm_elementwise_add_s8+0x594>
 8017a1c:	eb1c 0c04 	adds.w	ip, ip, r4
 8017a20:	f14e 0e00 	adc.w	lr, lr, #0
 8017a24:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017a28:	42b0      	cmp	r0, r6
    result = (int32_t) (mult / (1ll << 31));
 8017a2a:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017a2e:	d104      	bne.n	8017a3a <arm_elementwise_add_s8+0x5aa>
        result = Q31_MAX;
 8017a30:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8017a34:	bf08      	it	eq
 8017a36:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017a3a:	9a03      	ldr	r2, [sp, #12]
    q31_t threshold = remainder_mask >> 1;
 8017a3c:	9f04      	ldr	r7, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 8017a3e:	ea0c 0602 	and.w	r6, ip, r2
    q31_t threshold = remainder_mask >> 1;
 8017a42:	9a02      	ldr	r2, [sp, #8]
 8017a44:	fa5c fc02 	asrs.w	ip, ip, r2
 8017a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a4a:	bf54      	ite	pl
 8017a4c:	46be      	movpl	lr, r7
 8017a4e:	4696      	movmi	lr, r2
    if (remainder > threshold)
 8017a50:	45b6      	cmp	lr, r6
    sum += out_offset;
 8017a52:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017a54:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
        result++;
 8017a58:	bfb8      	it	lt
 8017a5a:	f10c 0c01 	addlt.w	ip, ip, #1
    sum += out_offset;
 8017a5e:	4494      	add	ip, r2
    sum = MAX(sum, out_activation_min);
 8017a60:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017a62:	4594      	cmp	ip, r2
 8017a64:	bfb8      	it	lt
 8017a66:	4694      	movlt	ip, r2
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017a68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017a6a:	ea4f 4e0a 	mov.w	lr, sl, lsl #16
 8017a6e:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
 8017a72:	0212      	lsls	r2, r2, #8
 8017a74:	ea4e 0606 	orr.w	r6, lr, r6
 8017a78:	b292      	uxth	r2, r2
 8017a7a:	4332      	orrs	r2, r6
    sum = MIN(sum, out_activation_max);
 8017a7c:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8017a7e:	45b4      	cmp	ip, r6
 8017a80:	bfa8      	it	ge
 8017a82:	46b4      	movge	ip, r6
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 8017a84:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017a86:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8017a8a:	f846 2b04 	str.w	r2, [r6], #4
 8017a8e:	9627      	str	r6, [sp, #156]	; 0x9c
    loop_count--;
 8017a90:	e542      	b.n	8017518 <arm_elementwise_add_s8+0x88>
    input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
 8017a92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017a94:	f918 2b01 	ldrsb.w	r2, [r8], #1
    input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
 8017a98:	f919 ab01 	ldrsb.w	sl, [r9], #1
    input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
 8017a9c:	4422      	add	r2, r4
    input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
 8017a9e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
 8017aa0:	40aa      	lsls	r2, r5
    input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
 8017aa2:	44a2      	add	sl, r4
    if ((m1 < 0) ^ (m2 < 0))
 8017aa4:	ea82 0403 	eor.w	r4, r2, r3
 8017aa8:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 8017aaa:	2c00      	cmp	r4, #0
 8017aac:	bf0b      	itete	eq
 8017aae:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8017ab2:	4674      	movne	r4, lr
 8017ab4:	f04f 0b00 	moveq.w	fp, #0
 8017ab8:	f04f 3bff 	movne.w	fp, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017abc:	fbc2 4b03 	smlal	r4, fp, r2, r3
 8017ac0:	f1bb 0f00 	cmp.w	fp, #0
 8017ac4:	fa0a fa05 	lsl.w	sl, sl, r5
 8017ac8:	da03      	bge.n	8017ad2 <arm_elementwise_add_s8+0x642>
 8017aca:	eb14 040c 	adds.w	r4, r4, ip
 8017ace:	f14b 0b00 	adc.w	fp, fp, #0
 8017ad2:	0fe4      	lsrs	r4, r4, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ad4:	429a      	cmp	r2, r3
    result = (int32_t) (mult / (1ll << 31));
 8017ad6:	ea44 044b 	orr.w	r4, r4, fp, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ada:	d104      	bne.n	8017ae6 <arm_elementwise_add_s8+0x656>
        result = Q31_MAX;
 8017adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017ae0:	bf08      	it	eq
 8017ae2:	f06f 4400 	mvneq.w	r4, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017ae6:	9a07      	ldr	r2, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
 8017ae8:	9f00      	ldr	r7, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 8017aea:	ea02 0604 	and.w	r6, r2, r4
    q31_t threshold = remainder_mask >> 1;
 8017aee:	413c      	asrs	r4, r7
 8017af0:	9a08      	ldr	r2, [sp, #32]
 8017af2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017af4:	bf54      	ite	pl
 8017af6:	4693      	movpl	fp, r2
 8017af8:	46bb      	movmi	fp, r7
    if ((m1 < 0) ^ (m2 < 0))
 8017afa:	ea8a 0201 	eor.w	r2, sl, r1
    if (remainder > threshold)
 8017afe:	455e      	cmp	r6, fp
    if ((m1 < 0) ^ (m2 < 0))
 8017b00:	ea4f 72d2 	mov.w	r2, r2, lsr #31
        result++;
 8017b04:	bfc8      	it	gt
 8017b06:	3401      	addgt	r4, #1
        mult = 1 - mult;
 8017b08:	2a00      	cmp	r2, #0
 8017b0a:	bf0b      	itete	eq
 8017b0c:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8017b10:	4672      	movne	r2, lr
 8017b12:	f04f 0b00 	moveq.w	fp, #0
 8017b16:	f04f 3bff 	movne.w	fp, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017b1a:	fbca 2b01 	smlal	r2, fp, sl, r1
 8017b1e:	f1bb 0f00 	cmp.w	fp, #0
 8017b22:	da03      	bge.n	8017b2c <arm_elementwise_add_s8+0x69c>
 8017b24:	eb12 020c 	adds.w	r2, r2, ip
 8017b28:	f14b 0b00 	adc.w	fp, fp, #0
 8017b2c:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017b2e:	458a      	cmp	sl, r1
    result = (int32_t) (mult / (1ll << 31));
 8017b30:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017b34:	d104      	bne.n	8017b40 <arm_elementwise_add_s8+0x6b0>
        result = Q31_MAX;
 8017b36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8017b3a:	bf08      	it	eq
 8017b3c:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8017b40:	9f05      	ldr	r7, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 8017b42:	9e06      	ldr	r6, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 8017b44:	ea07 0a02 	and.w	sl, r7, r2
    q31_t threshold = remainder_mask >> 1;
 8017b48:	9f01      	ldr	r7, [sp, #4]
 8017b4a:	413a      	asrs	r2, r7
 8017b4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017b4e:	bf54      	ite	pl
 8017b50:	46b3      	movpl	fp, r6
 8017b52:	46bb      	movmi	fp, r7
    if (remainder > threshold)
 8017b54:	45da      	cmp	sl, fp
        result++;
 8017b56:	bfc8      	it	gt
 8017b58:	3201      	addgt	r2, #1
    sum = input_1 + input_2;
 8017b5a:	4422      	add	r2, r4
    if ((m1 < 0) ^ (m2 < 0))
 8017b5c:	ea82 0400 	eor.w	r4, r2, r0
 8017b60:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 8017b62:	2c00      	cmp	r4, #0
 8017b64:	bf0b      	itete	eq
 8017b66:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8017b6a:	4674      	movne	r4, lr
 8017b6c:	f04f 0a00 	moveq.w	sl, #0
 8017b70:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017b74:	fbc2 4a00 	smlal	r4, sl, r2, r0
 8017b78:	f1ba 0f00 	cmp.w	sl, #0
 8017b7c:	da03      	bge.n	8017b86 <arm_elementwise_add_s8+0x6f6>
 8017b7e:	eb14 040c 	adds.w	r4, r4, ip
 8017b82:	f14a 0a00 	adc.w	sl, sl, #0
 8017b86:	0fe4      	lsrs	r4, r4, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017b88:	4282      	cmp	r2, r0
    result = (int32_t) (mult / (1ll << 31));
 8017b8a:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017b8e:	d104      	bne.n	8017b9a <arm_elementwise_add_s8+0x70a>
        result = Q31_MAX;
 8017b90:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8017b94:	bf08      	it	eq
 8017b96:	f06f 4400 	mvneq.w	r4, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8017b9a:	9e02      	ldr	r6, [sp, #8]
    int32_t remainder = remainder_mask & dividend;
 8017b9c:	9a03      	ldr	r2, [sp, #12]
    q31_t threshold = remainder_mask >> 1;
 8017b9e:	9f04      	ldr	r7, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 8017ba0:	4022      	ands	r2, r4
    q31_t threshold = remainder_mask >> 1;
 8017ba2:	4134      	asrs	r4, r6
 8017ba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017ba6:	bf54      	ite	pl
 8017ba8:	46ba      	movpl	sl, r7
 8017baa:	46b2      	movmi	sl, r6
    if (remainder > threshold)
 8017bac:	4552      	cmp	r2, sl
    sum += out_offset;
 8017bae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
        result++;
 8017bb0:	bfc8      	it	gt
 8017bb2:	3401      	addgt	r4, #1
 8017bb4:	4414      	add	r4, r2
    sum = MAX(sum, out_activation_min);
 8017bb6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017bb8:	4294      	cmp	r4, r2
 8017bba:	bfb8      	it	lt
 8017bbc:	4614      	movlt	r4, r2
    sum = MIN(sum, out_activation_max);
 8017bbe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017bc0:	4294      	cmp	r4, r2
 8017bc2:	bfa8      	it	ge
 8017bc4:	4614      	movge	r4, r2
    *output++ = (q7_t)sum;
 8017bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017bc8:	f802 4b01 	strb.w	r4, [r2], #1
 8017bcc:	920c      	str	r2, [sp, #48]	; 0x30
    loop_count--;
 8017bce:	e4b7      	b.n	8017540 <arm_elementwise_add_s8+0xb0>
 8017bd0:	c0000001 	.word	0xc0000001

08017bd4 <arm_elementwise_mul_s8>:
                       const int32_t out_mult,
                       const int32_t out_shift,
                       const int32_t out_activation_min,
                       const int32_t out_activation_max,
                       const uint32_t block_size)
{
 8017bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd8:	b08d      	sub	sp, #52	; 0x34
 8017bda:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8017bde:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28

  int32_t offset_1_packed, offset_2_packed;

  int8_t r1, r2, r3, r4;

  offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
 8017be2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017be6:	9903      	ldr	r1, [sp, #12]
{
 8017be8:	9a18      	ldr	r2, [sp, #96]	; 0x60
  offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
 8017bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017bee:	9307      	str	r3, [sp, #28]
  offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
 8017bf0:	9904      	ldr	r1, [sp, #16]
 8017bf2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017bfa:	9308      	str	r3, [sp, #32]

  loop_count = block_size >> 2;
 8017bfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017bfe:	ea4f 0993 	mov.w	r9, r3, lsr #2
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017c04:	f8cd 9008 	str.w	r9, [sp, #8]
 8017c08:	4258      	negs	r0, r3
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	bfd4      	ite	le
 8017c0e:	4603      	movle	r3, r0
 8017c10:	2300      	movgt	r3, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017c12:	2501      	movs	r5, #1
 8017c14:	409d      	lsls	r5, r3
 8017c16:	3d01      	subs	r5, #1
    q31_t threshold = remainder_mask >> 1;
 8017c18:	ea4f 0c65 	mov.w	ip, r5, asr #1
 8017c1c:	9300      	str	r3, [sp, #0]
        threshold++;
 8017c1e:	f10c 0301 	add.w	r3, ip, #1
 8017c22:	9301      	str	r3, [sp, #4]

  while (loop_count > 0U)
 8017c24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017c26:	9309      	str	r3, [sp, #36]	; 0x24
 8017c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c2a:	9306      	str	r3, [sp, #24]
 8017c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c2e:	9305      	str	r3, [sp, #20]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c30:	9b19      	ldr	r3, [sp, #100]	; 0x64
    result = (int32_t) (mult / (1ll << 31));
 8017c32:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c36:	ea23 78e3 	bic.w	r8, r3, r3, asr #31
 8017c3a:	9b02      	ldr	r3, [sp, #8]
 8017c3c:	b9d3      	cbnz	r3, 8017c74 <arm_elementwise_mul_s8+0xa0>
 8017c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c40:	eb03 0689 	add.w	r6, r3, r9, lsl #2
 8017c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c46:	eb03 0789 	add.w	r7, r3, r9, lsl #2
 8017c4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017c4c:	eb03 0489 	add.w	r4, r3, r9, lsl #2
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));

    loop_count--;
  }

  loop_count = block_size & 0x3;
 8017c50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        mult = 1 - mult;
 8017c52:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8017f20 <arm_elementwise_mul_s8+0x34c>
 8017c56:	f003 0103 	and.w	r1, r3, #3
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017c5c:	4421      	add	r1, r4
 8017c5e:	ea23 78e3 	bic.w	r8, r3, r3, asr #31
    result = (int32_t) (mult / (1ll << 31));
 8017c62:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
#else
  loop_count = block_size;
#endif

  while (loop_count > 0U)
 8017c66:	428c      	cmp	r4, r1
 8017c68:	f040 8117 	bne.w	8017e9a <arm_elementwise_mul_s8+0x2c6>
    /* Decrement loop counter */
    loop_count--;
  }
#endif
  return ARM_MATH_SUCCESS;
}
 8017c6c:	2000      	movs	r0, #0
 8017c6e:	b00d      	add	sp, #52	; 0x34
 8017c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memcpy(&val, *in_q7, 4);
 8017c74:	9b05      	ldr	r3, [sp, #20]
 8017c76:	f853 7b04 	ldr.w	r7, [r3], #4
 8017c7a:	9305      	str	r3, [sp, #20]
  return (op1 >> op2) | (op1 << (32U - op2));
 8017c7c:	ea4f 2e37 	mov.w	lr, r7, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017c80:	fa2f fe8e 	sxtb16	lr, lr
 8017c84:	fa2f f787 	sxtb16	r7, r7
 8017c88:	9b06      	ldr	r3, [sp, #24]
 8017c8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8017c8e:	9306      	str	r3, [sp, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 8017c90:	ea4f 2431 	mov.w	r4, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017c94:	fa2f f484 	sxtb16	r4, r4
 8017c98:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017c9c:	9b07      	ldr	r3, [sp, #28]
 8017c9e:	fa9e fe03 	sadd16	lr, lr, r3
 8017ca2:	fa97 f703 	sadd16	r7, r7, r3
 8017ca6:	9b08      	ldr	r3, [sp, #32]
 8017ca8:	fa94 f403 	sadd16	r4, r4, r3
 8017cac:	fa91 f103 	sadd16	r1, r1, r3
    mul_res = input_1 * input_2;
 8017cb0:	fb17 fa01 	smulbb	sl, r7, r1
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017cb4:	fa0a fa08 	lsl.w	sl, sl, r8
    if ((m1 < 0) ^ (m2 < 0))
 8017cb8:	ea82 030a 	eor.w	r3, r2, sl
 8017cbc:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	4b97      	ldr	r3, [pc, #604]	; (8017f20 <arm_elementwise_mul_s8+0x34c>)
 8017cc2:	bf06      	itte	eq
 8017cc4:	f04f 0b00 	moveq.w	fp, #0
 8017cc8:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8017ccc:	f04f 3bff 	movne.w	fp, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017cd0:	fbca 3b02 	smlal	r3, fp, sl, r2
 8017cd4:	f1bb 0f00 	cmp.w	fp, #0
 8017cd8:	da02      	bge.n	8017ce0 <arm_elementwise_mul_s8+0x10c>
 8017cda:	199b      	adds	r3, r3, r6
 8017cdc:	f14b 0b00 	adc.w	fp, fp, #0
 8017ce0:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ce2:	4552      	cmp	r2, sl
    result = (int32_t) (mult / (1ll << 31));
 8017ce4:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ce8:	d104      	bne.n	8017cf4 <arm_elementwise_mul_s8+0x120>
        result = Q31_MAX;
 8017cea:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8017cee:	bf08      	it	eq
 8017cf0:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8017cf4:	9800      	ldr	r0, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 8017cf6:	ea05 0a03 	and.w	sl, r5, r3
    q31_t threshold = remainder_mask >> 1;
 8017cfa:	4103      	asrs	r3, r0
 8017cfc:	9801      	ldr	r0, [sp, #4]
 8017cfe:	bf54      	ite	pl
 8017d00:	46e3      	movpl	fp, ip
 8017d02:	4683      	movmi	fp, r0
    if (remainder > threshold)
 8017d04:	45da      	cmp	sl, fp
    mul_res = arm_nn_requantize(mul_res, out_mult, out_shift) + out_offset;
 8017d06:	9817      	ldr	r0, [sp, #92]	; 0x5c
        result++;
 8017d08:	bfc8      	it	gt
 8017d0a:	3301      	addgt	r3, #1
 8017d0c:	4403      	add	r3, r0
    mul_res = MAX(mul_res, out_activation_min);
 8017d0e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017d10:	4283      	cmp	r3, r0
 8017d12:	bfb8      	it	lt
 8017d14:	4603      	movlt	r3, r0
    mul_res = MIN(mul_res, out_activation_max);
 8017d16:	981b      	ldr	r0, [sp, #108]	; 0x6c
    mul_res = input_1 * input_2;
 8017d18:	fb11 f137 	smultt	r1, r1, r7
    mul_res = MIN(mul_res, out_activation_max);
 8017d1c:	4283      	cmp	r3, r0
 8017d1e:	bfa8      	it	ge
 8017d20:	4603      	movge	r3, r0
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017d22:	fa01 f108 	lsl.w	r1, r1, r8
    r1 = (q7_t)mul_res;
 8017d26:	fa4f fb83 	sxtb.w	fp, r3
    if ((m1 < 0) ^ (m2 < 0))
 8017d2a:	ea82 0301 	eor.w	r3, r2, r1
 8017d2e:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	4b7b      	ldr	r3, [pc, #492]	; (8017f20 <arm_elementwise_mul_s8+0x34c>)
 8017d34:	bf06      	itte	eq
 8017d36:	2700      	moveq	r7, #0
 8017d38:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8017d3c:	f04f 37ff 	movne.w	r7, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017d40:	fbc1 3702 	smlal	r3, r7, r1, r2
 8017d44:	2f00      	cmp	r7, #0
 8017d46:	da02      	bge.n	8017d4e <arm_elementwise_mul_s8+0x17a>
 8017d48:	199b      	adds	r3, r3, r6
 8017d4a:	f147 0700 	adc.w	r7, r7, #0
 8017d4e:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017d50:	428a      	cmp	r2, r1
    result = (int32_t) (mult / (1ll << 31));
 8017d52:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017d56:	d104      	bne.n	8017d62 <arm_elementwise_mul_s8+0x18e>
        result = Q31_MAX;
 8017d58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8017d5c:	bf08      	it	eq
 8017d5e:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8017d62:	9800      	ldr	r0, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 8017d64:	ea03 0105 	and.w	r1, r3, r5
    q31_t threshold = remainder_mask >> 1;
 8017d68:	4103      	asrs	r3, r0
 8017d6a:	9801      	ldr	r0, [sp, #4]
 8017d6c:	bf54      	ite	pl
 8017d6e:	4667      	movpl	r7, ip
 8017d70:	4607      	movmi	r7, r0
    if (remainder > threshold)
 8017d72:	42b9      	cmp	r1, r7
    mul_res = arm_nn_requantize(mul_res, out_mult, out_shift) + out_offset;
 8017d74:	9917      	ldr	r1, [sp, #92]	; 0x5c
        result++;
 8017d76:	bfc8      	it	gt
 8017d78:	3301      	addgt	r3, #1
 8017d7a:	440b      	add	r3, r1
    mul_res = MAX(mul_res, out_activation_min);
 8017d7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017d7e:	428b      	cmp	r3, r1
 8017d80:	bfb8      	it	lt
 8017d82:	460b      	movlt	r3, r1
    mul_res = MIN(mul_res, out_activation_max);
 8017d84:	991b      	ldr	r1, [sp, #108]	; 0x6c
    mul_res = input_1 * input_2;
 8017d86:	fb1e f704 	smulbb	r7, lr, r4
    mul_res = MIN(mul_res, out_activation_max);
 8017d8a:	428b      	cmp	r3, r1
 8017d8c:	bfa8      	it	ge
 8017d8e:	460b      	movge	r3, r1
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017d90:	fa07 f708 	lsl.w	r7, r7, r8
    r3 = (q7_t)mul_res;
 8017d94:	b259      	sxtb	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
 8017d96:	ea82 0307 	eor.w	r3, r2, r7
 8017d9a:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	4b60      	ldr	r3, [pc, #384]	; (8017f20 <arm_elementwise_mul_s8+0x34c>)
 8017da0:	bf06      	itte	eq
 8017da2:	f04f 0a00 	moveq.w	sl, #0
 8017da6:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8017daa:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017dae:	fbc7 3a02 	smlal	r3, sl, r7, r2
 8017db2:	f1ba 0f00 	cmp.w	sl, #0
 8017db6:	da02      	bge.n	8017dbe <arm_elementwise_mul_s8+0x1ea>
 8017db8:	199b      	adds	r3, r3, r6
 8017dba:	f14a 0a00 	adc.w	sl, sl, #0
 8017dbe:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017dc0:	42ba      	cmp	r2, r7
    result = (int32_t) (mult / (1ll << 31));
 8017dc2:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017dc6:	d104      	bne.n	8017dd2 <arm_elementwise_mul_s8+0x1fe>
        result = Q31_MAX;
 8017dc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8017dcc:	bf08      	it	eq
 8017dce:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8017dd2:	9800      	ldr	r0, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 8017dd4:	ea03 0705 	and.w	r7, r3, r5
    q31_t threshold = remainder_mask >> 1;
 8017dd8:	4103      	asrs	r3, r0
 8017dda:	9801      	ldr	r0, [sp, #4]
 8017ddc:	bf54      	ite	pl
 8017dde:	46e2      	movpl	sl, ip
 8017de0:	4682      	movmi	sl, r0
    if (remainder > threshold)
 8017de2:	4557      	cmp	r7, sl
    mul_res = arm_nn_requantize(mul_res, out_mult, out_shift) + out_offset;
 8017de4:	9817      	ldr	r0, [sp, #92]	; 0x5c
        result++;
 8017de6:	bfc8      	it	gt
 8017de8:	3301      	addgt	r3, #1
 8017dea:	4403      	add	r3, r0
    mul_res = MAX(mul_res, out_activation_min);
 8017dec:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017dee:	4283      	cmp	r3, r0
    mul_res = input_1 * input_2;
 8017df0:	fb14 f43e 	smultt	r4, r4, lr
    mul_res = MAX(mul_res, out_activation_min);
 8017df4:	bfb8      	it	lt
 8017df6:	4603      	movlt	r3, r0
    mul_res = MIN(mul_res, out_activation_max);
 8017df8:	981b      	ldr	r0, [sp, #108]	; 0x6c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017dfa:	fa04 f408 	lsl.w	r4, r4, r8
 8017dfe:	4283      	cmp	r3, r0
    if ((m1 < 0) ^ (m2 < 0))
 8017e00:	ea82 0704 	eor.w	r7, r2, r4
 8017e04:	ea4f 77d7 	mov.w	r7, r7, lsr #31
 8017e08:	bfa8      	it	ge
 8017e0a:	4603      	movge	r3, r0
        mult = 1 - mult;
 8017e0c:	4844      	ldr	r0, [pc, #272]	; (8017f20 <arm_elementwise_mul_s8+0x34c>)
 8017e0e:	2f00      	cmp	r7, #0
 8017e10:	bf0b      	itete	eq
 8017e12:	f04f 4780 	moveq.w	r7, #1073741824	; 0x40000000
 8017e16:	4607      	movne	r7, r0
 8017e18:	f04f 0e00 	moveq.w	lr, #0
 8017e1c:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017e20:	fbc4 7e02 	smlal	r7, lr, r4, r2
 8017e24:	f1be 0f00 	cmp.w	lr, #0
    r2 = (q7_t)mul_res;
 8017e28:	b25b      	sxtb	r3, r3
 8017e2a:	da02      	bge.n	8017e32 <arm_elementwise_mul_s8+0x25e>
 8017e2c:	19bf      	adds	r7, r7, r6
 8017e2e:	f14e 0e00 	adc.w	lr, lr, #0
 8017e32:	0fff      	lsrs	r7, r7, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017e34:	42a2      	cmp	r2, r4
    result = (int32_t) (mult / (1ll << 31));
 8017e36:	ea47 074e 	orr.w	r7, r7, lr, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017e3a:	d104      	bne.n	8017e46 <arm_elementwise_mul_s8+0x272>
        result = Q31_MAX;
 8017e3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8017e40:	bf08      	it	eq
 8017e42:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8017e46:	9800      	ldr	r0, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 8017e48:	ea07 0405 	and.w	r4, r7, r5
    q31_t threshold = remainder_mask >> 1;
 8017e4c:	4107      	asrs	r7, r0
 8017e4e:	9801      	ldr	r0, [sp, #4]
 8017e50:	bf54      	ite	pl
 8017e52:	46e6      	movpl	lr, ip
 8017e54:	4686      	movmi	lr, r0
    if (remainder > threshold)
 8017e56:	4574      	cmp	r4, lr
    mul_res = arm_nn_requantize(mul_res, out_mult, out_shift) + out_offset;
 8017e58:	9817      	ldr	r0, [sp, #92]	; 0x5c
        result++;
 8017e5a:	bfc8      	it	gt
 8017e5c:	3701      	addgt	r7, #1
 8017e5e:	4407      	add	r7, r0
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017e60:	0409      	lsls	r1, r1, #16
    mul_res = MAX(mul_res, out_activation_min);
 8017e62:	981a      	ldr	r0, [sp, #104]	; 0x68
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017e64:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8017e68:	fa5f fb8b 	uxtb.w	fp, fp
    mul_res = MAX(mul_res, out_activation_min);
 8017e6c:	4287      	cmp	r7, r0
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017e6e:	ea41 0b0b 	orr.w	fp, r1, fp
    mul_res = MIN(mul_res, out_activation_max);
 8017e72:	991b      	ldr	r1, [sp, #108]	; 0x6c
    mul_res = MAX(mul_res, out_activation_min);
 8017e74:	bfb8      	it	lt
 8017e76:	4607      	movlt	r7, r0
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017e78:	021b      	lsls	r3, r3, #8
    mul_res = MIN(mul_res, out_activation_max);
 8017e7a:	428f      	cmp	r7, r1
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017e7c:	b29b      	uxth	r3, r3
    mul_res = MIN(mul_res, out_activation_max);
 8017e7e:	bfa8      	it	ge
 8017e80:	460f      	movge	r7, r1
    write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 8017e82:	ea4b 0303 	orr.w	r3, fp, r3
 8017e86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e88:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8017e8c:	f841 3b04 	str.w	r3, [r1], #4
    loop_count--;
 8017e90:	9b02      	ldr	r3, [sp, #8]
 8017e92:	9109      	str	r1, [sp, #36]	; 0x24
 8017e94:	3b01      	subs	r3, #1
 8017e96:	9302      	str	r3, [sp, #8]
 8017e98:	e6cf      	b.n	8017c3a <arm_elementwise_mul_s8+0x66>
    input_1 = *input_1_vect++ + input_1_offset;
 8017e9a:	9b03      	ldr	r3, [sp, #12]
 8017e9c:	f916 ab01 	ldrsb.w	sl, [r6], #1
    input_2 = *input_2_vect++ + input_2_offset;
 8017ea0:	9804      	ldr	r0, [sp, #16]
    input_1 = *input_1_vect++ + input_1_offset;
 8017ea2:	449a      	add	sl, r3
    input_2 = *input_2_vect++ + input_2_offset;
 8017ea4:	f917 3b01 	ldrsb.w	r3, [r7], #1
 8017ea8:	4403      	add	r3, r0
    mul_res = input_1 * input_2;
 8017eaa:	fb03 fa0a 	mul.w	sl, r3, sl
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017eae:	fa0a fa08 	lsl.w	sl, sl, r8
    if ((m1 < 0) ^ (m2 < 0))
 8017eb2:	ea82 030a 	eor.w	r3, r2, sl
 8017eb6:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	bf0b      	itete	eq
 8017ebc:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8017ec0:	464b      	movne	r3, r9
 8017ec2:	f04f 0b00 	moveq.w	fp, #0
 8017ec6:	f04f 3bff 	movne.w	fp, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017eca:	fbca 3b02 	smlal	r3, fp, sl, r2
 8017ece:	f1bb 0f00 	cmp.w	fp, #0
 8017ed2:	da03      	bge.n	8017edc <arm_elementwise_mul_s8+0x308>
 8017ed4:	eb13 030e 	adds.w	r3, r3, lr
 8017ed8:	f14b 0b00 	adc.w	fp, fp, #0
 8017edc:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ede:	4552      	cmp	r2, sl
    result = (int32_t) (mult / (1ll << 31));
 8017ee0:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ee4:	d104      	bne.n	8017ef0 <arm_elementwise_mul_s8+0x31c>
        result = Q31_MAX;
 8017ee6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8017eea:	bf08      	it	eq
 8017eec:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8017ef0:	9800      	ldr	r0, [sp, #0]
    int32_t remainder = remainder_mask & dividend;
 8017ef2:	ea05 0a03 	and.w	sl, r5, r3
    q31_t threshold = remainder_mask >> 1;
 8017ef6:	4103      	asrs	r3, r0
 8017ef8:	9801      	ldr	r0, [sp, #4]
 8017efa:	bf54      	ite	pl
 8017efc:	46e3      	movpl	fp, ip
 8017efe:	4683      	movmi	fp, r0
    if (remainder > threshold)
 8017f00:	45da      	cmp	sl, fp
    mul_res = arm_nn_requantize(mul_res, out_mult, out_shift) + out_offset;
 8017f02:	9817      	ldr	r0, [sp, #92]	; 0x5c
        result++;
 8017f04:	bfc8      	it	gt
 8017f06:	3301      	addgt	r3, #1
 8017f08:	4403      	add	r3, r0
    mul_res = MAX(mul_res, out_activation_min);
 8017f0a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017f0c:	4283      	cmp	r3, r0
 8017f0e:	bfb8      	it	lt
 8017f10:	4603      	movlt	r3, r0
    mul_res = MIN(mul_res, out_activation_max);
 8017f12:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017f14:	4283      	cmp	r3, r0
 8017f16:	bfa8      	it	ge
 8017f18:	4603      	movge	r3, r0
    *output++ = (q7_t)mul_res;
 8017f1a:	f804 3b01 	strb.w	r3, [r4], #1
    loop_count--;
 8017f1e:	e6a2      	b.n	8017c66 <arm_elementwise_mul_s8+0x92>
 8017f20:	c0000001 	.word	0xc0000001

08017f24 <arm_fully_connected_s8>:
                       const q7_t *kernel,
                       const cmsis_nn_dims *bias_dims,
                       const int32_t *bias,
                       const cmsis_nn_dims *output_dims,
                       q7_t *output)
{
 8017f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f28:	b08a      	sub	sp, #40	; 0x28
 8017f2a:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
 8017f2e:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8017f32:	681d      	ldr	r5, [r3, #0]
{
 8017f34:	460c      	mov	r4, r1
 8017f36:	4616      	mov	r6, r2

    while (batch_cnt)
 8017f38:	b91d      	cbnz	r5, 8017f42 <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	b00a      	add	sp, #40	; 0x28
 8017f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
 8017f42:	6923      	ldr	r3, [r4, #16]
 8017f44:	9308      	str	r3, [sp, #32]
 8017f46:	68e3      	ldr	r3, [r4, #12]
 8017f48:	9307      	str	r3, [sp, #28]
 8017f4a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8017f4e:	9306      	str	r3, [sp, #24]
 8017f50:	f8d9 3000 	ldr.w	r3, [r9]
 8017f54:	9305      	str	r3, [sp, #20]
 8017f56:	6873      	ldr	r3, [r6, #4]
 8017f58:	9304      	str	r3, [sp, #16]
 8017f5a:	6833      	ldr	r3, [r6, #0]
 8017f5c:	9303      	str	r3, [sp, #12]
 8017f5e:	68a3      	ldr	r3, [r4, #8]
 8017f60:	9302      	str	r3, [sp, #8]
 8017f62:	6863      	ldr	r3, [r4, #4]
 8017f64:	9301      	str	r3, [sp, #4]
 8017f66:	6823      	ldr	r3, [r4, #0]
 8017f68:	9300      	str	r3, [sp, #0]
 8017f6a:	4638      	mov	r0, r7
 8017f6c:	4643      	mov	r3, r8
 8017f6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017f70:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017f72:	f000 f80b 	bl	8017f8c <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
 8017f76:	f8d9 3000 	ldr.w	r3, [r9]
 8017f7a:	441f      	add	r7, r3
        output += output_dims->c;
 8017f7c:	f8da 300c 	ldr.w	r3, [sl, #12]
        batch_cnt--;
 8017f80:	3d01      	subs	r5, #1
        output += output_dims->c;
 8017f82:	4498      	add	r8, r3
        batch_cnt--;
 8017f84:	e7d8      	b.n	8017f38 <arm_fully_connected_s8+0x14>

08017f86 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 8017f86:	2000      	movs	r0, #0
 8017f88:	4770      	bx	lr
	...

08017f8c <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 8017f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f90:	b097      	sub	sp, #92	; 0x5c
 8017f92:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
 8017f96:	9309      	str	r3, [sp, #36]	; 0x24
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8017f98:	9b20      	ldr	r3, [sp, #128]	; 0x80
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8017f9a:	9921      	ldr	r1, [sp, #132]	; 0x84
{
 8017f9c:	9001      	str	r0, [sp, #4]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8017f9e:	b29a      	uxth	r2, r3
 8017fa0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8017fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fa6:	9824      	ldr	r0, [sp, #144]	; 0x90
{
 8017fa8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8017faa:	b29b      	uxth	r3, r3
 8017fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017fb0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	f1c1 0100 	rsb	r1, r1, #0
 8017fb8:	bfc8      	it	gt
 8017fba:	2100      	movgt	r1, #0
 8017fbc:	9105      	str	r1, [sp, #20]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017fbe:	9805      	ldr	r0, [sp, #20]
 8017fc0:	2101      	movs	r1, #1
 8017fc2:	4081      	lsls	r1, r0
 8017fc4:	3901      	subs	r1, #1
 8017fc6:	9106      	str	r1, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 8017fc8:	1049      	asrs	r1, r1, #1
 8017fca:	9107      	str	r1, [sp, #28]
        threshold++;
 8017fcc:	3101      	adds	r1, #1
 8017fce:	910a      	str	r1, [sp, #40]	; 0x28
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
 8017fd0:	0061      	lsls	r1, r4, #1
 8017fd2:	910b      	str	r1, [sp, #44]	; 0x2c
 8017fd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017fd6:	3108      	adds	r1, #8
 8017fd8:	9104      	str	r1, [sp, #16]
 8017fda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017fdc:	3102      	adds	r1, #2
 8017fde:	9102      	str	r1, [sp, #8]
 8017fe0:	2c00      	cmp	r4, #0
 8017fe2:	ea4f 1114 	mov.w	r1, r4, lsr #4
 8017fe6:	9110      	str	r1, [sp, #64]	; 0x40
 8017fe8:	f024 010f 	bic.w	r1, r4, #15
 8017fec:	bfb8      	it	lt
 8017fee:	2100      	movlt	r1, #0
 8017ff0:	9108      	str	r1, [sp, #32]
 8017ff2:	9808      	ldr	r0, [sp, #32]
 8017ff4:	9901      	ldr	r1, [sp, #4]
 8017ff6:	4401      	add	r1, r0
 8017ff8:	910c      	str	r1, [sp, #48]	; 0x30
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8017ffa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017ffc:	9103      	str	r1, [sp, #12]
 8017ffe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018000:	3901      	subs	r1, #1
 8018002:	9111      	str	r1, [sp, #68]	; 0x44
 8018004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018006:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 801800a:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801800e:	31fe      	adds	r1, #254	; 0xfe
 8018010:	9112      	str	r1, [sp, #72]	; 0x48
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8018012:	f1a4 010f 	sub.w	r1, r4, #15
 8018016:	9113      	str	r1, [sp, #76]	; 0x4c
 8018018:	1e41      	subs	r1, r0, #1
 801801a:	9114      	str	r1, [sp, #80]	; 0x50
 801801c:	9901      	ldr	r1, [sp, #4]
 801801e:	4249      	negs	r1, r1
 8018020:	9115      	str	r1, [sp, #84]	; 0x54
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018022:	9924      	ldr	r1, [sp, #144]	; 0x90
 8018024:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018028:	910f      	str	r1, [sp, #60]	; 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801802a:	9802      	ldr	r0, [sp, #8]
 801802c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801802e:	4401      	add	r1, r0
 8018030:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018032:	4288      	cmp	r0, r1
 8018034:	dc7b      	bgt.n	801812e <arm_nn_vec_mat_mult_t_s8+0x1a2>
 8018036:	9826      	ldr	r0, [sp, #152]	; 0x98
 8018038:	9926      	ldr	r1, [sp, #152]	; 0x98
 801803a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801803c:	2800      	cmp	r0, #0
 801803e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018042:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018044:	bfac      	ite	ge
 8018046:	460f      	movge	r7, r1
 8018048:	2700      	movlt	r7, #0
 801804a:	fb05 0707 	mla	r7, r5, r7, r0
 801804e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018050:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8018054:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018058:	bfb8      	it	lt
 801805a:	2100      	movlt	r1, #0
 801805c:	440d      	add	r5, r1
    }

    if (rhs_rows % 2)
 801805e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018060:	bfb8      	it	lt
 8018062:	2000      	movlt	r0, #0
 8018064:	07c9      	lsls	r1, r1, #31
 8018066:	46ab      	mov	fp, r5
 8018068:	d55d      	bpl.n	8018126 <arm_nn_vec_mat_mult_t_s8+0x19a>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = *bias++;
 801806a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801806c:	5809      	ldr	r1, [r1, r0]

        int32_t rhs_cols_idx = 0;
 801806e:	2500      	movs	r5, #0

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8018070:	f1a4 080f 	sub.w	r8, r4, #15
 8018074:	9801      	ldr	r0, [sp, #4]
 8018076:	45a8      	cmp	r8, r5
 8018078:	eb00 0e05 	add.w	lr, r0, r5
 801807c:	eb07 0c05 	add.w	ip, r7, r5
 8018080:	f300 8182 	bgt.w	8018388 <arm_nn_vec_mat_mult_t_s8+0x3fc>
 8018084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018086:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018088:	011a      	lsls	r2, r3, #4
 801808a:	9b08      	ldr	r3, [sp, #32]
 801808c:	2c00      	cmp	r4, #0
 801808e:	bfb8      	it	lt
 8018090:	2200      	movlt	r2, #0
 8018092:	3b01      	subs	r3, #1
 8018094:	443b      	add	r3, r7
 8018096:	1a12      	subs	r2, r2, r0
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8018098:	1885      	adds	r5, r0, r2
 801809a:	42ac      	cmp	r4, r5
 801809c:	f300 81c5 	bgt.w	801842a <arm_nn_vec_mat_mult_t_s8+0x49e>
 80180a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    result = (int32_t) (mult / (1ll << 31));
 80180a2:	9823      	ldr	r0, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80180a4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
    if ((m1 < 0) ^ (m2 < 0))
 80180a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80180aa:	fa01 f202 	lsl.w	r2, r1, r2
    if ((m1 < 0) ^ (m2 < 0))
 80180ae:	4053      	eors	r3, r2
 80180b0:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	4bb3      	ldr	r3, [pc, #716]	; (8018384 <arm_nn_vec_mat_mult_t_s8+0x3f8>)
 80180b6:	bf06      	itte	eq
 80180b8:	2100      	moveq	r1, #0
 80180ba:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80180be:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80180c2:	fbc2 3100 	smlal	r3, r1, r2, r0
 80180c6:	2900      	cmp	r1, #0
 80180c8:	da04      	bge.n	80180d4 <arm_nn_vec_mat_mult_t_s8+0x148>
 80180ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80180ce:	181b      	adds	r3, r3, r0
 80180d0:	f141 0100 	adc.w	r1, r1, #0
 80180d4:	0fdb      	lsrs	r3, r3, #31
 80180d6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80180da:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80180dc:	4291      	cmp	r1, r2
 80180de:	d104      	bne.n	80180ea <arm_nn_vec_mat_mult_t_s8+0x15e>
        result = Q31_MAX;
 80180e0:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80180e4:	bf08      	it	eq
 80180e6:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80180ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80180ec:	2a00      	cmp	r2, #0
 80180ee:	bfd4      	ite	le
 80180f0:	4252      	negle	r2, r2
 80180f2:	2200      	movgt	r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80180f4:	2101      	movs	r1, #1
 80180f6:	4091      	lsls	r1, r2
 80180f8:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 80180fa:	ea01 0003 	and.w	r0, r1, r3
    if (result < 0)
 80180fe:	4113      	asrs	r3, r2
    q31_t threshold = remainder_mask >> 1;
 8018100:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 8018104:	bf48      	it	mi
 8018106:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
 8018108:	9a22      	ldr	r2, [sp, #136]	; 0x88
    if (remainder > threshold)
 801810a:	4288      	cmp	r0, r1
        result++;
 801810c:	bfc8      	it	gt
 801810e:	3301      	addgt	r3, #1
 8018110:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8018112:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018114:	4293      	cmp	r3, r2
 8018116:	bfb8      	it	lt
 8018118:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
 801811a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801811c:	4293      	cmp	r3, r2
 801811e:	bfa8      	it	ge
 8018120:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
 8018122:	f88b 3000 	strb.w	r3, [fp]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
 8018126:	2000      	movs	r0, #0
 8018128:	b017      	add	sp, #92	; 0x5c
 801812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        q31_t res00 = *bias++;
 801812e:	9904      	ldr	r1, [sp, #16]
 8018130:	9d03      	ldr	r5, [sp, #12]
        q31_t res01 = *bias++;
 8018132:	e951 0102 	ldrd	r0, r1, [r1, #-8]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8018136:	192e      	adds	r6, r5, r4
        int32_t rhs_cols_idx = 0;
 8018138:	2700      	movs	r7, #0
 801813a:	9d01      	ldr	r5, [sp, #4]
 801813c:	eb05 0e07 	add.w	lr, r5, r7
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8018140:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018142:	42bd      	cmp	r5, r7
 8018144:	eba6 0c04 	sub.w	ip, r6, r4
 8018148:	f300 808a 	bgt.w	8018260 <arm_nn_vec_mat_mult_t_s8+0x2d4>
 801814c:	9d03      	ldr	r5, [sp, #12]
 801814e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018150:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8018154:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8018156:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018158:	4475      	add	r5, lr
 801815a:	42ac      	cmp	r4, r5
 801815c:	f300 8102 	bgt.w	8018364 <arm_nn_vec_mat_mult_t_s8+0x3d8>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018160:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    result = (int32_t) (mult / (1ll << 31));
 8018162:	9f23      	ldr	r7, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018164:	40a8      	lsls	r0, r5
    if ((m1 < 0) ^ (m2 < 0))
 8018166:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8018168:	4045      	eors	r5, r0
 801816a:	0fed      	lsrs	r5, r5, #31
        mult = 1 - mult;
 801816c:	2d00      	cmp	r5, #0
 801816e:	4d85      	ldr	r5, [pc, #532]	; (8018384 <arm_nn_vec_mat_mult_t_s8+0x3f8>)
 8018170:	bf06      	itte	eq
 8018172:	2600      	moveq	r6, #0
 8018174:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8018178:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801817c:	fbc0 5607 	smlal	r5, r6, r0, r7
 8018180:	2e00      	cmp	r6, #0
 8018182:	da04      	bge.n	801818e <arm_nn_vec_mat_mult_t_s8+0x202>
 8018184:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8018188:	19ed      	adds	r5, r5, r7
 801818a:	f146 0600 	adc.w	r6, r6, #0
 801818e:	0fed      	lsrs	r5, r5, #31
 8018190:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018194:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8018196:	4286      	cmp	r6, r0
 8018198:	d104      	bne.n	80181a4 <arm_nn_vec_mat_mult_t_s8+0x218>
        result = Q31_MAX;
 801819a:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 801819e:	bf08      	it	eq
 80181a0:	f06f 4500 	mvneq.w	r5, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 80181a4:	9e05      	ldr	r6, [sp, #20]
    int32_t remainder = remainder_mask & dividend;
 80181a6:	9806      	ldr	r0, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 80181a8:	9f07      	ldr	r7, [sp, #28]
    int32_t remainder = remainder_mask & dividend;
 80181aa:	4028      	ands	r0, r5
    q31_t threshold = remainder_mask >> 1;
 80181ac:	4135      	asrs	r5, r6
 80181ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80181b0:	bf58      	it	pl
 80181b2:	463e      	movpl	r6, r7
    if (remainder > threshold)
 80181b4:	42b0      	cmp	r0, r6
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80181b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    result = (int32_t) (mult / (1ll << 31));
 80181b8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80181ba:	fa01 f100 	lsl.w	r1, r1, r0
    if ((m1 < 0) ^ (m2 < 0))
 80181be:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80181c0:	ea80 0001 	eor.w	r0, r0, r1
 80181c4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
        result++;
 80181c8:	bfc8      	it	gt
 80181ca:	3501      	addgt	r5, #1
        mult = 1 - mult;
 80181cc:	2800      	cmp	r0, #0
 80181ce:	486d      	ldr	r0, [pc, #436]	; (8018384 <arm_nn_vec_mat_mult_t_s8+0x3f8>)
 80181d0:	bf06      	itte	eq
 80181d2:	2600      	moveq	r6, #0
 80181d4:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 80181d8:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80181dc:	fbc1 0607 	smlal	r0, r6, r1, r7
 80181e0:	2e00      	cmp	r6, #0
 80181e2:	da04      	bge.n	80181ee <arm_nn_vec_mat_mult_t_s8+0x262>
 80181e4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80181e8:	19c0      	adds	r0, r0, r7
 80181ea:	f146 0600 	adc.w	r6, r6, #0
 80181ee:	0fc0      	lsrs	r0, r0, #31
 80181f0:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80181f4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80181f6:	428e      	cmp	r6, r1
 80181f8:	d104      	bne.n	8018204 <arm_nn_vec_mat_mult_t_s8+0x278>
        result = Q31_MAX;
 80181fa:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 80181fe:	bf08      	it	eq
 8018200:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8018204:	9e05      	ldr	r6, [sp, #20]
    int32_t remainder = remainder_mask & dividend;
 8018206:	9906      	ldr	r1, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 8018208:	9f07      	ldr	r7, [sp, #28]
    int32_t remainder = remainder_mask & dividend;
 801820a:	4001      	ands	r1, r0
    q31_t threshold = remainder_mask >> 1;
 801820c:	4130      	asrs	r0, r6
 801820e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018210:	bf58      	it	pl
 8018212:	463e      	movpl	r6, r7
    if (remainder > threshold)
 8018214:	42b1      	cmp	r1, r6
        res00 += dst_offset;
 8018216:	9922      	ldr	r1, [sp, #136]	; 0x88
        result++;
 8018218:	bfc8      	it	gt
 801821a:	3001      	addgt	r0, #1
        res01 += dst_offset;
 801821c:	4408      	add	r0, r1
        res00 += dst_offset;
 801821e:	440d      	add	r5, r1
        res00 = MAX(res00, activation_min);
 8018220:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018222:	428d      	cmp	r5, r1
 8018224:	bfb8      	it	lt
 8018226:	460d      	movlt	r5, r1
        res01 = MAX(res01, activation_min);
 8018228:	4288      	cmp	r0, r1
 801822a:	bfb8      	it	lt
 801822c:	4608      	movlt	r0, r1
        res00 = MIN(res00, activation_max);
 801822e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018230:	428d      	cmp	r5, r1
 8018232:	bfa8      	it	ge
 8018234:	460d      	movge	r5, r1
        *dst++ = (q7_t)res00;
 8018236:	9902      	ldr	r1, [sp, #8]
 8018238:	f801 5c02 	strb.w	r5, [r1, #-2]
        res01 = MIN(res01, activation_max);
 801823c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801823e:	4288      	cmp	r0, r1
 8018240:	bfa8      	it	ge
 8018242:	4608      	movge	r0, r1
        *dst++ = (q7_t)res01;
 8018244:	9902      	ldr	r1, [sp, #8]
 8018246:	f801 0c01 	strb.w	r0, [r1, #-1]
        rhs += 2 * rhs_cols;
 801824a:	9903      	ldr	r1, [sp, #12]
 801824c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801824e:	4401      	add	r1, r0
 8018250:	9103      	str	r1, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8018252:	9904      	ldr	r1, [sp, #16]
 8018254:	3108      	adds	r1, #8
 8018256:	9104      	str	r1, [sp, #16]
 8018258:	9902      	ldr	r1, [sp, #8]
 801825a:	3102      	adds	r1, #2
 801825c:	9102      	str	r1, [sp, #8]
 801825e:	e6e4      	b.n	801802a <arm_nn_vec_mat_mult_t_s8+0x9e>
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8018260:	f8dc a000 	ldr.w	sl, [ip]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018264:	fa23 fb8a 	sxtab16	fp, r3, sl
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8018268:	9d01      	ldr	r5, [sp, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801826a:	ea4f 2a3a 	mov.w	sl, sl, ror #8
 801826e:	59ed      	ldr	r5, [r5, r7]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018270:	fa23 fa8a 	sxtab16	sl, r3, sl
 8018274:	fa22 f985 	sxtab16	r9, r2, r5
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8018278:	f8d6 8000 	ldr.w	r8, [r6]
  return (op1 >> op2) | (op1 << (32U - op2));
 801827c:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018280:	fa22 f585 	sxtab16	r5, r2, r5

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018284:	fb29 000b 	smlad	r0, r9, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018288:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801828c:	fb25 000a 	smlad	r0, r5, sl, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8018290:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018294:	fa23 f888 	sxtab16	r8, r3, r8
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8018298:	f8dc a004 	ldr.w	sl, [ip, #4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801829c:	fb29 190b 	smlad	r9, r9, fp, r1
 80182a0:	fb25 9508 	smlad	r5, r5, r8, r9
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80182a4:	fa23 fb8a 	sxtab16	fp, r3, sl
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80182a8:	f8de 1004 	ldr.w	r1, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 80182ac:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80182b0:	fa23 fa8a 	sxtab16	sl, r3, sl
 80182b4:	fa22 f981 	sxtab16	r9, r2, r1
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80182b8:	f8d6 8004 	ldr.w	r8, [r6, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 80182bc:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80182c0:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80182c4:	fb29 000b 	smlad	r0, r9, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80182c8:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80182cc:	fb21 000a 	smlad	r0, r1, sl, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 80182d0:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80182d4:	fa23 f888 	sxtab16	r8, r3, r8
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80182d8:	f8dc a008 	ldr.w	sl, [ip, #8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80182dc:	fb29 590b 	smlad	r9, r9, fp, r5
 80182e0:	fb21 9508 	smlad	r5, r1, r8, r9
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80182e4:	fa23 fb8a 	sxtab16	fp, r3, sl
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80182e8:	f8de 1008 	ldr.w	r1, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80182ec:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80182f0:	fa23 fa8a 	sxtab16	sl, r3, sl
 80182f4:	fa22 f881 	sxtab16	r8, r2, r1
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80182f8:	f8d6 9008 	ldr.w	r9, [r6, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80182fc:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018300:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018304:	fb28 0b0b 	smlad	fp, r8, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018308:	fa23 f089 	sxtab16	r0, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801830c:	fb21 bb0a 	smlad	fp, r1, sl, fp
  return (op1 >> op2) | (op1 << (32U - op2));
 8018310:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018314:	fa23 f989 	sxtab16	r9, r3, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8018318:	f8dc c00c 	ldr.w	ip, [ip, #12]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801831c:	fb28 5800 	smlad	r8, r8, r0, r5
 8018320:	fb21 8809 	smlad	r8, r1, r9, r8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018324:	fa23 f98c 	sxtab16	r9, r3, ip
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8018328:	f8de 100c 	ldr.w	r1, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 801832c:	ea4f 203c 	mov.w	r0, ip, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018330:	fa23 f080 	sxtab16	r0, r3, r0
 8018334:	fa22 fe81 	sxtab16	lr, r2, r1
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8018338:	68f5      	ldr	r5, [r6, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 801833a:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801833e:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018342:	fb2e b909 	smlad	r9, lr, r9, fp
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018346:	fa23 fc85 	sxtab16	ip, r3, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801834a:	fb21 9000 	smlad	r0, r1, r0, r9
  return (op1 >> op2) | (op1 << (32U - op2));
 801834e:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018352:	fa23 f585 	sxtab16	r5, r3, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018356:	fb2e 8e0c 	smlad	lr, lr, ip, r8
 801835a:	fb21 e105 	smlad	r1, r1, r5, lr
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801835e:	3710      	adds	r7, #16
 8018360:	3610      	adds	r6, #16
 8018362:	e6ea      	b.n	801813a <arm_nn_vec_mat_mult_t_s8+0x1ae>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 8018364:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8018366:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 801836a:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 801836e:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8018370:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8018372:	44b4      	add	ip, r6
            res00 += lhs_value * rhs_value0;
 8018374:	fb05 000c 	mla	r0, r5, ip, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8018378:	f917 c004 	ldrsb.w	ip, [r7, r4]
 801837c:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
 801837e:	fb05 110c 	mla	r1, r5, ip, r1
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8018382:	e6e8      	b.n	8018156 <arm_nn_vec_mat_mult_t_s8+0x1ca>
 8018384:	c0000001 	.word	0xc0000001
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8018388:	597e      	ldr	r6, [r7, r5]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801838a:	fa23 fa86 	sxtab16	sl, r3, r6
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801838e:	9801      	ldr	r0, [sp, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 8018390:	ea4f 2636 	mov.w	r6, r6, ror #8
 8018394:	5940      	ldr	r0, [r0, r5]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018396:	fa23 f686 	sxtab16	r6, r3, r6
 801839a:	fa22 f980 	sxtab16	r9, r2, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 801839e:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80183a2:	fa22 f080 	sxtab16	r0, r2, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80183a6:	fb29 190a 	smlad	r9, r9, sl, r1
 80183aa:	fb20 9006 	smlad	r0, r0, r6, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80183ae:	f8dc 6004 	ldr.w	r6, [ip, #4]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80183b2:	fa23 fa86 	sxtab16	sl, r3, r6
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80183b6:	f8de 1004 	ldr.w	r1, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 80183ba:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80183be:	fa23 f686 	sxtab16	r6, r3, r6
 80183c2:	fa22 f981 	sxtab16	r9, r2, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 80183c6:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80183ca:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80183ce:	fb29 090a 	smlad	r9, r9, sl, r0
 80183d2:	fb21 9106 	smlad	r1, r1, r6, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80183d6:	f8dc 6008 	ldr.w	r6, [ip, #8]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80183da:	fa23 fa86 	sxtab16	sl, r3, r6
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80183de:	f8de 0008 	ldr.w	r0, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80183e2:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80183e6:	fa23 f686 	sxtab16	r6, r3, r6
 80183ea:	fa22 f980 	sxtab16	r9, r2, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 80183ee:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80183f2:	fa22 f080 	sxtab16	r0, r2, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80183f6:	fb29 190a 	smlad	r9, r9, sl, r1
 80183fa:	fb20 9906 	smlad	r9, r0, r6, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80183fe:	f8dc 000c 	ldr.w	r0, [ip, #12]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018402:	fa23 f680 	sxtab16	r6, r3, r0
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8018406:	f8de 100c 	ldr.w	r1, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 801840a:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801840e:	fa23 f080 	sxtab16	r0, r3, r0
 8018412:	fa22 fc81 	sxtab16	ip, r2, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8018416:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801841a:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801841e:	fb2c 9c06 	smlad	ip, ip, r6, r9
 8018422:	fb21 c100 	smlad	r1, r1, r0, ip
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8018426:	3510      	adds	r5, #16
 8018428:	e624      	b.n	8018074 <arm_nn_vec_mat_mult_t_s8+0xe8>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 801842a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801842c:	f913 5f01 	ldrsb.w	r5, [r3, #1]!
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 8018430:	9f20      	ldr	r7, [sp, #128]	; 0x80
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8018432:	4435      	add	r5, r6
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 8018434:	f910 6b01 	ldrsb.w	r6, [r0], #1
 8018438:	443e      	add	r6, r7
            res00 += lhs_value * rhs_value0;
 801843a:	fb06 1105 	mla	r1, r6, r5, r1
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801843e:	e62b      	b.n	8018098 <arm_nn_vec_mat_mult_t_s8+0x10c>

08018440 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8018440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018444:	b08d      	sub	sp, #52	; 0x34
 8018446:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8018448:	2300      	movs	r3, #0
{
 801844a:	9008      	str	r0, [sp, #32]
 801844c:	910b      	str	r1, [sp, #44]	; 0x2c
 801844e:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8018450:	9300      	str	r3, [sp, #0]
 8018452:	9303      	str	r3, [sp, #12]
 8018454:	9a00      	ldr	r2, [sp, #0]
 8018456:	9b08      	ldr	r3, [sp, #32]
 8018458:	4413      	add	r3, r2
 801845a:	9304      	str	r3, [sp, #16]
 801845c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801845e:	4413      	add	r3, r2
 8018460:	930a      	str	r3, [sp, #40]	; 0x28
 8018462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018464:	9b03      	ldr	r3, [sp, #12]
 8018466:	4293      	cmp	r3, r2
 8018468:	db02      	blt.n	8018470 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
 801846a:	b00d      	add	sp, #52	; 0x34
 801846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
 8018470:	9b08      	ldr	r3, [sp, #32]
 8018472:	9a00      	ldr	r2, [sp, #0]
 8018474:	569b      	ldrsb	r3, [r3, r2]
 8018476:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
 8018478:	2301      	movs	r3, #1
 801847a:	9a02      	ldr	r2, [sp, #8]
 801847c:	4293      	cmp	r3, r2
 801847e:	f2c0 8139 	blt.w	80186f4 <arm_softmax_s8+0x2b4>
        int32_t sum = 0;
 8018482:	2300      	movs	r3, #0
        mult = 1 - mult;
 8018484:	f8df 8284 	ldr.w	r8, [pc, #644]	; 801870c <arm_softmax_s8+0x2cc>
        for (col = 0; col < row_size; ++col)
 8018488:	469e      	mov	lr, r3
 801848a:	9a02      	ldr	r2, [sp, #8]
 801848c:	4596      	cmp	lr, r2
 801848e:	f2c0 813f 	blt.w	8018710 <arm_softmax_s8+0x2d0>
        const int32_t headroom = __CLZ(sum);
 8018492:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8018496:	4093      	lsls	r3, r2
 8018498:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 801849c:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 801849e:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 80184a2:	f141 0100 	adc.w	r1, r1, #0
 80184a6:	085b      	lsrs	r3, r3, #1
 80184a8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    mult = mult + (q63_t)m1 * m2;
 80184ac:	4c96      	ldr	r4, [pc, #600]	; (8018708 <arm_softmax_s8+0x2c8>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 80184ae:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 80184b0:	4258      	negs	r0, r3
 80184b2:	fb04 0001 	mla	r0, r4, r1, r0
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 80184b6:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
 80184ba:	fba3 2404 	umull	r2, r4, r3, r4
 80184be:	4420      	add	r0, r4
 80184c0:	4c92      	ldr	r4, [pc, #584]	; (801870c <arm_softmax_s8+0x2cc>)
 80184c2:	1912      	adds	r2, r2, r4
    result = (int32_t) (mult / (1ll << 31));
 80184c4:	f160 0000 	sbc.w	r0, r0, #0
 80184c8:	2800      	cmp	r0, #0
 80184ca:	da05      	bge.n	80184d8 <arm_softmax_s8+0x98>
 80184cc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80184d0:	1914      	adds	r4, r2, r4
 80184d2:	4622      	mov	r2, r4
 80184d4:	f140 0000 	adc.w	r0, r0, #0
 80184d8:	0fd2      	lsrs	r2, r2, #31
 80184da:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 80184de:	f102 325a 	add.w	r2, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 80184e2:	17d0      	asrs	r0, r2, #31
 80184e4:	fb02 f501 	mul.w	r5, r2, r1
 80184e8:	fb03 5500 	mla	r5, r3, r0, r5
 80184ec:	fba2 0403 	umull	r0, r4, r2, r3
 80184f0:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 80184f4:	eb45 0404 	adc.w	r4, r5, r4
    result = (int32_t) (mult / (1ll << 31));
 80184f8:	0fc0      	lsrs	r0, r0, #31
 80184fa:	ea40 0044 	orr.w	r0, r0, r4, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80184fe:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8018502:	ea82 0400 	eor.w	r4, r2, r0
 8018506:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 8018508:	2c00      	cmp	r4, #0
 801850a:	4c80      	ldr	r4, [pc, #512]	; (801870c <arm_softmax_s8+0x2cc>)
 801850c:	bf06      	itte	eq
 801850e:	2500      	moveq	r5, #0
 8018510:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8018514:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8018518:	fbc2 4500 	smlal	r4, r5, r2, r0
 801851c:	2d00      	cmp	r5, #0
 801851e:	da05      	bge.n	801852c <arm_softmax_s8+0xec>
 8018520:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018524:	1820      	adds	r0, r4, r0
 8018526:	4604      	mov	r4, r0
 8018528:	f145 0500 	adc.w	r5, r5, #0
 801852c:	0fe4      	lsrs	r4, r4, #31
 801852e:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8018532:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
 8018536:	ea83 0002 	eor.w	r0, r3, r2
 801853a:	0fc0      	lsrs	r0, r0, #31
        mult = 1 - mult;
 801853c:	2800      	cmp	r0, #0
 801853e:	4d73      	ldr	r5, [pc, #460]	; (801870c <arm_softmax_s8+0x2cc>)
    mult = mult + (q63_t)m1 * m2;
 8018540:	ea4f 70e2 	mov.w	r0, r2, asr #31
 8018544:	fb02 f401 	mul.w	r4, r2, r1
 8018548:	fb03 4400 	mla	r4, r3, r0, r4
        mult = 1 - mult;
 801854c:	bf08      	it	eq
 801854e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 8018552:	fba2 0c03 	umull	r0, ip, r2, r3
        mult = 1 - mult;
 8018556:	bf0c      	ite	eq
 8018558:	2600      	moveq	r6, #0
 801855a:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 801855e:	4464      	add	r4, ip
 8018560:	1940      	adds	r0, r0, r5
    result = (int32_t) (mult / (1ll << 31));
 8018562:	eb44 0406 	adc.w	r4, r4, r6
 8018566:	2c00      	cmp	r4, #0
 8018568:	da05      	bge.n	8018576 <arm_softmax_s8+0x136>
 801856a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801856e:	1945      	adds	r5, r0, r5
 8018570:	4628      	mov	r0, r5
 8018572:	f144 0400 	adc.w	r4, r4, #0
 8018576:	0fc0      	lsrs	r0, r0, #31
 8018578:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801857c:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8018580:	ea82 0400 	eor.w	r4, r2, r0
 8018584:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 8018586:	2c00      	cmp	r4, #0
 8018588:	4c60      	ldr	r4, [pc, #384]	; (801870c <arm_softmax_s8+0x2cc>)
 801858a:	bf06      	itte	eq
 801858c:	2500      	moveq	r5, #0
 801858e:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8018592:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8018596:	fbc2 4500 	smlal	r4, r5, r2, r0
 801859a:	2d00      	cmp	r5, #0
 801859c:	da05      	bge.n	80185aa <arm_softmax_s8+0x16a>
 801859e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80185a2:	1820      	adds	r0, r4, r0
 80185a4:	4604      	mov	r4, r0
 80185a6:	f145 0500 	adc.w	r5, r5, #0
 80185aa:	0fe4      	lsrs	r4, r4, #31
 80185ac:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80185b0:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 80185b4:	bfab      	itete	ge
 80185b6:	2000      	movge	r0, #0
 80185b8:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 80185bc:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 80185c0:	2500      	movlt	r5, #0
 80185c2:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80185c6:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80185ca:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80185ce:	bfcb      	itete	gt
 80185d0:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
 80185d4:	2500      	movle	r5, #0
 80185d6:	2400      	movgt	r4, #0
 80185d8:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
 80185dc:	4028      	ands	r0, r5
 80185de:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80185e0:	4402      	add	r2, r0
    if ((m1 < 0) ^ (m2 < 0))
 80185e2:	ea83 0002 	eor.w	r0, r3, r2
 80185e6:	0fc0      	lsrs	r0, r0, #31
        mult = 1 - mult;
 80185e8:	2800      	cmp	r0, #0
    mult = mult + (q63_t)m1 * m2;
 80185ea:	ea4f 75e2 	mov.w	r5, r2, asr #31
        mult = 1 - mult;
 80185ee:	4847      	ldr	r0, [pc, #284]	; (801870c <arm_softmax_s8+0x2cc>)
    mult = mult + (q63_t)m1 * m2;
 80185f0:	fb02 f101 	mul.w	r1, r2, r1
 80185f4:	fb03 1105 	mla	r1, r3, r5, r1
        mult = 1 - mult;
 80185f8:	bf08      	it	eq
 80185fa:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 80185fe:	fba2 3503 	umull	r3, r5, r2, r3
        mult = 1 - mult;
 8018602:	bf0c      	ite	eq
 8018604:	2400      	moveq	r4, #0
 8018606:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 801860a:	4429      	add	r1, r5
 801860c:	181b      	adds	r3, r3, r0
    result = (int32_t) (mult / (1ll << 31));
 801860e:	eb41 0104 	adc.w	r1, r1, r4
 8018612:	2900      	cmp	r1, #0
 8018614:	da05      	bge.n	8018622 <arm_softmax_s8+0x1e2>
 8018616:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801861a:	1818      	adds	r0, r3, r0
 801861c:	4603      	mov	r3, r0
 801861e:	f141 0100 	adc.w	r1, r1, #0
 8018622:	0fdb      	lsrs	r3, r3, #31
 8018624:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8018628:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 801862c:	ea82 0103 	eor.w	r1, r2, r3
 8018630:	0fc9      	lsrs	r1, r1, #31
        mult = 1 - mult;
 8018632:	2900      	cmp	r1, #0
 8018634:	4935      	ldr	r1, [pc, #212]	; (801870c <arm_softmax_s8+0x2cc>)
 8018636:	bf06      	itte	eq
 8018638:	2000      	moveq	r0, #0
 801863a:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 801863e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8018642:	fbc2 1003 	smlal	r1, r0, r2, r3
 8018646:	2800      	cmp	r0, #0
 8018648:	da05      	bge.n	8018656 <arm_softmax_s8+0x216>
 801864a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801864e:	18cb      	adds	r3, r1, r3
 8018650:	4619      	mov	r1, r3
 8018652:	f140 0000 	adc.w	r0, r0, #0
 8018656:	0fc9      	lsrs	r1, r1, #31
 8018658:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801865c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8018660:	bfb4      	ite	lt
 8018662:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018666:	2300      	movge	r3, #0
 8018668:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 801866c:	bfb4      	ite	lt
 801866e:	2000      	movlt	r0, #0
 8018670:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8018674:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8018678:	ea83 0300 	eor.w	r3, r3, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 801867c:	bfcb      	itete	gt
 801867e:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018682:	2000      	movle	r0, #0
 8018684:	2100      	movgt	r1, #0
 8018686:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 801868a:	4003      	ands	r3, r0
 801868c:	404b      	eors	r3, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801868e:	4413      	add	r3, r2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8018690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018694:	bfab      	itete	ge
 8018696:	2200      	movge	r2, #0
 8018698:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 801869c:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 80186a0:	2100      	movlt	r1, #0
 80186a2:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80186a6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80186aa:	ea82 0201 	eor.w	r2, r2, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80186ae:	bfcb      	itete	gt
 80186b0:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
 80186b4:	2100      	movle	r1, #0
 80186b6:	2300      	movgt	r3, #0
 80186b8:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 80186bc:	400a      	ands	r2, r1
 80186be:	4053      	eors	r3, r2
 80186c0:	9305      	str	r3, [sp, #20]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80186c2:	2301      	movs	r3, #1
 80186c4:	fa03 f30a 	lsl.w	r3, r3, sl
 80186c8:	3b01      	subs	r3, #1
 80186ca:	9306      	str	r3, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 80186cc:	105b      	asrs	r3, r3, #1
 80186ce:	9307      	str	r3, [sp, #28]
        mult = 1 - mult;
 80186d0:	f8df e038 	ldr.w	lr, [pc, #56]	; 801870c <arm_softmax_s8+0x2cc>
        threshold++;
 80186d4:	3301      	adds	r3, #1
 80186d6:	9309      	str	r3, [sp, #36]	; 0x24
        for (col = 0; col < row_size; ++col)
 80186d8:	f04f 0c00 	mov.w	ip, #0
 80186dc:	9b02      	ldr	r3, [sp, #8]
 80186de:	459c      	cmp	ip, r3
 80186e0:	f2c0 818c 	blt.w	80189fc <arm_softmax_s8+0x5bc>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80186e4:	9b03      	ldr	r3, [sp, #12]
 80186e6:	9a00      	ldr	r2, [sp, #0]
 80186e8:	3301      	adds	r3, #1
 80186ea:	9303      	str	r3, [sp, #12]
 80186ec:	9b02      	ldr	r3, [sp, #8]
 80186ee:	441a      	add	r2, r3
 80186f0:	9200      	str	r2, [sp, #0]
 80186f2:	e6af      	b.n	8018454 <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
 80186f4:	9a04      	ldr	r2, [sp, #16]
 80186f6:	9901      	ldr	r1, [sp, #4]
 80186f8:	56d2      	ldrsb	r2, [r2, r3]
 80186fa:	4291      	cmp	r1, r2
 80186fc:	bfb8      	it	lt
 80186fe:	4611      	movlt	r1, r2
 8018700:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
 8018702:	3301      	adds	r3, #1
 8018704:	e6b9      	b.n	801847a <arm_softmax_s8+0x3a>
 8018706:	bf00      	nop
 8018708:	c3c3c3c4 	.word	0xc3c3c3c4
 801870c:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
 8018710:	9a04      	ldr	r2, [sp, #16]
 8018712:	f912 100e 	ldrsb.w	r1, [r2, lr]
 8018716:	9a01      	ldr	r2, [sp, #4]
 8018718:	1a89      	subs	r1, r1, r2
            if (diff >= diff_min)
 801871a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801871c:	428a      	cmp	r2, r1
 801871e:	f300 815a 	bgt.w	80189d6 <arm_softmax_s8+0x596>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8018722:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018724:	4091      	lsls	r1, r2
    if ((m1 < 0) ^ (m2 < 0))
 8018726:	ea81 020b 	eor.w	r2, r1, fp
 801872a:	0fd2      	lsrs	r2, r2, #31
        mult = 1 - mult;
 801872c:	2a00      	cmp	r2, #0
 801872e:	bf0b      	itete	eq
 8018730:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8018734:	4642      	movne	r2, r8
 8018736:	2000      	moveq	r0, #0
 8018738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801873c:	fbc1 200b 	smlal	r2, r0, r1, fp
 8018740:	2800      	cmp	r0, #0
 8018742:	da05      	bge.n	8018750 <arm_softmax_s8+0x310>
 8018744:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8018748:	1914      	adds	r4, r2, r4
 801874a:	4622      	mov	r2, r4
 801874c:	f140 0000 	adc.w	r0, r0, #0
 8018750:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018752:	4559      	cmp	r1, fp
    result = (int32_t) (mult / (1ll << 31));
 8018754:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018758:	d104      	bne.n	8018764 <arm_softmax_s8+0x324>
        result = Q31_MAX;
 801875a:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 801875e:	bf08      	it	eq
 8018760:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8018764:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder             = val_mod_minus_quarter - val;
 8018768:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 801876c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8018770:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
 8018774:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t) (mult / (1ll << 31));
 8018778:	2400      	movs	r4, #0
 801877a:	fbcc 140c 	smlal	r1, r4, ip, ip
 801877e:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 8018780:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t) (mult / (1ll << 31));
 8018784:	da05      	bge.n	8018792 <arm_softmax_s8+0x352>
 8018786:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801878a:	1808      	adds	r0, r1, r0
 801878c:	4601      	mov	r1, r0
 801878e:	f144 0400 	adc.w	r4, r4, #0
 8018792:	0fc9      	lsrs	r1, r1, #31
 8018794:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8018798:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t) (mult / (1ll << 31));
 801879c:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 801879e:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 80187a2:	fb01 fa04 	mul.w	sl, r1, r4
    result = (int32_t) (mult / (1ll << 31));
 80187a6:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 80187aa:	f1b9 0f00 	cmp.w	r9, #0
 80187ae:	da06      	bge.n	80187be <arm_softmax_s8+0x37e>
 80187b0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80187b4:	eb10 0a0a 	adds.w	sl, r0, sl
 80187b8:	4650      	mov	r0, sl
 80187ba:	f149 0900 	adc.w	r9, r9, #0
 80187be:	0fc0      	lsrs	r0, r0, #31
 80187c0:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 80187c4:	f000 0903 	and.w	r9, r0, #3
        threshold++;
 80187c8:	1080      	asrs	r0, r0, #2
 80187ca:	bf54      	ite	pl
 80187cc:	f04f 0a01 	movpl.w	sl, #1
 80187d0:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 80187d4:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 80187d6:	ea8c 0901 	eor.w	r9, ip, r1
 80187da:	ea4f 79d9 	mov.w	r9, r9, lsr #31
        result++;
 80187de:	bfc8      	it	gt
 80187e0:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
 80187e2:	fb0c f404 	mul.w	r4, ip, r4
        mult = 1 - mult;
 80187e6:	f1b9 0f00 	cmp.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
 80187ea:	fb01 4406 	mla	r4, r1, r6, r4
        mult = 1 - mult;
 80187ee:	bf08      	it	eq
 80187f0:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 80187f4:	fbac 6701 	umull	r6, r7, ip, r1
        mult = 1 - mult;
 80187f8:	bf16      	itet	ne
 80187fa:	46c1      	movne	r9, r8
 80187fc:	f04f 0a00 	moveq.w	sl, #0
 8018800:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 8018804:	443c      	add	r4, r7
 8018806:	eb16 0609 	adds.w	r6, r6, r9
    result = (int32_t) (mult / (1ll << 31));
 801880a:	eb44 040a 	adc.w	r4, r4, sl
 801880e:	2c00      	cmp	r4, #0
 8018810:	da06      	bge.n	8018820 <arm_softmax_s8+0x3e0>
 8018812:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018816:	eb16 0909 	adds.w	r9, r6, r9
 801881a:	464e      	mov	r6, r9
 801881c:	f144 0400 	adc.w	r4, r4, #0
 8018820:	0ff6      	lsrs	r6, r6, #31
 8018822:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018826:	4406      	add	r6, r0
    if ((m1 < 0) ^ (m2 < 0))
 8018828:	0ff0      	lsrs	r0, r6, #31
        mult = 1 - mult;
 801882a:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 801882c:	4f6b      	ldr	r7, [pc, #428]	; (80189dc <arm_softmax_s8+0x59c>)
        mult = 1 - mult;
 801882e:	bf0b      	itete	eq
 8018830:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 8018834:	4640      	movne	r0, r8
 8018836:	2400      	moveq	r4, #0
 8018838:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801883c:	fbc6 0407 	smlal	r0, r4, r6, r7
 8018840:	2c00      	cmp	r4, #0
 8018842:	da05      	bge.n	8018850 <arm_softmax_s8+0x410>
 8018844:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8018848:	1986      	adds	r6, r0, r6
 801884a:	4630      	mov	r0, r6
 801884c:	f144 0400 	adc.w	r4, r4, #0
 8018850:	0fc0      	lsrs	r0, r0, #31
 8018852:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018856:	4401      	add	r1, r0
    if (result < 0)
 8018858:	1048      	asrs	r0, r1, #1
 801885a:	d402      	bmi.n	8018862 <arm_softmax_s8+0x422>
    if (remainder > threshold)
 801885c:	07ce      	lsls	r6, r1, #31
        result++;
 801885e:	bf48      	it	mi
 8018860:	3001      	addmi	r0, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018862:	eb0c 0100 	add.w	r1, ip, r0
    if ((m1 < 0) ^ (m2 < 0))
 8018866:	0fc8      	lsrs	r0, r1, #31
        mult = 1 - mult;
 8018868:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 801886a:	4e5d      	ldr	r6, [pc, #372]	; (80189e0 <arm_softmax_s8+0x5a0>)
        mult = 1 - mult;
 801886c:	bf0b      	itete	eq
 801886e:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8018872:	4644      	movne	r4, r8
 8018874:	2000      	moveq	r0, #0
 8018876:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801887a:	fbc1 4006 	smlal	r4, r0, r1, r6
 801887e:	2800      	cmp	r0, #0
 8018880:	da05      	bge.n	801888e <arm_softmax_s8+0x44e>
 8018882:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018886:	1861      	adds	r1, r4, r1
 8018888:	460c      	mov	r4, r1
 801888a:	f140 0000 	adc.w	r0, r0, #0
 801888e:	0fe4      	lsrs	r4, r4, #31
 8018890:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018894:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 8018898:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801889c:	2000      	movs	r0, #0
 801889e:	4f51      	ldr	r7, [pc, #324]	; (80189e4 <arm_softmax_s8+0x5a4>)
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80188a0:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 80188a4:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 80188a8:	468c      	mov	ip, r1
 80188aa:	4681      	mov	r9, r0
 80188ac:	fbc4 c907 	smlal	ip, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 80188b0:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t) (mult / (1ll << 31));
 80188b4:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 80188b8:	ea4c 0c49 	orr.w	ip, ip, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 80188bc:	3e01      	subs	r6, #1
 80188be:	f345 6900 	sbfx	r9, r5, #24, #1
 80188c2:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
 80188c6:	4f48      	ldr	r7, [pc, #288]	; (80189e8 <arm_softmax_s8+0x5a8>)
    SELECT_IF_NON_ZERO(1672461947)
 80188c8:	4026      	ands	r6, r4
 80188ca:	ea89 0406 	eor.w	r4, r9, r6
    mult = mult + (q63_t)m1 * m2;
 80188ce:	4689      	mov	r9, r1
 80188d0:	4606      	mov	r6, r0
 80188d2:	fbc4 9607 	smlal	r9, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 80188d6:	f3c5 6c40 	ubfx	ip, r5, #25, #1
    result = (int32_t) (mult / (1ll << 31));
 80188da:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80188de:	ea49 0946 	orr.w	r9, r9, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 80188e2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80188e6:	f345 6640 	sbfx	r6, r5, #25, #1
 80188ea:	ea0c 0c04 	and.w	ip, ip, r4
    mult = mult + (q63_t)m1 * m2;
 80188ee:	4f3f      	ldr	r7, [pc, #252]	; (80189ec <arm_softmax_s8+0x5ac>)
    SELECT_IF_NON_ZERO(1302514674)
 80188f0:	ea06 0609 	and.w	r6, r6, r9
 80188f4:	ea86 060c 	eor.w	r6, r6, ip
    mult = mult + (q63_t)m1 * m2;
 80188f8:	4689      	mov	r9, r1
 80188fa:	4604      	mov	r4, r0
 80188fc:	fbc6 9407 	smlal	r9, r4, r6, r7
    SELECT_IF_NON_ZERO(790015084)
 8018900:	f3c5 6c80 	ubfx	ip, r5, #26, #1
    result = (int32_t) (mult / (1ll << 31));
 8018904:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8018908:	ea49 0944 	orr.w	r9, r9, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 801890c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018910:	f345 6480 	sbfx	r4, r5, #26, #1
 8018914:	ea0c 0c06 	and.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
 8018918:	4f35      	ldr	r7, [pc, #212]	; (80189f0 <arm_softmax_s8+0x5b0>)
    SELECT_IF_NON_ZERO(790015084)
 801891a:	ea04 0409 	and.w	r4, r4, r9
 801891e:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 8018922:	4689      	mov	r9, r1
 8018924:	4606      	mov	r6, r0
 8018926:	fbc4 9607 	smlal	r9, r6, r4, r7
    SELECT_IF_NON_ZERO(290630308)
 801892a:	f3c5 6cc0 	ubfx	ip, r5, #27, #1
    result = (int32_t) (mult / (1ll << 31));
 801892e:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8018932:	ea49 0946 	orr.w	r9, r9, r6, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 8018936:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801893a:	f345 66c0 	sbfx	r6, r5, #27, #1
 801893e:	ea0c 0c04 	and.w	ip, ip, r4
 8018942:	ea06 0609 	and.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 8018946:	4f2b      	ldr	r7, [pc, #172]	; (80189f4 <arm_softmax_s8+0x5b4>)
    SELECT_IF_NON_ZERO(290630308)
 8018948:	ea86 060c 	eor.w	r6, r6, ip
    mult = mult + (q63_t)m1 * m2;
 801894c:	4689      	mov	r9, r1
 801894e:	4604      	mov	r4, r0
 8018950:	fbc6 9407 	smlal	r9, r4, r6, r7
    SELECT_IF_NON_ZERO(39332535)
 8018954:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    result = (int32_t) (mult / (1ll << 31));
 8018958:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 801895c:	ea49 0944 	orr.w	r9, r9, r4, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 8018960:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018964:	f345 7400 	sbfx	r4, r5, #28, #1
 8018968:	ea0c 0c06 	and.w	ip, ip, r6
 801896c:	ea04 0409 	and.w	r4, r4, r9
    mult = mult + (q63_t)m1 * m2;
 8018970:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80189f8 <arm_softmax_s8+0x5b8>
    SELECT_IF_NON_ZERO(39332535)
 8018974:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 8018978:	4682      	mov	sl, r0
 801897a:	468c      	mov	ip, r1
 801897c:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
 8018980:	f3c5 7640 	ubfx	r6, r5, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 8018984:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    SELECT_IF_NON_ZERO(720401)
 8018988:	f345 7940 	sbfx	r9, r5, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 801898c:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 8018990:	3e01      	subs	r6, #1
 8018992:	4026      	ands	r6, r4
 8018994:	ea09 090c 	and.w	r9, r9, ip
 8018998:	ea89 0906 	eor.w	r9, r9, r6
    mult = mult + (q63_t)m1 * m2;
 801899c:	26f2      	movs	r6, #242	; 0xf2
 801899e:	fbc9 1006 	smlal	r1, r0, r9, r6
    SELECT_IF_NON_ZERO(242)
 80189a2:	f3c5 7480 	ubfx	r4, r5, #30, #1
    result = (int32_t) (mult / (1ll << 31));
 80189a6:	0fc9      	lsrs	r1, r1, #31
 80189a8:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 80189ac:	f345 7580 	sbfx	r5, r5, #30, #1
 80189b0:	3c01      	subs	r4, #1
    mask = MASK_IF_ZERO(val);
 80189b2:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
 80189b6:	400d      	ands	r5, r1
 80189b8:	ea04 0409 	and.w	r4, r4, r9
    mask = MASK_IF_ZERO(val);
 80189bc:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 80189be:	4065      	eors	r5, r4
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80189c0:	1e51      	subs	r1, r2, #1
    mask = MASK_IF_ZERO(val);
 80189c2:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80189c4:	4029      	ands	r1, r5
 80189c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80189ca:	404a      	eors	r2, r1
    result = dividend >> exponent;
 80189cc:	1311      	asrs	r1, r2, #12
    if (remainder > threshold)
 80189ce:	0514      	lsls	r4, r2, #20
        result++;
 80189d0:	bf48      	it	mi
 80189d2:	3101      	addmi	r1, #1
 80189d4:	440b      	add	r3, r1
        for (col = 0; col < row_size; ++col)
 80189d6:	f10e 0e01 	add.w	lr, lr, #1
 80189da:	e556      	b.n	801848a <arm_softmax_s8+0x4a>
 80189dc:	2aaaaaab 	.word	0x2aaaaaab
 80189e0:	70f5a894 	.word	0x70f5a894
 80189e4:	63afbe7b 	.word	0x63afbe7b
 80189e8:	4da2cbf2 	.word	0x4da2cbf2
 80189ec:	2f16ac6c 	.word	0x2f16ac6c
 80189f0:	1152aaa4 	.word	0x1152aaa4
 80189f4:	02582ab7 	.word	0x02582ab7
 80189f8:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
 80189fc:	9b04      	ldr	r3, [sp, #16]
 80189fe:	9a01      	ldr	r2, [sp, #4]
 8018a00:	f913 300c 	ldrsb.w	r3, [r3, ip]
 8018a04:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
 8018a06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018a08:	4293      	cmp	r3, r2
 8018a0a:	f2c0 8175 	blt.w	8018cf8 <arm_softmax_s8+0x8b8>
                const int32_t res = DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8018a0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018a10:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
 8018a12:	ea83 020b 	eor.w	r2, r3, fp
 8018a16:	0fd2      	lsrs	r2, r2, #31
        mult = 1 - mult;
 8018a18:	2a00      	cmp	r2, #0
 8018a1a:	bf0b      	itete	eq
 8018a1c:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8018a20:	4672      	movne	r2, lr
 8018a22:	2100      	moveq	r1, #0
 8018a24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8018a28:	fbc3 210b 	smlal	r2, r1, r3, fp
 8018a2c:	2900      	cmp	r1, #0
 8018a2e:	da05      	bge.n	8018a3c <arm_softmax_s8+0x5fc>
 8018a30:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018a34:	1810      	adds	r0, r2, r0
 8018a36:	4602      	mov	r2, r0
 8018a38:	f141 0100 	adc.w	r1, r1, #0
 8018a3c:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018a3e:	455b      	cmp	r3, fp
    result = (int32_t) (mult / (1ll << 31));
 8018a40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018a44:	d104      	bne.n	8018a50 <arm_softmax_s8+0x610>
        result = Q31_MAX;
 8018a46:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 8018a4a:	bf08      	it	eq
 8018a4c:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8018a50:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder             = val_mod_minus_quarter - val;
 8018a54:	1ab3      	subs	r3, r6, r2
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8018a56:	0176      	lsls	r6, r6, #5
 8018a58:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
 8018a5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t) (mult / (1ll << 31));
 8018a60:	2400      	movs	r4, #0
 8018a62:	fbc6 1406 	smlal	r1, r4, r6, r6
 8018a66:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 8018a68:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t) (mult / (1ll << 31));
 8018a6c:	da05      	bge.n	8018a7a <arm_softmax_s8+0x63a>
 8018a6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018a72:	1808      	adds	r0, r1, r0
 8018a74:	4601      	mov	r1, r0
 8018a76:	f144 0400 	adc.w	r4, r4, #0
 8018a7a:	0fc9      	lsrs	r1, r1, #31
 8018a7c:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8018a80:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t) (mult / (1ll << 31));
 8018a84:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 8018a86:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 8018a8a:	fb01 f904 	mul.w	r9, r1, r4
    result = (int32_t) (mult / (1ll << 31));
 8018a8e:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
 8018a92:	f1b8 0f00 	cmp.w	r8, #0
 8018a96:	da06      	bge.n	8018aa6 <arm_softmax_s8+0x666>
 8018a98:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018a9c:	eb10 0909 	adds.w	r9, r0, r9
 8018aa0:	4648      	mov	r0, r9
 8018aa2:	f148 0800 	adc.w	r8, r8, #0
 8018aa6:	0fc0      	lsrs	r0, r0, #31
 8018aa8:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 8018aac:	f000 0803 	and.w	r8, r0, #3
        threshold++;
 8018ab0:	1080      	asrs	r0, r0, #2
 8018ab2:	bf54      	ite	pl
 8018ab4:	f04f 0901 	movpl.w	r9, #1
 8018ab8:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
 8018abc:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
 8018abe:	ea86 0801 	eor.w	r8, r6, r1
 8018ac2:	ea4f 78d8 	mov.w	r8, r8, lsr #31
        result++;
 8018ac6:	bfc8      	it	gt
 8018ac8:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
 8018aca:	4374      	muls	r4, r6
        mult = 1 - mult;
 8018acc:	f1b8 0f00 	cmp.w	r8, #0
    mult = mult + (q63_t)m1 * m2;
 8018ad0:	fb01 4405 	mla	r4, r1, r5, r4
        mult = 1 - mult;
 8018ad4:	bf08      	it	eq
 8018ad6:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 8018ada:	fba6 5701 	umull	r5, r7, r6, r1
        mult = 1 - mult;
 8018ade:	bf16      	itet	ne
 8018ae0:	46f0      	movne	r8, lr
 8018ae2:	f04f 0900 	moveq.w	r9, #0
 8018ae6:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 8018aea:	443c      	add	r4, r7
 8018aec:	eb15 0508 	adds.w	r5, r5, r8
    result = (int32_t) (mult / (1ll << 31));
 8018af0:	eb44 0409 	adc.w	r4, r4, r9
 8018af4:	2c00      	cmp	r4, #0
 8018af6:	da06      	bge.n	8018b06 <arm_softmax_s8+0x6c6>
 8018af8:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8018afc:	eb15 0808 	adds.w	r8, r5, r8
 8018b00:	4645      	mov	r5, r8
 8018b02:	f144 0400 	adc.w	r4, r4, #0
 8018b06:	0fed      	lsrs	r5, r5, #31
 8018b08:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018b0c:	4405      	add	r5, r0
    if ((m1 < 0) ^ (m2 < 0))
 8018b0e:	0fe8      	lsrs	r0, r5, #31
        mult = 1 - mult;
 8018b10:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 8018b12:	4f7b      	ldr	r7, [pc, #492]	; (8018d00 <arm_softmax_s8+0x8c0>)
        mult = 1 - mult;
 8018b14:	bf0b      	itete	eq
 8018b16:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 8018b1a:	4670      	movne	r0, lr
 8018b1c:	2400      	moveq	r4, #0
 8018b1e:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8018b22:	fbc5 0407 	smlal	r0, r4, r5, r7
 8018b26:	2c00      	cmp	r4, #0
 8018b28:	da05      	bge.n	8018b36 <arm_softmax_s8+0x6f6>
 8018b2a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8018b2e:	1945      	adds	r5, r0, r5
 8018b30:	4628      	mov	r0, r5
 8018b32:	f144 0400 	adc.w	r4, r4, #0
 8018b36:	0fc0      	lsrs	r0, r0, #31
 8018b38:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018b3c:	4401      	add	r1, r0
    if (result < 0)
 8018b3e:	1048      	asrs	r0, r1, #1
 8018b40:	d402      	bmi.n	8018b48 <arm_softmax_s8+0x708>
    if (remainder > threshold)
 8018b42:	07c9      	lsls	r1, r1, #31
        result++;
 8018b44:	bf48      	it	mi
 8018b46:	3001      	addmi	r0, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018b48:	1831      	adds	r1, r6, r0
    if ((m1 < 0) ^ (m2 < 0))
 8018b4a:	0fc8      	lsrs	r0, r1, #31
        mult = 1 - mult;
 8018b4c:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 8018b4e:	4d6d      	ldr	r5, [pc, #436]	; (8018d04 <arm_softmax_s8+0x8c4>)
        mult = 1 - mult;
 8018b50:	bf0b      	itete	eq
 8018b52:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8018b56:	4674      	movne	r4, lr
 8018b58:	2000      	moveq	r0, #0
 8018b5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8018b5e:	fbc1 4005 	smlal	r4, r0, r1, r5
 8018b62:	2800      	cmp	r0, #0
 8018b64:	da05      	bge.n	8018b72 <arm_softmax_s8+0x732>
 8018b66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b6a:	1861      	adds	r1, r4, r1
 8018b6c:	460c      	mov	r4, r1
 8018b6e:	f140 0000 	adc.w	r0, r0, #0
 8018b72:	0fe4      	lsrs	r4, r4, #31
 8018b74:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018b78:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 8018b7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8018b80:	2000      	movs	r0, #0
 8018b82:	4f61      	ldr	r7, [pc, #388]	; (8018d08 <arm_softmax_s8+0x8c8>)
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8018b84:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 8018b88:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 8018b8c:	460e      	mov	r6, r1
 8018b8e:	4680      	mov	r8, r0
 8018b90:	fbc4 6807 	smlal	r6, r8, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 8018b94:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t) (mult / (1ll << 31));
 8018b98:	0ff6      	lsrs	r6, r6, #31
 8018b9a:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 8018b9e:	3d01      	subs	r5, #1
 8018ba0:	f343 6800 	sbfx	r8, r3, #24, #1
 8018ba4:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
 8018ba8:	4f58      	ldr	r7, [pc, #352]	; (8018d0c <arm_softmax_s8+0x8cc>)
    SELECT_IF_NON_ZERO(1672461947)
 8018baa:	4025      	ands	r5, r4
 8018bac:	ea88 0405 	eor.w	r4, r8, r5
    mult = mult + (q63_t)m1 * m2;
 8018bb0:	4688      	mov	r8, r1
 8018bb2:	4605      	mov	r5, r0
 8018bb4:	fbc4 8507 	smlal	r8, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 8018bb8:	f3c3 6640 	ubfx	r6, r3, #25, #1
    result = (int32_t) (mult / (1ll << 31));
 8018bbc:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8018bc0:	ea48 0845 	orr.w	r8, r8, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 8018bc4:	3e01      	subs	r6, #1
 8018bc6:	f343 6540 	sbfx	r5, r3, #25, #1
 8018bca:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
 8018bcc:	4f50      	ldr	r7, [pc, #320]	; (8018d10 <arm_softmax_s8+0x8d0>)
    SELECT_IF_NON_ZERO(1302514674)
 8018bce:	ea05 0508 	and.w	r5, r5, r8
 8018bd2:	4075      	eors	r5, r6
    mult = mult + (q63_t)m1 * m2;
 8018bd4:	4688      	mov	r8, r1
 8018bd6:	4604      	mov	r4, r0
 8018bd8:	fbc5 8407 	smlal	r8, r4, r5, r7
    SELECT_IF_NON_ZERO(790015084)
 8018bdc:	f3c3 6680 	ubfx	r6, r3, #26, #1
    result = (int32_t) (mult / (1ll << 31));
 8018be0:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8018be4:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 8018be8:	3e01      	subs	r6, #1
 8018bea:	f343 6480 	sbfx	r4, r3, #26, #1
 8018bee:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
 8018bf0:	4f48      	ldr	r7, [pc, #288]	; (8018d14 <arm_softmax_s8+0x8d4>)
    SELECT_IF_NON_ZERO(790015084)
 8018bf2:	ea04 0408 	and.w	r4, r4, r8
 8018bf6:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
 8018bf8:	4688      	mov	r8, r1
 8018bfa:	4605      	mov	r5, r0
 8018bfc:	fbc4 8507 	smlal	r8, r5, r4, r7
    SELECT_IF_NON_ZERO(290630308)
 8018c00:	f3c3 66c0 	ubfx	r6, r3, #27, #1
    result = (int32_t) (mult / (1ll << 31));
 8018c04:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8018c08:	ea48 0845 	orr.w	r8, r8, r5, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 8018c0c:	3e01      	subs	r6, #1
 8018c0e:	f343 65c0 	sbfx	r5, r3, #27, #1
 8018c12:	4026      	ands	r6, r4
 8018c14:	ea05 0508 	and.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
 8018c18:	4f3f      	ldr	r7, [pc, #252]	; (8018d18 <arm_softmax_s8+0x8d8>)
    SELECT_IF_NON_ZERO(290630308)
 8018c1a:	4075      	eors	r5, r6
    mult = mult + (q63_t)m1 * m2;
 8018c1c:	4688      	mov	r8, r1
 8018c1e:	4604      	mov	r4, r0
 8018c20:	fbc5 8407 	smlal	r8, r4, r5, r7
    SELECT_IF_NON_ZERO(39332535)
 8018c24:	f3c3 7600 	ubfx	r6, r3, #28, #1
    result = (int32_t) (mult / (1ll << 31));
 8018c28:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8018c2c:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 8018c30:	3e01      	subs	r6, #1
 8018c32:	f343 7400 	sbfx	r4, r3, #28, #1
 8018c36:	402e      	ands	r6, r5
 8018c38:	ea04 0408 	and.w	r4, r4, r8
    mult = mult + (q63_t)m1 * m2;
 8018c3c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8018d1c <arm_softmax_s8+0x8dc>
    SELECT_IF_NON_ZERO(39332535)
 8018c40:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
 8018c42:	4681      	mov	r9, r0
 8018c44:	460e      	mov	r6, r1
 8018c46:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
 8018c4a:	f3c3 7540 	ubfx	r5, r3, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 8018c4e:	0ff6      	lsrs	r6, r6, #31
    SELECT_IF_NON_ZERO(720401)
 8018c50:	f343 7840 	sbfx	r8, r3, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 8018c54:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
 8018c58:	3d01      	subs	r5, #1
 8018c5a:	4025      	ands	r5, r4
 8018c5c:	ea08 0806 	and.w	r8, r8, r6
 8018c60:	ea88 0805 	eor.w	r8, r8, r5
    mult = mult + (q63_t)m1 * m2;
 8018c64:	25f2      	movs	r5, #242	; 0xf2
 8018c66:	fbc8 1005 	smlal	r1, r0, r8, r5
    SELECT_IF_NON_ZERO(242)
 8018c6a:	f3c3 7480 	ubfx	r4, r3, #30, #1
    result = (int32_t) (mult / (1ll << 31));
 8018c6e:	0fc9      	lsrs	r1, r1, #31
 8018c70:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 8018c74:	f343 7380 	sbfx	r3, r3, #30, #1
 8018c78:	3c01      	subs	r4, #1
    mask = MASK_IF_ZERO(val);
 8018c7a:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
 8018c7e:	400b      	ands	r3, r1
    mask = MASK_IF_ZERO(val);
 8018c80:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 8018c82:	ea04 0408 	and.w	r4, r4, r8
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8018c86:	1e51      	subs	r1, r2, #1
    SELECT_IF_NON_ZERO(242)
 8018c88:	4063      	eors	r3, r4
    mask = MASK_IF_ZERO(val);
 8018c8a:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8018c8c:	400b      	ands	r3, r1
 8018c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8018c92:	405a      	eors	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
 8018c94:	9b05      	ldr	r3, [sp, #20]
    result = (int32_t) (mult / (1ll << 31));
 8018c96:	9805      	ldr	r0, [sp, #20]
    if ((m1 < 0) ^ (m2 < 0))
 8018c98:	4053      	eors	r3, r2
 8018c9a:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	bf0b      	itete	eq
 8018ca0:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8018ca4:	4673      	movne	r3, lr
 8018ca6:	2100      	moveq	r1, #0
 8018ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8018cac:	fbc0 3102 	smlal	r3, r1, r0, r2
 8018cb0:	2900      	cmp	r1, #0
 8018cb2:	da05      	bge.n	8018cc0 <arm_softmax_s8+0x880>
 8018cb4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8018cb8:	189a      	adds	r2, r3, r2
 8018cba:	4613      	mov	r3, r2
 8018cbc:	f141 0100 	adc.w	r1, r1, #0
    int32_t remainder = remainder_mask & dividend;
 8018cc0:	9a06      	ldr	r2, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 8018cc2:	9807      	ldr	r0, [sp, #28]
    result = (int32_t) (mult / (1ll << 31));
 8018cc4:	0fdb      	lsrs	r3, r3, #31
 8018cc6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    int32_t remainder = remainder_mask & dividend;
 8018cca:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
 8018ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018cce:	fa53 f30a 	asrs.w	r3, r3, sl
 8018cd2:	bf58      	it	pl
 8018cd4:	4601      	movpl	r1, r0
    if (remainder > threshold)
 8018cd6:	428a      	cmp	r2, r1
        result++;
 8018cd8:	bfc8      	it	gt
 8018cda:	3301      	addgt	r3, #1
 8018cdc:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8018cde:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8018ce2:	db09      	blt.n	8018cf8 <arm_softmax_s8+0x8b8>
 8018ce4:	2b7e      	cmp	r3, #126	; 0x7e
 8018ce6:	bfd4      	ite	le
 8018ce8:	b25b      	sxtble	r3, r3
 8018cea:	237f      	movgt	r3, #127	; 0x7f
 8018cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018cee:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
 8018cf2:	f10c 0c01 	add.w	ip, ip, #1
 8018cf6:	e4f1      	b.n	80186dc <arm_softmax_s8+0x29c>
 8018cf8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8018cfc:	e7f6      	b.n	8018cec <arm_softmax_s8+0x8ac>
 8018cfe:	bf00      	nop
 8018d00:	2aaaaaab 	.word	0x2aaaaaab
 8018d04:	70f5a894 	.word	0x70f5a894
 8018d08:	63afbe7b 	.word	0x63afbe7b
 8018d0c:	4da2cbf2 	.word	0x4da2cbf2
 8018d10:	2f16ac6c 	.word	0x2f16ac6c
 8018d14:	1152aaa4 	.word	0x1152aaa4
 8018d18:	02582ab7 	.word	0x02582ab7
 8018d1c:	000afe11 	.word	0x000afe11

08018d20 <_ZdlPvj>:
 8018d20:	f000 b824 	b.w	8018d6c <_ZdlPv>

08018d24 <_ZdaPv>:
 8018d24:	f000 b822 	b.w	8018d6c <_ZdlPv>

08018d28 <__cxa_guard_acquire>:
 8018d28:	6803      	ldr	r3, [r0, #0]
 8018d2a:	07db      	lsls	r3, r3, #31
 8018d2c:	d406      	bmi.n	8018d3c <__cxa_guard_acquire+0x14>
 8018d2e:	7843      	ldrb	r3, [r0, #1]
 8018d30:	b103      	cbz	r3, 8018d34 <__cxa_guard_acquire+0xc>
 8018d32:	deff      	udf	#255	; 0xff
 8018d34:	2301      	movs	r3, #1
 8018d36:	7043      	strb	r3, [r0, #1]
 8018d38:	4618      	mov	r0, r3
 8018d3a:	4770      	bx	lr
 8018d3c:	2000      	movs	r0, #0
 8018d3e:	4770      	bx	lr

08018d40 <__cxa_guard_release>:
 8018d40:	2301      	movs	r3, #1
 8018d42:	6003      	str	r3, [r0, #0]
 8018d44:	4770      	bx	lr

08018d46 <_Znwj>:
 8018d46:	2801      	cmp	r0, #1
 8018d48:	bf38      	it	cc
 8018d4a:	2001      	movcc	r0, #1
 8018d4c:	b510      	push	{r4, lr}
 8018d4e:	4604      	mov	r4, r0
 8018d50:	4620      	mov	r0, r4
 8018d52:	f000 fafd 	bl	8019350 <malloc>
 8018d56:	b100      	cbz	r0, 8018d5a <_Znwj+0x14>
 8018d58:	bd10      	pop	{r4, pc}
 8018d5a:	f000 f809 	bl	8018d70 <_ZSt15get_new_handlerv>
 8018d5e:	b908      	cbnz	r0, 8018d64 <_Znwj+0x1e>
 8018d60:	f000 faca 	bl	80192f8 <abort>
 8018d64:	4780      	blx	r0
 8018d66:	e7f3      	b.n	8018d50 <_Znwj+0xa>

08018d68 <_Znaj>:
 8018d68:	f7ff bfed 	b.w	8018d46 <_Znwj>

08018d6c <_ZdlPv>:
 8018d6c:	f000 baf8 	b.w	8019360 <free>

08018d70 <_ZSt15get_new_handlerv>:
 8018d70:	4b02      	ldr	r3, [pc, #8]	; (8018d7c <_ZSt15get_new_handlerv+0xc>)
 8018d72:	6818      	ldr	r0, [r3, #0]
 8018d74:	f3bf 8f5b 	dmb	ish
 8018d78:	4770      	bx	lr
 8018d7a:	bf00      	nop
 8018d7c:	20017b58 	.word	0x20017b58

08018d80 <frexp>:
 8018d80:	b570      	push	{r4, r5, r6, lr}
 8018d82:	2100      	movs	r1, #0
 8018d84:	ec55 4b10 	vmov	r4, r5, d0
 8018d88:	6001      	str	r1, [r0, #0]
 8018d8a:	4916      	ldr	r1, [pc, #88]	; (8018de4 <frexp+0x64>)
 8018d8c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018d90:	428a      	cmp	r2, r1
 8018d92:	4606      	mov	r6, r0
 8018d94:	462b      	mov	r3, r5
 8018d96:	dc22      	bgt.n	8018dde <frexp+0x5e>
 8018d98:	ee10 1a10 	vmov	r1, s0
 8018d9c:	4311      	orrs	r1, r2
 8018d9e:	d01e      	beq.n	8018dde <frexp+0x5e>
 8018da0:	4911      	ldr	r1, [pc, #68]	; (8018de8 <frexp+0x68>)
 8018da2:	4029      	ands	r1, r5
 8018da4:	b969      	cbnz	r1, 8018dc2 <frexp+0x42>
 8018da6:	4b11      	ldr	r3, [pc, #68]	; (8018dec <frexp+0x6c>)
 8018da8:	2200      	movs	r2, #0
 8018daa:	ee10 0a10 	vmov	r0, s0
 8018dae:	4629      	mov	r1, r5
 8018db0:	f7e7 fc2a 	bl	8000608 <__aeabi_dmul>
 8018db4:	460b      	mov	r3, r1
 8018db6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018dba:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018dbe:	4604      	mov	r4, r0
 8018dc0:	6031      	str	r1, [r6, #0]
 8018dc2:	6831      	ldr	r1, [r6, #0]
 8018dc4:	1512      	asrs	r2, r2, #20
 8018dc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018dca:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018dce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018dd2:	4411      	add	r1, r2
 8018dd4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018dd8:	6031      	str	r1, [r6, #0]
 8018dda:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018dde:	ec45 4b10 	vmov	d0, r4, r5
 8018de2:	bd70      	pop	{r4, r5, r6, pc}
 8018de4:	7fefffff 	.word	0x7fefffff
 8018de8:	7ff00000 	.word	0x7ff00000
 8018dec:	43500000 	.word	0x43500000

08018df0 <expf>:
 8018df0:	b508      	push	{r3, lr}
 8018df2:	ed2d 8b02 	vpush	{d8}
 8018df6:	eef0 8a40 	vmov.f32	s17, s0
 8018dfa:	f000 f9af 	bl	801915c <__ieee754_expf>
 8018dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8018e02:	eeb0 0a68 	vmov.f32	s0, s17
 8018e06:	f000 f847 	bl	8018e98 <finitef>
 8018e0a:	b160      	cbz	r0, 8018e26 <expf+0x36>
 8018e0c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8018e4c <expf+0x5c>
 8018e10:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e18:	dd0a      	ble.n	8018e30 <expf+0x40>
 8018e1a:	f000 fdc5 	bl	80199a8 <__errno>
 8018e1e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8018e50 <expf+0x60>
 8018e22:	2322      	movs	r3, #34	; 0x22
 8018e24:	6003      	str	r3, [r0, #0]
 8018e26:	eeb0 0a48 	vmov.f32	s0, s16
 8018e2a:	ecbd 8b02 	vpop	{d8}
 8018e2e:	bd08      	pop	{r3, pc}
 8018e30:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018e54 <expf+0x64>
 8018e34:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e3c:	d5f3      	bpl.n	8018e26 <expf+0x36>
 8018e3e:	f000 fdb3 	bl	80199a8 <__errno>
 8018e42:	2322      	movs	r3, #34	; 0x22
 8018e44:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8018e58 <expf+0x68>
 8018e48:	6003      	str	r3, [r0, #0]
 8018e4a:	e7ec      	b.n	8018e26 <expf+0x36>
 8018e4c:	42b17217 	.word	0x42b17217
 8018e50:	7f800000 	.word	0x7f800000
 8018e54:	c2cff1b5 	.word	0xc2cff1b5
 8018e58:	00000000 	.word	0x00000000

08018e5c <sqrtf>:
 8018e5c:	b508      	push	{r3, lr}
 8018e5e:	ed2d 8b02 	vpush	{d8}
 8018e62:	eeb0 8a40 	vmov.f32	s16, s0
 8018e66:	f000 f847 	bl	8018ef8 <__ieee754_sqrtf>
 8018e6a:	eeb4 8a48 	vcmp.f32	s16, s16
 8018e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e72:	d60c      	bvs.n	8018e8e <sqrtf+0x32>
 8018e74:	eddf 8a07 	vldr	s17, [pc, #28]	; 8018e94 <sqrtf+0x38>
 8018e78:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e80:	d505      	bpl.n	8018e8e <sqrtf+0x32>
 8018e82:	f000 fd91 	bl	80199a8 <__errno>
 8018e86:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018e8a:	2321      	movs	r3, #33	; 0x21
 8018e8c:	6003      	str	r3, [r0, #0]
 8018e8e:	ecbd 8b02 	vpop	{d8}
 8018e92:	bd08      	pop	{r3, pc}
 8018e94:	00000000 	.word	0x00000000

08018e98 <finitef>:
 8018e98:	b082      	sub	sp, #8
 8018e9a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018e9e:	9801      	ldr	r0, [sp, #4]
 8018ea0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018ea4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8018ea8:	bfac      	ite	ge
 8018eaa:	2000      	movge	r0, #0
 8018eac:	2001      	movlt	r0, #1
 8018eae:	b002      	add	sp, #8
 8018eb0:	4770      	bx	lr

08018eb2 <with_errnof>:
 8018eb2:	b513      	push	{r0, r1, r4, lr}
 8018eb4:	4604      	mov	r4, r0
 8018eb6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018eba:	f000 fd75 	bl	80199a8 <__errno>
 8018ebe:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018ec2:	6004      	str	r4, [r0, #0]
 8018ec4:	b002      	add	sp, #8
 8018ec6:	bd10      	pop	{r4, pc}

08018ec8 <xflowf>:
 8018ec8:	b130      	cbz	r0, 8018ed8 <xflowf+0x10>
 8018eca:	eef1 7a40 	vneg.f32	s15, s0
 8018ece:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018ed2:	2022      	movs	r0, #34	; 0x22
 8018ed4:	f7ff bfed 	b.w	8018eb2 <with_errnof>
 8018ed8:	eef0 7a40 	vmov.f32	s15, s0
 8018edc:	e7f7      	b.n	8018ece <xflowf+0x6>
	...

08018ee0 <__math_uflowf>:
 8018ee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018ee8 <__math_uflowf+0x8>
 8018ee4:	f7ff bff0 	b.w	8018ec8 <xflowf>
 8018ee8:	10000000 	.word	0x10000000

08018eec <__math_oflowf>:
 8018eec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018ef4 <__math_oflowf+0x8>
 8018ef0:	f7ff bfea 	b.w	8018ec8 <xflowf>
 8018ef4:	70000000 	.word	0x70000000

08018ef8 <__ieee754_sqrtf>:
 8018ef8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018efc:	4770      	bx	lr
	...

08018f00 <floor>:
 8018f00:	ec51 0b10 	vmov	r0, r1, d0
 8018f04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8018f10:	2e13      	cmp	r6, #19
 8018f12:	ee10 5a10 	vmov	r5, s0
 8018f16:	ee10 8a10 	vmov	r8, s0
 8018f1a:	460c      	mov	r4, r1
 8018f1c:	dc31      	bgt.n	8018f82 <floor+0x82>
 8018f1e:	2e00      	cmp	r6, #0
 8018f20:	da14      	bge.n	8018f4c <floor+0x4c>
 8018f22:	a333      	add	r3, pc, #204	; (adr r3, 8018ff0 <floor+0xf0>)
 8018f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f28:	f7e7 f9b8 	bl	800029c <__adddf3>
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	2300      	movs	r3, #0
 8018f30:	f7e7 fdfa 	bl	8000b28 <__aeabi_dcmpgt>
 8018f34:	b138      	cbz	r0, 8018f46 <floor+0x46>
 8018f36:	2c00      	cmp	r4, #0
 8018f38:	da53      	bge.n	8018fe2 <floor+0xe2>
 8018f3a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8018f3e:	4325      	orrs	r5, r4
 8018f40:	d052      	beq.n	8018fe8 <floor+0xe8>
 8018f42:	4c2d      	ldr	r4, [pc, #180]	; (8018ff8 <floor+0xf8>)
 8018f44:	2500      	movs	r5, #0
 8018f46:	4621      	mov	r1, r4
 8018f48:	4628      	mov	r0, r5
 8018f4a:	e024      	b.n	8018f96 <floor+0x96>
 8018f4c:	4f2b      	ldr	r7, [pc, #172]	; (8018ffc <floor+0xfc>)
 8018f4e:	4137      	asrs	r7, r6
 8018f50:	ea01 0307 	and.w	r3, r1, r7
 8018f54:	4303      	orrs	r3, r0
 8018f56:	d01e      	beq.n	8018f96 <floor+0x96>
 8018f58:	a325      	add	r3, pc, #148	; (adr r3, 8018ff0 <floor+0xf0>)
 8018f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f5e:	f7e7 f99d 	bl	800029c <__adddf3>
 8018f62:	2200      	movs	r2, #0
 8018f64:	2300      	movs	r3, #0
 8018f66:	f7e7 fddf 	bl	8000b28 <__aeabi_dcmpgt>
 8018f6a:	2800      	cmp	r0, #0
 8018f6c:	d0eb      	beq.n	8018f46 <floor+0x46>
 8018f6e:	2c00      	cmp	r4, #0
 8018f70:	bfbe      	ittt	lt
 8018f72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018f76:	4133      	asrlt	r3, r6
 8018f78:	18e4      	addlt	r4, r4, r3
 8018f7a:	ea24 0407 	bic.w	r4, r4, r7
 8018f7e:	2500      	movs	r5, #0
 8018f80:	e7e1      	b.n	8018f46 <floor+0x46>
 8018f82:	2e33      	cmp	r6, #51	; 0x33
 8018f84:	dd0b      	ble.n	8018f9e <floor+0x9e>
 8018f86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018f8a:	d104      	bne.n	8018f96 <floor+0x96>
 8018f8c:	ee10 2a10 	vmov	r2, s0
 8018f90:	460b      	mov	r3, r1
 8018f92:	f7e7 f983 	bl	800029c <__adddf3>
 8018f96:	ec41 0b10 	vmov	d0, r0, r1
 8018f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f9e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8018fa2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018fa6:	40df      	lsrs	r7, r3
 8018fa8:	4238      	tst	r0, r7
 8018faa:	d0f4      	beq.n	8018f96 <floor+0x96>
 8018fac:	a310      	add	r3, pc, #64	; (adr r3, 8018ff0 <floor+0xf0>)
 8018fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fb2:	f7e7 f973 	bl	800029c <__adddf3>
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	2300      	movs	r3, #0
 8018fba:	f7e7 fdb5 	bl	8000b28 <__aeabi_dcmpgt>
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	d0c1      	beq.n	8018f46 <floor+0x46>
 8018fc2:	2c00      	cmp	r4, #0
 8018fc4:	da0a      	bge.n	8018fdc <floor+0xdc>
 8018fc6:	2e14      	cmp	r6, #20
 8018fc8:	d101      	bne.n	8018fce <floor+0xce>
 8018fca:	3401      	adds	r4, #1
 8018fcc:	e006      	b.n	8018fdc <floor+0xdc>
 8018fce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	40b3      	lsls	r3, r6
 8018fd6:	441d      	add	r5, r3
 8018fd8:	45a8      	cmp	r8, r5
 8018fda:	d8f6      	bhi.n	8018fca <floor+0xca>
 8018fdc:	ea25 0507 	bic.w	r5, r5, r7
 8018fe0:	e7b1      	b.n	8018f46 <floor+0x46>
 8018fe2:	2500      	movs	r5, #0
 8018fe4:	462c      	mov	r4, r5
 8018fe6:	e7ae      	b.n	8018f46 <floor+0x46>
 8018fe8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018fec:	e7ab      	b.n	8018f46 <floor+0x46>
 8018fee:	bf00      	nop
 8018ff0:	8800759c 	.word	0x8800759c
 8018ff4:	7e37e43c 	.word	0x7e37e43c
 8018ff8:	bff00000 	.word	0xbff00000
 8018ffc:	000fffff 	.word	0x000fffff

08019000 <round>:
 8019000:	ec53 2b10 	vmov	r2, r3, d0
 8019004:	b570      	push	{r4, r5, r6, lr}
 8019006:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801900a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801900e:	2813      	cmp	r0, #19
 8019010:	ee10 5a10 	vmov	r5, s0
 8019014:	4619      	mov	r1, r3
 8019016:	dc18      	bgt.n	801904a <round+0x4a>
 8019018:	2800      	cmp	r0, #0
 801901a:	da09      	bge.n	8019030 <round+0x30>
 801901c:	3001      	adds	r0, #1
 801901e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8019022:	d103      	bne.n	801902c <round+0x2c>
 8019024:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8019028:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801902c:	2300      	movs	r3, #0
 801902e:	e02a      	b.n	8019086 <round+0x86>
 8019030:	4c16      	ldr	r4, [pc, #88]	; (801908c <round+0x8c>)
 8019032:	4104      	asrs	r4, r0
 8019034:	ea03 0604 	and.w	r6, r3, r4
 8019038:	4316      	orrs	r6, r2
 801903a:	d011      	beq.n	8019060 <round+0x60>
 801903c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019040:	4103      	asrs	r3, r0
 8019042:	440b      	add	r3, r1
 8019044:	ea23 0104 	bic.w	r1, r3, r4
 8019048:	e7f0      	b.n	801902c <round+0x2c>
 801904a:	2833      	cmp	r0, #51	; 0x33
 801904c:	dd0b      	ble.n	8019066 <round+0x66>
 801904e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019052:	d105      	bne.n	8019060 <round+0x60>
 8019054:	ee10 0a10 	vmov	r0, s0
 8019058:	f7e7 f920 	bl	800029c <__adddf3>
 801905c:	4602      	mov	r2, r0
 801905e:	460b      	mov	r3, r1
 8019060:	ec43 2b10 	vmov	d0, r2, r3
 8019064:	bd70      	pop	{r4, r5, r6, pc}
 8019066:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801906a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801906e:	40f4      	lsrs	r4, r6
 8019070:	4214      	tst	r4, r2
 8019072:	d0f5      	beq.n	8019060 <round+0x60>
 8019074:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8019078:	2301      	movs	r3, #1
 801907a:	4083      	lsls	r3, r0
 801907c:	195b      	adds	r3, r3, r5
 801907e:	bf28      	it	cs
 8019080:	3101      	addcs	r1, #1
 8019082:	ea23 0304 	bic.w	r3, r3, r4
 8019086:	461a      	mov	r2, r3
 8019088:	460b      	mov	r3, r1
 801908a:	e7e9      	b.n	8019060 <round+0x60>
 801908c:	000fffff 	.word	0x000fffff

08019090 <ceilf>:
 8019090:	ee10 3a10 	vmov	r3, s0
 8019094:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019098:	3a7f      	subs	r2, #127	; 0x7f
 801909a:	2a16      	cmp	r2, #22
 801909c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80190a0:	dc2a      	bgt.n	80190f8 <ceilf+0x68>
 80190a2:	2a00      	cmp	r2, #0
 80190a4:	da11      	bge.n	80190ca <ceilf+0x3a>
 80190a6:	eddf 7a19 	vldr	s15, [pc, #100]	; 801910c <ceilf+0x7c>
 80190aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80190ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80190b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190b6:	dd05      	ble.n	80190c4 <ceilf+0x34>
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	db23      	blt.n	8019104 <ceilf+0x74>
 80190bc:	2900      	cmp	r1, #0
 80190be:	bf18      	it	ne
 80190c0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80190c4:	ee00 3a10 	vmov	s0, r3
 80190c8:	4770      	bx	lr
 80190ca:	4911      	ldr	r1, [pc, #68]	; (8019110 <ceilf+0x80>)
 80190cc:	4111      	asrs	r1, r2
 80190ce:	420b      	tst	r3, r1
 80190d0:	d0fa      	beq.n	80190c8 <ceilf+0x38>
 80190d2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801910c <ceilf+0x7c>
 80190d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80190da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80190de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190e2:	ddef      	ble.n	80190c4 <ceilf+0x34>
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	bfc2      	ittt	gt
 80190e8:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80190ec:	fa40 f202 	asrgt.w	r2, r0, r2
 80190f0:	189b      	addgt	r3, r3, r2
 80190f2:	ea23 0301 	bic.w	r3, r3, r1
 80190f6:	e7e5      	b.n	80190c4 <ceilf+0x34>
 80190f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80190fc:	d3e4      	bcc.n	80190c8 <ceilf+0x38>
 80190fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019102:	4770      	bx	lr
 8019104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019108:	e7dc      	b.n	80190c4 <ceilf+0x34>
 801910a:	bf00      	nop
 801910c:	7149f2ca 	.word	0x7149f2ca
 8019110:	007fffff 	.word	0x007fffff

08019114 <roundf>:
 8019114:	ee10 0a10 	vmov	r0, s0
 8019118:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801911c:	3a7f      	subs	r2, #127	; 0x7f
 801911e:	2a16      	cmp	r2, #22
 8019120:	dc15      	bgt.n	801914e <roundf+0x3a>
 8019122:	2a00      	cmp	r2, #0
 8019124:	da08      	bge.n	8019138 <roundf+0x24>
 8019126:	3201      	adds	r2, #1
 8019128:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801912c:	d101      	bne.n	8019132 <roundf+0x1e>
 801912e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8019132:	ee00 3a10 	vmov	s0, r3
 8019136:	4770      	bx	lr
 8019138:	4907      	ldr	r1, [pc, #28]	; (8019158 <roundf+0x44>)
 801913a:	4111      	asrs	r1, r2
 801913c:	4208      	tst	r0, r1
 801913e:	d0fa      	beq.n	8019136 <roundf+0x22>
 8019140:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019144:	4113      	asrs	r3, r2
 8019146:	4403      	add	r3, r0
 8019148:	ea23 0301 	bic.w	r3, r3, r1
 801914c:	e7f1      	b.n	8019132 <roundf+0x1e>
 801914e:	2a80      	cmp	r2, #128	; 0x80
 8019150:	d1f1      	bne.n	8019136 <roundf+0x22>
 8019152:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019156:	4770      	bx	lr
 8019158:	007fffff 	.word	0x007fffff

0801915c <__ieee754_expf>:
 801915c:	ee10 2a10 	vmov	r2, s0
 8019160:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8019164:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019168:	d902      	bls.n	8019170 <__ieee754_expf+0x14>
 801916a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801916e:	4770      	bx	lr
 8019170:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8019174:	d106      	bne.n	8019184 <__ieee754_expf+0x28>
 8019176:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80192b0 <__ieee754_expf+0x154>
 801917a:	2900      	cmp	r1, #0
 801917c:	bf18      	it	ne
 801917e:	eeb0 0a67 	vmovne.f32	s0, s15
 8019182:	4770      	bx	lr
 8019184:	484b      	ldr	r0, [pc, #300]	; (80192b4 <__ieee754_expf+0x158>)
 8019186:	4282      	cmp	r2, r0
 8019188:	dd02      	ble.n	8019190 <__ieee754_expf+0x34>
 801918a:	2000      	movs	r0, #0
 801918c:	f7ff beae 	b.w	8018eec <__math_oflowf>
 8019190:	2a00      	cmp	r2, #0
 8019192:	da05      	bge.n	80191a0 <__ieee754_expf+0x44>
 8019194:	4a48      	ldr	r2, [pc, #288]	; (80192b8 <__ieee754_expf+0x15c>)
 8019196:	4293      	cmp	r3, r2
 8019198:	d902      	bls.n	80191a0 <__ieee754_expf+0x44>
 801919a:	2000      	movs	r0, #0
 801919c:	f7ff bea0 	b.w	8018ee0 <__math_uflowf>
 80191a0:	4a46      	ldr	r2, [pc, #280]	; (80192bc <__ieee754_expf+0x160>)
 80191a2:	4293      	cmp	r3, r2
 80191a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80191a8:	d952      	bls.n	8019250 <__ieee754_expf+0xf4>
 80191aa:	4a45      	ldr	r2, [pc, #276]	; (80192c0 <__ieee754_expf+0x164>)
 80191ac:	4293      	cmp	r3, r2
 80191ae:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80191b2:	d834      	bhi.n	801921e <__ieee754_expf+0xc2>
 80191b4:	4b43      	ldr	r3, [pc, #268]	; (80192c4 <__ieee754_expf+0x168>)
 80191b6:	4413      	add	r3, r2
 80191b8:	ed93 7a00 	vldr	s14, [r3]
 80191bc:	4b42      	ldr	r3, [pc, #264]	; (80192c8 <__ieee754_expf+0x16c>)
 80191be:	4413      	add	r3, r2
 80191c0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80191c4:	f1c1 0201 	rsb	r2, r1, #1
 80191c8:	edd3 7a00 	vldr	s15, [r3]
 80191cc:	1a52      	subs	r2, r2, r1
 80191ce:	ee37 0a67 	vsub.f32	s0, s14, s15
 80191d2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80191d6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80192cc <__ieee754_expf+0x170>
 80191da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80192d0 <__ieee754_expf+0x174>
 80191de:	eee6 6a05 	vfma.f32	s13, s12, s10
 80191e2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80192d4 <__ieee754_expf+0x178>
 80191e6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80191ea:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80192d8 <__ieee754_expf+0x17c>
 80191ee:	eee5 6a06 	vfma.f32	s13, s10, s12
 80191f2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80192dc <__ieee754_expf+0x180>
 80191f6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80191fa:	eef0 6a40 	vmov.f32	s13, s0
 80191fe:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019202:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019206:	ee20 5a26 	vmul.f32	s10, s0, s13
 801920a:	bb92      	cbnz	r2, 8019272 <__ieee754_expf+0x116>
 801920c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019210:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019214:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019218:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801921c:	4770      	bx	lr
 801921e:	4b30      	ldr	r3, [pc, #192]	; (80192e0 <__ieee754_expf+0x184>)
 8019220:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80192e4 <__ieee754_expf+0x188>
 8019224:	eddf 6a30 	vldr	s13, [pc, #192]	; 80192e8 <__ieee754_expf+0x18c>
 8019228:	4413      	add	r3, r2
 801922a:	edd3 7a00 	vldr	s15, [r3]
 801922e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019232:	eeb0 7a40 	vmov.f32	s14, s0
 8019236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801923a:	ee17 2a90 	vmov	r2, s15
 801923e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019242:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019246:	eddf 6a29 	vldr	s13, [pc, #164]	; 80192ec <__ieee754_expf+0x190>
 801924a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801924e:	e7be      	b.n	80191ce <__ieee754_expf+0x72>
 8019250:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8019254:	d20b      	bcs.n	801926e <__ieee754_expf+0x112>
 8019256:	eddf 6a26 	vldr	s13, [pc, #152]	; 80192f0 <__ieee754_expf+0x194>
 801925a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801925e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019266:	dd02      	ble.n	801926e <__ieee754_expf+0x112>
 8019268:	ee30 0a25 	vadd.f32	s0, s0, s11
 801926c:	4770      	bx	lr
 801926e:	2200      	movs	r2, #0
 8019270:	e7af      	b.n	80191d2 <__ieee754_expf+0x76>
 8019272:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019276:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801927a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801927e:	bfb8      	it	lt
 8019280:	3264      	addlt	r2, #100	; 0x64
 8019282:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019286:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801928a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801928e:	ee17 3a90 	vmov	r3, s15
 8019292:	bfab      	itete	ge
 8019294:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019298:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801929c:	ee00 3a10 	vmovge	s0, r3
 80192a0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80192f4 <__ieee754_expf+0x198>
 80192a4:	bfbc      	itt	lt
 80192a6:	ee00 3a10 	vmovlt	s0, r3
 80192aa:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80192ae:	4770      	bx	lr
 80192b0:	00000000 	.word	0x00000000
 80192b4:	42b17217 	.word	0x42b17217
 80192b8:	42cff1b5 	.word	0x42cff1b5
 80192bc:	3eb17218 	.word	0x3eb17218
 80192c0:	3f851591 	.word	0x3f851591
 80192c4:	0804da8c 	.word	0x0804da8c
 80192c8:	0804da94 	.word	0x0804da94
 80192cc:	3331bb4c 	.word	0x3331bb4c
 80192d0:	b5ddea0e 	.word	0xb5ddea0e
 80192d4:	388ab355 	.word	0x388ab355
 80192d8:	bb360b61 	.word	0xbb360b61
 80192dc:	3e2aaaab 	.word	0x3e2aaaab
 80192e0:	0804da84 	.word	0x0804da84
 80192e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80192e8:	3f317180 	.word	0x3f317180
 80192ec:	3717f7d1 	.word	0x3717f7d1
 80192f0:	7149f2ca 	.word	0x7149f2ca
 80192f4:	0d800000 	.word	0x0d800000

080192f8 <abort>:
 80192f8:	b508      	push	{r3, lr}
 80192fa:	2006      	movs	r0, #6
 80192fc:	f000 fae2 	bl	80198c4 <raise>
 8019300:	2001      	movs	r0, #1
 8019302:	f7e8 fa61 	bl	80017c8 <_exit>
	...

08019308 <__assert_func>:
 8019308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801930a:	4614      	mov	r4, r2
 801930c:	461a      	mov	r2, r3
 801930e:	4b09      	ldr	r3, [pc, #36]	; (8019334 <__assert_func+0x2c>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	4605      	mov	r5, r0
 8019314:	68d8      	ldr	r0, [r3, #12]
 8019316:	b14c      	cbz	r4, 801932c <__assert_func+0x24>
 8019318:	4b07      	ldr	r3, [pc, #28]	; (8019338 <__assert_func+0x30>)
 801931a:	9100      	str	r1, [sp, #0]
 801931c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019320:	4906      	ldr	r1, [pc, #24]	; (801933c <__assert_func+0x34>)
 8019322:	462b      	mov	r3, r5
 8019324:	f000 f974 	bl	8019610 <fiprintf>
 8019328:	f7ff ffe6 	bl	80192f8 <abort>
 801932c:	4b04      	ldr	r3, [pc, #16]	; (8019340 <__assert_func+0x38>)
 801932e:	461c      	mov	r4, r3
 8019330:	e7f3      	b.n	801931a <__assert_func+0x12>
 8019332:	bf00      	nop
 8019334:	200001e8 	.word	0x200001e8
 8019338:	0804da9c 	.word	0x0804da9c
 801933c:	0804daa9 	.word	0x0804daa9
 8019340:	0804dad7 	.word	0x0804dad7

08019344 <atexit>:
 8019344:	2300      	movs	r3, #0
 8019346:	4601      	mov	r1, r0
 8019348:	461a      	mov	r2, r3
 801934a:	4618      	mov	r0, r3
 801934c:	f000 bb68 	b.w	8019a20 <__register_exitproc>

08019350 <malloc>:
 8019350:	4b02      	ldr	r3, [pc, #8]	; (801935c <malloc+0xc>)
 8019352:	4601      	mov	r1, r0
 8019354:	6818      	ldr	r0, [r3, #0]
 8019356:	f000 b82b 	b.w	80193b0 <_malloc_r>
 801935a:	bf00      	nop
 801935c:	200001e8 	.word	0x200001e8

08019360 <free>:
 8019360:	4b02      	ldr	r3, [pc, #8]	; (801936c <free+0xc>)
 8019362:	4601      	mov	r1, r0
 8019364:	6818      	ldr	r0, [r3, #0]
 8019366:	f000 bbb9 	b.w	8019adc <_free_r>
 801936a:	bf00      	nop
 801936c:	200001e8 	.word	0x200001e8

08019370 <sbrk_aligned>:
 8019370:	b570      	push	{r4, r5, r6, lr}
 8019372:	4e0e      	ldr	r6, [pc, #56]	; (80193ac <sbrk_aligned+0x3c>)
 8019374:	460c      	mov	r4, r1
 8019376:	6831      	ldr	r1, [r6, #0]
 8019378:	4605      	mov	r5, r0
 801937a:	b911      	cbnz	r1, 8019382 <sbrk_aligned+0x12>
 801937c:	f000 faf2 	bl	8019964 <_sbrk_r>
 8019380:	6030      	str	r0, [r6, #0]
 8019382:	4621      	mov	r1, r4
 8019384:	4628      	mov	r0, r5
 8019386:	f000 faed 	bl	8019964 <_sbrk_r>
 801938a:	1c43      	adds	r3, r0, #1
 801938c:	d00a      	beq.n	80193a4 <sbrk_aligned+0x34>
 801938e:	1cc4      	adds	r4, r0, #3
 8019390:	f024 0403 	bic.w	r4, r4, #3
 8019394:	42a0      	cmp	r0, r4
 8019396:	d007      	beq.n	80193a8 <sbrk_aligned+0x38>
 8019398:	1a21      	subs	r1, r4, r0
 801939a:	4628      	mov	r0, r5
 801939c:	f000 fae2 	bl	8019964 <_sbrk_r>
 80193a0:	3001      	adds	r0, #1
 80193a2:	d101      	bne.n	80193a8 <sbrk_aligned+0x38>
 80193a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80193a8:	4620      	mov	r0, r4
 80193aa:	bd70      	pop	{r4, r5, r6, pc}
 80193ac:	20017b60 	.word	0x20017b60

080193b0 <_malloc_r>:
 80193b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193b4:	1ccd      	adds	r5, r1, #3
 80193b6:	f025 0503 	bic.w	r5, r5, #3
 80193ba:	3508      	adds	r5, #8
 80193bc:	2d0c      	cmp	r5, #12
 80193be:	bf38      	it	cc
 80193c0:	250c      	movcc	r5, #12
 80193c2:	2d00      	cmp	r5, #0
 80193c4:	4607      	mov	r7, r0
 80193c6:	db01      	blt.n	80193cc <_malloc_r+0x1c>
 80193c8:	42a9      	cmp	r1, r5
 80193ca:	d905      	bls.n	80193d8 <_malloc_r+0x28>
 80193cc:	230c      	movs	r3, #12
 80193ce:	603b      	str	r3, [r7, #0]
 80193d0:	2600      	movs	r6, #0
 80193d2:	4630      	mov	r0, r6
 80193d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80194ac <_malloc_r+0xfc>
 80193dc:	f000 f868 	bl	80194b0 <__malloc_lock>
 80193e0:	f8d8 3000 	ldr.w	r3, [r8]
 80193e4:	461c      	mov	r4, r3
 80193e6:	bb5c      	cbnz	r4, 8019440 <_malloc_r+0x90>
 80193e8:	4629      	mov	r1, r5
 80193ea:	4638      	mov	r0, r7
 80193ec:	f7ff ffc0 	bl	8019370 <sbrk_aligned>
 80193f0:	1c43      	adds	r3, r0, #1
 80193f2:	4604      	mov	r4, r0
 80193f4:	d155      	bne.n	80194a2 <_malloc_r+0xf2>
 80193f6:	f8d8 4000 	ldr.w	r4, [r8]
 80193fa:	4626      	mov	r6, r4
 80193fc:	2e00      	cmp	r6, #0
 80193fe:	d145      	bne.n	801948c <_malloc_r+0xdc>
 8019400:	2c00      	cmp	r4, #0
 8019402:	d048      	beq.n	8019496 <_malloc_r+0xe6>
 8019404:	6823      	ldr	r3, [r4, #0]
 8019406:	4631      	mov	r1, r6
 8019408:	4638      	mov	r0, r7
 801940a:	eb04 0903 	add.w	r9, r4, r3
 801940e:	f000 faa9 	bl	8019964 <_sbrk_r>
 8019412:	4581      	cmp	r9, r0
 8019414:	d13f      	bne.n	8019496 <_malloc_r+0xe6>
 8019416:	6821      	ldr	r1, [r4, #0]
 8019418:	1a6d      	subs	r5, r5, r1
 801941a:	4629      	mov	r1, r5
 801941c:	4638      	mov	r0, r7
 801941e:	f7ff ffa7 	bl	8019370 <sbrk_aligned>
 8019422:	3001      	adds	r0, #1
 8019424:	d037      	beq.n	8019496 <_malloc_r+0xe6>
 8019426:	6823      	ldr	r3, [r4, #0]
 8019428:	442b      	add	r3, r5
 801942a:	6023      	str	r3, [r4, #0]
 801942c:	f8d8 3000 	ldr.w	r3, [r8]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d038      	beq.n	80194a6 <_malloc_r+0xf6>
 8019434:	685a      	ldr	r2, [r3, #4]
 8019436:	42a2      	cmp	r2, r4
 8019438:	d12b      	bne.n	8019492 <_malloc_r+0xe2>
 801943a:	2200      	movs	r2, #0
 801943c:	605a      	str	r2, [r3, #4]
 801943e:	e00f      	b.n	8019460 <_malloc_r+0xb0>
 8019440:	6822      	ldr	r2, [r4, #0]
 8019442:	1b52      	subs	r2, r2, r5
 8019444:	d41f      	bmi.n	8019486 <_malloc_r+0xd6>
 8019446:	2a0b      	cmp	r2, #11
 8019448:	d917      	bls.n	801947a <_malloc_r+0xca>
 801944a:	1961      	adds	r1, r4, r5
 801944c:	42a3      	cmp	r3, r4
 801944e:	6025      	str	r5, [r4, #0]
 8019450:	bf18      	it	ne
 8019452:	6059      	strne	r1, [r3, #4]
 8019454:	6863      	ldr	r3, [r4, #4]
 8019456:	bf08      	it	eq
 8019458:	f8c8 1000 	streq.w	r1, [r8]
 801945c:	5162      	str	r2, [r4, r5]
 801945e:	604b      	str	r3, [r1, #4]
 8019460:	4638      	mov	r0, r7
 8019462:	f104 060b 	add.w	r6, r4, #11
 8019466:	f000 f829 	bl	80194bc <__malloc_unlock>
 801946a:	f026 0607 	bic.w	r6, r6, #7
 801946e:	1d23      	adds	r3, r4, #4
 8019470:	1af2      	subs	r2, r6, r3
 8019472:	d0ae      	beq.n	80193d2 <_malloc_r+0x22>
 8019474:	1b9b      	subs	r3, r3, r6
 8019476:	50a3      	str	r3, [r4, r2]
 8019478:	e7ab      	b.n	80193d2 <_malloc_r+0x22>
 801947a:	42a3      	cmp	r3, r4
 801947c:	6862      	ldr	r2, [r4, #4]
 801947e:	d1dd      	bne.n	801943c <_malloc_r+0x8c>
 8019480:	f8c8 2000 	str.w	r2, [r8]
 8019484:	e7ec      	b.n	8019460 <_malloc_r+0xb0>
 8019486:	4623      	mov	r3, r4
 8019488:	6864      	ldr	r4, [r4, #4]
 801948a:	e7ac      	b.n	80193e6 <_malloc_r+0x36>
 801948c:	4634      	mov	r4, r6
 801948e:	6876      	ldr	r6, [r6, #4]
 8019490:	e7b4      	b.n	80193fc <_malloc_r+0x4c>
 8019492:	4613      	mov	r3, r2
 8019494:	e7cc      	b.n	8019430 <_malloc_r+0x80>
 8019496:	230c      	movs	r3, #12
 8019498:	603b      	str	r3, [r7, #0]
 801949a:	4638      	mov	r0, r7
 801949c:	f000 f80e 	bl	80194bc <__malloc_unlock>
 80194a0:	e797      	b.n	80193d2 <_malloc_r+0x22>
 80194a2:	6025      	str	r5, [r4, #0]
 80194a4:	e7dc      	b.n	8019460 <_malloc_r+0xb0>
 80194a6:	605b      	str	r3, [r3, #4]
 80194a8:	deff      	udf	#255	; 0xff
 80194aa:	bf00      	nop
 80194ac:	20017b5c 	.word	0x20017b5c

080194b0 <__malloc_lock>:
 80194b0:	4801      	ldr	r0, [pc, #4]	; (80194b8 <__malloc_lock+0x8>)
 80194b2:	f000 baa4 	b.w	80199fe <__retarget_lock_acquire_recursive>
 80194b6:	bf00      	nop
 80194b8:	20017ca5 	.word	0x20017ca5

080194bc <__malloc_unlock>:
 80194bc:	4801      	ldr	r0, [pc, #4]	; (80194c4 <__malloc_unlock+0x8>)
 80194be:	f000 ba9f 	b.w	8019a00 <__retarget_lock_release_recursive>
 80194c2:	bf00      	nop
 80194c4:	20017ca5 	.word	0x20017ca5

080194c8 <std>:
 80194c8:	2300      	movs	r3, #0
 80194ca:	b510      	push	{r4, lr}
 80194cc:	4604      	mov	r4, r0
 80194ce:	e9c0 3300 	strd	r3, r3, [r0]
 80194d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80194d6:	6083      	str	r3, [r0, #8]
 80194d8:	8181      	strh	r1, [r0, #12]
 80194da:	6643      	str	r3, [r0, #100]	; 0x64
 80194dc:	81c2      	strh	r2, [r0, #14]
 80194de:	6183      	str	r3, [r0, #24]
 80194e0:	4619      	mov	r1, r3
 80194e2:	2208      	movs	r2, #8
 80194e4:	305c      	adds	r0, #92	; 0x5c
 80194e6:	f000 f9ab 	bl	8019840 <memset>
 80194ea:	4b0d      	ldr	r3, [pc, #52]	; (8019520 <std+0x58>)
 80194ec:	6263      	str	r3, [r4, #36]	; 0x24
 80194ee:	4b0d      	ldr	r3, [pc, #52]	; (8019524 <std+0x5c>)
 80194f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80194f2:	4b0d      	ldr	r3, [pc, #52]	; (8019528 <std+0x60>)
 80194f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80194f6:	4b0d      	ldr	r3, [pc, #52]	; (801952c <std+0x64>)
 80194f8:	6323      	str	r3, [r4, #48]	; 0x30
 80194fa:	4b0d      	ldr	r3, [pc, #52]	; (8019530 <std+0x68>)
 80194fc:	6224      	str	r4, [r4, #32]
 80194fe:	429c      	cmp	r4, r3
 8019500:	d006      	beq.n	8019510 <std+0x48>
 8019502:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019506:	4294      	cmp	r4, r2
 8019508:	d002      	beq.n	8019510 <std+0x48>
 801950a:	33d0      	adds	r3, #208	; 0xd0
 801950c:	429c      	cmp	r4, r3
 801950e:	d105      	bne.n	801951c <std+0x54>
 8019510:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019518:	f000 ba70 	b.w	80199fc <__retarget_lock_init_recursive>
 801951c:	bd10      	pop	{r4, pc}
 801951e:	bf00      	nop
 8019520:	08019671 	.word	0x08019671
 8019524:	08019693 	.word	0x08019693
 8019528:	080196cb 	.word	0x080196cb
 801952c:	080196ef 	.word	0x080196ef
 8019530:	20017b64 	.word	0x20017b64

08019534 <stdio_exit_handler>:
 8019534:	4a02      	ldr	r2, [pc, #8]	; (8019540 <stdio_exit_handler+0xc>)
 8019536:	4903      	ldr	r1, [pc, #12]	; (8019544 <stdio_exit_handler+0x10>)
 8019538:	4803      	ldr	r0, [pc, #12]	; (8019548 <stdio_exit_handler+0x14>)
 801953a:	f000 b87b 	b.w	8019634 <_fwalk_sglue>
 801953e:	bf00      	nop
 8019540:	20000190 	.word	0x20000190
 8019544:	0801a229 	.word	0x0801a229
 8019548:	2000019c 	.word	0x2000019c

0801954c <cleanup_stdio>:
 801954c:	6841      	ldr	r1, [r0, #4]
 801954e:	4b0c      	ldr	r3, [pc, #48]	; (8019580 <cleanup_stdio+0x34>)
 8019550:	4299      	cmp	r1, r3
 8019552:	b510      	push	{r4, lr}
 8019554:	4604      	mov	r4, r0
 8019556:	d001      	beq.n	801955c <cleanup_stdio+0x10>
 8019558:	f000 fe66 	bl	801a228 <_fflush_r>
 801955c:	68a1      	ldr	r1, [r4, #8]
 801955e:	4b09      	ldr	r3, [pc, #36]	; (8019584 <cleanup_stdio+0x38>)
 8019560:	4299      	cmp	r1, r3
 8019562:	d002      	beq.n	801956a <cleanup_stdio+0x1e>
 8019564:	4620      	mov	r0, r4
 8019566:	f000 fe5f 	bl	801a228 <_fflush_r>
 801956a:	68e1      	ldr	r1, [r4, #12]
 801956c:	4b06      	ldr	r3, [pc, #24]	; (8019588 <cleanup_stdio+0x3c>)
 801956e:	4299      	cmp	r1, r3
 8019570:	d004      	beq.n	801957c <cleanup_stdio+0x30>
 8019572:	4620      	mov	r0, r4
 8019574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019578:	f000 be56 	b.w	801a228 <_fflush_r>
 801957c:	bd10      	pop	{r4, pc}
 801957e:	bf00      	nop
 8019580:	20017b64 	.word	0x20017b64
 8019584:	20017bcc 	.word	0x20017bcc
 8019588:	20017c34 	.word	0x20017c34

0801958c <global_stdio_init.part.0>:
 801958c:	b510      	push	{r4, lr}
 801958e:	4b0b      	ldr	r3, [pc, #44]	; (80195bc <global_stdio_init.part.0+0x30>)
 8019590:	4c0b      	ldr	r4, [pc, #44]	; (80195c0 <global_stdio_init.part.0+0x34>)
 8019592:	4a0c      	ldr	r2, [pc, #48]	; (80195c4 <global_stdio_init.part.0+0x38>)
 8019594:	601a      	str	r2, [r3, #0]
 8019596:	4620      	mov	r0, r4
 8019598:	2200      	movs	r2, #0
 801959a:	2104      	movs	r1, #4
 801959c:	f7ff ff94 	bl	80194c8 <std>
 80195a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80195a4:	2201      	movs	r2, #1
 80195a6:	2109      	movs	r1, #9
 80195a8:	f7ff ff8e 	bl	80194c8 <std>
 80195ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80195b0:	2202      	movs	r2, #2
 80195b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195b6:	2112      	movs	r1, #18
 80195b8:	f7ff bf86 	b.w	80194c8 <std>
 80195bc:	20017c9c 	.word	0x20017c9c
 80195c0:	20017b64 	.word	0x20017b64
 80195c4:	08019535 	.word	0x08019535

080195c8 <__sfp_lock_acquire>:
 80195c8:	4801      	ldr	r0, [pc, #4]	; (80195d0 <__sfp_lock_acquire+0x8>)
 80195ca:	f000 ba18 	b.w	80199fe <__retarget_lock_acquire_recursive>
 80195ce:	bf00      	nop
 80195d0:	20017ca6 	.word	0x20017ca6

080195d4 <__sfp_lock_release>:
 80195d4:	4801      	ldr	r0, [pc, #4]	; (80195dc <__sfp_lock_release+0x8>)
 80195d6:	f000 ba13 	b.w	8019a00 <__retarget_lock_release_recursive>
 80195da:	bf00      	nop
 80195dc:	20017ca6 	.word	0x20017ca6

080195e0 <__sinit>:
 80195e0:	b510      	push	{r4, lr}
 80195e2:	4604      	mov	r4, r0
 80195e4:	f7ff fff0 	bl	80195c8 <__sfp_lock_acquire>
 80195e8:	6a23      	ldr	r3, [r4, #32]
 80195ea:	b11b      	cbz	r3, 80195f4 <__sinit+0x14>
 80195ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195f0:	f7ff bff0 	b.w	80195d4 <__sfp_lock_release>
 80195f4:	4b04      	ldr	r3, [pc, #16]	; (8019608 <__sinit+0x28>)
 80195f6:	6223      	str	r3, [r4, #32]
 80195f8:	4b04      	ldr	r3, [pc, #16]	; (801960c <__sinit+0x2c>)
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d1f5      	bne.n	80195ec <__sinit+0xc>
 8019600:	f7ff ffc4 	bl	801958c <global_stdio_init.part.0>
 8019604:	e7f2      	b.n	80195ec <__sinit+0xc>
 8019606:	bf00      	nop
 8019608:	0801954d 	.word	0x0801954d
 801960c:	20017c9c 	.word	0x20017c9c

08019610 <fiprintf>:
 8019610:	b40e      	push	{r1, r2, r3}
 8019612:	b503      	push	{r0, r1, lr}
 8019614:	4601      	mov	r1, r0
 8019616:	ab03      	add	r3, sp, #12
 8019618:	4805      	ldr	r0, [pc, #20]	; (8019630 <fiprintf+0x20>)
 801961a:	f853 2b04 	ldr.w	r2, [r3], #4
 801961e:	6800      	ldr	r0, [r0, #0]
 8019620:	9301      	str	r3, [sp, #4]
 8019622:	f000 fad1 	bl	8019bc8 <_vfiprintf_r>
 8019626:	b002      	add	sp, #8
 8019628:	f85d eb04 	ldr.w	lr, [sp], #4
 801962c:	b003      	add	sp, #12
 801962e:	4770      	bx	lr
 8019630:	200001e8 	.word	0x200001e8

08019634 <_fwalk_sglue>:
 8019634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019638:	4607      	mov	r7, r0
 801963a:	4688      	mov	r8, r1
 801963c:	4614      	mov	r4, r2
 801963e:	2600      	movs	r6, #0
 8019640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019644:	f1b9 0901 	subs.w	r9, r9, #1
 8019648:	d505      	bpl.n	8019656 <_fwalk_sglue+0x22>
 801964a:	6824      	ldr	r4, [r4, #0]
 801964c:	2c00      	cmp	r4, #0
 801964e:	d1f7      	bne.n	8019640 <_fwalk_sglue+0xc>
 8019650:	4630      	mov	r0, r6
 8019652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019656:	89ab      	ldrh	r3, [r5, #12]
 8019658:	2b01      	cmp	r3, #1
 801965a:	d907      	bls.n	801966c <_fwalk_sglue+0x38>
 801965c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019660:	3301      	adds	r3, #1
 8019662:	d003      	beq.n	801966c <_fwalk_sglue+0x38>
 8019664:	4629      	mov	r1, r5
 8019666:	4638      	mov	r0, r7
 8019668:	47c0      	blx	r8
 801966a:	4306      	orrs	r6, r0
 801966c:	3568      	adds	r5, #104	; 0x68
 801966e:	e7e9      	b.n	8019644 <_fwalk_sglue+0x10>

08019670 <__sread>:
 8019670:	b510      	push	{r4, lr}
 8019672:	460c      	mov	r4, r1
 8019674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019678:	f000 f94e 	bl	8019918 <_read_r>
 801967c:	2800      	cmp	r0, #0
 801967e:	bfab      	itete	ge
 8019680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019682:	89a3      	ldrhlt	r3, [r4, #12]
 8019684:	181b      	addge	r3, r3, r0
 8019686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801968a:	bfac      	ite	ge
 801968c:	6563      	strge	r3, [r4, #84]	; 0x54
 801968e:	81a3      	strhlt	r3, [r4, #12]
 8019690:	bd10      	pop	{r4, pc}

08019692 <__swrite>:
 8019692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019696:	461f      	mov	r7, r3
 8019698:	898b      	ldrh	r3, [r1, #12]
 801969a:	05db      	lsls	r3, r3, #23
 801969c:	4605      	mov	r5, r0
 801969e:	460c      	mov	r4, r1
 80196a0:	4616      	mov	r6, r2
 80196a2:	d505      	bpl.n	80196b0 <__swrite+0x1e>
 80196a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196a8:	2302      	movs	r3, #2
 80196aa:	2200      	movs	r2, #0
 80196ac:	f000 f922 	bl	80198f4 <_lseek_r>
 80196b0:	89a3      	ldrh	r3, [r4, #12]
 80196b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80196b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80196ba:	81a3      	strh	r3, [r4, #12]
 80196bc:	4632      	mov	r2, r6
 80196be:	463b      	mov	r3, r7
 80196c0:	4628      	mov	r0, r5
 80196c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196c6:	f000 b95d 	b.w	8019984 <_write_r>

080196ca <__sseek>:
 80196ca:	b510      	push	{r4, lr}
 80196cc:	460c      	mov	r4, r1
 80196ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196d2:	f000 f90f 	bl	80198f4 <_lseek_r>
 80196d6:	1c43      	adds	r3, r0, #1
 80196d8:	89a3      	ldrh	r3, [r4, #12]
 80196da:	bf15      	itete	ne
 80196dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80196de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80196e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80196e6:	81a3      	strheq	r3, [r4, #12]
 80196e8:	bf18      	it	ne
 80196ea:	81a3      	strhne	r3, [r4, #12]
 80196ec:	bd10      	pop	{r4, pc}

080196ee <__sclose>:
 80196ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196f2:	f000 b8ef 	b.w	80198d4 <_close_r>

080196f6 <__swbuf_r>:
 80196f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196f8:	460e      	mov	r6, r1
 80196fa:	4614      	mov	r4, r2
 80196fc:	4605      	mov	r5, r0
 80196fe:	b118      	cbz	r0, 8019708 <__swbuf_r+0x12>
 8019700:	6a03      	ldr	r3, [r0, #32]
 8019702:	b90b      	cbnz	r3, 8019708 <__swbuf_r+0x12>
 8019704:	f7ff ff6c 	bl	80195e0 <__sinit>
 8019708:	69a3      	ldr	r3, [r4, #24]
 801970a:	60a3      	str	r3, [r4, #8]
 801970c:	89a3      	ldrh	r3, [r4, #12]
 801970e:	071a      	lsls	r2, r3, #28
 8019710:	d525      	bpl.n	801975e <__swbuf_r+0x68>
 8019712:	6923      	ldr	r3, [r4, #16]
 8019714:	b31b      	cbz	r3, 801975e <__swbuf_r+0x68>
 8019716:	6823      	ldr	r3, [r4, #0]
 8019718:	6922      	ldr	r2, [r4, #16]
 801971a:	1a98      	subs	r0, r3, r2
 801971c:	6963      	ldr	r3, [r4, #20]
 801971e:	b2f6      	uxtb	r6, r6
 8019720:	4283      	cmp	r3, r0
 8019722:	4637      	mov	r7, r6
 8019724:	dc04      	bgt.n	8019730 <__swbuf_r+0x3a>
 8019726:	4621      	mov	r1, r4
 8019728:	4628      	mov	r0, r5
 801972a:	f000 fd7d 	bl	801a228 <_fflush_r>
 801972e:	b9e0      	cbnz	r0, 801976a <__swbuf_r+0x74>
 8019730:	68a3      	ldr	r3, [r4, #8]
 8019732:	3b01      	subs	r3, #1
 8019734:	60a3      	str	r3, [r4, #8]
 8019736:	6823      	ldr	r3, [r4, #0]
 8019738:	1c5a      	adds	r2, r3, #1
 801973a:	6022      	str	r2, [r4, #0]
 801973c:	701e      	strb	r6, [r3, #0]
 801973e:	6962      	ldr	r2, [r4, #20]
 8019740:	1c43      	adds	r3, r0, #1
 8019742:	429a      	cmp	r2, r3
 8019744:	d004      	beq.n	8019750 <__swbuf_r+0x5a>
 8019746:	89a3      	ldrh	r3, [r4, #12]
 8019748:	07db      	lsls	r3, r3, #31
 801974a:	d506      	bpl.n	801975a <__swbuf_r+0x64>
 801974c:	2e0a      	cmp	r6, #10
 801974e:	d104      	bne.n	801975a <__swbuf_r+0x64>
 8019750:	4621      	mov	r1, r4
 8019752:	4628      	mov	r0, r5
 8019754:	f000 fd68 	bl	801a228 <_fflush_r>
 8019758:	b938      	cbnz	r0, 801976a <__swbuf_r+0x74>
 801975a:	4638      	mov	r0, r7
 801975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801975e:	4621      	mov	r1, r4
 8019760:	4628      	mov	r0, r5
 8019762:	f000 f805 	bl	8019770 <__swsetup_r>
 8019766:	2800      	cmp	r0, #0
 8019768:	d0d5      	beq.n	8019716 <__swbuf_r+0x20>
 801976a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801976e:	e7f4      	b.n	801975a <__swbuf_r+0x64>

08019770 <__swsetup_r>:
 8019770:	b538      	push	{r3, r4, r5, lr}
 8019772:	4b2a      	ldr	r3, [pc, #168]	; (801981c <__swsetup_r+0xac>)
 8019774:	4605      	mov	r5, r0
 8019776:	6818      	ldr	r0, [r3, #0]
 8019778:	460c      	mov	r4, r1
 801977a:	b118      	cbz	r0, 8019784 <__swsetup_r+0x14>
 801977c:	6a03      	ldr	r3, [r0, #32]
 801977e:	b90b      	cbnz	r3, 8019784 <__swsetup_r+0x14>
 8019780:	f7ff ff2e 	bl	80195e0 <__sinit>
 8019784:	89a3      	ldrh	r3, [r4, #12]
 8019786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801978a:	0718      	lsls	r0, r3, #28
 801978c:	d422      	bmi.n	80197d4 <__swsetup_r+0x64>
 801978e:	06d9      	lsls	r1, r3, #27
 8019790:	d407      	bmi.n	80197a2 <__swsetup_r+0x32>
 8019792:	2309      	movs	r3, #9
 8019794:	602b      	str	r3, [r5, #0]
 8019796:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801979a:	81a3      	strh	r3, [r4, #12]
 801979c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80197a0:	e034      	b.n	801980c <__swsetup_r+0x9c>
 80197a2:	0758      	lsls	r0, r3, #29
 80197a4:	d512      	bpl.n	80197cc <__swsetup_r+0x5c>
 80197a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197a8:	b141      	cbz	r1, 80197bc <__swsetup_r+0x4c>
 80197aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197ae:	4299      	cmp	r1, r3
 80197b0:	d002      	beq.n	80197b8 <__swsetup_r+0x48>
 80197b2:	4628      	mov	r0, r5
 80197b4:	f000 f992 	bl	8019adc <_free_r>
 80197b8:	2300      	movs	r3, #0
 80197ba:	6363      	str	r3, [r4, #52]	; 0x34
 80197bc:	89a3      	ldrh	r3, [r4, #12]
 80197be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80197c2:	81a3      	strh	r3, [r4, #12]
 80197c4:	2300      	movs	r3, #0
 80197c6:	6063      	str	r3, [r4, #4]
 80197c8:	6923      	ldr	r3, [r4, #16]
 80197ca:	6023      	str	r3, [r4, #0]
 80197cc:	89a3      	ldrh	r3, [r4, #12]
 80197ce:	f043 0308 	orr.w	r3, r3, #8
 80197d2:	81a3      	strh	r3, [r4, #12]
 80197d4:	6923      	ldr	r3, [r4, #16]
 80197d6:	b94b      	cbnz	r3, 80197ec <__swsetup_r+0x7c>
 80197d8:	89a3      	ldrh	r3, [r4, #12]
 80197da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80197de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197e2:	d003      	beq.n	80197ec <__swsetup_r+0x7c>
 80197e4:	4621      	mov	r1, r4
 80197e6:	4628      	mov	r0, r5
 80197e8:	f000 fd6c 	bl	801a2c4 <__smakebuf_r>
 80197ec:	89a0      	ldrh	r0, [r4, #12]
 80197ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197f2:	f010 0301 	ands.w	r3, r0, #1
 80197f6:	d00a      	beq.n	801980e <__swsetup_r+0x9e>
 80197f8:	2300      	movs	r3, #0
 80197fa:	60a3      	str	r3, [r4, #8]
 80197fc:	6963      	ldr	r3, [r4, #20]
 80197fe:	425b      	negs	r3, r3
 8019800:	61a3      	str	r3, [r4, #24]
 8019802:	6923      	ldr	r3, [r4, #16]
 8019804:	b943      	cbnz	r3, 8019818 <__swsetup_r+0xa8>
 8019806:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801980a:	d1c4      	bne.n	8019796 <__swsetup_r+0x26>
 801980c:	bd38      	pop	{r3, r4, r5, pc}
 801980e:	0781      	lsls	r1, r0, #30
 8019810:	bf58      	it	pl
 8019812:	6963      	ldrpl	r3, [r4, #20]
 8019814:	60a3      	str	r3, [r4, #8]
 8019816:	e7f4      	b.n	8019802 <__swsetup_r+0x92>
 8019818:	2000      	movs	r0, #0
 801981a:	e7f7      	b.n	801980c <__swsetup_r+0x9c>
 801981c:	200001e8 	.word	0x200001e8

08019820 <memcmp>:
 8019820:	b510      	push	{r4, lr}
 8019822:	3901      	subs	r1, #1
 8019824:	4402      	add	r2, r0
 8019826:	4290      	cmp	r0, r2
 8019828:	d101      	bne.n	801982e <memcmp+0xe>
 801982a:	2000      	movs	r0, #0
 801982c:	e005      	b.n	801983a <memcmp+0x1a>
 801982e:	7803      	ldrb	r3, [r0, #0]
 8019830:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019834:	42a3      	cmp	r3, r4
 8019836:	d001      	beq.n	801983c <memcmp+0x1c>
 8019838:	1b18      	subs	r0, r3, r4
 801983a:	bd10      	pop	{r4, pc}
 801983c:	3001      	adds	r0, #1
 801983e:	e7f2      	b.n	8019826 <memcmp+0x6>

08019840 <memset>:
 8019840:	4402      	add	r2, r0
 8019842:	4603      	mov	r3, r0
 8019844:	4293      	cmp	r3, r2
 8019846:	d100      	bne.n	801984a <memset+0xa>
 8019848:	4770      	bx	lr
 801984a:	f803 1b01 	strb.w	r1, [r3], #1
 801984e:	e7f9      	b.n	8019844 <memset+0x4>

08019850 <strncmp>:
 8019850:	b510      	push	{r4, lr}
 8019852:	b16a      	cbz	r2, 8019870 <strncmp+0x20>
 8019854:	3901      	subs	r1, #1
 8019856:	1884      	adds	r4, r0, r2
 8019858:	f810 2b01 	ldrb.w	r2, [r0], #1
 801985c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019860:	429a      	cmp	r2, r3
 8019862:	d103      	bne.n	801986c <strncmp+0x1c>
 8019864:	42a0      	cmp	r0, r4
 8019866:	d001      	beq.n	801986c <strncmp+0x1c>
 8019868:	2a00      	cmp	r2, #0
 801986a:	d1f5      	bne.n	8019858 <strncmp+0x8>
 801986c:	1ad0      	subs	r0, r2, r3
 801986e:	bd10      	pop	{r4, pc}
 8019870:	4610      	mov	r0, r2
 8019872:	e7fc      	b.n	801986e <strncmp+0x1e>

08019874 <_raise_r>:
 8019874:	291f      	cmp	r1, #31
 8019876:	b538      	push	{r3, r4, r5, lr}
 8019878:	4604      	mov	r4, r0
 801987a:	460d      	mov	r5, r1
 801987c:	d904      	bls.n	8019888 <_raise_r+0x14>
 801987e:	2316      	movs	r3, #22
 8019880:	6003      	str	r3, [r0, #0]
 8019882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019886:	bd38      	pop	{r3, r4, r5, pc}
 8019888:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801988a:	b112      	cbz	r2, 8019892 <_raise_r+0x1e>
 801988c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019890:	b94b      	cbnz	r3, 80198a6 <_raise_r+0x32>
 8019892:	4620      	mov	r0, r4
 8019894:	f000 f864 	bl	8019960 <_getpid_r>
 8019898:	462a      	mov	r2, r5
 801989a:	4601      	mov	r1, r0
 801989c:	4620      	mov	r0, r4
 801989e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198a2:	f000 b84b 	b.w	801993c <_kill_r>
 80198a6:	2b01      	cmp	r3, #1
 80198a8:	d00a      	beq.n	80198c0 <_raise_r+0x4c>
 80198aa:	1c59      	adds	r1, r3, #1
 80198ac:	d103      	bne.n	80198b6 <_raise_r+0x42>
 80198ae:	2316      	movs	r3, #22
 80198b0:	6003      	str	r3, [r0, #0]
 80198b2:	2001      	movs	r0, #1
 80198b4:	e7e7      	b.n	8019886 <_raise_r+0x12>
 80198b6:	2400      	movs	r4, #0
 80198b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80198bc:	4628      	mov	r0, r5
 80198be:	4798      	blx	r3
 80198c0:	2000      	movs	r0, #0
 80198c2:	e7e0      	b.n	8019886 <_raise_r+0x12>

080198c4 <raise>:
 80198c4:	4b02      	ldr	r3, [pc, #8]	; (80198d0 <raise+0xc>)
 80198c6:	4601      	mov	r1, r0
 80198c8:	6818      	ldr	r0, [r3, #0]
 80198ca:	f7ff bfd3 	b.w	8019874 <_raise_r>
 80198ce:	bf00      	nop
 80198d0:	200001e8 	.word	0x200001e8

080198d4 <_close_r>:
 80198d4:	b538      	push	{r3, r4, r5, lr}
 80198d6:	4d06      	ldr	r5, [pc, #24]	; (80198f0 <_close_r+0x1c>)
 80198d8:	2300      	movs	r3, #0
 80198da:	4604      	mov	r4, r0
 80198dc:	4608      	mov	r0, r1
 80198de:	602b      	str	r3, [r5, #0]
 80198e0:	f7e7 ff86 	bl	80017f0 <_close>
 80198e4:	1c43      	adds	r3, r0, #1
 80198e6:	d102      	bne.n	80198ee <_close_r+0x1a>
 80198e8:	682b      	ldr	r3, [r5, #0]
 80198ea:	b103      	cbz	r3, 80198ee <_close_r+0x1a>
 80198ec:	6023      	str	r3, [r4, #0]
 80198ee:	bd38      	pop	{r3, r4, r5, pc}
 80198f0:	20017ca0 	.word	0x20017ca0

080198f4 <_lseek_r>:
 80198f4:	b538      	push	{r3, r4, r5, lr}
 80198f6:	4d07      	ldr	r5, [pc, #28]	; (8019914 <_lseek_r+0x20>)
 80198f8:	4604      	mov	r4, r0
 80198fa:	4608      	mov	r0, r1
 80198fc:	4611      	mov	r1, r2
 80198fe:	2200      	movs	r2, #0
 8019900:	602a      	str	r2, [r5, #0]
 8019902:	461a      	mov	r2, r3
 8019904:	f7e7 ff7e 	bl	8001804 <_lseek>
 8019908:	1c43      	adds	r3, r0, #1
 801990a:	d102      	bne.n	8019912 <_lseek_r+0x1e>
 801990c:	682b      	ldr	r3, [r5, #0]
 801990e:	b103      	cbz	r3, 8019912 <_lseek_r+0x1e>
 8019910:	6023      	str	r3, [r4, #0]
 8019912:	bd38      	pop	{r3, r4, r5, pc}
 8019914:	20017ca0 	.word	0x20017ca0

08019918 <_read_r>:
 8019918:	b538      	push	{r3, r4, r5, lr}
 801991a:	4d07      	ldr	r5, [pc, #28]	; (8019938 <_read_r+0x20>)
 801991c:	4604      	mov	r4, r0
 801991e:	4608      	mov	r0, r1
 8019920:	4611      	mov	r1, r2
 8019922:	2200      	movs	r2, #0
 8019924:	602a      	str	r2, [r5, #0]
 8019926:	461a      	mov	r2, r3
 8019928:	f7e7 ff6e 	bl	8001808 <_read>
 801992c:	1c43      	adds	r3, r0, #1
 801992e:	d102      	bne.n	8019936 <_read_r+0x1e>
 8019930:	682b      	ldr	r3, [r5, #0]
 8019932:	b103      	cbz	r3, 8019936 <_read_r+0x1e>
 8019934:	6023      	str	r3, [r4, #0]
 8019936:	bd38      	pop	{r3, r4, r5, pc}
 8019938:	20017ca0 	.word	0x20017ca0

0801993c <_kill_r>:
 801993c:	b538      	push	{r3, r4, r5, lr}
 801993e:	4d07      	ldr	r5, [pc, #28]	; (801995c <_kill_r+0x20>)
 8019940:	2300      	movs	r3, #0
 8019942:	4604      	mov	r4, r0
 8019944:	4608      	mov	r0, r1
 8019946:	4611      	mov	r1, r2
 8019948:	602b      	str	r3, [r5, #0]
 801994a:	f7e7 ff35 	bl	80017b8 <_kill>
 801994e:	1c43      	adds	r3, r0, #1
 8019950:	d102      	bne.n	8019958 <_kill_r+0x1c>
 8019952:	682b      	ldr	r3, [r5, #0]
 8019954:	b103      	cbz	r3, 8019958 <_kill_r+0x1c>
 8019956:	6023      	str	r3, [r4, #0]
 8019958:	bd38      	pop	{r3, r4, r5, pc}
 801995a:	bf00      	nop
 801995c:	20017ca0 	.word	0x20017ca0

08019960 <_getpid_r>:
 8019960:	f7e7 bf28 	b.w	80017b4 <_getpid>

08019964 <_sbrk_r>:
 8019964:	b538      	push	{r3, r4, r5, lr}
 8019966:	4d06      	ldr	r5, [pc, #24]	; (8019980 <_sbrk_r+0x1c>)
 8019968:	2300      	movs	r3, #0
 801996a:	4604      	mov	r4, r0
 801996c:	4608      	mov	r0, r1
 801996e:	602b      	str	r3, [r5, #0]
 8019970:	f7e7 ff06 	bl	8001780 <_sbrk>
 8019974:	1c43      	adds	r3, r0, #1
 8019976:	d102      	bne.n	801997e <_sbrk_r+0x1a>
 8019978:	682b      	ldr	r3, [r5, #0]
 801997a:	b103      	cbz	r3, 801997e <_sbrk_r+0x1a>
 801997c:	6023      	str	r3, [r4, #0]
 801997e:	bd38      	pop	{r3, r4, r5, pc}
 8019980:	20017ca0 	.word	0x20017ca0

08019984 <_write_r>:
 8019984:	b538      	push	{r3, r4, r5, lr}
 8019986:	4d07      	ldr	r5, [pc, #28]	; (80199a4 <_write_r+0x20>)
 8019988:	4604      	mov	r4, r0
 801998a:	4608      	mov	r0, r1
 801998c:	4611      	mov	r1, r2
 801998e:	2200      	movs	r2, #0
 8019990:	602a      	str	r2, [r5, #0]
 8019992:	461a      	mov	r2, r3
 8019994:	f7e7 ff1e 	bl	80017d4 <_write>
 8019998:	1c43      	adds	r3, r0, #1
 801999a:	d102      	bne.n	80199a2 <_write_r+0x1e>
 801999c:	682b      	ldr	r3, [r5, #0]
 801999e:	b103      	cbz	r3, 80199a2 <_write_r+0x1e>
 80199a0:	6023      	str	r3, [r4, #0]
 80199a2:	bd38      	pop	{r3, r4, r5, pc}
 80199a4:	20017ca0 	.word	0x20017ca0

080199a8 <__errno>:
 80199a8:	4b01      	ldr	r3, [pc, #4]	; (80199b0 <__errno+0x8>)
 80199aa:	6818      	ldr	r0, [r3, #0]
 80199ac:	4770      	bx	lr
 80199ae:	bf00      	nop
 80199b0:	200001e8 	.word	0x200001e8

080199b4 <__libc_init_array>:
 80199b4:	b570      	push	{r4, r5, r6, lr}
 80199b6:	4d0d      	ldr	r5, [pc, #52]	; (80199ec <__libc_init_array+0x38>)
 80199b8:	4c0d      	ldr	r4, [pc, #52]	; (80199f0 <__libc_init_array+0x3c>)
 80199ba:	1b64      	subs	r4, r4, r5
 80199bc:	10a4      	asrs	r4, r4, #2
 80199be:	2600      	movs	r6, #0
 80199c0:	42a6      	cmp	r6, r4
 80199c2:	d109      	bne.n	80199d8 <__libc_init_array+0x24>
 80199c4:	4d0b      	ldr	r5, [pc, #44]	; (80199f4 <__libc_init_array+0x40>)
 80199c6:	4c0c      	ldr	r4, [pc, #48]	; (80199f8 <__libc_init_array+0x44>)
 80199c8:	f000 fcda 	bl	801a380 <_init>
 80199cc:	1b64      	subs	r4, r4, r5
 80199ce:	10a4      	asrs	r4, r4, #2
 80199d0:	2600      	movs	r6, #0
 80199d2:	42a6      	cmp	r6, r4
 80199d4:	d105      	bne.n	80199e2 <__libc_init_array+0x2e>
 80199d6:	bd70      	pop	{r4, r5, r6, pc}
 80199d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80199dc:	4798      	blx	r3
 80199de:	3601      	adds	r6, #1
 80199e0:	e7ee      	b.n	80199c0 <__libc_init_array+0xc>
 80199e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80199e6:	4798      	blx	r3
 80199e8:	3601      	adds	r6, #1
 80199ea:	e7f2      	b.n	80199d2 <__libc_init_array+0x1e>
 80199ec:	0804db10 	.word	0x0804db10
 80199f0:	0804db10 	.word	0x0804db10
 80199f4:	0804db10 	.word	0x0804db10
 80199f8:	0804db14 	.word	0x0804db14

080199fc <__retarget_lock_init_recursive>:
 80199fc:	4770      	bx	lr

080199fe <__retarget_lock_acquire_recursive>:
 80199fe:	4770      	bx	lr

08019a00 <__retarget_lock_release_recursive>:
 8019a00:	4770      	bx	lr

08019a02 <memcpy>:
 8019a02:	440a      	add	r2, r1
 8019a04:	4291      	cmp	r1, r2
 8019a06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019a0a:	d100      	bne.n	8019a0e <memcpy+0xc>
 8019a0c:	4770      	bx	lr
 8019a0e:	b510      	push	{r4, lr}
 8019a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a18:	4291      	cmp	r1, r2
 8019a1a:	d1f9      	bne.n	8019a10 <memcpy+0xe>
 8019a1c:	bd10      	pop	{r4, pc}
	...

08019a20 <__register_exitproc>:
 8019a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a24:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8019ad8 <__register_exitproc+0xb8>
 8019a28:	4606      	mov	r6, r0
 8019a2a:	f8d8 0000 	ldr.w	r0, [r8]
 8019a2e:	461f      	mov	r7, r3
 8019a30:	460d      	mov	r5, r1
 8019a32:	4691      	mov	r9, r2
 8019a34:	f7ff ffe3 	bl	80199fe <__retarget_lock_acquire_recursive>
 8019a38:	4b23      	ldr	r3, [pc, #140]	; (8019ac8 <__register_exitproc+0xa8>)
 8019a3a:	681c      	ldr	r4, [r3, #0]
 8019a3c:	b934      	cbnz	r4, 8019a4c <__register_exitproc+0x2c>
 8019a3e:	4c23      	ldr	r4, [pc, #140]	; (8019acc <__register_exitproc+0xac>)
 8019a40:	601c      	str	r4, [r3, #0]
 8019a42:	4b23      	ldr	r3, [pc, #140]	; (8019ad0 <__register_exitproc+0xb0>)
 8019a44:	b113      	cbz	r3, 8019a4c <__register_exitproc+0x2c>
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8019a4c:	6863      	ldr	r3, [r4, #4]
 8019a4e:	2b1f      	cmp	r3, #31
 8019a50:	dd07      	ble.n	8019a62 <__register_exitproc+0x42>
 8019a52:	f8d8 0000 	ldr.w	r0, [r8]
 8019a56:	f7ff ffd3 	bl	8019a00 <__retarget_lock_release_recursive>
 8019a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a62:	b32e      	cbz	r6, 8019ab0 <__register_exitproc+0x90>
 8019a64:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019a68:	b968      	cbnz	r0, 8019a86 <__register_exitproc+0x66>
 8019a6a:	4b1a      	ldr	r3, [pc, #104]	; (8019ad4 <__register_exitproc+0xb4>)
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d0f0      	beq.n	8019a52 <__register_exitproc+0x32>
 8019a70:	f44f 7084 	mov.w	r0, #264	; 0x108
 8019a74:	f7ff fc6c 	bl	8019350 <malloc>
 8019a78:	2800      	cmp	r0, #0
 8019a7a:	d0ea      	beq.n	8019a52 <__register_exitproc+0x32>
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8019a82:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8019a86:	6863      	ldr	r3, [r4, #4]
 8019a88:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8019a8c:	2201      	movs	r2, #1
 8019a8e:	409a      	lsls	r2, r3
 8019a90:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8019a94:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8019a98:	4313      	orrs	r3, r2
 8019a9a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8019a9e:	2e02      	cmp	r6, #2
 8019aa0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8019aa4:	bf02      	ittt	eq
 8019aa6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8019aaa:	4313      	orreq	r3, r2
 8019aac:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8019ab0:	6863      	ldr	r3, [r4, #4]
 8019ab2:	f8d8 0000 	ldr.w	r0, [r8]
 8019ab6:	1c5a      	adds	r2, r3, #1
 8019ab8:	3302      	adds	r3, #2
 8019aba:	6062      	str	r2, [r4, #4]
 8019abc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8019ac0:	f7ff ff9e 	bl	8019a00 <__retarget_lock_release_recursive>
 8019ac4:	2000      	movs	r0, #0
 8019ac6:	e7ca      	b.n	8019a5e <__register_exitproc+0x3e>
 8019ac8:	20017d34 	.word	0x20017d34
 8019acc:	20017ca8 	.word	0x20017ca8
 8019ad0:	00000000 	.word	0x00000000
 8019ad4:	08019351 	.word	0x08019351
 8019ad8:	200001ec 	.word	0x200001ec

08019adc <_free_r>:
 8019adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ade:	2900      	cmp	r1, #0
 8019ae0:	d044      	beq.n	8019b6c <_free_r+0x90>
 8019ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ae6:	9001      	str	r0, [sp, #4]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	f1a1 0404 	sub.w	r4, r1, #4
 8019aee:	bfb8      	it	lt
 8019af0:	18e4      	addlt	r4, r4, r3
 8019af2:	f7ff fcdd 	bl	80194b0 <__malloc_lock>
 8019af6:	4a1e      	ldr	r2, [pc, #120]	; (8019b70 <_free_r+0x94>)
 8019af8:	9801      	ldr	r0, [sp, #4]
 8019afa:	6813      	ldr	r3, [r2, #0]
 8019afc:	b933      	cbnz	r3, 8019b0c <_free_r+0x30>
 8019afe:	6063      	str	r3, [r4, #4]
 8019b00:	6014      	str	r4, [r2, #0]
 8019b02:	b003      	add	sp, #12
 8019b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b08:	f7ff bcd8 	b.w	80194bc <__malloc_unlock>
 8019b0c:	42a3      	cmp	r3, r4
 8019b0e:	d908      	bls.n	8019b22 <_free_r+0x46>
 8019b10:	6825      	ldr	r5, [r4, #0]
 8019b12:	1961      	adds	r1, r4, r5
 8019b14:	428b      	cmp	r3, r1
 8019b16:	bf01      	itttt	eq
 8019b18:	6819      	ldreq	r1, [r3, #0]
 8019b1a:	685b      	ldreq	r3, [r3, #4]
 8019b1c:	1949      	addeq	r1, r1, r5
 8019b1e:	6021      	streq	r1, [r4, #0]
 8019b20:	e7ed      	b.n	8019afe <_free_r+0x22>
 8019b22:	461a      	mov	r2, r3
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	b10b      	cbz	r3, 8019b2c <_free_r+0x50>
 8019b28:	42a3      	cmp	r3, r4
 8019b2a:	d9fa      	bls.n	8019b22 <_free_r+0x46>
 8019b2c:	6811      	ldr	r1, [r2, #0]
 8019b2e:	1855      	adds	r5, r2, r1
 8019b30:	42a5      	cmp	r5, r4
 8019b32:	d10b      	bne.n	8019b4c <_free_r+0x70>
 8019b34:	6824      	ldr	r4, [r4, #0]
 8019b36:	4421      	add	r1, r4
 8019b38:	1854      	adds	r4, r2, r1
 8019b3a:	42a3      	cmp	r3, r4
 8019b3c:	6011      	str	r1, [r2, #0]
 8019b3e:	d1e0      	bne.n	8019b02 <_free_r+0x26>
 8019b40:	681c      	ldr	r4, [r3, #0]
 8019b42:	685b      	ldr	r3, [r3, #4]
 8019b44:	6053      	str	r3, [r2, #4]
 8019b46:	440c      	add	r4, r1
 8019b48:	6014      	str	r4, [r2, #0]
 8019b4a:	e7da      	b.n	8019b02 <_free_r+0x26>
 8019b4c:	d902      	bls.n	8019b54 <_free_r+0x78>
 8019b4e:	230c      	movs	r3, #12
 8019b50:	6003      	str	r3, [r0, #0]
 8019b52:	e7d6      	b.n	8019b02 <_free_r+0x26>
 8019b54:	6825      	ldr	r5, [r4, #0]
 8019b56:	1961      	adds	r1, r4, r5
 8019b58:	428b      	cmp	r3, r1
 8019b5a:	bf04      	itt	eq
 8019b5c:	6819      	ldreq	r1, [r3, #0]
 8019b5e:	685b      	ldreq	r3, [r3, #4]
 8019b60:	6063      	str	r3, [r4, #4]
 8019b62:	bf04      	itt	eq
 8019b64:	1949      	addeq	r1, r1, r5
 8019b66:	6021      	streq	r1, [r4, #0]
 8019b68:	6054      	str	r4, [r2, #4]
 8019b6a:	e7ca      	b.n	8019b02 <_free_r+0x26>
 8019b6c:	b003      	add	sp, #12
 8019b6e:	bd30      	pop	{r4, r5, pc}
 8019b70:	20017b5c 	.word	0x20017b5c

08019b74 <__sfputc_r>:
 8019b74:	6893      	ldr	r3, [r2, #8]
 8019b76:	3b01      	subs	r3, #1
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	b410      	push	{r4}
 8019b7c:	6093      	str	r3, [r2, #8]
 8019b7e:	da08      	bge.n	8019b92 <__sfputc_r+0x1e>
 8019b80:	6994      	ldr	r4, [r2, #24]
 8019b82:	42a3      	cmp	r3, r4
 8019b84:	db01      	blt.n	8019b8a <__sfputc_r+0x16>
 8019b86:	290a      	cmp	r1, #10
 8019b88:	d103      	bne.n	8019b92 <__sfputc_r+0x1e>
 8019b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b8e:	f7ff bdb2 	b.w	80196f6 <__swbuf_r>
 8019b92:	6813      	ldr	r3, [r2, #0]
 8019b94:	1c58      	adds	r0, r3, #1
 8019b96:	6010      	str	r0, [r2, #0]
 8019b98:	7019      	strb	r1, [r3, #0]
 8019b9a:	4608      	mov	r0, r1
 8019b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ba0:	4770      	bx	lr

08019ba2 <__sfputs_r>:
 8019ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba4:	4606      	mov	r6, r0
 8019ba6:	460f      	mov	r7, r1
 8019ba8:	4614      	mov	r4, r2
 8019baa:	18d5      	adds	r5, r2, r3
 8019bac:	42ac      	cmp	r4, r5
 8019bae:	d101      	bne.n	8019bb4 <__sfputs_r+0x12>
 8019bb0:	2000      	movs	r0, #0
 8019bb2:	e007      	b.n	8019bc4 <__sfputs_r+0x22>
 8019bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bb8:	463a      	mov	r2, r7
 8019bba:	4630      	mov	r0, r6
 8019bbc:	f7ff ffda 	bl	8019b74 <__sfputc_r>
 8019bc0:	1c43      	adds	r3, r0, #1
 8019bc2:	d1f3      	bne.n	8019bac <__sfputs_r+0xa>
 8019bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019bc8 <_vfiprintf_r>:
 8019bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bcc:	460d      	mov	r5, r1
 8019bce:	b09d      	sub	sp, #116	; 0x74
 8019bd0:	4614      	mov	r4, r2
 8019bd2:	4698      	mov	r8, r3
 8019bd4:	4606      	mov	r6, r0
 8019bd6:	b118      	cbz	r0, 8019be0 <_vfiprintf_r+0x18>
 8019bd8:	6a03      	ldr	r3, [r0, #32]
 8019bda:	b90b      	cbnz	r3, 8019be0 <_vfiprintf_r+0x18>
 8019bdc:	f7ff fd00 	bl	80195e0 <__sinit>
 8019be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019be2:	07d9      	lsls	r1, r3, #31
 8019be4:	d405      	bmi.n	8019bf2 <_vfiprintf_r+0x2a>
 8019be6:	89ab      	ldrh	r3, [r5, #12]
 8019be8:	059a      	lsls	r2, r3, #22
 8019bea:	d402      	bmi.n	8019bf2 <_vfiprintf_r+0x2a>
 8019bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bee:	f7ff ff06 	bl	80199fe <__retarget_lock_acquire_recursive>
 8019bf2:	89ab      	ldrh	r3, [r5, #12]
 8019bf4:	071b      	lsls	r3, r3, #28
 8019bf6:	d501      	bpl.n	8019bfc <_vfiprintf_r+0x34>
 8019bf8:	692b      	ldr	r3, [r5, #16]
 8019bfa:	b99b      	cbnz	r3, 8019c24 <_vfiprintf_r+0x5c>
 8019bfc:	4629      	mov	r1, r5
 8019bfe:	4630      	mov	r0, r6
 8019c00:	f7ff fdb6 	bl	8019770 <__swsetup_r>
 8019c04:	b170      	cbz	r0, 8019c24 <_vfiprintf_r+0x5c>
 8019c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c08:	07dc      	lsls	r4, r3, #31
 8019c0a:	d504      	bpl.n	8019c16 <_vfiprintf_r+0x4e>
 8019c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c10:	b01d      	add	sp, #116	; 0x74
 8019c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c16:	89ab      	ldrh	r3, [r5, #12]
 8019c18:	0598      	lsls	r0, r3, #22
 8019c1a:	d4f7      	bmi.n	8019c0c <_vfiprintf_r+0x44>
 8019c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c1e:	f7ff feef 	bl	8019a00 <__retarget_lock_release_recursive>
 8019c22:	e7f3      	b.n	8019c0c <_vfiprintf_r+0x44>
 8019c24:	2300      	movs	r3, #0
 8019c26:	9309      	str	r3, [sp, #36]	; 0x24
 8019c28:	2320      	movs	r3, #32
 8019c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c32:	2330      	movs	r3, #48	; 0x30
 8019c34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019de8 <_vfiprintf_r+0x220>
 8019c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c3c:	f04f 0901 	mov.w	r9, #1
 8019c40:	4623      	mov	r3, r4
 8019c42:	469a      	mov	sl, r3
 8019c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c48:	b10a      	cbz	r2, 8019c4e <_vfiprintf_r+0x86>
 8019c4a:	2a25      	cmp	r2, #37	; 0x25
 8019c4c:	d1f9      	bne.n	8019c42 <_vfiprintf_r+0x7a>
 8019c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8019c52:	d00b      	beq.n	8019c6c <_vfiprintf_r+0xa4>
 8019c54:	465b      	mov	r3, fp
 8019c56:	4622      	mov	r2, r4
 8019c58:	4629      	mov	r1, r5
 8019c5a:	4630      	mov	r0, r6
 8019c5c:	f7ff ffa1 	bl	8019ba2 <__sfputs_r>
 8019c60:	3001      	adds	r0, #1
 8019c62:	f000 80a9 	beq.w	8019db8 <_vfiprintf_r+0x1f0>
 8019c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c68:	445a      	add	r2, fp
 8019c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8019c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	f000 80a1 	beq.w	8019db8 <_vfiprintf_r+0x1f0>
 8019c76:	2300      	movs	r3, #0
 8019c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c80:	f10a 0a01 	add.w	sl, sl, #1
 8019c84:	9304      	str	r3, [sp, #16]
 8019c86:	9307      	str	r3, [sp, #28]
 8019c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8019c8e:	4654      	mov	r4, sl
 8019c90:	2205      	movs	r2, #5
 8019c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c96:	4854      	ldr	r0, [pc, #336]	; (8019de8 <_vfiprintf_r+0x220>)
 8019c98:	f7e6 faaa 	bl	80001f0 <memchr>
 8019c9c:	9a04      	ldr	r2, [sp, #16]
 8019c9e:	b9d8      	cbnz	r0, 8019cd8 <_vfiprintf_r+0x110>
 8019ca0:	06d1      	lsls	r1, r2, #27
 8019ca2:	bf44      	itt	mi
 8019ca4:	2320      	movmi	r3, #32
 8019ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019caa:	0713      	lsls	r3, r2, #28
 8019cac:	bf44      	itt	mi
 8019cae:	232b      	movmi	r3, #43	; 0x2b
 8019cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8019cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8019cba:	d015      	beq.n	8019ce8 <_vfiprintf_r+0x120>
 8019cbc:	9a07      	ldr	r2, [sp, #28]
 8019cbe:	4654      	mov	r4, sl
 8019cc0:	2000      	movs	r0, #0
 8019cc2:	f04f 0c0a 	mov.w	ip, #10
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ccc:	3b30      	subs	r3, #48	; 0x30
 8019cce:	2b09      	cmp	r3, #9
 8019cd0:	d94d      	bls.n	8019d6e <_vfiprintf_r+0x1a6>
 8019cd2:	b1b0      	cbz	r0, 8019d02 <_vfiprintf_r+0x13a>
 8019cd4:	9207      	str	r2, [sp, #28]
 8019cd6:	e014      	b.n	8019d02 <_vfiprintf_r+0x13a>
 8019cd8:	eba0 0308 	sub.w	r3, r0, r8
 8019cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8019ce0:	4313      	orrs	r3, r2
 8019ce2:	9304      	str	r3, [sp, #16]
 8019ce4:	46a2      	mov	sl, r4
 8019ce6:	e7d2      	b.n	8019c8e <_vfiprintf_r+0xc6>
 8019ce8:	9b03      	ldr	r3, [sp, #12]
 8019cea:	1d19      	adds	r1, r3, #4
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	9103      	str	r1, [sp, #12]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	bfbb      	ittet	lt
 8019cf4:	425b      	neglt	r3, r3
 8019cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8019cfa:	9307      	strge	r3, [sp, #28]
 8019cfc:	9307      	strlt	r3, [sp, #28]
 8019cfe:	bfb8      	it	lt
 8019d00:	9204      	strlt	r2, [sp, #16]
 8019d02:	7823      	ldrb	r3, [r4, #0]
 8019d04:	2b2e      	cmp	r3, #46	; 0x2e
 8019d06:	d10c      	bne.n	8019d22 <_vfiprintf_r+0x15a>
 8019d08:	7863      	ldrb	r3, [r4, #1]
 8019d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8019d0c:	d134      	bne.n	8019d78 <_vfiprintf_r+0x1b0>
 8019d0e:	9b03      	ldr	r3, [sp, #12]
 8019d10:	1d1a      	adds	r2, r3, #4
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	9203      	str	r2, [sp, #12]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	bfb8      	it	lt
 8019d1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019d1e:	3402      	adds	r4, #2
 8019d20:	9305      	str	r3, [sp, #20]
 8019d22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019df8 <_vfiprintf_r+0x230>
 8019d26:	7821      	ldrb	r1, [r4, #0]
 8019d28:	2203      	movs	r2, #3
 8019d2a:	4650      	mov	r0, sl
 8019d2c:	f7e6 fa60 	bl	80001f0 <memchr>
 8019d30:	b138      	cbz	r0, 8019d42 <_vfiprintf_r+0x17a>
 8019d32:	9b04      	ldr	r3, [sp, #16]
 8019d34:	eba0 000a 	sub.w	r0, r0, sl
 8019d38:	2240      	movs	r2, #64	; 0x40
 8019d3a:	4082      	lsls	r2, r0
 8019d3c:	4313      	orrs	r3, r2
 8019d3e:	3401      	adds	r4, #1
 8019d40:	9304      	str	r3, [sp, #16]
 8019d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d46:	4829      	ldr	r0, [pc, #164]	; (8019dec <_vfiprintf_r+0x224>)
 8019d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d4c:	2206      	movs	r2, #6
 8019d4e:	f7e6 fa4f 	bl	80001f0 <memchr>
 8019d52:	2800      	cmp	r0, #0
 8019d54:	d03f      	beq.n	8019dd6 <_vfiprintf_r+0x20e>
 8019d56:	4b26      	ldr	r3, [pc, #152]	; (8019df0 <_vfiprintf_r+0x228>)
 8019d58:	bb1b      	cbnz	r3, 8019da2 <_vfiprintf_r+0x1da>
 8019d5a:	9b03      	ldr	r3, [sp, #12]
 8019d5c:	3307      	adds	r3, #7
 8019d5e:	f023 0307 	bic.w	r3, r3, #7
 8019d62:	3308      	adds	r3, #8
 8019d64:	9303      	str	r3, [sp, #12]
 8019d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d68:	443b      	add	r3, r7
 8019d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8019d6c:	e768      	b.n	8019c40 <_vfiprintf_r+0x78>
 8019d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d72:	460c      	mov	r4, r1
 8019d74:	2001      	movs	r0, #1
 8019d76:	e7a6      	b.n	8019cc6 <_vfiprintf_r+0xfe>
 8019d78:	2300      	movs	r3, #0
 8019d7a:	3401      	adds	r4, #1
 8019d7c:	9305      	str	r3, [sp, #20]
 8019d7e:	4619      	mov	r1, r3
 8019d80:	f04f 0c0a 	mov.w	ip, #10
 8019d84:	4620      	mov	r0, r4
 8019d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d8a:	3a30      	subs	r2, #48	; 0x30
 8019d8c:	2a09      	cmp	r2, #9
 8019d8e:	d903      	bls.n	8019d98 <_vfiprintf_r+0x1d0>
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d0c6      	beq.n	8019d22 <_vfiprintf_r+0x15a>
 8019d94:	9105      	str	r1, [sp, #20]
 8019d96:	e7c4      	b.n	8019d22 <_vfiprintf_r+0x15a>
 8019d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d9c:	4604      	mov	r4, r0
 8019d9e:	2301      	movs	r3, #1
 8019da0:	e7f0      	b.n	8019d84 <_vfiprintf_r+0x1bc>
 8019da2:	ab03      	add	r3, sp, #12
 8019da4:	9300      	str	r3, [sp, #0]
 8019da6:	462a      	mov	r2, r5
 8019da8:	4b12      	ldr	r3, [pc, #72]	; (8019df4 <_vfiprintf_r+0x22c>)
 8019daa:	a904      	add	r1, sp, #16
 8019dac:	4630      	mov	r0, r6
 8019dae:	f3af 8000 	nop.w
 8019db2:	4607      	mov	r7, r0
 8019db4:	1c78      	adds	r0, r7, #1
 8019db6:	d1d6      	bne.n	8019d66 <_vfiprintf_r+0x19e>
 8019db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019dba:	07d9      	lsls	r1, r3, #31
 8019dbc:	d405      	bmi.n	8019dca <_vfiprintf_r+0x202>
 8019dbe:	89ab      	ldrh	r3, [r5, #12]
 8019dc0:	059a      	lsls	r2, r3, #22
 8019dc2:	d402      	bmi.n	8019dca <_vfiprintf_r+0x202>
 8019dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dc6:	f7ff fe1b 	bl	8019a00 <__retarget_lock_release_recursive>
 8019dca:	89ab      	ldrh	r3, [r5, #12]
 8019dcc:	065b      	lsls	r3, r3, #25
 8019dce:	f53f af1d 	bmi.w	8019c0c <_vfiprintf_r+0x44>
 8019dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019dd4:	e71c      	b.n	8019c10 <_vfiprintf_r+0x48>
 8019dd6:	ab03      	add	r3, sp, #12
 8019dd8:	9300      	str	r3, [sp, #0]
 8019dda:	462a      	mov	r2, r5
 8019ddc:	4b05      	ldr	r3, [pc, #20]	; (8019df4 <_vfiprintf_r+0x22c>)
 8019dde:	a904      	add	r1, sp, #16
 8019de0:	4630      	mov	r0, r6
 8019de2:	f000 f879 	bl	8019ed8 <_printf_i>
 8019de6:	e7e4      	b.n	8019db2 <_vfiprintf_r+0x1ea>
 8019de8:	0804dad8 	.word	0x0804dad8
 8019dec:	0804dae2 	.word	0x0804dae2
 8019df0:	00000000 	.word	0x00000000
 8019df4:	08019ba3 	.word	0x08019ba3
 8019df8:	0804dade 	.word	0x0804dade

08019dfc <_printf_common>:
 8019dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e00:	4616      	mov	r6, r2
 8019e02:	4699      	mov	r9, r3
 8019e04:	688a      	ldr	r2, [r1, #8]
 8019e06:	690b      	ldr	r3, [r1, #16]
 8019e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e0c:	4293      	cmp	r3, r2
 8019e0e:	bfb8      	it	lt
 8019e10:	4613      	movlt	r3, r2
 8019e12:	6033      	str	r3, [r6, #0]
 8019e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e18:	4607      	mov	r7, r0
 8019e1a:	460c      	mov	r4, r1
 8019e1c:	b10a      	cbz	r2, 8019e22 <_printf_common+0x26>
 8019e1e:	3301      	adds	r3, #1
 8019e20:	6033      	str	r3, [r6, #0]
 8019e22:	6823      	ldr	r3, [r4, #0]
 8019e24:	0699      	lsls	r1, r3, #26
 8019e26:	bf42      	ittt	mi
 8019e28:	6833      	ldrmi	r3, [r6, #0]
 8019e2a:	3302      	addmi	r3, #2
 8019e2c:	6033      	strmi	r3, [r6, #0]
 8019e2e:	6825      	ldr	r5, [r4, #0]
 8019e30:	f015 0506 	ands.w	r5, r5, #6
 8019e34:	d106      	bne.n	8019e44 <_printf_common+0x48>
 8019e36:	f104 0a19 	add.w	sl, r4, #25
 8019e3a:	68e3      	ldr	r3, [r4, #12]
 8019e3c:	6832      	ldr	r2, [r6, #0]
 8019e3e:	1a9b      	subs	r3, r3, r2
 8019e40:	42ab      	cmp	r3, r5
 8019e42:	dc26      	bgt.n	8019e92 <_printf_common+0x96>
 8019e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e48:	1e13      	subs	r3, r2, #0
 8019e4a:	6822      	ldr	r2, [r4, #0]
 8019e4c:	bf18      	it	ne
 8019e4e:	2301      	movne	r3, #1
 8019e50:	0692      	lsls	r2, r2, #26
 8019e52:	d42b      	bmi.n	8019eac <_printf_common+0xb0>
 8019e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e58:	4649      	mov	r1, r9
 8019e5a:	4638      	mov	r0, r7
 8019e5c:	47c0      	blx	r8
 8019e5e:	3001      	adds	r0, #1
 8019e60:	d01e      	beq.n	8019ea0 <_printf_common+0xa4>
 8019e62:	6823      	ldr	r3, [r4, #0]
 8019e64:	6922      	ldr	r2, [r4, #16]
 8019e66:	f003 0306 	and.w	r3, r3, #6
 8019e6a:	2b04      	cmp	r3, #4
 8019e6c:	bf02      	ittt	eq
 8019e6e:	68e5      	ldreq	r5, [r4, #12]
 8019e70:	6833      	ldreq	r3, [r6, #0]
 8019e72:	1aed      	subeq	r5, r5, r3
 8019e74:	68a3      	ldr	r3, [r4, #8]
 8019e76:	bf0c      	ite	eq
 8019e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e7c:	2500      	movne	r5, #0
 8019e7e:	4293      	cmp	r3, r2
 8019e80:	bfc4      	itt	gt
 8019e82:	1a9b      	subgt	r3, r3, r2
 8019e84:	18ed      	addgt	r5, r5, r3
 8019e86:	2600      	movs	r6, #0
 8019e88:	341a      	adds	r4, #26
 8019e8a:	42b5      	cmp	r5, r6
 8019e8c:	d11a      	bne.n	8019ec4 <_printf_common+0xc8>
 8019e8e:	2000      	movs	r0, #0
 8019e90:	e008      	b.n	8019ea4 <_printf_common+0xa8>
 8019e92:	2301      	movs	r3, #1
 8019e94:	4652      	mov	r2, sl
 8019e96:	4649      	mov	r1, r9
 8019e98:	4638      	mov	r0, r7
 8019e9a:	47c0      	blx	r8
 8019e9c:	3001      	adds	r0, #1
 8019e9e:	d103      	bne.n	8019ea8 <_printf_common+0xac>
 8019ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ea8:	3501      	adds	r5, #1
 8019eaa:	e7c6      	b.n	8019e3a <_printf_common+0x3e>
 8019eac:	18e1      	adds	r1, r4, r3
 8019eae:	1c5a      	adds	r2, r3, #1
 8019eb0:	2030      	movs	r0, #48	; 0x30
 8019eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019eb6:	4422      	add	r2, r4
 8019eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019ec0:	3302      	adds	r3, #2
 8019ec2:	e7c7      	b.n	8019e54 <_printf_common+0x58>
 8019ec4:	2301      	movs	r3, #1
 8019ec6:	4622      	mov	r2, r4
 8019ec8:	4649      	mov	r1, r9
 8019eca:	4638      	mov	r0, r7
 8019ecc:	47c0      	blx	r8
 8019ece:	3001      	adds	r0, #1
 8019ed0:	d0e6      	beq.n	8019ea0 <_printf_common+0xa4>
 8019ed2:	3601      	adds	r6, #1
 8019ed4:	e7d9      	b.n	8019e8a <_printf_common+0x8e>
	...

08019ed8 <_printf_i>:
 8019ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019edc:	7e0f      	ldrb	r7, [r1, #24]
 8019ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019ee0:	2f78      	cmp	r7, #120	; 0x78
 8019ee2:	4691      	mov	r9, r2
 8019ee4:	4680      	mov	r8, r0
 8019ee6:	460c      	mov	r4, r1
 8019ee8:	469a      	mov	sl, r3
 8019eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019eee:	d807      	bhi.n	8019f00 <_printf_i+0x28>
 8019ef0:	2f62      	cmp	r7, #98	; 0x62
 8019ef2:	d80a      	bhi.n	8019f0a <_printf_i+0x32>
 8019ef4:	2f00      	cmp	r7, #0
 8019ef6:	f000 80d4 	beq.w	801a0a2 <_printf_i+0x1ca>
 8019efa:	2f58      	cmp	r7, #88	; 0x58
 8019efc:	f000 80c0 	beq.w	801a080 <_printf_i+0x1a8>
 8019f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f08:	e03a      	b.n	8019f80 <_printf_i+0xa8>
 8019f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f0e:	2b15      	cmp	r3, #21
 8019f10:	d8f6      	bhi.n	8019f00 <_printf_i+0x28>
 8019f12:	a101      	add	r1, pc, #4	; (adr r1, 8019f18 <_printf_i+0x40>)
 8019f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f18:	08019f71 	.word	0x08019f71
 8019f1c:	08019f85 	.word	0x08019f85
 8019f20:	08019f01 	.word	0x08019f01
 8019f24:	08019f01 	.word	0x08019f01
 8019f28:	08019f01 	.word	0x08019f01
 8019f2c:	08019f01 	.word	0x08019f01
 8019f30:	08019f85 	.word	0x08019f85
 8019f34:	08019f01 	.word	0x08019f01
 8019f38:	08019f01 	.word	0x08019f01
 8019f3c:	08019f01 	.word	0x08019f01
 8019f40:	08019f01 	.word	0x08019f01
 8019f44:	0801a089 	.word	0x0801a089
 8019f48:	08019fb1 	.word	0x08019fb1
 8019f4c:	0801a043 	.word	0x0801a043
 8019f50:	08019f01 	.word	0x08019f01
 8019f54:	08019f01 	.word	0x08019f01
 8019f58:	0801a0ab 	.word	0x0801a0ab
 8019f5c:	08019f01 	.word	0x08019f01
 8019f60:	08019fb1 	.word	0x08019fb1
 8019f64:	08019f01 	.word	0x08019f01
 8019f68:	08019f01 	.word	0x08019f01
 8019f6c:	0801a04b 	.word	0x0801a04b
 8019f70:	682b      	ldr	r3, [r5, #0]
 8019f72:	1d1a      	adds	r2, r3, #4
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	602a      	str	r2, [r5, #0]
 8019f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f80:	2301      	movs	r3, #1
 8019f82:	e09f      	b.n	801a0c4 <_printf_i+0x1ec>
 8019f84:	6820      	ldr	r0, [r4, #0]
 8019f86:	682b      	ldr	r3, [r5, #0]
 8019f88:	0607      	lsls	r7, r0, #24
 8019f8a:	f103 0104 	add.w	r1, r3, #4
 8019f8e:	6029      	str	r1, [r5, #0]
 8019f90:	d501      	bpl.n	8019f96 <_printf_i+0xbe>
 8019f92:	681e      	ldr	r6, [r3, #0]
 8019f94:	e003      	b.n	8019f9e <_printf_i+0xc6>
 8019f96:	0646      	lsls	r6, r0, #25
 8019f98:	d5fb      	bpl.n	8019f92 <_printf_i+0xba>
 8019f9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019f9e:	2e00      	cmp	r6, #0
 8019fa0:	da03      	bge.n	8019faa <_printf_i+0xd2>
 8019fa2:	232d      	movs	r3, #45	; 0x2d
 8019fa4:	4276      	negs	r6, r6
 8019fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019faa:	485a      	ldr	r0, [pc, #360]	; (801a114 <_printf_i+0x23c>)
 8019fac:	230a      	movs	r3, #10
 8019fae:	e012      	b.n	8019fd6 <_printf_i+0xfe>
 8019fb0:	682b      	ldr	r3, [r5, #0]
 8019fb2:	6820      	ldr	r0, [r4, #0]
 8019fb4:	1d19      	adds	r1, r3, #4
 8019fb6:	6029      	str	r1, [r5, #0]
 8019fb8:	0605      	lsls	r5, r0, #24
 8019fba:	d501      	bpl.n	8019fc0 <_printf_i+0xe8>
 8019fbc:	681e      	ldr	r6, [r3, #0]
 8019fbe:	e002      	b.n	8019fc6 <_printf_i+0xee>
 8019fc0:	0641      	lsls	r1, r0, #25
 8019fc2:	d5fb      	bpl.n	8019fbc <_printf_i+0xe4>
 8019fc4:	881e      	ldrh	r6, [r3, #0]
 8019fc6:	4853      	ldr	r0, [pc, #332]	; (801a114 <_printf_i+0x23c>)
 8019fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8019fca:	bf0c      	ite	eq
 8019fcc:	2308      	moveq	r3, #8
 8019fce:	230a      	movne	r3, #10
 8019fd0:	2100      	movs	r1, #0
 8019fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019fd6:	6865      	ldr	r5, [r4, #4]
 8019fd8:	60a5      	str	r5, [r4, #8]
 8019fda:	2d00      	cmp	r5, #0
 8019fdc:	bfa2      	ittt	ge
 8019fde:	6821      	ldrge	r1, [r4, #0]
 8019fe0:	f021 0104 	bicge.w	r1, r1, #4
 8019fe4:	6021      	strge	r1, [r4, #0]
 8019fe6:	b90e      	cbnz	r6, 8019fec <_printf_i+0x114>
 8019fe8:	2d00      	cmp	r5, #0
 8019fea:	d04b      	beq.n	801a084 <_printf_i+0x1ac>
 8019fec:	4615      	mov	r5, r2
 8019fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8019ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8019ff6:	5dc7      	ldrb	r7, [r0, r7]
 8019ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ffc:	4637      	mov	r7, r6
 8019ffe:	42bb      	cmp	r3, r7
 801a000:	460e      	mov	r6, r1
 801a002:	d9f4      	bls.n	8019fee <_printf_i+0x116>
 801a004:	2b08      	cmp	r3, #8
 801a006:	d10b      	bne.n	801a020 <_printf_i+0x148>
 801a008:	6823      	ldr	r3, [r4, #0]
 801a00a:	07de      	lsls	r6, r3, #31
 801a00c:	d508      	bpl.n	801a020 <_printf_i+0x148>
 801a00e:	6923      	ldr	r3, [r4, #16]
 801a010:	6861      	ldr	r1, [r4, #4]
 801a012:	4299      	cmp	r1, r3
 801a014:	bfde      	ittt	le
 801a016:	2330      	movle	r3, #48	; 0x30
 801a018:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a01c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a020:	1b52      	subs	r2, r2, r5
 801a022:	6122      	str	r2, [r4, #16]
 801a024:	f8cd a000 	str.w	sl, [sp]
 801a028:	464b      	mov	r3, r9
 801a02a:	aa03      	add	r2, sp, #12
 801a02c:	4621      	mov	r1, r4
 801a02e:	4640      	mov	r0, r8
 801a030:	f7ff fee4 	bl	8019dfc <_printf_common>
 801a034:	3001      	adds	r0, #1
 801a036:	d14a      	bne.n	801a0ce <_printf_i+0x1f6>
 801a038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a03c:	b004      	add	sp, #16
 801a03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a042:	6823      	ldr	r3, [r4, #0]
 801a044:	f043 0320 	orr.w	r3, r3, #32
 801a048:	6023      	str	r3, [r4, #0]
 801a04a:	4833      	ldr	r0, [pc, #204]	; (801a118 <_printf_i+0x240>)
 801a04c:	2778      	movs	r7, #120	; 0x78
 801a04e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a052:	6823      	ldr	r3, [r4, #0]
 801a054:	6829      	ldr	r1, [r5, #0]
 801a056:	061f      	lsls	r7, r3, #24
 801a058:	f851 6b04 	ldr.w	r6, [r1], #4
 801a05c:	d402      	bmi.n	801a064 <_printf_i+0x18c>
 801a05e:	065f      	lsls	r7, r3, #25
 801a060:	bf48      	it	mi
 801a062:	b2b6      	uxthmi	r6, r6
 801a064:	07df      	lsls	r7, r3, #31
 801a066:	bf48      	it	mi
 801a068:	f043 0320 	orrmi.w	r3, r3, #32
 801a06c:	6029      	str	r1, [r5, #0]
 801a06e:	bf48      	it	mi
 801a070:	6023      	strmi	r3, [r4, #0]
 801a072:	b91e      	cbnz	r6, 801a07c <_printf_i+0x1a4>
 801a074:	6823      	ldr	r3, [r4, #0]
 801a076:	f023 0320 	bic.w	r3, r3, #32
 801a07a:	6023      	str	r3, [r4, #0]
 801a07c:	2310      	movs	r3, #16
 801a07e:	e7a7      	b.n	8019fd0 <_printf_i+0xf8>
 801a080:	4824      	ldr	r0, [pc, #144]	; (801a114 <_printf_i+0x23c>)
 801a082:	e7e4      	b.n	801a04e <_printf_i+0x176>
 801a084:	4615      	mov	r5, r2
 801a086:	e7bd      	b.n	801a004 <_printf_i+0x12c>
 801a088:	682b      	ldr	r3, [r5, #0]
 801a08a:	6826      	ldr	r6, [r4, #0]
 801a08c:	6961      	ldr	r1, [r4, #20]
 801a08e:	1d18      	adds	r0, r3, #4
 801a090:	6028      	str	r0, [r5, #0]
 801a092:	0635      	lsls	r5, r6, #24
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	d501      	bpl.n	801a09c <_printf_i+0x1c4>
 801a098:	6019      	str	r1, [r3, #0]
 801a09a:	e002      	b.n	801a0a2 <_printf_i+0x1ca>
 801a09c:	0670      	lsls	r0, r6, #25
 801a09e:	d5fb      	bpl.n	801a098 <_printf_i+0x1c0>
 801a0a0:	8019      	strh	r1, [r3, #0]
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	6123      	str	r3, [r4, #16]
 801a0a6:	4615      	mov	r5, r2
 801a0a8:	e7bc      	b.n	801a024 <_printf_i+0x14c>
 801a0aa:	682b      	ldr	r3, [r5, #0]
 801a0ac:	1d1a      	adds	r2, r3, #4
 801a0ae:	602a      	str	r2, [r5, #0]
 801a0b0:	681d      	ldr	r5, [r3, #0]
 801a0b2:	6862      	ldr	r2, [r4, #4]
 801a0b4:	2100      	movs	r1, #0
 801a0b6:	4628      	mov	r0, r5
 801a0b8:	f7e6 f89a 	bl	80001f0 <memchr>
 801a0bc:	b108      	cbz	r0, 801a0c2 <_printf_i+0x1ea>
 801a0be:	1b40      	subs	r0, r0, r5
 801a0c0:	6060      	str	r0, [r4, #4]
 801a0c2:	6863      	ldr	r3, [r4, #4]
 801a0c4:	6123      	str	r3, [r4, #16]
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0cc:	e7aa      	b.n	801a024 <_printf_i+0x14c>
 801a0ce:	6923      	ldr	r3, [r4, #16]
 801a0d0:	462a      	mov	r2, r5
 801a0d2:	4649      	mov	r1, r9
 801a0d4:	4640      	mov	r0, r8
 801a0d6:	47d0      	blx	sl
 801a0d8:	3001      	adds	r0, #1
 801a0da:	d0ad      	beq.n	801a038 <_printf_i+0x160>
 801a0dc:	6823      	ldr	r3, [r4, #0]
 801a0de:	079b      	lsls	r3, r3, #30
 801a0e0:	d413      	bmi.n	801a10a <_printf_i+0x232>
 801a0e2:	68e0      	ldr	r0, [r4, #12]
 801a0e4:	9b03      	ldr	r3, [sp, #12]
 801a0e6:	4298      	cmp	r0, r3
 801a0e8:	bfb8      	it	lt
 801a0ea:	4618      	movlt	r0, r3
 801a0ec:	e7a6      	b.n	801a03c <_printf_i+0x164>
 801a0ee:	2301      	movs	r3, #1
 801a0f0:	4632      	mov	r2, r6
 801a0f2:	4649      	mov	r1, r9
 801a0f4:	4640      	mov	r0, r8
 801a0f6:	47d0      	blx	sl
 801a0f8:	3001      	adds	r0, #1
 801a0fa:	d09d      	beq.n	801a038 <_printf_i+0x160>
 801a0fc:	3501      	adds	r5, #1
 801a0fe:	68e3      	ldr	r3, [r4, #12]
 801a100:	9903      	ldr	r1, [sp, #12]
 801a102:	1a5b      	subs	r3, r3, r1
 801a104:	42ab      	cmp	r3, r5
 801a106:	dcf2      	bgt.n	801a0ee <_printf_i+0x216>
 801a108:	e7eb      	b.n	801a0e2 <_printf_i+0x20a>
 801a10a:	2500      	movs	r5, #0
 801a10c:	f104 0619 	add.w	r6, r4, #25
 801a110:	e7f5      	b.n	801a0fe <_printf_i+0x226>
 801a112:	bf00      	nop
 801a114:	0804dae9 	.word	0x0804dae9
 801a118:	0804dafa 	.word	0x0804dafa

0801a11c <__sflush_r>:
 801a11c:	898a      	ldrh	r2, [r1, #12]
 801a11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a122:	4605      	mov	r5, r0
 801a124:	0710      	lsls	r0, r2, #28
 801a126:	460c      	mov	r4, r1
 801a128:	d458      	bmi.n	801a1dc <__sflush_r+0xc0>
 801a12a:	684b      	ldr	r3, [r1, #4]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	dc05      	bgt.n	801a13c <__sflush_r+0x20>
 801a130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a132:	2b00      	cmp	r3, #0
 801a134:	dc02      	bgt.n	801a13c <__sflush_r+0x20>
 801a136:	2000      	movs	r0, #0
 801a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a13c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a13e:	2e00      	cmp	r6, #0
 801a140:	d0f9      	beq.n	801a136 <__sflush_r+0x1a>
 801a142:	2300      	movs	r3, #0
 801a144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a148:	682f      	ldr	r7, [r5, #0]
 801a14a:	6a21      	ldr	r1, [r4, #32]
 801a14c:	602b      	str	r3, [r5, #0]
 801a14e:	d032      	beq.n	801a1b6 <__sflush_r+0x9a>
 801a150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a152:	89a3      	ldrh	r3, [r4, #12]
 801a154:	075a      	lsls	r2, r3, #29
 801a156:	d505      	bpl.n	801a164 <__sflush_r+0x48>
 801a158:	6863      	ldr	r3, [r4, #4]
 801a15a:	1ac0      	subs	r0, r0, r3
 801a15c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a15e:	b10b      	cbz	r3, 801a164 <__sflush_r+0x48>
 801a160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a162:	1ac0      	subs	r0, r0, r3
 801a164:	2300      	movs	r3, #0
 801a166:	4602      	mov	r2, r0
 801a168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a16a:	6a21      	ldr	r1, [r4, #32]
 801a16c:	4628      	mov	r0, r5
 801a16e:	47b0      	blx	r6
 801a170:	1c43      	adds	r3, r0, #1
 801a172:	89a3      	ldrh	r3, [r4, #12]
 801a174:	d106      	bne.n	801a184 <__sflush_r+0x68>
 801a176:	6829      	ldr	r1, [r5, #0]
 801a178:	291d      	cmp	r1, #29
 801a17a:	d82b      	bhi.n	801a1d4 <__sflush_r+0xb8>
 801a17c:	4a29      	ldr	r2, [pc, #164]	; (801a224 <__sflush_r+0x108>)
 801a17e:	410a      	asrs	r2, r1
 801a180:	07d6      	lsls	r6, r2, #31
 801a182:	d427      	bmi.n	801a1d4 <__sflush_r+0xb8>
 801a184:	2200      	movs	r2, #0
 801a186:	6062      	str	r2, [r4, #4]
 801a188:	04d9      	lsls	r1, r3, #19
 801a18a:	6922      	ldr	r2, [r4, #16]
 801a18c:	6022      	str	r2, [r4, #0]
 801a18e:	d504      	bpl.n	801a19a <__sflush_r+0x7e>
 801a190:	1c42      	adds	r2, r0, #1
 801a192:	d101      	bne.n	801a198 <__sflush_r+0x7c>
 801a194:	682b      	ldr	r3, [r5, #0]
 801a196:	b903      	cbnz	r3, 801a19a <__sflush_r+0x7e>
 801a198:	6560      	str	r0, [r4, #84]	; 0x54
 801a19a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a19c:	602f      	str	r7, [r5, #0]
 801a19e:	2900      	cmp	r1, #0
 801a1a0:	d0c9      	beq.n	801a136 <__sflush_r+0x1a>
 801a1a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1a6:	4299      	cmp	r1, r3
 801a1a8:	d002      	beq.n	801a1b0 <__sflush_r+0x94>
 801a1aa:	4628      	mov	r0, r5
 801a1ac:	f7ff fc96 	bl	8019adc <_free_r>
 801a1b0:	2000      	movs	r0, #0
 801a1b2:	6360      	str	r0, [r4, #52]	; 0x34
 801a1b4:	e7c0      	b.n	801a138 <__sflush_r+0x1c>
 801a1b6:	2301      	movs	r3, #1
 801a1b8:	4628      	mov	r0, r5
 801a1ba:	47b0      	blx	r6
 801a1bc:	1c41      	adds	r1, r0, #1
 801a1be:	d1c8      	bne.n	801a152 <__sflush_r+0x36>
 801a1c0:	682b      	ldr	r3, [r5, #0]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d0c5      	beq.n	801a152 <__sflush_r+0x36>
 801a1c6:	2b1d      	cmp	r3, #29
 801a1c8:	d001      	beq.n	801a1ce <__sflush_r+0xb2>
 801a1ca:	2b16      	cmp	r3, #22
 801a1cc:	d101      	bne.n	801a1d2 <__sflush_r+0xb6>
 801a1ce:	602f      	str	r7, [r5, #0]
 801a1d0:	e7b1      	b.n	801a136 <__sflush_r+0x1a>
 801a1d2:	89a3      	ldrh	r3, [r4, #12]
 801a1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1d8:	81a3      	strh	r3, [r4, #12]
 801a1da:	e7ad      	b.n	801a138 <__sflush_r+0x1c>
 801a1dc:	690f      	ldr	r7, [r1, #16]
 801a1de:	2f00      	cmp	r7, #0
 801a1e0:	d0a9      	beq.n	801a136 <__sflush_r+0x1a>
 801a1e2:	0793      	lsls	r3, r2, #30
 801a1e4:	680e      	ldr	r6, [r1, #0]
 801a1e6:	bf08      	it	eq
 801a1e8:	694b      	ldreq	r3, [r1, #20]
 801a1ea:	600f      	str	r7, [r1, #0]
 801a1ec:	bf18      	it	ne
 801a1ee:	2300      	movne	r3, #0
 801a1f0:	eba6 0807 	sub.w	r8, r6, r7
 801a1f4:	608b      	str	r3, [r1, #8]
 801a1f6:	f1b8 0f00 	cmp.w	r8, #0
 801a1fa:	dd9c      	ble.n	801a136 <__sflush_r+0x1a>
 801a1fc:	6a21      	ldr	r1, [r4, #32]
 801a1fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a200:	4643      	mov	r3, r8
 801a202:	463a      	mov	r2, r7
 801a204:	4628      	mov	r0, r5
 801a206:	47b0      	blx	r6
 801a208:	2800      	cmp	r0, #0
 801a20a:	dc06      	bgt.n	801a21a <__sflush_r+0xfe>
 801a20c:	89a3      	ldrh	r3, [r4, #12]
 801a20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a212:	81a3      	strh	r3, [r4, #12]
 801a214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a218:	e78e      	b.n	801a138 <__sflush_r+0x1c>
 801a21a:	4407      	add	r7, r0
 801a21c:	eba8 0800 	sub.w	r8, r8, r0
 801a220:	e7e9      	b.n	801a1f6 <__sflush_r+0xda>
 801a222:	bf00      	nop
 801a224:	dfbffffe 	.word	0xdfbffffe

0801a228 <_fflush_r>:
 801a228:	b538      	push	{r3, r4, r5, lr}
 801a22a:	690b      	ldr	r3, [r1, #16]
 801a22c:	4605      	mov	r5, r0
 801a22e:	460c      	mov	r4, r1
 801a230:	b913      	cbnz	r3, 801a238 <_fflush_r+0x10>
 801a232:	2500      	movs	r5, #0
 801a234:	4628      	mov	r0, r5
 801a236:	bd38      	pop	{r3, r4, r5, pc}
 801a238:	b118      	cbz	r0, 801a242 <_fflush_r+0x1a>
 801a23a:	6a03      	ldr	r3, [r0, #32]
 801a23c:	b90b      	cbnz	r3, 801a242 <_fflush_r+0x1a>
 801a23e:	f7ff f9cf 	bl	80195e0 <__sinit>
 801a242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d0f3      	beq.n	801a232 <_fflush_r+0xa>
 801a24a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a24c:	07d0      	lsls	r0, r2, #31
 801a24e:	d404      	bmi.n	801a25a <_fflush_r+0x32>
 801a250:	0599      	lsls	r1, r3, #22
 801a252:	d402      	bmi.n	801a25a <_fflush_r+0x32>
 801a254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a256:	f7ff fbd2 	bl	80199fe <__retarget_lock_acquire_recursive>
 801a25a:	4628      	mov	r0, r5
 801a25c:	4621      	mov	r1, r4
 801a25e:	f7ff ff5d 	bl	801a11c <__sflush_r>
 801a262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a264:	07da      	lsls	r2, r3, #31
 801a266:	4605      	mov	r5, r0
 801a268:	d4e4      	bmi.n	801a234 <_fflush_r+0xc>
 801a26a:	89a3      	ldrh	r3, [r4, #12]
 801a26c:	059b      	lsls	r3, r3, #22
 801a26e:	d4e1      	bmi.n	801a234 <_fflush_r+0xc>
 801a270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a272:	f7ff fbc5 	bl	8019a00 <__retarget_lock_release_recursive>
 801a276:	e7dd      	b.n	801a234 <_fflush_r+0xc>

0801a278 <__swhatbuf_r>:
 801a278:	b570      	push	{r4, r5, r6, lr}
 801a27a:	460c      	mov	r4, r1
 801a27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a280:	2900      	cmp	r1, #0
 801a282:	b096      	sub	sp, #88	; 0x58
 801a284:	4615      	mov	r5, r2
 801a286:	461e      	mov	r6, r3
 801a288:	da0d      	bge.n	801a2a6 <__swhatbuf_r+0x2e>
 801a28a:	89a3      	ldrh	r3, [r4, #12]
 801a28c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a290:	f04f 0100 	mov.w	r1, #0
 801a294:	bf0c      	ite	eq
 801a296:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a29a:	2340      	movne	r3, #64	; 0x40
 801a29c:	2000      	movs	r0, #0
 801a29e:	6031      	str	r1, [r6, #0]
 801a2a0:	602b      	str	r3, [r5, #0]
 801a2a2:	b016      	add	sp, #88	; 0x58
 801a2a4:	bd70      	pop	{r4, r5, r6, pc}
 801a2a6:	466a      	mov	r2, sp
 801a2a8:	f000 f848 	bl	801a33c <_fstat_r>
 801a2ac:	2800      	cmp	r0, #0
 801a2ae:	dbec      	blt.n	801a28a <__swhatbuf_r+0x12>
 801a2b0:	9901      	ldr	r1, [sp, #4]
 801a2b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a2b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a2ba:	4259      	negs	r1, r3
 801a2bc:	4159      	adcs	r1, r3
 801a2be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a2c2:	e7eb      	b.n	801a29c <__swhatbuf_r+0x24>

0801a2c4 <__smakebuf_r>:
 801a2c4:	898b      	ldrh	r3, [r1, #12]
 801a2c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a2c8:	079d      	lsls	r5, r3, #30
 801a2ca:	4606      	mov	r6, r0
 801a2cc:	460c      	mov	r4, r1
 801a2ce:	d507      	bpl.n	801a2e0 <__smakebuf_r+0x1c>
 801a2d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a2d4:	6023      	str	r3, [r4, #0]
 801a2d6:	6123      	str	r3, [r4, #16]
 801a2d8:	2301      	movs	r3, #1
 801a2da:	6163      	str	r3, [r4, #20]
 801a2dc:	b002      	add	sp, #8
 801a2de:	bd70      	pop	{r4, r5, r6, pc}
 801a2e0:	ab01      	add	r3, sp, #4
 801a2e2:	466a      	mov	r2, sp
 801a2e4:	f7ff ffc8 	bl	801a278 <__swhatbuf_r>
 801a2e8:	9900      	ldr	r1, [sp, #0]
 801a2ea:	4605      	mov	r5, r0
 801a2ec:	4630      	mov	r0, r6
 801a2ee:	f7ff f85f 	bl	80193b0 <_malloc_r>
 801a2f2:	b948      	cbnz	r0, 801a308 <__smakebuf_r+0x44>
 801a2f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2f8:	059a      	lsls	r2, r3, #22
 801a2fa:	d4ef      	bmi.n	801a2dc <__smakebuf_r+0x18>
 801a2fc:	f023 0303 	bic.w	r3, r3, #3
 801a300:	f043 0302 	orr.w	r3, r3, #2
 801a304:	81a3      	strh	r3, [r4, #12]
 801a306:	e7e3      	b.n	801a2d0 <__smakebuf_r+0xc>
 801a308:	89a3      	ldrh	r3, [r4, #12]
 801a30a:	6020      	str	r0, [r4, #0]
 801a30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a310:	81a3      	strh	r3, [r4, #12]
 801a312:	9b00      	ldr	r3, [sp, #0]
 801a314:	6163      	str	r3, [r4, #20]
 801a316:	9b01      	ldr	r3, [sp, #4]
 801a318:	6120      	str	r0, [r4, #16]
 801a31a:	b15b      	cbz	r3, 801a334 <__smakebuf_r+0x70>
 801a31c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a320:	4630      	mov	r0, r6
 801a322:	f000 f81d 	bl	801a360 <_isatty_r>
 801a326:	b128      	cbz	r0, 801a334 <__smakebuf_r+0x70>
 801a328:	89a3      	ldrh	r3, [r4, #12]
 801a32a:	f023 0303 	bic.w	r3, r3, #3
 801a32e:	f043 0301 	orr.w	r3, r3, #1
 801a332:	81a3      	strh	r3, [r4, #12]
 801a334:	89a3      	ldrh	r3, [r4, #12]
 801a336:	431d      	orrs	r5, r3
 801a338:	81a5      	strh	r5, [r4, #12]
 801a33a:	e7cf      	b.n	801a2dc <__smakebuf_r+0x18>

0801a33c <_fstat_r>:
 801a33c:	b538      	push	{r3, r4, r5, lr}
 801a33e:	4d07      	ldr	r5, [pc, #28]	; (801a35c <_fstat_r+0x20>)
 801a340:	2300      	movs	r3, #0
 801a342:	4604      	mov	r4, r0
 801a344:	4608      	mov	r0, r1
 801a346:	4611      	mov	r1, r2
 801a348:	602b      	str	r3, [r5, #0]
 801a34a:	f7e7 fa54 	bl	80017f6 <_fstat>
 801a34e:	1c43      	adds	r3, r0, #1
 801a350:	d102      	bne.n	801a358 <_fstat_r+0x1c>
 801a352:	682b      	ldr	r3, [r5, #0]
 801a354:	b103      	cbz	r3, 801a358 <_fstat_r+0x1c>
 801a356:	6023      	str	r3, [r4, #0]
 801a358:	bd38      	pop	{r3, r4, r5, pc}
 801a35a:	bf00      	nop
 801a35c:	20017ca0 	.word	0x20017ca0

0801a360 <_isatty_r>:
 801a360:	b538      	push	{r3, r4, r5, lr}
 801a362:	4d06      	ldr	r5, [pc, #24]	; (801a37c <_isatty_r+0x1c>)
 801a364:	2300      	movs	r3, #0
 801a366:	4604      	mov	r4, r0
 801a368:	4608      	mov	r0, r1
 801a36a:	602b      	str	r3, [r5, #0]
 801a36c:	f7e7 fa48 	bl	8001800 <_isatty>
 801a370:	1c43      	adds	r3, r0, #1
 801a372:	d102      	bne.n	801a37a <_isatty_r+0x1a>
 801a374:	682b      	ldr	r3, [r5, #0]
 801a376:	b103      	cbz	r3, 801a37a <_isatty_r+0x1a>
 801a378:	6023      	str	r3, [r4, #0]
 801a37a:	bd38      	pop	{r3, r4, r5, pc}
 801a37c:	20017ca0 	.word	0x20017ca0

0801a380 <_init>:
 801a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a382:	bf00      	nop
 801a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a386:	bc08      	pop	{r3}
 801a388:	469e      	mov	lr, r3
 801a38a:	4770      	bx	lr

0801a38c <_fini>:
 801a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a38e:	bf00      	nop
 801a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a392:	bc08      	pop	{r3}
 801a394:	469e      	mov	lr, r3
 801a396:	4770      	bx	lr
